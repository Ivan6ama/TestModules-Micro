
Modules_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e094  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e4c  0800e1a0  0800e1a0  0000f1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efec  0800efec  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800efec  0800efec  000101d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800efec  0800efec  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efec  0800efec  0000ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eff0  0800eff0  0000fff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800eff4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  200001d8  0800f1cc  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf0  0800f1cc  00010cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c6c  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418f  00000000  00000000  00027e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115b  00000000  00000000  0002d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd3b  00000000  00000000  0002e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c39f  00000000  00000000  0004a536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009556b  00000000  00000000  000668d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006314  00000000  00000000  000fbe84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00102198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800e188 	.word	0x0800e188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800e188 	.word	0x0800e188

0800014c <UNER_SetTxFunction>:

/**
 * @brief Asigna la función de transmisión para el protocolo.
 */
void UNER_SetTxFunction(txFunct_t func)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    sendFunction = func;
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <UNER_SetTxFunction+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200001f4 	.word	0x200001f4

08000168 <UNER_Init>:

/**
 * @brief Inicializa las estructuras de transmisión y recepción.
 */
void UNER_Init(_sTx *tx, uint8_t *txBuf, _sRx *rx, uint8_t *rxBuf)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
 8000174:	603b      	str	r3, [r7, #0]
    tx->buf = txBuf;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
    tx->iw = 0;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	711a      	strb	r2, [r3, #4]
    tx->ir = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	715a      	strb	r2, [r3, #5]
    tx->length = SIZEBUFTX - 1;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	22ff      	movs	r2, #255	@ 0xff
 800018c:	719a      	strb	r2, [r3, #6]
    tx->chks = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	71da      	strb	r2, [r3, #7]

    rx->buf = rxBuf;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	601a      	str	r2, [r3, #0]
    rx->iw = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
    rx->ir = 0;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
    rx->header = HEADER_U;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
    rx->length = SIZEBUFRX - 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	71da      	strb	r2, [r3, #7]
    rx->size = 0;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	721a      	strb	r2, [r3, #8]
    rx->data = 0;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2200      	movs	r2, #0
 80001bc:	725a      	strb	r2, [r3, #9]
    rx->chks = 0;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2200      	movs	r2, #0
 80001c2:	729a      	strb	r2, [r3, #10]

    protocolState = HEADER_U;
 80001c4:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <UNER_Init+0x74>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
    CMDID = UNKNOWN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <UNER_Init+0x78>)
 80001cc:	22ff      	movs	r2, #255	@ 0xff
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200001f9 	.word	0x200001f9
 80001e0:	200001f8 	.word	0x200001f8

080001e4 <UNER_SerialTask>:

/**
 * @brief Lógica periódica de recepción y transmisión de datos.
 */
void UNER_SerialTask(_sTx *tx, _sRx *rx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (rx->iw != rx->ir) {
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	791a      	ldrb	r2, [r3, #4]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	795b      	ldrb	r3, [r3, #5]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d003      	beq.n	8000202 <UNER_SerialTask+0x1e>
        UNER_DecodeHeader(rx, tx);
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f000 f841 	bl	8000284 <UNER_DecodeHeader>
    }

    if (tx->ir != tx->iw) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	795a      	ldrb	r2, [r3, #5]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d016      	beq.n	800023c <UNER_SerialTask+0x58>
        sendFunction(&tx->buf[tx->ir]);
 800020e:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <UNER_SerialTask+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	7949      	ldrb	r1, [r1, #5]
 800021a:	440a      	add	r2, r1
 800021c:	4610      	mov	r0, r2
 800021e:	4798      	blx	r3
        tx->ir++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	715a      	strb	r2, [r3, #5]
        tx->ir &= tx->length;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	4013      	ands	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	715a      	strb	r2, [r3, #5]
    }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001f4 	.word	0x200001f4

08000248 <UNER_OnRxByte>:

/**
 * @brief Almacena cada byte recibido en el buffer.
 */
void UNER_OnRxByte(_sRx *rx, uint8_t data)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    rx->buf[rx->iw++] = data;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	b2c8      	uxtb	r0, r1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	7108      	strb	r0, [r1, #4]
 8000264:	4413      	add	r3, r2
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	701a      	strb	r2, [r3, #0]
    rx->iw &= rx->length;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	791a      	ldrb	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	4013      	ands	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	711a      	strb	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <UNER_DecodeHeader>:
 * @brief Decodifica el encabezado del protocolo UNER.
 * @param rx Buffer de recepción.
 * @param tx Buffer de transmisión.
 */
void UNER_DecodeHeader(_sRx *rx, _sTx *tx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint8_t i = rx->iw;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	73fb      	strb	r3, [r7, #15]
    while(rx->ir != i){
 8000294:	e0df      	b.n	8000456 <UNER_DecodeHeader+0x1d2>
        switch(rx->header){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	2b06      	cmp	r3, #6
 800029c:	f200 80c8 	bhi.w	8000430 <UNER_DecodeHeader+0x1ac>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <UNER_DecodeHeader+0x24>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002c5 	.word	0x080002c5
 80002ac:	080002df 	.word	0x080002df
 80002b0:	0800030b 	.word	0x0800030b
 80002b4:	08000337 	.word	0x08000337
 80002b8:	08000363 	.word	0x08000363
 80002bc:	0800037b 	.word	0x0800037b
 80002c0:	080003d1 	.word	0x080003d1
            case HEADER_U:
                if(rx->buf[rx->ir] == 'U'){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b55      	cmp	r3, #85	@ 0x55
 80002d2:	f040 80b1 	bne.w	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_N;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	719a      	strb	r2, [r3, #6]
                }
            break;
 80002dc:	e0ac      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_N:
                if(rx->buf[rx->ir] == 'N'){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7952      	ldrb	r2, [r2, #5]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80002ec:	d103      	bne.n	80002f6 <UNER_DecodeHeader+0x72>
                    rx->header = HEADER_E;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2202      	movs	r2, #2
 80002f2:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80002f4:	e0a1      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
            break;
 8000308:	e097      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_E:
                if(rx->buf[rx->ir] == 'E'){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7952      	ldrb	r2, [r2, #5]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b45      	cmp	r3, #69	@ 0x45
 8000318:	d103      	bne.n	8000322 <UNER_DecodeHeader+0x9e>
                    rx->header = HEADER_R;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2203      	movs	r2, #3
 800031e:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 8000320:	e08b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	715a      	strb	r2, [r3, #5]
            break;
 8000334:	e081      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_R:
                if(rx->buf[rx->ir] == 'R'){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7952      	ldrb	r2, [r2, #5]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	@ 0x52
 8000344:	d103      	bne.n	800034e <UNER_DecodeHeader+0xca>
                    rx->header = NBYTES;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 800034c:	e075      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	715a      	strb	r2, [r3, #5]
            break;
 8000360:	e06b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case NBYTES:
                rx->header = TOKEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2205      	movs	r2, #5
 8000366:	719a      	strb	r2, [r3, #6]
                rx->size = rx->buf[rx->ir];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7952      	ldrb	r2, [r2, #5]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	721a      	strb	r2, [r3, #8]
            break;
 8000378:	e05f      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case TOKEN:
                if(rx->buf[rx->ir] == ':'){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7952      	ldrb	r2, [r2, #5]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b3a      	cmp	r3, #58	@ 0x3a
 8000388:	d118      	bne.n	80003bc <UNER_DecodeHeader+0x138>
                    rx->chks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ rx->size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	729a      	strb	r2, [r3, #10]
                    rx->header = PAYLOAD;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2206      	movs	r2, #6
 800039c:	719a      	strb	r2, [r3, #6]
                    rx->data = rx->ir + 1;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	725a      	strb	r2, [r3, #9]
                    rx->data &= rx->length;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5a      	ldrb	r2, [r3, #9]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	725a      	strb	r2, [r3, #9]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80003ba:	e03e      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	715a      	strb	r2, [r3, #5]
            break;
 80003ce:	e034      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case PAYLOAD:
                rx->size--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	721a      	strb	r2, [r3, #8]
                if(rx->size > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <UNER_DecodeHeader+0x17a>
                    rx->chks ^= rx->buf[rx->ir];
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a9a      	ldrb	r2, [r3, #10]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	7949      	ldrb	r1, [r1, #5]
 80003f0:	440b      	add	r3, r1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	729a      	strb	r2, [r3, #10]
                    if(rx->buf[rx->ir] == rx->chks){
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
                    }
                    rx->header = HEADER_U;
                }
            break;
 80003fc:	e01d      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    if(rx->buf[rx->ir] == rx->chks){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7952      	ldrb	r2, [r2, #5]
 8000406:	4413      	add	r3, r2
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7a9b      	ldrb	r3, [r3, #10]
 800040e:	429a      	cmp	r2, r3
 8000410:	d10a      	bne.n	8000428 <UNER_DecodeHeader+0x1a4>
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7a52      	ldrb	r2, [r2, #9]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6839      	ldr	r1, [r7, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f822 	bl	800046c <UNER_DecodePayload>
                    rx->header = HEADER_U;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	719a      	strb	r2, [r3, #6]
            break;
 800042e:	e004      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            default:
                rx->header = HEADER_U;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	719a      	strb	r2, [r3, #6]
            break;
 8000436:	e000      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            break;
 8000438:	bf00      	nop
        }
        rx->ir++;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	3301      	adds	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	715a      	strb	r2, [r3, #5]
        rx->ir &= rx->length;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795a      	ldrb	r2, [r3, #5]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	79db      	ldrb	r3, [r3, #7]
 800044e:	4013      	ands	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	715a      	strb	r2, [r3, #5]
    while(rx->ir != i){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	429a      	cmp	r2, r3
 800045e:	f47f af1a 	bne.w	8000296 <UNER_DecodeHeader+0x12>
    }
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <UNER_DecodePayload>:

void UNER_DecodePayload(uint8_t bufRx,_sTx *tx, _sRx *rx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	73fb      	strb	r3, [r7, #15]
    switch(bufRx){
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2bf1      	cmp	r3, #241	@ 0xf1
 800047e:	d010      	beq.n	80004a2 <UNER_DecodePayload+0x36>
 8000480:	2bf1      	cmp	r3, #241	@ 0xf1
 8000482:	dc39      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 8000484:	2bf0      	cmp	r3, #240	@ 0xf0
 8000486:	d006      	beq.n	8000496 <UNER_DecodePayload+0x2a>
 8000488:	2bf0      	cmp	r3, #240	@ 0xf0
 800048a:	dc35      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d00e      	beq.n	80004ae <UNER_DecodePayload+0x42>
 8000490:	2b02      	cmp	r3, #2
 8000492:	d02b      	beq.n	80004ec <UNER_DecodePayload+0x80>
 8000494:	e030      	b.n	80004f8 <UNER_DecodePayload+0x8c>
        case ALIVE:
            UNER_WriteContentTx(bufRx, tx);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f83a 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004a0:	e030      	b.n	8000504 <UNER_DecodePayload+0x98>
        case FIRMWARE:
        	UNER_WriteContentTx(bufRx, tx);
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	68b9      	ldr	r1, [r7, #8]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f834 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004ac:	e02a      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIMOTORS:
			w.i8[0] = rx->buf[rx->data + 1];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a5b      	ldrb	r3, [r3, #9]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004c0:	701a      	strb	r2, [r3, #0]
			w.i8[1] = rx->buf[rx->data + 2];
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a5b      	ldrb	r3, [r3, #9]
 80004ca:	3302      	adds	r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004d4:	705a      	strb	r2, [r3, #1]

		    appCallback(UIMOTORS, &w);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <UNER_DecodePayload+0xa4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	490c      	ldr	r1, [pc, #48]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004dc:	2001      	movs	r0, #1
 80004de:	4798      	blx	r3

			UNER_WriteContentTx(bufRx, tx);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	68b9      	ldr	r1, [r7, #8]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f815 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004ea:	e00b      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIDISPLAY:
			UNER_WriteContentTx(bufRx, tx);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f80f 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004f6:	e005      	b.n	8000504 <UNER_DecodePayload+0x98>
        default:
            UNER_WriteContentTx(bufRx, tx);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	68b9      	ldr	r1, [r7, #8]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f809 	bl	8000514 <UNER_WriteContentTx>
        break;
 8000502:	bf00      	nop
    }
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200001fc 	.word	0x200001fc
 8000510:	20000200 	.word	0x20000200

08000514 <UNER_WriteContentTx>:

void UNER_WriteContentTx(uint8_t bufRx,_sTx *tx)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2bf1      	cmp	r3, #241	@ 0xf1
 8000524:	d01a      	beq.n	800055c <UNER_WriteContentTx+0x48>
 8000526:	2bf1      	cmp	r3, #241	@ 0xf1
 8000528:	dc50      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d006      	beq.n	800053c <UNER_WriteContentTx+0x28>
 800052e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000530:	dc4c      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d02a      	beq.n	800058c <UNER_WriteContentTx+0x78>
 8000536:	2b02      	cmp	r3, #2
 8000538:	d038      	beq.n	80005ac <UNER_WriteContentTx+0x98>
 800053a:	e047      	b.n	80005cc <UNER_WriteContentTx+0xb8>
        case ALIVE:
            UNER_PutHeaderOnTx(tx, ALIVE, 2);
 800053c:	2202      	movs	r2, #2
 800053e:	21f0      	movs	r1, #240	@ 0xf0
 8000540:	6838      	ldr	r0, [r7, #0]
 8000542:	f000 f861 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, ACK);
 8000546:	210d      	movs	r1, #13
 8000548:	6838      	ldr	r0, [r7, #0]
 800054a:	f000 f90c 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	79db      	ldrb	r3, [r3, #7]
 8000552:	4619      	mov	r1, r3
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 f906 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800055a:	e04d      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case FIRMWARE:
        	UNER_PutHeaderOnTx(tx, FIRMWARE, 18);
 800055c:	2212      	movs	r2, #18
 800055e:	21f1      	movs	r1, #241	@ 0xf1
 8000560:	6838      	ldr	r0, [r7, #0]
 8000562:	f000 f851 	bl	8000608 <UNER_PutHeaderOnTx>
			UNER_PutStrOnTx(tx, "+&DBG");
 8000566:	4926      	ldr	r1, [pc, #152]	@ (8000600 <UNER_WriteContentTx+0xec>)
 8000568:	6838      	ldr	r0, [r7, #0]
 800056a:	f000 f923 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutStrOnTx(tx, firmware);
 800056e:	4925      	ldr	r1, [pc, #148]	@ (8000604 <UNER_WriteContentTx+0xf0>)
 8000570:	6838      	ldr	r0, [r7, #0]
 8000572:	f000 f91f 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutByteOnTx(tx, '\n');
 8000576:	210a      	movs	r1, #10
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f000 f8f4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	4619      	mov	r1, r3
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f000 f8ee 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800058a:	e035      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIMOTORS:
        	UNER_PutHeaderOnTx(tx, UIMOTORS, 2);
 800058c:	2202      	movs	r2, #2
 800058e:	2101      	movs	r1, #1
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f000 f839 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 1);
 8000596:	2101      	movs	r1, #1
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 f8e4 	bl	8000766 <UNER_PutByteOnTx>
        	UNER_PutByteOnTx(tx, tx->chks);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	4619      	mov	r1, r3
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f000 f8de 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005aa:	e025      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIDISPLAY:
        	UNER_PutHeaderOnTx(tx, UIDISPLAY, 2);
 80005ac:	2202      	movs	r2, #2
 80005ae:	2102      	movs	r1, #2
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 f829 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 2);
 80005b6:	2102      	movs	r1, #2
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f000 f8d4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	79db      	ldrb	r3, [r3, #7]
 80005c2:	4619      	mov	r1, r3
 80005c4:	6838      	ldr	r0, [r7, #0]
 80005c6:	f000 f8ce 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005ca:	e015      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        default:
            UNER_PutHeaderOnTx(tx, (_eCmd)tx->buf[tx->iw], 2);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2202      	movs	r2, #2
 80005da:	4619      	mov	r1, r3
 80005dc:	6838      	ldr	r0, [r7, #0]
 80005de:	f000 f813 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, UNKNOWN);
 80005e2:	21ff      	movs	r1, #255	@ 0xff
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f000 f8be 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f000 f8b8 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005f6:	bf00      	nop
    }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800e1a0 	.word	0x0800e1a0
 8000604:	0800e224 	.word	0x0800e224

08000608 <UNER_PutHeaderOnTx>:

uint8_t UNER_PutHeaderOnTx(_sTx *tx, _eCmd ID, uint8_t N)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	70bb      	strb	r3, [r7, #2]
    tx->chks = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	71da      	strb	r2, [r3, #7]
    tx->buf[tx->iw++] = 'U';
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	b2c8      	uxtb	r0, r1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	7108      	strb	r0, [r1, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2255      	movs	r2, #85	@ 0x55
 8000632:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791a      	ldrb	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	4013      	ands	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'N';
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	b2c8      	uxtb	r0, r1
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	7108      	strb	r0, [r1, #4]
 8000654:	4413      	add	r3, r2
 8000656:	224e      	movs	r2, #78	@ 0x4e
 8000658:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791a      	ldrb	r2, [r3, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	799b      	ldrb	r3, [r3, #6]
 8000662:	4013      	ands	r3, r2
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'E';
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	1c59      	adds	r1, r3, #1
 8000674:	b2c8      	uxtb	r0, r1
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	7108      	strb	r0, [r1, #4]
 800067a:	4413      	add	r3, r2
 800067c:	2245      	movs	r2, #69	@ 0x45
 800067e:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791a      	ldrb	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	4013      	ands	r3, r2
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'R';
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	1c59      	adds	r1, r3, #1
 800069a:	b2c8      	uxtb	r0, r1
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	7108      	strb	r0, [r1, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	2252      	movs	r2, #82	@ 0x52
 80006a4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791a      	ldrb	r2, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = N + 1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	1c59      	adds	r1, r3, #1
 80006c0:	b2c8      	uxtb	r0, r1
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	7108      	strb	r0, [r1, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	78ba      	ldrb	r2, [r7, #2]
 80006ca:	3201      	adds	r2, #1
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791a      	ldrb	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ':';
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	b2c8      	uxtb	r0, r1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	7108      	strb	r0, [r1, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	223a      	movs	r2, #58	@ 0x3a
 80006f4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791a      	ldrb	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	4013      	ands	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ID;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	1c59      	adds	r1, r3, #1
 8000710:	b2c8      	uxtb	r0, r1
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	7108      	strb	r0, [r1, #4]
 8000716:	4413      	add	r3, r2
 8000718:	78fa      	ldrb	r2, [r7, #3]
 800071a:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791a      	ldrb	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	4013      	ands	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	711a      	strb	r2, [r3, #4]
    tx->chks ^= (N + 1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	b25a      	sxtb	r2, r3
 8000732:	78bb      	ldrb	r3, [r7, #2]
 8000734:	3301      	adds	r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4053      	eors	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	71da      	strb	r2, [r3, #7]
    tx->chks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ID ^ ':');
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	79da      	ldrb	r2, [r3, #7]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	79db      	ldrb	r3, [r3, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <UNER_PutByteOnTx>:

uint8_t UNER_PutByteOnTx(_sTx *tx, uint8_t byte)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
    tx->buf[tx->iw++] = byte;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	1c59      	adds	r1, r3, #1
 800077c:	b2c8      	uxtb	r0, r1
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	7108      	strb	r0, [r1, #4]
 8000782:	4413      	add	r3, r2
 8000784:	78fa      	ldrb	r2, [r7, #3]
 8000786:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	799b      	ldrb	r3, [r3, #6]
 8000790:	4013      	ands	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	711a      	strb	r2, [r3, #4]
    tx->chks ^= byte;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	79da      	ldrb	r2, [r3, #7]
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4053      	eors	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	79db      	ldrb	r3, [r3, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <UNER_PutStrOnTx>:

uint8_t UNER_PutStrOnTx(_sTx *tx, const char *str)
{
 80007b4:	b490      	push	{r4, r7}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    uint16_t generalIndex = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	81fb      	strh	r3, [r7, #14]
    while (str[generalIndex]) {
 80007c2:	e022      	b.n	800080a <UNER_PutStrOnTx+0x56>
        tx->buf[tx->iw++] = str[generalIndex];
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	1c58      	adds	r0, r3, #1
 80007d4:	b2c4      	uxtb	r4, r0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	7104      	strb	r4, [r0, #4]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
        tx->iw &= tx->length;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791a      	ldrb	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	4013      	ands	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	711a      	strb	r2, [r3, #4]
        tx->chks ^= str[generalIndex++];
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	81fa      	strh	r2, [r7, #14]
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	4053      	eors	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	71da      	strb	r2, [r3, #7]
    while (str[generalIndex]) {
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1d6      	bne.n	80007c4 <UNER_PutStrOnTx+0x10>
    }
    return tx->chks;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	79db      	ldrb	r3, [r3, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr

08000824 <UNER_SetAppCallback>:


void UNER_SetAppCallback(UNER_ApplicationCallback_t callback) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    appCallback = callback;
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <UNER_SetAppCallback+0x18>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000200 	.word	0x20000200

08000840 <MPU_hal_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "main.h"


void MPU_hal_write(uint8_t address, uint8_t control, uint8_t data){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af04      	add	r7, sp, #16
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	460b      	mov	r3, r1
 800084c:	71bb      	strb	r3, [r7, #6]
 800084e:	4613      	mov	r3, r2
 8000850:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, address, control, 1, &data, 1, HAL_MAX_DELAY);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b299      	uxth	r1, r3
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	b29a      	uxth	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	1d7b      	adds	r3, r7, #5
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	4803      	ldr	r0, [pc, #12]	@ (8000878 <MPU_hal_write+0x38>)
 800086c:	f002 fe0e 	bl	800348c <HAL_I2C_Mem_Write>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000278 	.word	0x20000278

0800087c <MPU_hal_read>:

void MPU_hal_read(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	uint8_t received_data[6];

	 HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, received_data, 6);
 8000882:	2306      	movs	r3, #6
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	463b      	mov	r3, r7
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	223b      	movs	r2, #59	@ 0x3b
 800088e:	21d0      	movs	r1, #208	@ 0xd0
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MPU_hal_read+0x24>)
 8000892:	f003 f84b 	bl	800392c <HAL_I2C_Mem_Read_DMA>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000278 	.word	0x20000278

080008a4 <oled_hal_init_i2c>:


int oled_hal_init_i2c(uint8_t address){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_IsDeviceReady(&hi2c1, address, 1, 2000) != HAL_OK) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	b299      	uxth	r1, r3
 80008b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008ba:	2201      	movs	r2, #1
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <oled_hal_init_i2c+0x34>)
 80008be:	f003 f9bb 	bl	8003c38 <HAL_I2C_IsDeviceReady>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <oled_hal_init_i2c+0x28>
		ret = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000278 	.word	0x20000278

080008dc <oled_hal_write>:


void oled_hal_write(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 80008dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008e0:	b087      	sub	sp, #28
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	603a      	str	r2, [r7, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	460b      	mov	r3, r1
 80008ee:	71bb      	strb	r3, [r7, #6]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80bb      	strh	r3, [r7, #4]
 80008f4:	466b      	mov	r3, sp
 80008f6:	461e      	mov	r6, r3
	uint8_t buf[len + 1]; // buffer local m
 80008f8:	88bb      	ldrh	r3, [r7, #4]
 80008fa:	1c59      	adds	r1, r3, #1
 80008fc:	1e4b      	subs	r3, r1, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	460a      	mov	r2, r1
 8000902:	2300      	movs	r3, #0
 8000904:	4690      	mov	r8, r2
 8000906:	4699      	mov	r9, r3
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800091c:	460a      	mov	r2, r1
 800091e:	2300      	movs	r3, #0
 8000920:	4614      	mov	r4, r2
 8000922:	461d      	mov	r5, r3
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	00eb      	lsls	r3, r5, #3
 800092e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000932:	00e2      	lsls	r2, r4, #3
 8000934:	460b      	mov	r3, r1
 8000936:	3307      	adds	r3, #7
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	ebad 0d03 	sub.w	sp, sp, r3
 8000940:	ab02      	add	r3, sp, #8
 8000942:	3300      	adds	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
    buf[0] = ctrl;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, len);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	88ba      	ldrh	r2, [r7, #4]
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f00c ffbd 	bl	800d8d4 <memcpy>

    //HAL_I2C_Master_Transmit_DMA(&hi2c1, addr, buf, len + 1);
    HAL_I2C_Mem_Write_DMA(&hi2c1, addr, ctrl, I2C_MEMADD_SIZE_8BIT, data, len);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	b299      	uxth	r1, r3
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	b29a      	uxth	r2, r3
 8000962:	88bb      	ldrh	r3, [r7, #4]
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <oled_hal_write+0xa4>)
 800096e:	f002 fe87 	bl	8003680 <HAL_I2C_Mem_Write_DMA>
 8000972:	46b5      	mov	sp, r6

}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800097e:	bf00      	nop
 8000980:	20000278 	.word	0x20000278

08000984 <oled_hal_write_single>:

int oled_hal_write_single(uint8_t addr, uint8_t ctrl, uint8_t data) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	460b      	mov	r3, r1
 8000990:	71bb      	strb	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2] = { ctrl, data };
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	797b      	ldrb	r3, [r7, #5]
 800099c:	737b      	strb	r3, [r7, #13]

    return (HAL_I2C_Master_Transmit(&hi2c1, addr, buf, 2, HAL_MAX_DELAY) == HAL_OK) ? 0 : -1;
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	b299      	uxth	r1, r3
 80009a2:	f107 020c 	add.w	r2, r7, #12
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2302      	movs	r3, #2
 80009ae:	4807      	ldr	r0, [pc, #28]	@ (80009cc <oled_hal_write_single+0x48>)
 80009b0:	f002 fc6e 	bl	8003290 <HAL_I2C_Master_Transmit>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <oled_hal_write_single+0x3a>
 80009ba:	2300      	movs	r3, #0
 80009bc:	e001      	b.n	80009c2 <oled_hal_write_single+0x3e>
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000278 	.word	0x20000278

080009d0 <oled_hal_write_comm>:

void oled_hal_write_comm(uint8_t addr, uint8_t data){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
    //uint8_t buf[2] = { 0x00, data };

    HAL_I2C_Mem_Write_DMA(&hi2c1, addr, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 2);
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	b299      	uxth	r1, r3
 80009e4:	2302      	movs	r3, #2
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2200      	movs	r2, #0
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <oled_hal_write_comm+0x30>)
 80009f2:	f002 fe45 	bl	8003680 <HAL_I2C_Mem_Write_DMA>
    //HAL_I2C_Master_Transmit_DMA(&hi2c1, addr, buf, 2);
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000278 	.word	0x20000278

08000a04 <UNER_AppHandler>:

void UNER_AppHandler(_eCmd cmd, _uWork *data)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
    switch (cmd) {
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10a      	bne.n	8000a2c <UNER_AppHandler+0x28>
        case UIMOTORS:
            leftMotorSpeed = data->i8[0];
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f993 2000 	ldrsb.w	r2, [r3]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <UNER_AppHandler+0x34>)
 8000a1e:	701a      	strb	r2, [r3, #0]
            rightMotorSpeed = data->i8[1];
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <UNER_AppHandler+0x38>)
 8000a28:	701a      	strb	r2, [r3, #0]

            //ssd_update_done = 1;
            break;
 8000a2a:	e000      	b.n	8000a2e <UNER_AppHandler+0x2a>
        default:
            break;
 8000a2c:	bf00      	nop
    }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	200005b4 	.word	0x200005b4
 8000a3c:	200005b5 	.word	0x200005b5

08000a40 <Motor_Set>:

void Motor_Set(int motor, int8_t speed)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    // Saturar valor a -100..100
    if (speed > 100) speed = 100;
 8000a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a50:	2b64      	cmp	r3, #100	@ 0x64
 8000a52:	dd01      	ble.n	8000a58 <Motor_Set+0x18>
 8000a54:	2364      	movs	r3, #100	@ 0x64
 8000a56:	70fb      	strb	r3, [r7, #3]
    if (speed < -100) speed = -100;
 8000a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a5c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000a60:	da01      	bge.n	8000a66 <Motor_Set+0x26>
 8000a62:	239c      	movs	r3, #156	@ 0x9c
 8000a64:	70fb      	strb	r3, [r7, #3]


    switch (motor) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <Motor_Set+0x34>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d00c      	beq.n	8000a8c <Motor_Set+0x4c>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
            break;

        default:
            // Motor inválido, podés agregar error handling
            break;
 8000a72:	e016      	b.n	8000aa2 <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <Motor_Set+0x6c>)
 8000a7c:	f002 fa98 	bl	8002fb0 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <Motor_Set+0x70>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000a88:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000a8a:	e00a      	b.n	8000aa2 <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <Motor_Set+0x6c>)
 8000a92:	f002 fa8d 	bl	8002fb0 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <Motor_Set+0x74>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000a9e:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000aa0:	bf00      	nop
    }
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	20000310 	.word	0x20000310
 8000ab4:	20000358 	.word	0x20000358

08000ab8 <Oled_Init>:

void Oled_Init(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if (!SSD1306_Init()) {
 8000abc:	f000 fbba 	bl	8001234 <SSD1306_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <Oled_Init+0x12>
		while (1);
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <Oled_Init+0xe>
	}
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}

08000ace <sendByteOverUSB>:


void sendByteOverUSB(uint8_t *byte)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
    // CDC_Transmit_FS envía un buffer, acá mandamos 1 byte
    while(CDC_Transmit_FS(byte, 1) == USBD_BUSY){
 8000ad6:	bf00      	nop
 8000ad8:	2101      	movs	r1, #1
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f00c fab8 	bl	800d050 <CDC_Transmit_FS>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d0f8      	beq.n	8000ad8 <sendByteOverUSB+0xa>
        // Esperar o hacer algo mientras el USB está ocupado
    }
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08d      	sub	sp, #52	@ 0x34
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af6:	f001 f933 	bl	8001d60 <HAL_Init>

  /* USER CODE BEGIN Init */
  OLED_IO_Interface_t oled_hal = {
 8000afa:	4b4b      	ldr	r3, [pc, #300]	@ (8000c28 <main+0x138>)
 8000afc:	f107 0420 	add.w	r4, r7, #32
 8000b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .WriteSingle = oled_hal_write_single,
	  .WriteComm = oled_hal_write_comm,
	  .Init_I2C = oled_hal_init_i2c
  };

  OLED_RegisterIO(&oled_hal);
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fb7e 	bl	800120c <OLED_RegisterIO>

  MPU_IO_Interface_t mpu_hal = {
 8000b10:	4a46      	ldr	r2, [pc, #280]	@ (8000c2c <main+0x13c>)
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b1a:	e883 0003 	stmia.w	r3, {r0, r1}
      .WriteConfig = MPU_hal_write,
	  .Read = MPU_hal_read
  };

  MPU6050_RegisterIO(&mpu_hal);
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fb40 	bl	80011a8 <MPU6050_RegisterIO>

  UNER_Init(&tx, bufTx, &rx, bufRx);
 8000b28:	4b41      	ldr	r3, [pc, #260]	@ (8000c30 <main+0x140>)
 8000b2a:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <main+0x144>)
 8000b2c:	4942      	ldr	r1, [pc, #264]	@ (8000c38 <main+0x148>)
 8000b2e:	4843      	ldr	r0, [pc, #268]	@ (8000c3c <main+0x14c>)
 8000b30:	f7ff fb1a 	bl	8000168 <UNER_Init>

  UNER_SetTxFunction(sendByteOverUSB);
 8000b34:	4842      	ldr	r0, [pc, #264]	@ (8000c40 <main+0x150>)
 8000b36:	f7ff fb09 	bl	800014c <UNER_SetTxFunction>

  CDC_Attach_RX_Funct(&UNER_OnRxByte);
 8000b3a:	4842      	ldr	r0, [pc, #264]	@ (8000c44 <main+0x154>)
 8000b3c:	f00c faae 	bl	800d09c <CDC_Attach_RX_Funct>

  /* USER CODE END Init */


  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f898 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 faf0 	bl	8001128 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b48:	f000 fac8 	bl	80010dc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000b4c:	f00c f9a6 	bl	800ce9c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000b50:	f000 f982 	bl	8000e58 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b54:	f000 f9ae 	bl	8000eb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b58:	f000 fa4c 	bl	8000ff4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b5c:	f000 f8e8 	bl	8000d30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  UNER_SetAppCallback(UNER_AppHandler);
 8000b60:	4839      	ldr	r0, [pc, #228]	@ (8000c48 <main+0x158>)
 8000b62:	f7ff fe5f 	bl	8000824 <UNER_SetAppCallback>


  // Inicializacion PWM motores
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b66:	2100      	movs	r1, #0
 8000b68:	4838      	ldr	r0, [pc, #224]	@ (8000c4c <main+0x15c>)
 8000b6a:	f007 fd09 	bl	8008580 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4837      	ldr	r0, [pc, #220]	@ (8000c50 <main+0x160>)
 8000b72:	f007 fd05 	bl	8008580 <HAL_TIM_PWM_Start>

  leftMotorSpeed = 0;
 8000b76:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <main+0x164>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
  rightMotorSpeed = 0;
 8000b7c:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <main+0x168>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]

  Motor_Set(0, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff5b 	bl	8000a40 <Motor_Set>
  Motor_Set(1, 80);
 8000b8a:	2150      	movs	r1, #80	@ 0x50
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff ff57 	bl	8000a40 <Motor_Set>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_valores, NUM_SENSORES);
 8000b92:	2208      	movs	r2, #8
 8000b94:	4931      	ldr	r1, [pc, #196]	@ (8000c5c <main+0x16c>)
 8000b96:	4832      	ldr	r0, [pc, #200]	@ (8000c60 <main+0x170>)
 8000b98:	f001 fa1c 	bl	8001fd4 <HAL_ADC_Start_DMA>

  Oled_Init();
 8000b9c:	f7ff ff8c 	bl	8000ab8 <Oled_Init>
  SSD1306_Clear();
 8000ba0:	f000 fdeb 	bl	800177a <SSD1306_Clear>

  MPU6050_Init();
 8000ba4:	f000 fb0e 	bl	80011c4 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UNER_SerialTask(&tx,&rx);
 8000ba8:	4922      	ldr	r1, [pc, #136]	@ (8000c34 <main+0x144>)
 8000baa:	4824      	ldr	r0, [pc, #144]	@ (8000c3c <main+0x14c>)
 8000bac:	f7ff fb1a 	bl	80001e4 <UNER_SerialTask>


	  char texto[20];

	  //SSD1306_DrawCircle(20, 20, 20, SSD1306_COLOR_WHITE);
	  SSD1306_GotoXY(0, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 fd28 	bl	8001608 <SSD1306_GotoXY>
	  sprintf(texto, "LSPD: %4d", leftMotorSpeed);
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <main+0x164>)
 8000bba:	f993 3000 	ldrsb.w	r3, [r3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4928      	ldr	r1, [pc, #160]	@ (8000c64 <main+0x174>)
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f00c fe2f 	bl	800d828 <siprintf>
	  SSD1306_Puts("   ", &Font_11x18, SSD1306_COLOR_WHITE); // limpiar línea
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4926      	ldr	r1, [pc, #152]	@ (8000c68 <main+0x178>)
 8000bce:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <main+0x17c>)
 8000bd0:	f000 fdae 	bl	8001730 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 fd16 	bl	8001608 <SSD1306_GotoXY>
	  SSD1306_Puts(texto, &Font_11x18, SSD1306_COLOR_BLACK);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	4921      	ldr	r1, [pc, #132]	@ (8000c68 <main+0x178>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fda4 	bl	8001730 <SSD1306_Puts>

	  SSD1306_GotoXY(0, 25);
 8000be8:	2119      	movs	r1, #25
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 fd0c 	bl	8001608 <SSD1306_GotoXY>
	  sprintf(texto, "RSPD: %4d", rightMotorSpeed);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <main+0x168>)
 8000bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	491d      	ldr	r1, [pc, #116]	@ (8000c70 <main+0x180>)
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00c fe13 	bl	800d828 <siprintf>
	  SSD1306_Puts("   ", &Font_11x18, SSD1306_COLOR_WHITE); // limpiar línea
 8000c02:	2201      	movs	r2, #1
 8000c04:	4918      	ldr	r1, [pc, #96]	@ (8000c68 <main+0x178>)
 8000c06:	4819      	ldr	r0, [pc, #100]	@ (8000c6c <main+0x17c>)
 8000c08:	f000 fd92 	bl	8001730 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 25);
 8000c0c:	2119      	movs	r1, #25
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fcfa 	bl	8001608 <SSD1306_GotoXY>
	  SSD1306_Puts(texto, &Font_11x18, SSD1306_COLOR_BLACK);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	4913      	ldr	r1, [pc, #76]	@ (8000c68 <main+0x178>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd88 	bl	8001730 <SSD1306_Puts>

	  SSD1306_Task();
 8000c20:	f000 fb02 	bl	8001228 <SSD1306_Task>
  {
 8000c24:	bf00      	nop
 8000c26:	e7bf      	b.n	8000ba8 <main+0xb8>
 8000c28:	0800e1c4 	.word	0x0800e1c4
 8000c2c:	0800e1d4 	.word	0x0800e1d4
 8000c30:	200003a0 	.word	0x200003a0
 8000c34:	200005a0 	.word	0x200005a0
 8000c38:	200004a0 	.word	0x200004a0
 8000c3c:	200005ac 	.word	0x200005ac
 8000c40:	08000acf 	.word	0x08000acf
 8000c44:	08000249 	.word	0x08000249
 8000c48:	08000a05 	.word	0x08000a05
 8000c4c:	20000310 	.word	0x20000310
 8000c50:	20000358 	.word	0x20000358
 8000c54:	200005b4 	.word	0x200005b4
 8000c58:	200005b5 	.word	0x200005b5
 8000c5c:	200005b8 	.word	0x200005b8
 8000c60:	20000204 	.word	0x20000204
 8000c64:	0800e1a8 	.word	0x0800e1a8
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	0800e1b4 	.word	0x0800e1b4
 8000c70:	0800e1b8 	.word	0x0800e1b8

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	@ 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7e:	2228      	movs	r2, #40	@ 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00c fdf2 	bl	800d86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 fefe 	bl	8007acc <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cd6:	f000 fa61 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f007 f96a 	bl	8007fd0 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d02:	f000 fa4b 	bl	800119c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000d06:	2312      	movs	r3, #18
 8000d08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f007 fad4 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d22:	f000 fa3b 	bl	800119c <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	@ 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d40:	4b43      	ldr	r3, [pc, #268]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d42:	4a44      	ldr	r2, [pc, #272]	@ (8000e54 <MX_ADC1_Init+0x124>)
 8000d44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d46:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4e:	4b40      	ldr	r3, [pc, #256]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d5c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000d68:	4b39      	ldr	r3, [pc, #228]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	4838      	ldr	r0, [pc, #224]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d70:	f001 f858 	bl	8001e24 <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d7a:	f000 fa0f 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4830      	ldr	r0, [pc, #192]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000d90:	f001 fa10 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f9ff 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	482a      	ldr	r0, [pc, #168]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000da8:	f001 fa04 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000db2:	f000 f9f3 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000db6:	2303      	movs	r3, #3
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000dc0:	f001 f9f8 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000dca:	f000 f9e7 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481e      	ldr	r0, [pc, #120]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000dd8:	f001 f9ec 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000de2:	f000 f9db 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000de6:	2305      	movs	r3, #5
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4818      	ldr	r0, [pc, #96]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000df0:	f001 f9e0 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000dfa:	f000 f9cf 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000e08:	f001 f9d4 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000e12:	f000 f9c3 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e16:	2307      	movs	r3, #7
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000e20:	f001 f9c8 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e2a:	f000 f9b7 	bl	800119c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_ADC1_Init+0x120>)
 8000e38:	f001 f9bc 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000e42:	f000 f9ab 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000204 	.word	0x20000204
 8000e54:	40012400 	.word	0x40012400

08000e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e5e:	4a13      	ldr	r2, [pc, #76]	@ (8000eac <MX_I2C1_Init+0x54>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x58>)
 8000e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_I2C1_Init+0x50>)
 8000e96:	f002 f8a3 	bl	8002fe0 <HAL_I2C_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea0:	f000 f97c 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000278 	.word	0x20000278
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	00061a80 	.word	0x00061a80

08000eb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b096      	sub	sp, #88	@ 0x58
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00c fcbd 	bl	800d86c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff0 <MX_TIM1_Init+0x13c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000efa:	2247      	movs	r2, #71	@ 0x47
 8000efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000f04:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f06:	2263      	movs	r2, #99	@ 0x63
 8000f08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f10:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b35      	ldr	r3, [pc, #212]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1c:	4833      	ldr	r0, [pc, #204]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f1e:	f007 fa87 	bl	8008430 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f28:	f000 f938 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f36:	4619      	mov	r1, r3
 8000f38:	482c      	ldr	r0, [pc, #176]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f3a:	f007 fc85 	bl	8008848 <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f44:	f000 f92a 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f48:	4828      	ldr	r0, [pc, #160]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f4a:	f007 fac0 	bl	80084ce <HAL_TIM_PWM_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f54:	f000 f922 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f64:	4619      	mov	r1, r3
 8000f66:	4821      	ldr	r0, [pc, #132]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f68:	f007 ffe6 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f72:	f000 f913 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f76:	2360      	movs	r3, #96	@ 0x60
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4814      	ldr	r0, [pc, #80]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f9c:	f007 fb92 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fa6:	f000 f8f9 	bl	800119c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fce:	f008 f811 	bl	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000fd8:	f000 f8e0 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fde:	f000 fd71 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8000fe2:	bf00      	nop
 8000fe4:	3758      	adds	r7, #88	@ 0x58
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000310 	.word	0x20000310
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800102c:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 800102e:	2247      	movs	r2, #71	@ 0x47
 8001030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 800103a:	2263      	movs	r2, #99	@ 0x63
 800103c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104a:	4823      	ldr	r0, [pc, #140]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 800104c:	f007 f9f0 	bl	8008430 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001056:	f000 f8a1 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001064:	4619      	mov	r1, r3
 8001066:	481c      	ldr	r0, [pc, #112]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001068:	f007 fbee 	bl	8008848 <HAL_TIM_ConfigClockSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001072:	f000 f893 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001076:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001078:	f007 fa29 	bl	80084ce <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 f88b 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 8001096:	f007 ff4f 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80010a0:	f000 f87c 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	@ 0x60
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2204      	movs	r2, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 80010bc:	f007 fb02 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80010c6:	f000 f869 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ca:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <MX_TIM2_Init+0xe4>)
 80010cc:	f000 fcfa 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 80010d0:	bf00      	nop
 80010d2:	3738      	adds	r7, #56	@ 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000358 	.word	0x20000358

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_DMA_Init+0x48>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <MX_DMA_Init+0x48>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <MX_DMA_Init+0x48>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	200b      	movs	r0, #11
 8001100:	f001 fb29 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001104:	200b      	movs	r0, #11
 8001106:	f001 fb42 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2010      	movs	r0, #16
 8001110:	f001 fb21 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001114:	2010      	movs	r0, #16
 8001116:	f001 fb3a 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_GPIO_Init+0x70>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_GPIO_Init+0x70>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6193      	str	r3, [r2, #24]
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_GPIO_Init+0x70>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <MX_GPIO_Init+0x70>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <MX_GPIO_Init+0x70>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <MPU6050_RegisterIO>:
#include "mpu6050.h"


static const MPU_IO_Interface_t* mpu_io = NULL;

void MPU6050_RegisterIO(const MPU_IO_Interface_t* io) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    mpu_io = io;
 80011b0:	4a03      	ldr	r2, [pc, #12]	@ (80011c0 <MPU6050_RegisterIO+0x18>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200005cc 	.word	0x200005cc

080011c4 <MPU6050_Init>:

void MPU6050_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]
    mpu_io->WriteConfig(MPU6050_ADDR, PWR_MGMT_1_REG, data);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MPU6050_Init+0x44>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	216b      	movs	r1, #107	@ 0x6b
 80011d8:	20d0      	movs	r0, #208	@ 0xd0
 80011da:	4798      	blx	r3

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 80011dc:	2300      	movs	r3, #0
 80011de:	71fb      	strb	r3, [r7, #7]
    mpu_io->WriteConfig(MPU6050_ADDR, ACCEL_CONFIG_REG, data);
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MPU6050_Init+0x44>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	211c      	movs	r1, #28
 80011ea:	20d0      	movs	r0, #208	@ 0xd0
 80011ec:	4798      	blx	r3
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
    mpu_io->WriteConfig(MPU6050_ADDR, GYRO_CONFIG_REG, data);
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <MPU6050_Init+0x44>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	211b      	movs	r1, #27
 80011fc:	20d0      	movs	r0, #208	@ 0xd0
 80011fe:	4798      	blx	r3
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200005cc 	.word	0x200005cc

0800120c <OLED_RegisterIO>:

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void OLED_RegisterIO(const OLED_IO_Interface_t* io) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    oled_io = io;
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <OLED_RegisterIO+0x18>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	200009d8 	.word	0x200009d8

08001228 <SSD1306_Task>:

void SSD1306_Task(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	//if (ssd_update_done) {
	SSD1306_UpdateScreen(); // lanza siguiente refresco
 800122c:	f000 f8ec 	bl	8001408 <SSD1306_UpdateScreen>
	//}
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <SSD1306_Init>:
        }
    }
}


uint8_t SSD1306_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    //USB_Debug("SSD1306_Init: Inicializando I2C...\r\n");
    SSD1306_I2C_Init();
 8001238:	f000 faa8 	bl	800178c <SSD1306_I2C_Init>

    //USB_Debug("SSD1306_Init: Comprobando I2C addr=0x%02X...\r\n", SSD1306_I2C_ADDR);
    if (!oled_io->Init_I2C(SSD1306_I2C_ADDR)) {
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <SSD1306_Init+0x158>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	4798      	blx	r3
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <SSD1306_Init+0x1c>
        //USB_Debug("SSD1306_Init: ERROR, no responde I2C\r\n");
        return 0;
 800124c:	2300      	movs	r3, #0
 800124e:	e09b      	b.n	8001388 <SSD1306_Init+0x154>
    }

    SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAE);	// Set display OFF
 8001250:	22ae      	movs	r2, #174	@ 0xae
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	@ 0x78
 8001256:	f000 faad 	bl	80017b4 <SSD1306_I2C_Write>

    SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); //Set Memory Addressing Mode
 800125a:	2220      	movs	r2, #32
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	@ 0x78
 8001260:	f000 faa8 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2078      	movs	r0, #120	@ 0x78
 800126a:	f000 faa3 	bl	80017b4 <SSD1306_I2C_Write>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800126e:	22b0      	movs	r2, #176	@ 0xb0
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	@ 0x78
 8001274:	f000 fa9e 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xC8); //Set COM Output Scan Direction
 8001278:	22c8      	movs	r2, #200	@ 0xc8
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f000 fa99 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10); //---set low column address
 8001282:	2210      	movs	r2, #16
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	@ 0x78
 8001288:	f000 fa94 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); //---set high column address
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	@ 0x78
 8001292:	f000 fa8f 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x40); //--set start line address - CHECK
 8001296:	2240      	movs	r2, #64	@ 0x40
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	@ 0x78
 800129c:	f000 fa8a 	bl	80017b4 <SSD1306_I2C_Write>


	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x81);	// Set contrast control
 80012a0:	2281      	movs	r2, #129	@ 0x81
 80012a2:	2100      	movs	r1, #0
 80012a4:	2078      	movs	r0, #120	@ 0x78
 80012a6:	f000 fa85 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xFF);	// Max contrast
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	2100      	movs	r1, #0
 80012ae:	2078      	movs	r0, #120	@ 0x78
 80012b0:	f000 fa80 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA1); 	//--set segment re-map 0 to 127 - CHECK
 80012b4:	22a1      	movs	r2, #161	@ 0xa1
 80012b6:	2100      	movs	r1, #0
 80012b8:	2078      	movs	r0, #120	@ 0x78
 80012ba:	f000 fa7b 	bl	80017b4 <SSD1306_I2C_Write>

    SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA6); 	//--set normal color
 80012be:	22a6      	movs	r2, #166	@ 0xa6
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	@ 0x78
 80012c4:	f000 fa76 	bl	80017b4 <SSD1306_I2C_Write>


	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x3F); //
 80012c8:	223f      	movs	r2, #63	@ 0x3f
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	@ 0x78
 80012ce:	f000 fa71 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012d2:	22a4      	movs	r2, #164	@ 0xa4
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	@ 0x78
 80012d8:	f000 fa6c 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD3); //-set display offset - CHECK
 80012dc:	22d3      	movs	r2, #211	@ 0xd3
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	@ 0x78
 80012e2:	f000 fa67 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); //-not offset
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	@ 0x78
 80012ec:	f000 fa62 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 80012f0:	22d5      	movs	r2, #213	@ 0xd5
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	@ 0x78
 80012f6:	f000 fa5d 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xF0); //--set divide ratio
 80012fa:	22f0      	movs	r2, #240	@ 0xf0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	@ 0x78
 8001300:	f000 fa58 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD9); //--set pre-charge period
 8001304:	22d9      	movs	r2, #217	@ 0xd9
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	@ 0x78
 800130a:	f000 fa53 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x22); //
 800130e:	2222      	movs	r2, #34	@ 0x22
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	@ 0x78
 8001314:	f000 fa4e 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDA); //--set com pins hardware configuration - CHECK
 8001318:	22da      	movs	r2, #218	@ 0xda
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	@ 0x78
 800131e:	f000 fa49 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x12);
 8001322:	2212      	movs	r2, #18
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	@ 0x78
 8001328:	f000 fa44 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDB); //--set vcomh
 800132c:	22db      	movs	r2, #219	@ 0xdb
 800132e:	2100      	movs	r1, #0
 8001330:	2078      	movs	r0, #120	@ 0x78
 8001332:	f000 fa3f 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); //0x20,0.77xVcc
 8001336:	2220      	movs	r2, #32
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	@ 0x78
 800133c:	f000 fa3a 	bl	80017b4 <SSD1306_I2C_Write>

	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x8D); //--set DC-DC enable
 8001340:	228d      	movs	r2, #141	@ 0x8d
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	@ 0x78
 8001346:	f000 fa35 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x14); //
 800134a:	2214      	movs	r2, #20
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	@ 0x78
 8001350:	f000 fa30 	bl	80017b4 <SSD1306_I2C_Write>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF);	// Set display ON
 8001354:	22af      	movs	r2, #175	@ 0xaf
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	@ 0x78
 800135a:	f000 fa2b 	bl	80017b4 <SSD1306_I2C_Write>
//	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x8D);	//--set DC-DC enable
//	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x14);

//	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF);	// Set display ODF

    SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, SSD1306_DEACTIVATE_SCROLL);
 800135e:	222e      	movs	r2, #46	@ 0x2e
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 fa26 	bl	80017b4 <SSD1306_I2C_Write>
    //USB_Debug("SSD1306_Init: Comandos init enviados\r\n");

    //USB_Debug("SSD1306_Init: Limpiando pantalla...\r\n");
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f8dd 	bl	8001528 <SSD1306_Fill>

    i2c1_tx_busy = 0;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SSD1306_Init+0x15c>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]


    SSD1306.CurrentX = 0;
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <SSD1306_Init+0x160>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SSD1306_Init+0x160>)
 800137c:	2200      	movs	r2, #0
 800137e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SSD1306_Init+0x160>)
 8001382:	2201      	movs	r2, #1
 8001384:	715a      	strb	r2, [r3, #5]

    //USB_Debug("SSD1306_Init: COMPLETADO\r\n");
    return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200009d8 	.word	0x200009d8
 8001390:	200005b6 	.word	0x200005b6
 8001394:	200009d0 	.word	0x200009d0

08001398 <SSD1306_UpdateScreen_Blocking>:

void SSD1306_UpdateScreen_Blocking(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b0a2      	sub	sp, #136	@ 0x88
 800139c:	af00      	add	r7, sp, #0
    //USB_Debug("SSD1306_UpdateScreen_Blocking: Comenzando actualizacion (blocking)\r\n");

    // buffer temporal: 1 byte de control + 128 bytes de datos
    uint8_t buf[1 + SSD1306_WIDTH];

    for (uint8_t m = 0; m < 8; m++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80013a4:	e024      	b.n	80013f0 <SSD1306_UpdateScreen_Blocking+0x58>
        //USB_Debug("SSD1306_UpdateScreen_Blocking: Pagina %u\r\n", m);

        // 1) envía comandos de posicionamiento
        SSD1306_WRITECOMMAND(0xB0 + m);
 80013a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013aa:	3b50      	subs	r3, #80	@ 0x50
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	@ 0x78
 80013b4:	f000 f9fe 	bl	80017b4 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	@ 0x78
 80013be:	f000 f9f9 	bl	80017b4 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 80013c2:	2210      	movs	r2, #16
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 f9f4 	bl	80017b4 <SSD1306_I2C_Write>

        // 2) monta el paquete de datos: control=0x40 + página de 128 bytes
        buf[0] = 0x40;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	713b      	strb	r3, [r7, #4]
        memcpy(&buf[1],
               &SSD1306_Buffer[SSD1306_WIDTH * m],
 80013d0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013d4:	01db      	lsls	r3, r3, #7
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <SSD1306_UpdateScreen_Blocking+0x6c>)
 80013d8:	1899      	adds	r1, r3, r2
        memcpy(&buf[1],
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	3301      	adds	r3, #1
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00c fa77 	bl	800d8d4 <memcpy>
    for (uint8_t m = 0; m < 8; m++) {
 80013e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013ea:	3301      	adds	r3, #1
 80013ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80013f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80013f4:	2b07      	cmp	r3, #7
 80013f6:	d9d6      	bls.n	80013a6 <SSD1306_UpdateScreen_Blocking+0xe>

        // 3) envía todo con HAL_I2C_Master_Transmit (bloqueante)
    }

    //USB_Debug("SSD1306_UpdateScreen_Blocking: Pantalla actualizada (blocking)\r\n");
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3788      	adds	r7, #136	@ 0x88
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200005d0 	.word	0x200005d0

08001408 <SSD1306_UpdateScreen>:



void SSD1306_UpdateScreen(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

    switch (state) {
 800140e:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d87a      	bhi.n	800150c <SSD1306_UpdateScreen+0x104>
 8001416:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <SSD1306_UpdateScreen+0x14>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001435 	.word	0x08001435
 8001420:	08001447 	.word	0x08001447
 8001424:	080014c7 	.word	0x080014c7
 8001428:	08001469 	.word	0x08001469
 800142c:	08001483 	.word	0x08001483
 8001430:	0800149d 	.word	0x0800149d
        case 0:
            ////USB_Debug("SSD1306_Update: iniciando refresco NB\r\n");
            page             = 0;
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
            ssd_update_done  = 0;  // marca que el refresco está en curso
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <SSD1306_UpdateScreen+0x114>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
            state            = 1;
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
            // caemos en case 1 inmediatamente
        case 1:
            if (!i2c1_tx_busy) {
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <SSD1306_UpdateScreen+0x118>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d154      	bne.n	80014fa <SSD1306_UpdateScreen+0xf2>
            	SSD1306_I2C_WriteCommand(SSD1306_I2C_ADDR, 0xB0 + page);
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3b50      	subs	r3, #80	@ 0x50
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	2078      	movs	r0, #120	@ 0x78
 800145c:	f000 f9de 	bl	800181c <SSD1306_I2C_WriteCommand>
//                SSD1306_WRITECOMMAND(0x00);
//                SSD1306_WRITECOMMAND(0x10);
                // arrancamos DMA de datos

                ////USB_Debug("SSD1306_Update: pagina enviada\r\n", page);
                state = 3;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 8001462:	2203      	movs	r2, #3
 8001464:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001466:	e048      	b.n	80014fa <SSD1306_UpdateScreen+0xf2>
        case 3:
        	if (!i2c1_tx_busy) {
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <SSD1306_UpdateScreen+0x118>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d145      	bne.n	80014fe <SSD1306_UpdateScreen+0xf6>
				SSD1306_I2C_WriteCommand(SSD1306_I2C_ADDR, 0x00);
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	@ 0x78
 8001476:	f000 f9d1 	bl	800181c <SSD1306_I2C_WriteCommand>

				state = 4;
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 800147c:	2204      	movs	r2, #4
 800147e:	701a      	strb	r2, [r3, #0]
        	}
        	break;
 8001480:	e03d      	b.n	80014fe <SSD1306_UpdateScreen+0xf6>
        case 4:
			if (!i2c1_tx_busy) {
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <SSD1306_UpdateScreen+0x118>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d13a      	bne.n	8001502 <SSD1306_UpdateScreen+0xfa>
				SSD1306_I2C_WriteCommand(SSD1306_I2C_ADDR, 0x10);
 800148c:	2110      	movs	r1, #16
 800148e:	2078      	movs	r0, #120	@ 0x78
 8001490:	f000 f9c4 	bl	800181c <SSD1306_I2C_WriteCommand>

				state = 5;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 8001496:	2205      	movs	r2, #5
 8001498:	701a      	strb	r2, [r3, #0]
			}
			break;
 800149a:	e032      	b.n	8001502 <SSD1306_UpdateScreen+0xfa>
        case 5:
			if (!i2c1_tx_busy) {
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <SSD1306_UpdateScreen+0x118>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d12f      	bne.n	8001506 <SSD1306_UpdateScreen+0xfe>
				uint8_t *buf = &SSD1306_Buffer[SSD1306_WIDTH * page];
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <SSD1306_UpdateScreen+0x11c>)
 80014ae:	4413      	add	r3, r2
 80014b0:	607b      	str	r3, [r7, #4]
				SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, buf, SSD1306_WIDTH);
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	2140      	movs	r1, #64	@ 0x40
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 f991 	bl	80017e0 <SSD1306_I2C_WriteMulti>

				state = 2;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80014c4:	e01f      	b.n	8001506 <SSD1306_UpdateScreen+0xfe>
        case 2:
            if (!i2c1_tx_busy) {
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <SSD1306_UpdateScreen+0x118>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d11c      	bne.n	800150a <SSD1306_UpdateScreen+0x102>
                ////USB_Debug("SSD1306_Update: página %u completada\r\n", page);
                page++;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 80014da:	701a      	strb	r2, [r3, #0]
                if (page < 8) {
 80014dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <SSD1306_UpdateScreen+0x110>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b07      	cmp	r3, #7
 80014e2:	d803      	bhi.n	80014ec <SSD1306_UpdateScreen+0xe4>
                    state = 1;  // preparamos la siguiente página
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
                    ////USB_Debug("SSD1306_Update: refresco NB completo\r\n");
                    ssd_update_done = 1;
                    state           = 0;
                }
            }
            break;
 80014ea:	e00e      	b.n	800150a <SSD1306_UpdateScreen+0x102>
                    ssd_update_done = 1;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <SSD1306_UpdateScreen+0x114>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
                    state           = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <SSD1306_UpdateScreen+0x10c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
            break;
 80014f8:	e007      	b.n	800150a <SSD1306_UpdateScreen+0x102>
            break;
 80014fa:	bf00      	nop
 80014fc:	e006      	b.n	800150c <SSD1306_UpdateScreen+0x104>
        	break;
 80014fe:	bf00      	nop
 8001500:	e004      	b.n	800150c <SSD1306_UpdateScreen+0x104>
			break;
 8001502:	bf00      	nop
 8001504:	e002      	b.n	800150c <SSD1306_UpdateScreen+0x104>
			break;
 8001506:	bf00      	nop
 8001508:	e000      	b.n	800150c <SSD1306_UpdateScreen+0x104>
            break;
 800150a:	bf00      	nop
    }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200009d7 	.word	0x200009d7
 8001518:	200009d6 	.word	0x200009d6
 800151c:	20000000 	.word	0x20000000
 8001520:	200005b6 	.word	0x200005b6
 8001524:	200005d0 	.word	0x200005d0

08001528 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, color, sizeof(SSD1306_Buffer));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001538:	4619      	mov	r1, r3
 800153a:	4803      	ldr	r0, [pc, #12]	@ (8001548 <SSD1306_Fill+0x20>)
 800153c:	f00c f996 	bl	800d86c <memset>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200005d0 	.word	0x200005d0

0800154c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	70fb      	strb	r3, [r7, #3]
	if (
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b7f      	cmp	r3, #127	@ 0x7f
 8001562:	d848      	bhi.n	80015f6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	2b3f      	cmp	r3, #63	@ 0x3f
 8001568:	d845      	bhi.n	80015f6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <SSD1306_DrawPixel+0xb4>)
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11a      	bne.n	80015bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001586:	88fa      	ldrh	r2, [r7, #6]
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b298      	uxth	r0, r3
 800158e:	4603      	mov	r3, r0
 8001590:	01db      	lsls	r3, r3, #7
 8001592:	4413      	add	r3, r2
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <SSD1306_DrawPixel+0xb8>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	b25a      	sxtb	r2, r3
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b259      	sxtb	r1, r3
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	4603      	mov	r3, r0
 80015b0:	01db      	lsls	r3, r3, #7
 80015b2:	4413      	add	r3, r2
 80015b4:	b2c9      	uxtb	r1, r1
 80015b6:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <SSD1306_DrawPixel+0xb8>)
 80015b8:	54d1      	strb	r1, [r2, r3]
 80015ba:	e01d      	b.n	80015f8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	b298      	uxth	r0, r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	01db      	lsls	r3, r3, #7
 80015c8:	4413      	add	r3, r2
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <SSD1306_DrawPixel+0xb8>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	b25a      	sxtb	r2, r3
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4013      	ands	r3, r2
 80015e4:	b259      	sxtb	r1, r3
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	4603      	mov	r3, r0
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	4413      	add	r3, r2
 80015ee:	b2c9      	uxtb	r1, r1
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <SSD1306_DrawPixel+0xb8>)
 80015f2:	54d1      	strb	r1, [r2, r3]
 80015f4:	e000      	b.n	80015f8 <SSD1306_DrawPixel+0xac>
		return;
 80015f6:	bf00      	nop
	}
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	200009d0 	.word	0x200009d0
 8001604:	200005d0 	.word	0x200005d0

08001608 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001618:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SSD1306_GotoXY+0x28>)
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800161e:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <SSD1306_GotoXY+0x28>)
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	8053      	strh	r3, [r2, #2]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200009d0 	.word	0x200009d0

08001634 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <SSD1306_Putc+0xf8>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
	if (
 8001650:	2b7f      	cmp	r3, #127	@ 0x7f
 8001652:	dc07      	bgt.n	8001664 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001654:	4b35      	ldr	r3, [pc, #212]	@ (800172c <SSD1306_Putc+0xf8>)
 8001656:	885b      	ldrh	r3, [r3, #2]
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001660:	2b3f      	cmp	r3, #63	@ 0x3f
 8001662:	dd01      	ble.n	8001668 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001664:	2300      	movs	r3, #0
 8001666:	e05d      	b.n	8001724 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e04b      	b.n	8001706 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	3b20      	subs	r3, #32
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	7849      	ldrb	r1, [r1, #1]
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4619      	mov	r1, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	440b      	add	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e030      	b.n	80016f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d010      	beq.n	80016c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <SSD1306_Putc+0xf8>)
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	b298      	uxth	r0, r3
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <SSD1306_Putc+0xf8>)
 80016b0:	885a      	ldrh	r2, [r3, #2]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff ff45 	bl	800154c <SSD1306_DrawPixel>
 80016c2:	e014      	b.n	80016ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <SSD1306_Putc+0xf8>)
 80016c6:	881a      	ldrh	r2, [r3, #0]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b298      	uxth	r0, r3
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <SSD1306_Putc+0xf8>)
 80016d2:	885a      	ldrh	r2, [r3, #2]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b299      	uxth	r1, r3
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff ff2f 	bl	800154c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3301      	adds	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d3c8      	bcc.n	8001692 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	785b      	ldrb	r3, [r3, #1]
 800170a:	461a      	mov	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4293      	cmp	r3, r2
 8001710:	d3ad      	bcc.n	800166e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <SSD1306_Putc+0xf8>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b03      	ldr	r3, [pc, #12]	@ (800172c <SSD1306_Putc+0xf8>)
 8001720:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001722:	79fb      	ldrb	r3, [r7, #7]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200009d0 	.word	0x200009d0

08001730 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800173e:	e012      	b.n	8001766 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff73 	bl	8001634 <SSD1306_Putc>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d002      	beq.n	8001760 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	e008      	b.n	8001772 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3301      	adds	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e8      	bne.n	8001740 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fed2 	bl	8001528 <SSD1306_Fill>
	SSD1306_UpdateScreen_Blocking();
 8001784:	f7ff fe08 	bl	8001398 <SSD1306_UpdateScreen_Blocking>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <SSD1306_I2C_Init+0x24>)
 8001794:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001796:	e002      	b.n	800179e <SSD1306_I2C_Init+0x12>
		p--;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <SSD1306_I2C_Init+0xc>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	0003d090 	.word	0x0003d090

080017b4 <SSD1306_I2C_Write>:



void SSD1306_I2C_Write(uint8_t address, uint8_t control, uint8_t databyte) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	460b      	mov	r3, r1
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	717b      	strb	r3, [r7, #5]
	  oled_io->WriteSingle(address, control, databyte);
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <SSD1306_I2C_Write+0x28>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	797a      	ldrb	r2, [r7, #5]
 80017ce:	79b9      	ldrb	r1, [r7, #6]
 80017d0:	79f8      	ldrb	r0, [r7, #7]
 80017d2:	4798      	blx	r3
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200009d8 	.word	0x200009d8

080017e0 <SSD1306_I2C_WriteMulti>:



void SSD1306_I2C_WriteMulti(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	603a      	str	r2, [r7, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	460b      	mov	r3, r1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80bb      	strh	r3, [r7, #4]
	i2c1_tx_busy = 1;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <SSD1306_I2C_WriteMulti+0x34>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	oled_io->Write(SSD1306_I2C_ADDR, ctrl,data,len);
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <SSD1306_I2C_WriteMulti+0x38>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	79b9      	ldrb	r1, [r7, #6]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	2078      	movs	r0, #120	@ 0x78
 800180a:	47a0      	blx	r4
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	200005b6 	.word	0x200005b6
 8001818:	200009d8 	.word	0x200009d8

0800181c <SSD1306_I2C_WriteCommand>:

void SSD1306_I2C_WriteCommand(uint8_t address, uint8_t data){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	i2c1_tx_busy = 1;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SSD1306_I2C_WriteCommand+0x2c>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
	oled_io->WriteComm(SSD1306_I2C_ADDR, data);
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SSD1306_I2C_WriteCommand+0x30>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	4611      	mov	r1, r2
 800183c:	2078      	movs	r0, #120	@ 0x78
 800183e:	4798      	blx	r3
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200005b6 	.word	0x200005b6
 800184c:	200009d8 	.word	0x200009d8

08001850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_MspInit+0x5c>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <HAL_MspInit+0x5c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <HAL_MspInit+0x5c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_MspInit+0x5c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_MspInit+0x60>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_MspInit+0x60>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000

080018b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <HAL_ADC_MspInit+0xbc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d149      	bne.n	8001968 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <HAL_ADC_MspInit+0xc0>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001904:	23ff      	movs	r3, #255	@ 0xff
 8001906:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001908:	2303      	movs	r3, #3
 800190a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	4819      	ldr	r0, [pc, #100]	@ (8001978 <HAL_ADC_MspInit+0xc4>)
 8001914:	f001 f9c8 	bl	8002ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 800191a:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_ADC_MspInit+0xcc>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001936:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 800193a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800193e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 800194e:	f000 ff39 	bl	80027c4 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001958:	f7ff fc20 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001960:	621a      	str	r2, [r3, #32]
 8001962:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_ADC_MspInit+0xc8>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40012400 	.word	0x40012400
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	20000234 	.word	0x20000234
 8001980:	40020008 	.word	0x40020008

08001984 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d151      	bne.n	8001a48 <HAL_I2C_MspInit+0xc4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019bc:	23c0      	movs	r3, #192	@ 0xc0
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	4822      	ldr	r0, [pc, #136]	@ (8001a58 <HAL_I2C_MspInit+0xd4>)
 80019d0:	f001 f96a 	bl	8002ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019de:	61d3      	str	r3, [r2, #28]
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <HAL_I2C_MspInit+0xdc>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 80019f4:	2210      	movs	r2, #16
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a1c:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a1e:	f000 fed1 	bl	80027c4 <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001a28:	f7ff fbb8 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_I2C_MspInit+0xd8>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	201f      	movs	r0, #31
 8001a3e:	f000 fe8a 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a42:	201f      	movs	r0, #31
 8001a44:	f000 fea3 	bl	800278e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010c00 	.word	0x40010c00
 8001a5c:	200002cc 	.word	0x200002cc
 8001a60:	4002006c 	.word	0x4002006c

08001a64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_TIM_Base_MspInit+0x58>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10c      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8e:	e010      	b.n	8001ab2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d10b      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <HAL_TIM_MspPostInit+0xbc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d119      	bne.n	8001b18 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481d      	ldr	r0, [pc, #116]	@ (8001b88 <HAL_TIM_MspPostInit+0xc4>)
 8001b12:	f001 f8c9 	bl	8002ca8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b16:	e02e      	b.n	8001b76 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b20:	d129      	bne.n	8001b76 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_TIM_MspPostInit+0xc0>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480f      	ldr	r0, [pc, #60]	@ (8001b8c <HAL_TIM_MspPostInit+0xc8>)
 8001b4e:	f001 f8ab 	bl	8002ca8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_TIM_MspPostInit+0xcc>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_TIM_MspPostInit+0xcc>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	6053      	str	r3, [r2, #4]
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	@ 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	40010000 	.word	0x40010000

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f902 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <DMA1_Channel1_IRQHandler+0x10>)
 8001bf2:	f000 ff19 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000234 	.word	0x20000234

08001c00 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <DMA1_Channel6_IRQHandler+0x10>)
 8001c06:	f000 ff0f 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002cc 	.word	0x200002cc

08001c14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c1a:	f004 fb13 	bl	8006244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200016b0 	.word	0x200016b0

08001c28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <I2C1_EV_IRQHandler+0x10>)
 8001c2e:	f002 f931 	bl	8003e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000278 	.word	0x20000278

08001c3c <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a06      	ldr	r2, [pc, #24]	@ (8001c64 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <HAL_I2C_MemTxCpltCallback+0x1e>
		ssd_update_done = 1;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_I2C_MemTxCpltCallback+0x2c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
		i2c1_tx_busy = 0;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_I2C_MemTxCpltCallback+0x30>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40005400 	.word	0x40005400
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	200005b6 	.word	0x200005b6

08001c70 <HAL_ADC_ConvCpltCallback>:
//    	i2c1_tx_busy = 0;
//    }
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <HAL_ADC_ConvCpltCallback+0x24>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d102      	bne.n	8001c88 <HAL_ADC_ConvCpltCallback+0x18>
        sensores_listos = 1;
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_ADC_ConvCpltCallback+0x28>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
    }
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40012400 	.word	0x40012400
 8001c98:	200005c8 	.word	0x200005c8

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f00b fdd6 	bl	800d87c <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20005000 	.word	0x20005000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	200009dc 	.word	0x200009dc
 8001d04:	20001cf0 	.word	0x20001cf0

08001d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d14:	f7ff fff8 	bl	8001d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d1a:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d30:	4c09      	ldr	r4, [pc, #36]	@ (8001d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f00b fda3 	bl	800d888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d42:	f7fe fed5 	bl	8000af0 <main>
  bx lr
 8001d46:	4770      	bx	lr
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d50:	0800eff4 	.word	0x0800eff4
  ldr r2, =_sbss
 8001d54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d58:	20001cf0 	.word	0x20001cf0

08001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_2_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x28>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x28>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 fce5 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd68 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fcfd 	bl	80027aa <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 fcc5 	bl	8002756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20000014 	.word	0x20000014
 8001de8:	20000010 	.word	0x20000010

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a03      	ldr	r2, [pc, #12]	@ (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	200009e0 	.word	0x200009e0

08001e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	@ (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	200009e0 	.word	0x200009e0

08001e24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0be      	b.n	8001fc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fd26 	bl	80018b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 faf5 	bl	8002458 <ADC_ConversionStop_Disable>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8099 	bne.w	8001fb2 <HAL_ADC_Init+0x18e>
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8095 	bne.w	8001fb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e90:	f023 0302 	bic.w	r3, r3, #2
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ea4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7b1b      	ldrb	r3, [r3, #12]
 8001eaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ebc:	d003      	beq.n	8001ec6 <HAL_ADC_Init+0xa2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_ADC_Init+0xa8>
 8001ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eca:	e000      	b.n	8001ece <HAL_ADC_Init+0xaa>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7d1b      	ldrb	r3, [r3, #20]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d119      	bne.n	8001f10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7b1b      	ldrb	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	035a      	lsls	r2, r3, #13
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e00b      	b.n	8001f10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_ADC_Init+0x1a8>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f40:	d003      	beq.n	8001f4a <HAL_ADC_Init+0x126>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d104      	bne.n	8001f54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	051b      	lsls	r3, r3, #20
 8001f52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_ADC_Init+0x1ac>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f8e:	e018      	b.n	8001fc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	f023 0312 	bic.w	r3, r3, #18
 8001f98:	f043 0210 	orr.w	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001fd0:	ff1f0efe 	.word	0xff1f0efe

08001fd4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a64      	ldr	r2, [pc, #400]	@ (800217c <HAL_ADC_Start_DMA+0x1a8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_Start_DMA+0x24>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a63      	ldr	r2, [pc, #396]	@ (8002180 <HAL_ADC_Start_DMA+0x1ac>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_Start_DMA+0x32>
 8001ff8:	4b60      	ldr	r3, [pc, #384]	@ (800217c <HAL_ADC_Start_DMA+0x1a8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 80b3 	bne.w	800216c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Start_DMA+0x40>
 8002010:	2302      	movs	r3, #2
 8002012:	e0ae      	b.n	8002172 <HAL_ADC_Start_DMA+0x19e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9c1 	bl	80023a4 <ADC_Enable>
 8002022:	4603      	mov	r3, r0
 8002024:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 809a 	bne.w	8002162 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4e      	ldr	r2, [pc, #312]	@ (8002180 <HAL_ADC_Start_DMA+0x1ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d105      	bne.n	8002058 <HAL_ADC_Start_DMA+0x84>
 800204c:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_ADC_Start_DMA+0x1a8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d115      	bne.n	8002084 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d026      	beq.n	80020c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800207a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002082:	e01d      	b.n	80020c0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a39      	ldr	r2, [pc, #228]	@ (800217c <HAL_ADC_Start_DMA+0x1a8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_Start_DMA+0xd0>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a38      	ldr	r2, [pc, #224]	@ (8002180 <HAL_ADC_Start_DMA+0x1ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d10d      	bne.n	80020c0 <HAL_ADC_Start_DMA+0xec>
 80020a4:	4b35      	ldr	r3, [pc, #212]	@ (800217c <HAL_ADC_Start_DMA+0x1a8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	f023 0206 	bic.w	r2, r3, #6
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a25      	ldr	r2, [pc, #148]	@ (8002184 <HAL_ADC_Start_DMA+0x1b0>)
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a24      	ldr	r2, [pc, #144]	@ (8002188 <HAL_ADC_Start_DMA+0x1b4>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a23      	ldr	r2, [pc, #140]	@ (800218c <HAL_ADC_Start_DMA+0x1b8>)
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a18      	ldr	r0, [r3, #32]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	334c      	adds	r3, #76	@ 0x4c
 8002124:	4619      	mov	r1, r3
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f000 fba5 	bl	8002878 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002138:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800213c:	d108      	bne.n	8002150 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800214c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800214e:	e00f      	b.n	8002170 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800215e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002160:	e006      	b.n	8002170 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800216a:	e001      	b.n	8002170 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002170:	7dfb      	ldrb	r3, [r7, #23]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40012400 	.word	0x40012400
 8002180:	40012800 	.word	0x40012800
 8002184:	080024db 	.word	0x080024db
 8002188:	08002557 	.word	0x08002557
 800218c:	08002573 	.word	0x08002573

08002190 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x20>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e0dc      	b.n	800238e <HAL_ADC_ConfigChannel+0x1da>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d81c      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b05      	subs	r3, #5
 80021f6:	221f      	movs	r2, #31
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4019      	ands	r1, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	@ 0x34
 800221c:	e03c      	b.n	8002298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d81c      	bhi.n	8002260 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b23      	subs	r3, #35	@ 0x23
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	4019      	ands	r1, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b23      	subs	r3, #35	@ 0x23
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
 800225e:	e01b      	b.n	8002298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b41      	subs	r3, #65	@ 0x41
 8002272:	221f      	movs	r2, #31
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	4019      	ands	r1, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b41      	subs	r3, #65	@ 0x41
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d91c      	bls.n	80022da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68d9      	ldr	r1, [r3, #12]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	3b1e      	subs	r3, #30
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4019      	ands	r1, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	3b1e      	subs	r3, #30
 80022cc:	fa00 f203 	lsl.w	r2, r0, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	e019      	b.n	800230e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6919      	ldr	r1, [r3, #16]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	2207      	movs	r2, #7
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4019      	ands	r1, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6898      	ldr	r0, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	fa00 f203 	lsl.w	r2, r0, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d003      	beq.n	800231e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800231a:	2b11      	cmp	r3, #17
 800231c:	d132      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <HAL_ADC_ConfigChannel+0x1e4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d125      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d126      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002344:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d11a      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234e:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_ADC_ConfigChannel+0x1e8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002364:	e002      	b.n	800236c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x1b2>
 8002372:	e007      	b.n	8002384 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012400 	.word	0x40012400
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d040      	beq.n	8002444 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <ADC_Enable+0xac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002454 <ADC_Enable+0xb0>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e0:	e002      	b.n	80023e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ee:	f7ff fd0f 	bl	8001e10 <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f4:	e01f      	b.n	8002436 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f6:	f7ff fd0b 	bl	8001e10 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d918      	bls.n	8002436 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d011      	beq.n	8002436 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	f043 0210 	orr.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e007      	b.n	8002446 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d1d8      	bne.n	80023f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000000c 	.word	0x2000000c
 8002454:	431bde83 	.word	0x431bde83

08002458 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12e      	bne.n	80024d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002482:	f7ff fcc5 	bl	8001e10 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002488:	e01b      	b.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800248a:	f7ff fcc1 	bl	8001e10 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d914      	bls.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10d      	bne.n	80024c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e007      	b.n	80024d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d0dc      	beq.n	800248a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d127      	bne.n	8002544 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800250a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800250e:	d115      	bne.n	800253c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fb97 	bl	8001c70 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002542:	e004      	b.n	800254e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fe13 	bl	8002190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe02 	bl	80021a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4906      	ldr	r1, [pc, #24]	@ (8002640 <__NVIC_EnableIRQ+0x34>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	@ (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	@ (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f7ff ff90 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	@ (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff2d 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff42 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff90 	bl	8002698 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5f 	bl	8002644 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff35 	bl	800260c <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa2 	bl	80026fc <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e043      	b.n	8002862 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b22      	ldr	r3, [pc, #136]	@ (800286c <HAL_DMA_Init+0xa8>)
 80027e2:	4413      	add	r3, r2
 80027e4:	4a22      	ldr	r2, [pc, #136]	@ (8002870 <HAL_DMA_Init+0xac>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_DMA_Init+0xb0>)
 80027f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800280e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	bffdfff8 	.word	0xbffdfff8
 8002870:	cccccccd 	.word	0xcccccccd
 8002874:	40020000 	.word	0x40020000

08002878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e04b      	b.n	8002930 <HAL_DMA_Start_IT+0xb8>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d13a      	bne.n	8002922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9bc 	bl	8002c4e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 020e 	orr.w	r2, r2, #14
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00f      	b.n	8002910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 020a 	orr.w	r2, r2, #10
 800290e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d005      	beq.n	800295c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e051      	b.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	@ (8002a0c <HAL_DMA_Abort_IT+0xd4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d029      	beq.n	80029da <HAL_DMA_Abort_IT+0xa2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	@ (8002a10 <HAL_DMA_Abort_IT+0xd8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_Abort_IT+0x9e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	@ (8002a14 <HAL_DMA_Abort_IT+0xdc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_Abort_IT+0x98>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_DMA_Abort_IT+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_Abort_IT+0x92>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <HAL_DMA_Abort_IT+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00a      	beq.n	80029c4 <HAL_DMA_Abort_IT+0x8c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_DMA_Abort_IT+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_DMA_Abort_IT+0x86>
 80029b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029bc:	e00e      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029c2:	e00b      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029c8:	e008      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ce:	e005      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d4:	e002      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029d6:	2310      	movs	r3, #16
 80029d8:	e000      	b.n	80029dc <HAL_DMA_Abort_IT+0xa4>
 80029da:	2301      	movs	r3, #1
 80029dc:	4a11      	ldr	r2, [pc, #68]	@ (8002a24 <HAL_DMA_Abort_IT+0xec>)
 80029de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
    } 
  }
  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40020008 	.word	0x40020008
 8002a10:	4002001c 	.word	0x4002001c
 8002a14:	40020030 	.word	0x40020030
 8002a18:	40020044 	.word	0x40020044
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	4002006c 	.word	0x4002006c
 8002a24:	40020000 	.word	0x40020000

08002a28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	2204      	movs	r2, #4
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04f      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xc8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0204 	bic.w	r2, r2, #4
 8002a76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a66      	ldr	r2, [pc, #408]	@ (8002c18 <HAL_DMA_IRQHandler+0x1f0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d029      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0xae>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a65      	ldr	r2, [pc, #404]	@ (8002c1c <HAL_DMA_IRQHandler+0x1f4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xaa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a63      	ldr	r2, [pc, #396]	@ (8002c20 <HAL_DMA_IRQHandler+0x1f8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01a      	beq.n	8002acc <HAL_DMA_IRQHandler+0xa4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a62      	ldr	r2, [pc, #392]	@ (8002c24 <HAL_DMA_IRQHandler+0x1fc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d012      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x9e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a60      	ldr	r2, [pc, #384]	@ (8002c28 <HAL_DMA_IRQHandler+0x200>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x98>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a5f      	ldr	r2, [pc, #380]	@ (8002c2c <HAL_DMA_IRQHandler+0x204>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d102      	bne.n	8002aba <HAL_DMA_IRQHandler+0x92>
 8002ab4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ab8:	e00e      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002aba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002abe:	e00b      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002ac0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ac4:	e008      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002ac6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aca:	e005      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ad0:	e002      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002ad2:	2340      	movs	r3, #64	@ 0x40
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_IRQHandler+0xb0>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	4a55      	ldr	r2, [pc, #340]	@ (8002c30 <HAL_DMA_IRQHandler+0x208>)
 8002ada:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8094 	beq.w	8002c0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002aee:	e08e      	b.n	8002c0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2202      	movs	r2, #2
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d056      	beq.n	8002bae <HAL_DMA_IRQHandler+0x186>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d051      	beq.n	8002bae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020a 	bic.w	r2, r2, #10
 8002b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a38      	ldr	r2, [pc, #224]	@ (8002c18 <HAL_DMA_IRQHandler+0x1f0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d029      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x166>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a37      	ldr	r2, [pc, #220]	@ (8002c1c <HAL_DMA_IRQHandler+0x1f4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x162>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a35      	ldr	r2, [pc, #212]	@ (8002c20 <HAL_DMA_IRQHandler+0x1f8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x15c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a34      	ldr	r2, [pc, #208]	@ (8002c24 <HAL_DMA_IRQHandler+0x1fc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d012      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x156>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a32      	ldr	r2, [pc, #200]	@ (8002c28 <HAL_DMA_IRQHandler+0x200>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00a      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x150>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a31      	ldr	r2, [pc, #196]	@ (8002c2c <HAL_DMA_IRQHandler+0x204>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d102      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x14a>
 8002b6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b70:	e00e      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b76:	e00b      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b7c:	e008      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b82:	e005      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b88:	e002      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e000      	b.n	8002b90 <HAL_DMA_IRQHandler+0x168>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	4a27      	ldr	r2, [pc, #156]	@ (8002c30 <HAL_DMA_IRQHandler+0x208>)
 8002b92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d034      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bac:	e02f      	b.n	8002c0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d028      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x1e8>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d023      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020e 	bic.w	r2, r2, #14
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
    }
  }
  return;
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
}
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40020008 	.word	0x40020008
 8002c1c:	4002001c 	.word	0x4002001c
 8002c20:	40020030 	.word	0x40020030
 8002c24:	40020044 	.word	0x40020044
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	4002006c 	.word	0x4002006c
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c42:	b2db      	uxtb	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d108      	bne.n	8002c8e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c8c:	e007      	b.n	8002c9e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	60da      	str	r2, [r3, #12]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b08b      	sub	sp, #44	@ 0x2c
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	e169      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f040 8158 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a9a      	ldr	r2, [pc, #616]	@ (8002f48 <HAL_GPIO_Init+0x2a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d05e      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a98      	ldr	r2, [pc, #608]	@ (8002f48 <HAL_GPIO_Init+0x2a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d875      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002cea:	4a98      	ldr	r2, [pc, #608]	@ (8002f4c <HAL_GPIO_Init+0x2a4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d058      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002cf0:	4a96      	ldr	r2, [pc, #600]	@ (8002f4c <HAL_GPIO_Init+0x2a4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d86f      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002cf6:	4a96      	ldr	r2, [pc, #600]	@ (8002f50 <HAL_GPIO_Init+0x2a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d052      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002cfc:	4a94      	ldr	r2, [pc, #592]	@ (8002f50 <HAL_GPIO_Init+0x2a8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d869      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d02:	4a94      	ldr	r2, [pc, #592]	@ (8002f54 <HAL_GPIO_Init+0x2ac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04c      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002d08:	4a92      	ldr	r2, [pc, #584]	@ (8002f54 <HAL_GPIO_Init+0x2ac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d863      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d0e:	4a92      	ldr	r2, [pc, #584]	@ (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d046      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002d14:	4a90      	ldr	r2, [pc, #576]	@ (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d85d      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d82a      	bhi.n	8002d74 <HAL_GPIO_Init+0xcc>
 8002d1e:	2b12      	cmp	r3, #18
 8002d20:	d859      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d22:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <HAL_GPIO_Init+0x80>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002da3 	.word	0x08002da3
 8002d2c:	08002d7d 	.word	0x08002d7d
 8002d30:	08002d8f 	.word	0x08002d8f
 8002d34:	08002dd1 	.word	0x08002dd1
 8002d38:	08002dd7 	.word	0x08002dd7
 8002d3c:	08002dd7 	.word	0x08002dd7
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002dd7 	.word	0x08002dd7
 8002d48:	08002dd7 	.word	0x08002dd7
 8002d4c:	08002dd7 	.word	0x08002dd7
 8002d50:	08002dd7 	.word	0x08002dd7
 8002d54:	08002dd7 	.word	0x08002dd7
 8002d58:	08002dd7 	.word	0x08002dd7
 8002d5c:	08002dd7 	.word	0x08002dd7
 8002d60:	08002dd7 	.word	0x08002dd7
 8002d64:	08002dd7 	.word	0x08002dd7
 8002d68:	08002dd7 	.word	0x08002dd7
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	4a79      	ldr	r2, [pc, #484]	@ (8002f5c <HAL_GPIO_Init+0x2b4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d7a:	e02c      	b.n	8002dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	623b      	str	r3, [r7, #32]
          break;
 8002d82:	e029      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	623b      	str	r3, [r7, #32]
          break;
 8002d8c:	e024      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	3308      	adds	r3, #8
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e01f      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e01a      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002daa:	2304      	movs	r3, #4
 8002dac:	623b      	str	r3, [r7, #32]
          break;
 8002dae:	e013      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db8:	2308      	movs	r3, #8
 8002dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	611a      	str	r2, [r3, #16]
          break;
 8002dc2:	e009      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	615a      	str	r2, [r3, #20]
          break;
 8002dce:	e003      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
          break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          break;
 8002dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2bff      	cmp	r3, #255	@ 0xff
 8002ddc:	d801      	bhi.n	8002de2 <HAL_GPIO_Init+0x13a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	e001      	b.n	8002de6 <HAL_GPIO_Init+0x13e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2bff      	cmp	r3, #255	@ 0xff
 8002dec:	d802      	bhi.n	8002df4 <HAL_GPIO_Init+0x14c>
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_Init+0x152>
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	3b08      	subs	r3, #8
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	210f      	movs	r1, #15
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	431a      	orrs	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80b1 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e28:	4b4d      	ldr	r3, [pc, #308]	@ (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b4a      	ldr	r3, [pc, #296]	@ (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e40:	4a48      	ldr	r2, [pc, #288]	@ (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a40      	ldr	r2, [pc, #256]	@ (8002f68 <HAL_GPIO_Init+0x2c0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_GPIO_Init+0x1ec>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f6c <HAL_GPIO_Init+0x2c4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00d      	beq.n	8002e90 <HAL_GPIO_Init+0x1e8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3e      	ldr	r2, [pc, #248]	@ (8002f70 <HAL_GPIO_Init+0x2c8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <HAL_GPIO_Init+0x1e4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f74 <HAL_GPIO_Init+0x2cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_GPIO_Init+0x1e0>
 8002e84:	2303      	movs	r3, #3
 8002e86:	e006      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e94:	2300      	movs	r3, #0
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea6:	492f      	ldr	r1, [pc, #188]	@ (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	492c      	ldr	r1, [pc, #176]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ece:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4928      	ldr	r1, [pc, #160]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee8:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4922      	ldr	r1, [pc, #136]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	491e      	ldr	r1, [pc, #120]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d006      	beq.n	8002f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4918      	ldr	r1, [pc, #96]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4914      	ldr	r1, [pc, #80]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d021      	beq.n	8002f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f38:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	490e      	ldr	r1, [pc, #56]	@ (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e021      	b.n	8002f8a <HAL_GPIO_Init+0x2e2>
 8002f46:	bf00      	nop
 8002f48:	10320000 	.word	0x10320000
 8002f4c:	10310000 	.word	0x10310000
 8002f50:	10220000 	.word	0x10220000
 8002f54:	10210000 	.word	0x10210000
 8002f58:	10120000 	.word	0x10120000
 8002f5c:	10110000 	.word	0x10110000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010800 	.word	0x40010800
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	40011000 	.word	0x40011000
 8002f74:	40011400 	.word	0x40011400
 8002f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4909      	ldr	r1, [pc, #36]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f47f ae8e 	bne.w	8002cbc <HAL_GPIO_Init+0x14>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	372c      	adds	r7, #44	@ 0x2c
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40010400 	.word	0x40010400

08002fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc0:	787b      	ldrb	r3, [r7, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e12b      	b.n	800324a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fcbc 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003044:	f005 f90c 	bl	8008260 <HAL_RCC_GetPCLK1Freq>
 8003048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a81      	ldr	r2, [pc, #516]	@ (8003254 <HAL_I2C_Init+0x274>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d807      	bhi.n	8003064 <HAL_I2C_Init+0x84>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a80      	ldr	r2, [pc, #512]	@ (8003258 <HAL_I2C_Init+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e006      	b.n	8003072 <HAL_I2C_Init+0x92>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a7d      	ldr	r2, [pc, #500]	@ (800325c <HAL_I2C_Init+0x27c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e7      	b.n	800324a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a78      	ldr	r2, [pc, #480]	@ (8003260 <HAL_I2C_Init+0x280>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9b      	lsrs	r3, r3, #18
 8003084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003254 <HAL_I2C_Init+0x274>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d802      	bhi.n	80030b4 <HAL_I2C_Init+0xd4>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	e009      	b.n	80030c8 <HAL_I2C_Init+0xe8>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	4a69      	ldr	r2, [pc, #420]	@ (8003264 <HAL_I2C_Init+0x284>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	3301      	adds	r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	495c      	ldr	r1, [pc, #368]	@ (8003254 <HAL_I2C_Init+0x274>)
 80030e4:	428b      	cmp	r3, r1
 80030e6:	d819      	bhi.n	800311c <HAL_I2C_Init+0x13c>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e59      	subs	r1, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030fc:	400b      	ands	r3, r1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_I2C_Init+0x138>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1e59      	subs	r1, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	e051      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 8003118:	2304      	movs	r3, #4
 800311a:	e04f      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d111      	bne.n	8003148 <HAL_I2C_Init+0x168>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e012      	b.n	800316e <HAL_I2C_Init+0x18e>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	0099      	lsls	r1, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Init+0x196>
 8003172:	2301      	movs	r3, #1
 8003174:	e022      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <HAL_I2C_Init+0x1bc>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e58      	subs	r0, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	440b      	add	r3, r1
 800318c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Init+0x1dc>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e58      	subs	r0, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	0099      	lsls	r1, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	6809      	ldr	r1, [r1, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6911      	ldr	r1, [r2, #16]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	000186a0 	.word	0x000186a0
 8003258:	001e847f 	.word	0x001e847f
 800325c:	003d08ff 	.word	0x003d08ff
 8003260:	431bde83 	.word	0x431bde83
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	2b80      	cmp	r3, #128	@ 0x80
 800327c:	d103      	bne.n	8003286 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	461a      	mov	r2, r3
 800329c:	460b      	mov	r3, r1
 800329e:	817b      	strh	r3, [r7, #10]
 80032a0:	4613      	mov	r3, r2
 80032a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7fe fdb4 	bl	8001e10 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	f040 80e0 	bne.w	8003478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2319      	movs	r3, #25
 80032be:	2201      	movs	r2, #1
 80032c0:	4970      	ldr	r1, [pc, #448]	@ (8003484 <HAL_I2C_Master_Transmit+0x1f4>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f002 fc7e 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0d3      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_I2C_Master_Transmit+0x50>
 80032dc:	2302      	movs	r3, #2
 80032de:	e0cc      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d007      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2221      	movs	r2, #33	@ 0x21
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2210      	movs	r2, #16
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	893a      	ldrh	r2, [r7, #8]
 8003336:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a50      	ldr	r2, [pc, #320]	@ (8003488 <HAL_I2C_Master_Transmit+0x1f8>)
 8003346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003348:	8979      	ldrh	r1, [r7, #10]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f002 f87a 	bl	8005448 <I2C_MasterRequestWrite>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e08d      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003374:	e066      	b.n	8003444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f002 fd3c 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2b04      	cmp	r3, #4
 800338c:	d107      	bne.n	800339e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06b      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d11b      	bne.n	8003418 <HAL_I2C_Master_Transmit+0x188>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	6a39      	ldr	r1, [r7, #32]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f002 fd33 	bl	8005e88 <I2C_WaitOnBTFFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	2b04      	cmp	r3, #4
 800342e:	d107      	bne.n	8003440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01a      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d194      	bne.n	8003376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	00100002 	.word	0x00100002
 8003488:	ffff0000 	.word	0xffff0000

0800348c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	817b      	strh	r3, [r7, #10]
 800349e:	460b      	mov	r3, r1
 80034a0:	813b      	strh	r3, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a6:	f7fe fcb3 	bl	8001e10 <HAL_GetTick>
 80034aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	f040 80d9 	bne.w	800366c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2319      	movs	r3, #25
 80034c0:	2201      	movs	r2, #1
 80034c2:	496d      	ldr	r1, [pc, #436]	@ (8003678 <HAL_I2C_Mem_Write+0x1ec>)
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f002 fb7d 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0cc      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x56>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0c5      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d007      	beq.n	8003508 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2221      	movs	r2, #33	@ 0x21
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	@ 0x40
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <HAL_I2C_Mem_Write+0x1f0>)
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800354a:	88f8      	ldrh	r0, [r7, #6]
 800354c:	893a      	ldrh	r2, [r7, #8]
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	4603      	mov	r3, r0
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f001 fff6 	bl	800554c <I2C_RequestMemoryWrite>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d052      	beq.n	800360c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e081      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f002 fc42 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b04      	cmp	r3, #4
 8003580:	d107      	bne.n	8003592 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e06b      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d11b      	bne.n	800360c <HAL_I2C_Mem_Write+0x180>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d017      	beq.n	800360c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1aa      	bne.n	800356a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f002 fc35 	bl	8005e88 <I2C_WaitOnBTFFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e016      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	00100002 	.word	0x00100002
 800367c:	ffff0000 	.word	0xffff0000

08003680 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	817b      	strh	r3, [r7, #10]
 8003692:	460b      	mov	r3, r1
 8003694:	813b      	strh	r3, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7fe fbb7 	bl	8001e10 <HAL_GetTick>
 80036a2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 812e 	bne.w	800390e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80036b2:	4b99      	ldr	r3, [pc, #612]	@ (8003918 <HAL_I2C_Mem_Write_DMA+0x298>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	08db      	lsrs	r3, r3, #3
 80036b8:	4a98      	ldr	r2, [pc, #608]	@ (800391c <HAL_I2C_Mem_Write_DMA+0x29c>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0a1a      	lsrs	r2, r3, #8
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009a      	lsls	r2, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d112      	bne.n	80036fe <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
 80036fc:	e108      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d0df      	beq.n	80036cc <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_I2C_Mem_Write_DMA+0x9a>
 8003716:	2302      	movs	r3, #2
 8003718:	e0fa      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d007      	beq.n	8003740 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2221      	movs	r2, #33	@ 0x21
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a68      	ldr	r2, [pc, #416]	@ (8003920 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8003780:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003782:	897a      	ldrh	r2, [r7, #10]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a1 	beq.w	80038e6 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d022      	beq.n	80037f2 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003924 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	2200      	movs	r2, #0
 80037c2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	2200      	movs	r2, #0
 80037ca:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	4619      	mov	r1, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3310      	adds	r3, #16
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e2:	f7ff f849 	bl	8002878 <HAL_DMA_Start_IT>
 80037e6:	4603      	mov	r3, r0
 80037e8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80037ea:	7efb      	ldrb	r3, [r7, #27]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d166      	bne.n	80038be <HAL_I2C_Mem_Write_DMA+0x23e>
 80037f0:	e013      	b.n	800381a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07a      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800381a:	88f8      	ldrh	r0, [r7, #6]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2323      	movs	r3, #35	@ 0x23
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f001 fe8e 	bl	800554c <I2C_RequestMemoryWrite>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d022      	beq.n	800387c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f87c 	bl	8002938 <HAL_DMA_Abort_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e049      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e028      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f043 0210 	orr.w	r2, r3, #16
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e014      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000000c 	.word	0x2000000c
 800391c:	14f8b589 	.word	0x14f8b589
 8003920:	ffff0000 	.word	0xffff0000
 8003924:	08005849 	.word	0x08005849
 8003928:	08005a07 	.word	0x08005a07

0800392c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7fe fa63 	bl	8001e10 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 8168 	bne.w	8003c2e <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800395e:	4b98      	ldr	r3, [pc, #608]	@ (8003bc0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	4a97      	ldr	r2, [pc, #604]	@ (8003bc4 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0a1a      	lsrs	r2, r3, #8
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3b01      	subs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d112      	bne.n	80039aa <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
 80039a8:	e142      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d0df      	beq.n	8003978 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e134      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d007      	beq.n	80039ec <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2222      	movs	r2, #34	@ 0x22
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2240      	movs	r2, #64	@ 0x40
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a67      	ldr	r2, [pc, #412]	@ (8003bc8 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a2e:	897a      	ldrh	r2, [r7, #10]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003a34:	893a      	ldrh	r2, [r7, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80c2 	beq.w	8003bd4 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d024      	beq.n	8003aa2 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5c:	4a5b      	ldr	r2, [pc, #364]	@ (8003bcc <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd0 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3310      	adds	r3, #16
 8003a82:	4619      	mov	r1, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	f7fe fef3 	bl	8002878 <HAL_DMA_Start_IT>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d17b      	bne.n	8003b98 <HAL_I2C_Mem_Read_DMA+0x26c>
 8003aa0:	e013      	b.n	8003aca <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0b2      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003aca:	88f8      	ldrh	r0, [r7, #6]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	2323      	movs	r3, #35	@ 0x23
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 fdcc 	bl	8005678 <I2C_RequestMemoryRead>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d023      	beq.n	8003b2e <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff24 	bl	8002938 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e080      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e007      	b.n	8003b58 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b56:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b84:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	e048      	b.n	8003c2a <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e037      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
 8003bc0:	2000000c 	.word	0x2000000c
 8003bc4:	14f8b589 	.word	0x14f8b589
 8003bc8:	ffff0000 	.word	0xffff0000
 8003bcc:	08005849 	.word	0x08005849
 8003bd0:	08005a07 	.word	0x08005a07
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003bd4:	88f8      	ldrh	r0, [r7, #6]
 8003bd6:	893a      	ldrh	r2, [r7, #8]
 8003bd8:	8979      	ldrh	r1, [r7, #10]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2323      	movs	r3, #35	@ 0x23
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4603      	mov	r3, r0
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f001 fd47 	bl	8005678 <I2C_RequestMemoryRead>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e01d      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c18:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7fe f8e2 	bl	8001e10 <HAL_GetTick>
 8003c4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 8111 	bne.w	8003e82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2319      	movs	r3, #25
 8003c66:	2201      	movs	r2, #1
 8003c68:	4988      	ldr	r1, [pc, #544]	@ (8003e8c <HAL_I2C_IsDeviceReady+0x254>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f001 ffaa 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
 8003c78:	e104      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_I2C_IsDeviceReady+0x50>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0fd      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d007      	beq.n	8003cae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2224      	movs	r2, #36	@ 0x24
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a70      	ldr	r2, [pc, #448]	@ (8003e90 <HAL_I2C_IsDeviceReady+0x258>)
 8003cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 ff68 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d08:	d103      	bne.n	8003d12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b6      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fe f873 	bl	8001e10 <HAL_GetTick>
 8003d2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d5a:	e025      	b.n	8003da8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe f858 	bl	8001e10 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <HAL_I2C_IsDeviceReady+0x13a>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	22a0      	movs	r2, #160	@ 0xa0
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003db2:	d005      	beq.n	8003dc0 <HAL_I2C_IsDeviceReady+0x188>
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_I2C_IsDeviceReady+0x188>
 8003dba:	7dbb      	ldrb	r3, [r7, #22]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0cd      	beq.n	8003d5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d129      	bne.n	8003e2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2319      	movs	r3, #25
 8003e02:	2201      	movs	r2, #1
 8003e04:	4921      	ldr	r1, [pc, #132]	@ (8003e8c <HAL_I2C_IsDeviceReady+0x254>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f001 fedc 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e036      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e02c      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	490f      	ldr	r1, [pc, #60]	@ (8003e8c <HAL_I2C_IsDeviceReady+0x254>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f001 feb8 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e012      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	3301      	adds	r3, #1
 8003e62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f4ff af32 	bcc.w	8003cd2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	00100002 	.word	0x00100002
 8003e90:	ffff0000 	.word	0xffff0000

08003e94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d003      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x38>
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	f040 80c1 	bne.w	800404e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10d      	bne.n	8003f02 <HAL_I2C_EV_IRQHandler+0x6e>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003eec:	d003      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x62>
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_EV_IRQHandler+0x66>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_I2C_EV_IRQHandler+0x68>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f000 8132 	beq.w	8004166 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00c      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x92>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	0a5b      	lsrs	r3, r3, #9
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f002 f85d 	bl	8005fd8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fce1 	bl	80048e6 <I2C_Master_SB>
 8003f24:	e092      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	08db      	lsrs	r3, r3, #3
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_I2C_EV_IRQHandler+0xb2>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fd56 	bl	80049f0 <I2C_Master_ADD10>
 8003f44:	e082      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0xd2>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	0a5b      	lsrs	r3, r3, #9
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fd6f 	bl	8004a42 <I2C_Master_ADDR>
 8003f64:	e072      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03b      	beq.n	8003fea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f80:	f000 80f3 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	09db      	lsrs	r3, r3, #7
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00f      	beq.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	0a9b      	lsrs	r3, r3, #10
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f939 	bl	8004220 <I2C_MasterTransmit_TXE>
 8003fae:	e04d      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80d6 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	0a5b      	lsrs	r3, r3, #9
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80cf 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fcc:	7bbb      	ldrb	r3, [r7, #14]
 8003fce:	2b21      	cmp	r3, #33	@ 0x21
 8003fd0:	d103      	bne.n	8003fda <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9c0 	bl	8004358 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd8:	e0c7      	b.n	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	f040 80c4 	bne.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa2e 	bl	8004444 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe8:	e0bf      	b.n	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff8:	f000 80b7 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00f      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0x194>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	0a9b      	lsrs	r3, r3, #10
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0x194>
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 faa7 	bl	8004574 <I2C_MasterReceive_RXNE>
 8004026:	e011      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809a 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	0a5b      	lsrs	r3, r3, #9
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8093 	beq.w	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fb5d 	bl	8004704 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404a:	e08e      	b.n	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
 800404c:	e08d      	b.n	800416a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e007      	b.n	8004070 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d012      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	0a5b      	lsrs	r3, r3, #9
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 ff28 	bl	8004ef0 <I2C_Slave_ADDR>
 80040a0:	e066      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 ff62 	bl	8004f84 <I2C_Slave_STOPF>
 80040c0:	e056      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040c2:	7bbb      	ldrb	r3, [r7, #14]
 80040c4:	2b21      	cmp	r3, #33	@ 0x21
 80040c6:	d002      	beq.n	80040ce <HAL_I2C_EV_IRQHandler+0x23a>
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	2b29      	cmp	r3, #41	@ 0x29
 80040cc:	d125      	bne.n	800411a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	09db      	lsrs	r3, r3, #7
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00f      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x266>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	0a9b      	lsrs	r3, r3, #10
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x266>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fe40 	bl	8004d78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040f8:	e039      	b.n	800416e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d033      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x2da>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	0a5b      	lsrs	r3, r3, #9
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02d      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fe6d 	bl	8004df2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004118:	e029      	b.n	800416e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00f      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0a9b      	lsrs	r3, r3, #10
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	089b      	lsrs	r3, r3, #2
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fe77 	bl	8004e32 <I2C_SlaveReceive_RXNE>
 8004144:	e014      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00e      	beq.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0a5b      	lsrs	r3, r3, #9
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fea5 	bl	8004eae <I2C_SlaveReceive_BTF>
 8004164:	e004      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800416e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	4613      	mov	r3, r2
 80041cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004236:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d150      	bne.n	80042e8 <I2C_MasterTransmit_TXE+0xc8>
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b21      	cmp	r3, #33	@ 0x21
 800424a:	d14d      	bne.n	80042e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d01d      	beq.n	800428e <I2C_MasterTransmit_TXE+0x6e>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b20      	cmp	r3, #32
 8004256:	d01a      	beq.n	800428e <I2C_MasterTransmit_TXE+0x6e>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425e:	d016      	beq.n	800428e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800426e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2211      	movs	r2, #17
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff75 	bl	8004176 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800428c:	e060      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800429c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d107      	bne.n	80042d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fd fcb3 	bl	8001c3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042d6:	e03b      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ff48 	bl	8004176 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042e6:	e033      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b21      	cmp	r3, #33	@ 0x21
 80042ec:	d005      	beq.n	80042fa <I2C_MasterTransmit_TXE+0xda>
 80042ee:	7bbb      	ldrb	r3, [r7, #14]
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d12d      	bne.n	8004350 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b22      	cmp	r3, #34	@ 0x22
 80042f8:	d12a      	bne.n	8004350 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004314:	e01c      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d103      	bne.n	800432a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f88e 	bl	8004444 <I2C_MemoryTransmit_TXE_BTF>
}
 8004328:	e012      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800434e:	e7ff      	b.n	8004350 <I2C_MasterTransmit_TXE+0x130>
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b21      	cmp	r3, #33	@ 0x21
 8004370:	d164      	bne.n	800443c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80043a0:	e04c      	b.n	800443c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d01d      	beq.n	80043e4 <I2C_MasterTransmit_BTF+0x8c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d01a      	beq.n	80043e4 <I2C_MasterTransmit_BTF+0x8c>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b4:	d016      	beq.n	80043e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2211      	movs	r2, #17
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff feca 	bl	8004176 <HAL_I2C_MasterTxCpltCallback>
}
 80043e2:	e02b      	b.n	800443c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004402:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b40      	cmp	r3, #64	@ 0x40
 800441c:	d107      	bne.n	800442e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fc08 	bl	8001c3c <HAL_I2C_MemTxCpltCallback>
}
 800442c:	e006      	b.n	800443c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fe9d 	bl	8004176 <HAL_I2C_MasterTxCpltCallback>
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11d      	bne.n	8004498 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10b      	bne.n	800447c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004468:	b2da      	uxtb	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004474:	1c9a      	adds	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800447a:	e077      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	b29b      	uxth	r3, r3
 8004482:	121b      	asrs	r3, r3, #8
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004496:	e069      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10b      	bne.n	80044b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044b6:	e059      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d152      	bne.n	8004566 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b22      	cmp	r3, #34	@ 0x22
 80044c4:	d10d      	bne.n	80044e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044e0:	e044      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b21      	cmp	r3, #33	@ 0x21
 80044f0:	d112      	bne.n	8004518 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004516:	e029      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d124      	bne.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b21      	cmp	r3, #33	@ 0x21
 8004526:	d121      	bne.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004536:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004546:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd fb6c 	bl	8001c3c <HAL_I2C_MemTxCpltCallback>
}
 8004564:	e002      	b.n	800456c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe fe7e 	bl	8003268 <I2C_Flush_DR>
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b22      	cmp	r3, #34	@ 0x22
 8004586:	f040 80b9 	bne.w	80046fc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d921      	bls.n	80045e2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	f040 8096 	bne.w	80046fc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045de:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80045e0:	e08c      	b.n	80046fc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d07f      	beq.n	80046ea <I2C_MasterReceive_RXNE+0x176>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d002      	beq.n	80045f6 <I2C_MasterReceive_RXNE+0x82>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d179      	bne.n	80046ea <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f001 fc8e 	bl	8005f18 <I2C_WaitOnSTOPRequestThroughIT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d14c      	bne.n	800469c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004610:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004620:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d10a      	bne.n	8004672 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fdbd 	bl	80041ea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004670:	e044      	b.n	80046fc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d002      	beq.n	8004686 <I2C_MasterReceive_RXNE+0x112>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b20      	cmp	r3, #32
 8004684:	d103      	bne.n	800468e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
 800468c:	e002      	b.n	8004694 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2212      	movs	r2, #18
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fd77 	bl	8004188 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800469a:	e02f      	b.n	80046fc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fd8a 	bl	80041fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046e8:	e008      	b.n	80046fc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f8:	605a      	str	r2, [r3, #4]
}
 80046fa:	e7ff      	b.n	80046fc <I2C_MasterReceive_RXNE+0x188>
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004752:	e0c4      	b.n	80048de <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b03      	cmp	r3, #3
 800475c:	d129      	bne.n	80047b2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d00a      	beq.n	800478a <I2C_MasterReceive_BTF+0x86>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d007      	beq.n	800478a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004788:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047b0:	e095      	b.n	80048de <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d17d      	bne.n	80048b8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <I2C_MasterReceive_BTF+0xc4>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d108      	bne.n	80047da <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e016      	b.n	8004808 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d002      	beq.n	80047e6 <I2C_MasterReceive_BTF+0xe2>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d108      	bne.n	80047f8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e007      	b.n	8004808 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004806:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004862:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d10a      	bne.n	800488e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fcaf 	bl	80041ea <HAL_I2C_MemRxCpltCallback>
}
 800488c:	e027      	b.n	80048de <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d002      	beq.n	80048a2 <I2C_MasterReceive_BTF+0x19e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d103      	bne.n	80048aa <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a8:	e002      	b.n	80048b0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2212      	movs	r2, #18
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fc69 	bl	8004188 <HAL_I2C_MasterRxCpltCallback>
}
 80048b6:	e012      	b.n	80048de <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d117      	bne.n	800492a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004912:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004914:	e067      	b.n	80049e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
}
 8004928:	e05d      	b.n	80049e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004932:	d133      	bne.n	800499c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b21      	cmp	r3, #33	@ 0x21
 800493e:	d109      	bne.n	8004954 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e008      	b.n	8004966 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <I2C_Master_SB+0x92>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d032      	beq.n	80049e6 <I2C_Master_SB+0x100>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02d      	beq.n	80049e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004998:	605a      	str	r2, [r3, #4]
}
 800499a:	e024      	b.n	80049e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	11db      	asrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f063 030f 	orn	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
}
 80049c0:	e011      	b.n	80049e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	11db      	asrs	r3, r3, #7
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 0306 	and.w	r3, r3, #6
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f063 030e 	orn	r3, r3, #14
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <I2C_Master_ADD10+0x26>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <I2C_Master_ADD10+0x48>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a36:	605a      	str	r2, [r3, #4]
  }
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b091      	sub	sp, #68	@ 0x44
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b22      	cmp	r3, #34	@ 0x22
 8004a6a:	f040 8174 	bne.w	8004d56 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
 8004a76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d10b      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	e16b      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11d      	bne.n	8004ada <I2C_Master_ADDR+0x98>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004aa6:	d118      	bne.n	8004ada <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004acc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ad8:	e149      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e120      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 808a 	bne.w	8004c2c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b1e:	d137      	bne.n	8004b90 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3e:	d113      	bne.n	8004b68 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	e0f2      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e0de      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d02e      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d02b      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	2b12      	cmp	r3, #18
 8004ba0:	d102      	bne.n	8004ba8 <I2C_Master_ADDR+0x166>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d125      	bne.n	8004bf4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00e      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d00b      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d008      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bda:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	e0ac      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e090      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d158      	bne.n	8004ce8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d021      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d01e      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d01b      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e012      	b.n	8004ca6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d14b      	bne.n	8004d4e <I2C_Master_ADDR+0x30c>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cbc:	d00b      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d008      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d005      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d002      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d13b      	bne.n	8004d4e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e032      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cf6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d06:	d117      	bne.n	8004d38 <I2C_Master_ADDR+0x2f6>
 8004d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d0e:	d00b      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d008      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d005      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d002      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d107      	bne.n	8004d38 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d54:	e00b      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
}
 8004d6c:	e7ff      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
 8004d6e:	bf00      	nop
 8004d70:	3744      	adds	r7, #68	@ 0x44
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02b      	beq.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d114      	bne.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b29      	cmp	r3, #41	@ 0x29
 8004dc4:	d111      	bne.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2221      	movs	r2, #33	@ 0x21
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2228      	movs	r2, #40	@ 0x28
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff f9d8 	bl	800419a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02c      	beq.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d114      	bne.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e80:	d111      	bne.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2222      	movs	r2, #34	@ 0x22
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2228      	movs	r2, #40	@ 0x28
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff f983 	bl	80041ac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f0a:	2b28      	cmp	r3, #40	@ 0x28
 8004f0c:	d127      	bne.n	8004f5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	09db      	lsrs	r3, r3, #7
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	81bb      	strh	r3, [r7, #12]
 8004f40:	e002      	b.n	8004f48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f50:	89ba      	ldrh	r2, [r7, #12]
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff f931 	bl	80041be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f5c:	e00e      	b.n	8004f7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe0:	d172      	bne.n	80050c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b22      	cmp	r3, #34	@ 0x22
 8004fe6:	d002      	beq.n	8004fee <I2C_Slave_STOPF+0x6a>
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fec:	d135      	bne.n	800505a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005020:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd fe04 	bl	8002c34 <HAL_DMA_GetState>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d049      	beq.n	80050c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	4a69      	ldr	r2, [pc, #420]	@ (80051dc <I2C_Slave_STOPF+0x258>)
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fc7a 	bl	8002938 <HAL_DMA_Abort_IT>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03d      	beq.n	80050c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005058:	e035      	b.n	80050c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b29a      	uxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd fdce 	bl	8002c34 <HAL_DMA_GetState>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d014      	beq.n	80050c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a2:	4a4e      	ldr	r2, [pc, #312]	@ (80051dc <I2C_Slave_STOPF+0x258>)
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd fc44 	bl	8002938 <HAL_DMA_Abort_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050c0:	4610      	mov	r0, r2
 80050c2:	4798      	blx	r3
 80050c4:	e000      	b.n	80050c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03e      	beq.n	8005150 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d112      	bne.n	8005106 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005110:	2b40      	cmp	r3, #64	@ 0x40
 8005112:	d112      	bne.n	800513a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f843 	bl	80051e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800515e:	e039      	b.n	80051d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b2a      	cmp	r3, #42	@ 0x2a
 8005164:	d109      	bne.n	800517a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2228      	movs	r2, #40	@ 0x28
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff f819 	bl	80041ac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b28      	cmp	r3, #40	@ 0x28
 8005184:	d111      	bne.n	80051aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <I2C_Slave_STOPF+0x25c>)
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff f818 	bl	80041d8 <HAL_I2C_ListenCpltCallback>
}
 80051a8:	e014      	b.n	80051d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	2b22      	cmp	r3, #34	@ 0x22
 80051b0:	d002      	beq.n	80051b8 <I2C_Slave_STOPF+0x234>
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b22      	cmp	r3, #34	@ 0x22
 80051b6:	d10d      	bne.n	80051d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fe ffec 	bl	80041ac <HAL_I2C_SlaveRxCpltCallback>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	08005a75 	.word	0x08005a75
 80051e0:	ffff0000 	.word	0xffff0000

080051e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051fc:	7bbb      	ldrb	r3, [r7, #14]
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d002      	beq.n	8005208 <I2C_ITError+0x24>
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d10a      	bne.n	800521e <I2C_ITError+0x3a>
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b22      	cmp	r3, #34	@ 0x22
 800520c:	d107      	bne.n	800521e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800521c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005224:	2b28      	cmp	r3, #40	@ 0x28
 8005226:	d107      	bne.n	8005238 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2228      	movs	r2, #40	@ 0x28
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005236:	e015      	b.n	8005264 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005246:	d00a      	beq.n	800525e <I2C_ITError+0x7a>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b60      	cmp	r3, #96	@ 0x60
 800524c:	d007      	beq.n	800525e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005272:	d162      	bne.n	800533a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005282:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005288:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d020      	beq.n	80052d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	4a6a      	ldr	r2, [pc, #424]	@ (8005440 <I2C_ITError+0x25c>)
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fb4a 	bl	8002938 <HAL_DMA_Abort_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8089 	beq.w	80053be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052ce:	4610      	mov	r0, r2
 80052d0:	4798      	blx	r3
 80052d2:	e074      	b.n	80053be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	4a59      	ldr	r2, [pc, #356]	@ (8005440 <I2C_ITError+0x25c>)
 80052da:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd fb29 	bl	8002938 <HAL_DMA_Abort_IT>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d068      	beq.n	80053be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	d10b      	bne.n	8005312 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005334:	4610      	mov	r0, r2
 8005336:	4798      	blx	r3
 8005338:	e041      	b.n	80053be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b60      	cmp	r3, #96	@ 0x60
 8005344:	d125      	bne.n	8005392 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535e:	2b40      	cmp	r3, #64	@ 0x40
 8005360:	d10b      	bne.n	800537a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fe ff3f 	bl	800420e <HAL_I2C_AbortCpltCallback>
 8005390:	e015      	b.n	80053be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	d10b      	bne.n	80053b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7fe ff1f 	bl	80041fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005402:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d113      	bne.n	8005438 <I2C_ITError+0x254>
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b28      	cmp	r3, #40	@ 0x28
 8005414:	d110      	bne.n	8005438 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a0a      	ldr	r2, [pc, #40]	@ (8005444 <I2C_ITError+0x260>)
 800541a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fe fed0 	bl	80041d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	08005a75 	.word	0x08005a75
 8005444:	ffff0000 	.word	0xffff0000

08005448 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d006      	beq.n	8005472 <I2C_MasterRequestWrite+0x2a>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d003      	beq.n	8005472 <I2C_MasterRequestWrite+0x2a>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005470:	d108      	bne.n	8005484 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e00b      	b.n	800549c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	2b12      	cmp	r3, #18
 800548a:	d107      	bne.n	800549c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fb8b 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054c2:	d103      	bne.n	80054cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e035      	b.n	800553c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d8:	d108      	bne.n	80054ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054e8:	611a      	str	r2, [r3, #16]
 80054ea:	e01b      	b.n	8005524 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054ec:	897b      	ldrh	r3, [r7, #10]
 80054ee:	11db      	asrs	r3, r3, #7
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f063 030f 	orn	r3, r3, #15
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	490e      	ldr	r1, [pc, #56]	@ (8005544 <I2C_MasterRequestWrite+0xfc>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fbd4 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e010      	b.n	800553c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800551a:	897b      	ldrh	r3, [r7, #10]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4907      	ldr	r1, [pc, #28]	@ (8005548 <I2C_MasterRequestWrite+0x100>)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fbc4 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00010008 	.word	0x00010008
 8005548:	00010002 	.word	0x00010002

0800554c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4603      	mov	r3, r0
 800555c:	817b      	strh	r3, [r7, #10]
 800555e:	460b      	mov	r3, r1
 8005560:	813b      	strh	r3, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	2200      	movs	r2, #0
 800557e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fb1e 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559c:	d103      	bne.n	80055a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e05f      	b.n	800566a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055aa:	897b      	ldrh	r3, [r7, #10]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	492d      	ldr	r1, [pc, #180]	@ (8005674 <I2C_RequestMemoryWrite+0x128>)
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fb79 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e04c      	b.n	800566a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e8:	6a39      	ldr	r1, [r7, #32]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fc04 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d107      	bne.n	800560e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02b      	b.n	800566a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005618:	893b      	ldrh	r3, [r7, #8]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	611a      	str	r2, [r3, #16]
 8005622:	e021      	b.n	8005668 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005624:	893b      	ldrh	r3, [r7, #8]
 8005626:	0a1b      	lsrs	r3, r3, #8
 8005628:	b29b      	uxth	r3, r3
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fbde 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b04      	cmp	r3, #4
 8005648:	d107      	bne.n	800565a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005658:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e005      	b.n	800566a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800565e:	893b      	ldrh	r3, [r7, #8]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	00010002 	.word	0x00010002

08005678 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	4603      	mov	r3, r0
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	460b      	mov	r3, r1
 800568c:	813b      	strh	r3, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fa80 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d8:	d103      	bne.n	80056e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0aa      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	4952      	ldr	r1, [pc, #328]	@ (8005844 <I2C_RequestMemoryRead+0x1cc>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fadb 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e097      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005724:	6a39      	ldr	r1, [r7, #32]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fb66 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	2b04      	cmp	r3, #4
 8005738:	d107      	bne.n	800574a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e076      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	e021      	b.n	80057a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005760:	893b      	ldrh	r3, [r7, #8]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b29b      	uxth	r3, r3
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	6a39      	ldr	r1, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fb40 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	2b04      	cmp	r3, #4
 8005784:	d107      	bne.n	8005796 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e050      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a6:	6a39      	ldr	r1, [r7, #32]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fb25 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d107      	bne.n	80057cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e035      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f9e9 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005806:	d103      	bne.n	8005810 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800580e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e013      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005814:	897b      	ldrh	r3, [r7, #10]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	4906      	ldr	r1, [pc, #24]	@ (8005844 <I2C_RequestMemoryRead+0x1cc>)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa44 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	00010002 	.word	0x00010002

08005848 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005864:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800587a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005888:	2200      	movs	r2, #0
 800588a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	2200      	movs	r2, #0
 800589a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80058a2:	2b21      	cmp	r3, #33	@ 0x21
 80058a4:	d007      	beq.n	80058b6 <I2C_DMAXferCplt+0x6e>
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80058ac:	2b22      	cmp	r3, #34	@ 0x22
 80058ae:	d131      	bne.n	8005914 <I2C_DMAXferCplt+0xcc>
 80058b0:	7cbb      	ldrb	r3, [r7, #18]
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d12e      	bne.n	8005914 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	2b29      	cmp	r3, #41	@ 0x29
 80058d0:	d10a      	bne.n	80058e8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2221      	movs	r2, #33	@ 0x21
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2228      	movs	r2, #40	@ 0x28
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f7fe fc5a 	bl	800419a <HAL_I2C_SlaveTxCpltCallback>
 80058e6:	e00c      	b.n	8005902 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ec:	d109      	bne.n	8005902 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2222      	movs	r2, #34	@ 0x22
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2228      	movs	r2, #40	@ 0x28
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7fe fc55 	bl	80041ac <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005910:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005912:	e074      	b.n	80059fe <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d06e      	beq.n	80059fe <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005938:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005948:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005950:	d009      	beq.n	8005966 <I2C_DMAXferCplt+0x11e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d006      	beq.n	8005966 <I2C_DMAXferCplt+0x11e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800595e:	d002      	beq.n	8005966 <I2C_DMAXferCplt+0x11e>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b20      	cmp	r3, #32
 8005964:	d107      	bne.n	8005976 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005974:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005984:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005994:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80059a4:	6978      	ldr	r0, [r7, #20]
 80059a6:	f7fe fc29 	bl	80041fc <HAL_I2C_ErrorCallback>
}
 80059aa:	e028      	b.n	80059fe <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b40      	cmp	r3, #64	@ 0x40
 80059be:	d10a      	bne.n	80059d6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7fe fc0b 	bl	80041ea <HAL_I2C_MemRxCpltCallback>
}
 80059d4:	e013      	b.n	80059fe <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d002      	beq.n	80059ea <I2C_DMAXferCplt+0x1a2>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d103      	bne.n	80059f2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80059f0:	e002      	b.n	80059f8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2212      	movs	r2, #18
 80059f6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80059f8:	6978      	ldr	r0, [r7, #20]
 80059fa:	f7fe fbc5 	bl	8004188 <HAL_I2C_MasterRxCpltCallback>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a20:	2200      	movs	r2, #0
 8005a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	2200      	movs	r2, #0
 8005a32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a42:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f043 0210 	orr.w	r2, r3, #16
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7fe fbc8 	bl	80041fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005bbc <I2C_DMAAbort+0x148>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	08db      	lsrs	r3, r3, #3
 8005a94:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <I2C_DMAAbort+0x14c>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	0a1a      	lsrs	r2, r3, #8
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00da      	lsls	r2, r3, #3
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005aba:	e00a      	b.n	8005ad2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad0:	d0ea      	beq.n	8005aa8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	2200      	movs	r2, #0
 8005ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	2200      	movs	r2, #0
 8005af0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	2200      	movs	r2, #0
 8005b16:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	2200      	movs	r2, #0
 8005b26:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b60      	cmp	r3, #96	@ 0x60
 8005b42:	d10e      	bne.n	8005b62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b5a:	6978      	ldr	r0, [r7, #20]
 8005b5c:	f7fe fb57 	bl	800420e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b60:	e027      	b.n	8005bb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b62:	7cfb      	ldrb	r3, [r7, #19]
 8005b64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b68:	2b28      	cmp	r3, #40	@ 0x28
 8005b6a:	d117      	bne.n	8005b9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2228      	movs	r2, #40	@ 0x28
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b9a:	e007      	b.n	8005bac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f7fe fb25 	bl	80041fc <HAL_I2C_ErrorCallback>
}
 8005bb2:	bf00      	nop
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	14f8b589 	.word	0x14f8b589

08005bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd4:	e048      	b.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d044      	beq.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fc f917 	bl	8001e10 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d139      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d10d      	bne.n	8005c1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	43da      	mvns	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	e00c      	b.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	43da      	mvns	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4013      	ands	r3, r2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d116      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e023      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10d      	bne.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	e00c      	b.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	43da      	mvns	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d093      	beq.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cc6:	e071      	b.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd6:	d123      	bne.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e067      	b.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d041      	beq.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fc f872 	bl	8001e10 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d136      	bne.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10c      	bne.n	8005d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e00b      	b.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	43da      	mvns	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e021      	b.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10c      	bne.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	43da      	mvns	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e00b      	b.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f af6d 	bne.w	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e04:	e034      	b.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f8b8 	bl	8005f7c <I2C_IsAcknowledgeFailed>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e034      	b.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d028      	beq.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fb fff7 	bl	8001e10 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11d      	bne.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3e:	2b80      	cmp	r3, #128	@ 0x80
 8005e40:	d016      	beq.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	f043 0220 	orr.w	r2, r3, #32
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e007      	b.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7a:	2b80      	cmp	r3, #128	@ 0x80
 8005e7c:	d1c3      	bne.n	8005e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e94:	e034      	b.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f870 	bl	8005f7c <I2C_IsAcknowledgeFailed>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e034      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d028      	beq.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fb ffaf 	bl	8001e10 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11d      	bne.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d016      	beq.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d1c3      	bne.n	8005e96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f24:	4b13      	ldr	r3, [pc, #76]	@ (8005f74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	4a13      	ldr	r2, [pc, #76]	@ (8005f78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	0a1a      	lsrs	r2, r3, #8
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e008      	b.n	8005f68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f64:	d0e9      	beq.n	8005f3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	2000000c 	.word	0x2000000c
 8005f78:	14f8b589 	.word	0x14f8b589

08005f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f92:	d11b      	bne.n	8005fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005fe8:	d103      	bne.n	8005ff2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ff0:	e007      	b.n	8006002 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005ffa:	d102      	bne.n	8006002 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2208      	movs	r2, #8
 8006000:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0e8      	b.n	80061f0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f007 f94e 	bl	800d2d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2203      	movs	r2, #3
 800603c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f003 f846 	bl	80090dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800605a:	f003 f81c 	bl	8009096 <USB_CoreInit>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0bf      	b.n	80061f0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f003 f84a 	bl	8009110 <USB_SetCurrentMode>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e0b0      	b.n	80061f0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	e03e      	b.n	8006112 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	440b      	add	r3, r1
 80060a2:	3311      	adds	r3, #17
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	3310      	adds	r3, #16
 80060b8:	7bfa      	ldrb	r2, [r7, #15]
 80060ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3313      	adds	r3, #19
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060d0:	7bfa      	ldrb	r2, [r7, #15]
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	440b      	add	r3, r1
 80060de:	3320      	adds	r3, #32
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3324      	adds	r3, #36	@ 0x24
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	440b      	add	r3, r1
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	3301      	adds	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	791b      	ldrb	r3, [r3, #4]
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	429a      	cmp	r2, r3
 800611a:	d3bb      	bcc.n	8006094 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e044      	b.n	80061ac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006122:	7bfa      	ldrb	r2, [r7, #15]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	440b      	add	r3, r1
 8006130:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	440b      	add	r3, r1
 8006146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800614a:	7bfa      	ldrb	r2, [r7, #15]
 800614c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800614e:	7bfa      	ldrb	r2, [r7, #15]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	440b      	add	r3, r1
 800615c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	440b      	add	r3, r1
 8006172:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	440b      	add	r3, r1
 8006188:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006190:	7bfa      	ldrb	r2, [r7, #15]
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	440b      	add	r3, r1
 800619e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	3301      	adds	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	791b      	ldrb	r3, [r3, #4]
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3b5      	bcc.n	8006122 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c0:	f002 ffb2 	bl	8009128 <USB_DevInit>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e00c      	b.n	80061f0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f005 fa32 	bl	800b652 <USB_DevDisconnect>

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_PCD_Start+0x16>
 800620a:	2302      	movs	r3, #2
 800620c:	e016      	b.n	800623c <HAL_PCD_Start+0x44>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f002 ff48 	bl	80090b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006220:	2101      	movs	r1, #1
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f007 fac9 	bl	800d7ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f005 fa06 	bl	800b63e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f005 fa08 	bl	800b666 <USB_ReadInterrupts>
 8006256:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb1a 	bl	800689c <PCD_EP_ISR_Handler>

    return;
 8006268:	e119      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d013      	beq.n	800629c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800627c:	b29a      	uxth	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	b292      	uxth	r2, r2
 8006288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f007 f89c 	bl	800d3ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f905 	bl	80064a4 <HAL_PCD_SetAddress>

    return;
 800629a:	e100      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80062be:	e0ee      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062dc:	b292      	uxth	r2, r2
 80062de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80062e2:	e0dc      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d027      	beq.n	800633e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0204 	bic.w	r2, r2, #4
 8006300:	b292      	uxth	r2, r2
 8006302:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0208 	bic.w	r2, r2, #8
 8006318:	b292      	uxth	r2, r2
 800631a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f007 f88c 	bl	800d43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006336:	b292      	uxth	r2, r2
 8006338:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800633c:	e0af      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8083 	beq.w	8006450 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e010      	b.n	8006372 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	7ffb      	ldrb	r3, [r7, #31]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	8812      	ldrh	r2, [r2, #0]
 8006360:	b292      	uxth	r2, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	3320      	adds	r3, #32
 8006366:	443b      	add	r3, r7
 8006368:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	3301      	adds	r3, #1
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	7ffb      	ldrb	r3, [r7, #31]
 8006374:	2b07      	cmp	r3, #7
 8006376:	d9eb      	bls.n	8006350 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	b292      	uxth	r2, r2
 800638c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	b292      	uxth	r2, r2
 80063a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80063a8:	bf00      	nop
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f6      	beq.n	80063aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ce:	b292      	uxth	r2, r2
 80063d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e00f      	b.n	80063fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80063da:	7ffb      	ldrb	r3, [r7, #31]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	7ffa      	ldrb	r2, [r7, #31]
 80063e4:	0092      	lsls	r2, r2, #2
 80063e6:	440a      	add	r2, r1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	3320      	adds	r3, #32
 80063ec:	443b      	add	r3, r7
 80063ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80063f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80063f4:	7ffb      	ldrb	r3, [r7, #31]
 80063f6:	3301      	adds	r3, #1
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	7ffb      	ldrb	r3, [r7, #31]
 80063fc:	2b07      	cmp	r3, #7
 80063fe:	d9ec      	bls.n	80063da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	b292      	uxth	r2, r2
 8006414:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800642a:	b292      	uxth	r2, r2
 800642c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0204 	orr.w	r2, r2, #4
 8006442:	b292      	uxth	r2, r2
 8006444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f006 ffdd 	bl	800d408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800644e:	e026      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800646c:	b292      	uxth	r2, r2
 800646e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f006 ff9b 	bl	800d3ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006478:	e011      	b.n	800649e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006496:	b292      	uxth	r2, r2
 8006498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800649c:	bf00      	nop
  }
}
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_PCD_SetAddress+0x1a>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e012      	b.n	80064e4 <HAL_PCD_SetAddress+0x40>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	78fa      	ldrb	r2, [r7, #3]
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f005 f89f 	bl	800b618 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	70fb      	strb	r3, [r7, #3]
 80064fe:	460b      	mov	r3, r1
 8006500:	803b      	strh	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800650a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da0e      	bge.n	8006530 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	f003 0207 	and.w	r2, r3, #7
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	3310      	adds	r3, #16
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	705a      	strb	r2, [r3, #1]
 800652e:	e00e      	b.n	800654e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	f003 0207 	and.w	r2, r3, #7
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800655a:	883a      	ldrh	r2, [r7, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	78ba      	ldrb	r2, [r7, #2]
 8006564:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006566:	78bb      	ldrb	r3, [r7, #2]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d102      	bne.n	8006572 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_PCD_EP_Open+0x94>
 800657c:	2302      	movs	r3, #2
 800657e:	e00e      	b.n	800659e <HAL_PCD_EP_Open+0xb2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	4618      	mov	r0, r3
 8006590:	f002 fde8 	bl	8009164 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800659c:	7afb      	ldrb	r3, [r7, #11]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da0e      	bge.n	80065d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 0207 	and.w	r2, r3, #7
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	3310      	adds	r3, #16
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	705a      	strb	r2, [r3, #1]
 80065d6:	e00e      	b.n	80065f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 0207 	and.w	r2, r3, #7
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_PCD_EP_Close+0x6a>
 800660c:	2302      	movs	r3, #2
 800660e:	e00e      	b.n	800662e <HAL_PCD_EP_Close+0x88>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	4618      	mov	r0, r3
 8006620:	f003 f960 	bl	80098e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	460b      	mov	r3, r1
 8006644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	f003 0207 	and.w	r2, r3, #7
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	b2da      	uxtb	r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	4618      	mov	r0, r3
 800668a:	f003 fb17 	bl	8009cbc <USB_EPStartXfer>

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 0207 	and.w	r2, r3, #7
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80066ba:	681b      	ldr	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	460b      	mov	r3, r1
 80066d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	f003 0207 	and.w	r2, r3, #7
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	3310      	adds	r3, #16
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2201      	movs	r2, #1
 8006710:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b2da      	uxtb	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6979      	ldr	r1, [r7, #20]
 8006724:	4618      	mov	r0, r3
 8006726:	f003 fac9 	bl	8009cbc <USB_EPStartXfer>

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	7912      	ldrb	r2, [r2, #4]
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e04c      	b.n	80067ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006756:	2b00      	cmp	r3, #0
 8006758:	da0e      	bge.n	8006778 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 0207 	and.w	r2, r3, #7
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	3310      	adds	r3, #16
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	705a      	strb	r2, [r3, #1]
 8006776:	e00c      	b.n	8006792 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_PCD_EP_SetStall+0x7e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e01c      	b.n	80067ec <HAL_PCD_EP_SetStall+0xb8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f004 fe2c 	bl	800b41e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d108      	bne.n	80067e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f004 ff51 	bl	800b684 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	7912      	ldrb	r2, [r2, #4]
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e040      	b.n	8006894 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da0e      	bge.n	8006838 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 0207 	and.w	r2, r3, #7
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	3310      	adds	r3, #16
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	705a      	strb	r2, [r3, #1]
 8006836:	e00e      	b.n	8006856 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 0207 	and.w	r2, r3, #7
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	b2da      	uxtb	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_PCD_EP_ClrStall+0x82>
 8006872:	2302      	movs	r3, #2
 8006874:	e00e      	b.n	8006894 <HAL_PCD_EP_ClrStall+0xa0>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	4618      	mov	r0, r3
 8006886:	f004 fe1a 	bl	800b4be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b096      	sub	sp, #88	@ 0x58
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068a4:	e3bb      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80068b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80068c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 8175 	bne.w	8006bb4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80068ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d14e      	bne.n	8006974 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	81fb      	strh	r3, [r7, #14]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	89fb      	ldrh	r3, [r7, #14]
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3310      	adds	r3, #16
 80068fe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	3302      	adds	r3, #2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800692a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800692c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	441a      	add	r2, r3
 8006936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006938:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f006 fd1c 	bl	800d37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7b5b      	ldrb	r3, [r3, #13]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8368 	beq.w	800701e <PCD_EP_ISR_Handler+0x782>
 800694e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8363 	bne.w	800701e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7b5b      	ldrb	r3, [r3, #13]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	735a      	strb	r2, [r3, #13]
 8006972:	e354      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800697a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006986:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800698a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800698e:	2b00      	cmp	r3, #0
 8006990:	d034      	beq.n	80069fc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800699a:	b29b      	uxth	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	3306      	adds	r3, #6
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80069c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80069cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f004 fea8 	bl	800b726 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80069e2:	4013      	ands	r3, r2
 80069e4:	823b      	strh	r3, [r7, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	8a3a      	ldrh	r2, [r7, #16]
 80069ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069f0:	b292      	uxth	r2, r2
 80069f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f006 fc93 	bl	800d320 <HAL_PCD_SetupStageCallback>
 80069fa:	e310      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f280 830c 	bge.w	800701e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006a12:	4013      	ands	r3, r2
 8006a14:	83fb      	strh	r3, [r7, #30]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	8bfa      	ldrh	r2, [r7, #30]
 8006a1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a20:	b292      	uxth	r2, r2
 8006a22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4413      	add	r3, r2
 8006a38:	3306      	adds	r3, #6
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d019      	beq.n	8006a8c <PCD_EP_ISR_Handler+0x1f0>
 8006a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a66:	6959      	ldr	r1, [r3, #20]
 8006a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f004 fe58 	bl	800b726 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	441a      	add	r2, r3
 8006a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f006 fc5c 	bl	800d344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006a96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 82bd 	bne.w	800701e <PCD_EP_ISR_Handler+0x782>
 8006aa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006aa8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006aac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ab0:	f000 82b5 	beq.w	800701e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4413      	add	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aea:	d91d      	bls.n	8006b28 <PCD_EP_ISR_Handler+0x28c>
 8006aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <PCD_EP_ISR_Handler+0x26a>
 8006b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b02:	3b01      	subs	r3, #1
 8006b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4313      	orrs	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e026      	b.n	8006b76 <PCD_EP_ISR_Handler+0x2da>
 8006b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <PCD_EP_ISR_Handler+0x2aa>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e017      	b.n	8006b76 <PCD_EP_ISR_Handler+0x2da>
 8006b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <PCD_EP_ISR_Handler+0x2c4>
 8006b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	827b      	strh	r3, [r7, #18]
 8006b88:	8a7b      	ldrh	r3, [r7, #18]
 8006b8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b8e:	827b      	strh	r3, [r7, #18]
 8006b90:	8a7b      	ldrh	r3, [r7, #18]
 8006b92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b96:	827b      	strh	r3, [r7, #18]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	8a7b      	ldrh	r3, [r7, #18]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e234      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bc8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f280 80fc 	bge.w	8006dca <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006be8:	4013      	ands	r3, r2
 8006bea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006c00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c04:	b292      	uxth	r2, r2
 8006c06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c08:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c20:	7b1b      	ldrb	r3, [r3, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d125      	bne.n	8006c72 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	3306      	adds	r3, #6
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8092 	beq.w	8006d80 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c62:	6959      	ldr	r1, [r3, #20]
 8006c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c66:	88da      	ldrh	r2, [r3, #6]
 8006c68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006c6c:	f004 fd5b 	bl	800b726 <USB_ReadPMA>
 8006c70:	e086      	b.n	8006d80 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d10a      	bne.n	8006c90 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9d9 	bl	800703a <HAL_PCD_EP_DB_Receive>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006c8e:	e077      	b.n	8006d80 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ccc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d024      	beq.n	8006d38 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	3302      	adds	r3, #2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d16:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d02e      	beq.n	8006d80 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d28:	6959      	ldr	r1, [r3, #20]
 8006d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2c:	891a      	ldrh	r2, [r3, #8]
 8006d2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d32:	f004 fcf8 	bl	800b726 <USB_ReadPMA>
 8006d36:	e023      	b.n	8006d80 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3306      	adds	r3, #6
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6812      	ldr	r2, [r2, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d60:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d72:	6959      	ldr	r1, [r3, #20]
 8006d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d76:	895a      	ldrh	r2, [r3, #10]
 8006d78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d7c:	f004 fcd3 	bl	800b726 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d88:	441a      	add	r2, r3
 8006d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d90:	695a      	ldr	r2, [r3, #20]
 8006d92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d96:	441a      	add	r2, r3
 8006d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <PCD_EP_ISR_Handler+0x514>
 8006da4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d206      	bcs.n	8006dbe <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f006 fac4 	bl	800d344 <HAL_PCD_DataOutStageCallback>
 8006dbc:	e005      	b.n	8006dca <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f002 ff79 	bl	8009cbc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8123 	beq.w	800701e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dd8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	3310      	adds	r3, #16
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	4413      	add	r3, r2
 8006dea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	78db      	ldrb	r3, [r3, #3]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 80a2 	bne.w	8006f76 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e34:	2200      	movs	r2, #0
 8006e36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8093 	beq.w	8006f68 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d046      	beq.n	8006edc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d126      	bne.n	8006ea4 <PCD_EP_ISR_Handler+0x608>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	4413      	add	r3, r2
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	011a      	lsls	r2, r3, #4
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e7c:	623b      	str	r3, [r7, #32]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e061      	b.n	8006f68 <PCD_EP_ISR_Handler+0x6cc>
 8006ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d15d      	bne.n	8006f68 <PCD_EP_ISR_Handler+0x6cc>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	4413      	add	r3, r2
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	011a      	lsls	r2, r3, #4
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e045      	b.n	8006f68 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d126      	bne.n	8006f38 <PCD_EP_ISR_Handler+0x69c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efe:	4413      	add	r3, r2
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	e017      	b.n	8006f68 <PCD_EP_ISR_Handler+0x6cc>
 8006f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d113      	bne.n	8006f68 <PCD_EP_ISR_Handler+0x6cc>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f4e:	4413      	add	r3, r2
 8006f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	011a      	lsls	r2, r3, #4
 8006f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	2200      	movs	r2, #0
 8006f66:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f006 fa03 	bl	800d37a <HAL_PCD_DataInStageCallback>
 8006f74:	e053      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d146      	bne.n	8007010 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	3302      	adds	r3, #2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006faa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d907      	bls.n	8006fca <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8006fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc6:	619a      	str	r2, [r3, #24]
 8006fc8:	e002      	b.n	8006fd0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8006fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fcc:	2200      	movs	r2, #0
 8006fce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f006 f9cb 	bl	800d37a <HAL_PCD_DataInStageCallback>
 8006fe4:	e01b      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006fee:	441a      	add	r2, r3
 8006ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ffc:	441a      	add	r2, r3
 8006ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007000:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007008:	4618      	mov	r0, r3
 800700a:	f002 fe57 	bl	8009cbc <USB_EPStartXfer>
 800700e:	e006      	b.n	800701e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007014:	461a      	mov	r2, r3
 8007016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f91b 	bl	8007254 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007026:	b29b      	uxth	r3, r3
 8007028:	b21b      	sxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	f6ff ac3b 	blt.w	80068a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3758      	adds	r7, #88	@ 0x58
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b088      	sub	sp, #32
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d07e      	beq.n	8007150 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	3302      	adds	r3, #2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	8b7b      	ldrh	r3, [r7, #26]
 8007082:	429a      	cmp	r2, r3
 8007084:	d306      	bcc.n	8007094 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	8b7b      	ldrh	r3, [r7, #26]
 800708c:	1ad2      	subs	r2, r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	619a      	str	r2, [r3, #24]
 8007092:	e002      	b.n	800709a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d123      	bne.n	80070ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	833b      	strh	r3, [r7, #24]
 80070be:	8b3b      	ldrh	r3, [r7, #24]
 80070c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070c4:	833b      	strh	r3, [r7, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	8b3b      	ldrh	r3, [r7, #24]
 80070d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01f      	beq.n	8007134 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800710a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710e:	82fb      	strh	r3, [r7, #22]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	8afb      	ldrh	r3, [r7, #22]
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007134:	8b7b      	ldrh	r3, [r7, #26]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8087 	beq.w	800724a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	6959      	ldr	r1, [r3, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	891a      	ldrh	r2, [r3, #8]
 8007148:	8b7b      	ldrh	r3, [r7, #26]
 800714a:	f004 faec 	bl	800b726 <USB_ReadPMA>
 800714e:	e07c      	b.n	800724a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4413      	add	r3, r2
 8007164:	3306      	adds	r3, #6
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	6812      	ldr	r2, [r2, #0]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007178:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	8b7b      	ldrh	r3, [r7, #26]
 8007180:	429a      	cmp	r2, r3
 8007182:	d306      	bcc.n	8007192 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	8b7b      	ldrh	r3, [r7, #26]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	e002      	b.n	8007198 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2200      	movs	r2, #0
 8007196:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d123      	bne.n	80071e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ba:	83fb      	strh	r3, [r7, #30]
 80071bc:	8bfb      	ldrh	r3, [r7, #30]
 80071be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071c2:	83fb      	strh	r3, [r7, #30]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	8bfb      	ldrh	r3, [r7, #30]
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d11f      	bne.n	8007232 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720c:	83bb      	strh	r3, [r7, #28]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	8bbb      	ldrh	r3, [r7, #28]
 800721e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800722a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800722e:	b29b      	uxth	r3, r3
 8007230:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007232:	8b7b      	ldrh	r3, [r7, #26]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6959      	ldr	r1, [r3, #20]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	895a      	ldrh	r2, [r3, #10]
 8007244:	8b7b      	ldrh	r3, [r7, #26]
 8007246:	f004 fa6e 	bl	800b726 <USB_ReadPMA>
    }
  }

  return count;
 800724a:	8b7b      	ldrh	r3, [r7, #26]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b0a4      	sub	sp, #144	@ 0x90
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 81dd 	beq.w	8007628 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	3302      	adds	r3, #2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007296:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d907      	bls.n	80072b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	619a      	str	r2, [r3, #24]
 80072b4:	e002      	b.n	80072bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80b9 	bne.w	8007438 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d126      	bne.n	800731c <HAL_PCD_EP_DB_Transmit+0xc8>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072dc:	b29b      	uxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	4413      	add	r3, r2
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	011a      	lsls	r2, r3, #4
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	b29a      	uxth	r2, r3
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	e01a      	b.n	8007352 <HAL_PCD_EP_DB_Transmit+0xfe>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d116      	bne.n	8007352 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	4413      	add	r3, r2
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	4413      	add	r3, r2
 8007346:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	2200      	movs	r2, #0
 8007350:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d126      	bne.n	80073ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	011a      	lsls	r2, r3, #4
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007392:	b29a      	uxth	r2, r3
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	801a      	strh	r2, [r3, #0]
 80073ac:	e017      	b.n	80073de <HAL_PCD_EP_DB_Transmit+0x18a>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d113      	bne.n	80073de <HAL_PCD_EP_DB_Transmit+0x18a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	4413      	add	r3, r2
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	011a      	lsls	r2, r3, #4
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073d6:	623b      	str	r3, [r7, #32]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2200      	movs	r2, #0
 80073dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f005 ffc8 	bl	800d37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 82fc 	beq.w	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007410:	82fb      	strh	r3, [r7, #22]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	8afb      	ldrh	r3, [r7, #22]
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800742e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]
 8007436:	e2da      	b.n	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d021      	beq.n	8007486 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800747a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800748c:	2b01      	cmp	r3, #1
 800748e:	f040 82ae 	bne.w	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800749a:	441a      	add	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80074a8:	441a      	add	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d30b      	bcc.n	80074d2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6a1a      	ldr	r2, [r3, #32]
 80074c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	621a      	str	r2, [r3, #32]
 80074d0:	e017      	b.n	8007502 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d108      	bne.n	80074ec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80074da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80074de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80074ea:	e00a      	b.n	8007502 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d165      	bne.n	80075d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	4413      	add	r3, r2
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	011a      	lsls	r2, r3, #4
 8007528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752a:	4413      	add	r3, r2
 800752c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753c:	b29a      	uxth	r2, r3
 800753e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007546:	2b3e      	cmp	r3, #62	@ 0x3e
 8007548:	d91d      	bls.n	8007586 <HAL_PCD_EP_DB_Transmit+0x332>
 800754a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <HAL_PCD_EP_DB_Transmit+0x310>
 800755e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007560:	3b01      	subs	r3, #1
 8007562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29a      	uxth	r2, r3
 800756a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800756c:	b29b      	uxth	r3, r3
 800756e:	029b      	lsls	r3, r3, #10
 8007570:	b29b      	uxth	r3, r3
 8007572:	4313      	orrs	r3, r2
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e044      	b.n	8007610 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <HAL_PCD_EP_DB_Transmit+0x350>
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759c:	b29a      	uxth	r2, r3
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	e035      	b.n	8007610 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80075a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_PCD_EP_DB_Transmit+0x36a>
 80075b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ba:	3301      	adds	r3, #1
 80075bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e01c      	b.n	8007610 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d118      	bne.n	8007610 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f2:	4413      	add	r3, r2
 80075f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	011a      	lsls	r2, r3, #4
 80075fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fe:	4413      	add	r3, r2
 8007600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007604:	643b      	str	r3, [r7, #64]	@ 0x40
 8007606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800760a:	b29a      	uxth	r2, r3
 800760c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6959      	ldr	r1, [r3, #20]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	891a      	ldrh	r2, [r3, #8]
 800761c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007620:	b29b      	uxth	r3, r3
 8007622:	f004 f83a 	bl	800b69a <USB_WritePMA>
 8007626:	e1e2      	b.n	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4413      	add	r3, r2
 800763c:	3306      	adds	r3, #6
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007650:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800765c:	429a      	cmp	r2, r3
 800765e:	d307      	bcc.n	8007670 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	619a      	str	r2, [r3, #24]
 800766e:	e002      	b.n	8007676 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f040 80c0 	bne.w	8007800 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d126      	bne.n	80076d6 <HAL_PCD_EP_DB_Transmit+0x482>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007696:	b29b      	uxth	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800769c:	4413      	add	r3, r2
 800769e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	011a      	lsls	r2, r3, #4
 80076a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e01a      	b.n	800770c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d116      	bne.n	800770c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f2:	4413      	add	r3, r2
 80076f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	011a      	lsls	r2, r3, #4
 80076fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076fe:	4413      	add	r3, r2
 8007700:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007704:	663b      	str	r3, [r7, #96]	@ 0x60
 8007706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007708:	2200      	movs	r2, #0
 800770a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	677b      	str	r3, [r7, #116]	@ 0x74
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d12b      	bne.n	8007772 <HAL_PCD_EP_DB_Transmit+0x51e>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800772e:	4413      	add	r3, r2
 8007730:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	011a      	lsls	r2, r3, #4
 8007738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800773a:	4413      	add	r3, r2
 800773c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e017      	b.n	80077a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d113      	bne.n	80077a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007788:	4413      	add	r3, r2
 800778a:	677b      	str	r3, [r7, #116]	@ 0x74
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	011a      	lsls	r2, r3, #4
 8007792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007794:	4413      	add	r3, r2
 8007796:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800779a:	673b      	str	r3, [r7, #112]	@ 0x70
 800779c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800779e:	2200      	movs	r2, #0
 80077a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f005 fde6 	bl	800d37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 811a 	bne.w	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	441a      	add	r2, r3
 80077e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80077ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	8013      	strh	r3, [r2, #0]
 80077fe:	e0f6      	b.n	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007800:	88fb      	ldrh	r3, [r7, #6]
 8007802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d121      	bne.n	800784e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007824:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	441a      	add	r2, r3
 8007836:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800783a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800783e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007842:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800784a:	b29b      	uxth	r3, r3
 800784c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007854:	2b01      	cmp	r3, #1
 8007856:	f040 80ca 	bne.w	80079ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007862:	441a      	add	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007870:	441a      	add	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6a1a      	ldr	r2, [r3, #32]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	429a      	cmp	r2, r3
 8007880:	d30b      	bcc.n	800789a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6a1a      	ldr	r2, [r3, #32]
 800788e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	621a      	str	r2, [r3, #32]
 8007898:	e017      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d108      	bne.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80078a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80078a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80078b2:	e00a      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d165      	bne.n	80079a4 <HAL_PCD_EP_DB_Transmit+0x750>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ec:	4413      	add	r3, r2
 80078ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	011a      	lsls	r2, r3, #4
 80078f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f8:	4413      	add	r3, r2
 80078fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800790a:	b29a      	uxth	r2, r3
 800790c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007914:	2b3e      	cmp	r3, #62	@ 0x3e
 8007916:	d91d      	bls.n	8007954 <HAL_PCD_EP_DB_Transmit+0x700>
 8007918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007920:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <HAL_PCD_EP_DB_Transmit+0x6de>
 800792c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800792e:	3b01      	subs	r3, #1
 8007930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	e041      	b.n	80079d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8007954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <HAL_PCD_EP_DB_Transmit+0x71e>
 800795c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e032      	b.n	80079d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8007972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800797a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_PCD_EP_DB_Transmit+0x738>
 8007986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007988:	3301      	adds	r3, #1
 800798a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800798c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29a      	uxth	r2, r3
 8007992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007994:	b29b      	uxth	r3, r3
 8007996:	029b      	lsls	r3, r3, #10
 8007998:	b29b      	uxth	r3, r3
 800799a:	4313      	orrs	r3, r2
 800799c:	b29a      	uxth	r2, r3
 800799e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e019      	b.n	80079d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d115      	bne.n	80079d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ba:	4413      	add	r3, r2
 80079bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	011a      	lsls	r2, r3, #4
 80079c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80079ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6959      	ldr	r1, [r3, #20]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	895a      	ldrh	r2, [r3, #10]
 80079e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f003 fe56 	bl	800b69a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a08:	82bb      	strh	r3, [r7, #20]
 8007a0a:	8abb      	ldrh	r3, [r7, #20]
 8007a0c:	f083 0310 	eor.w	r3, r3, #16
 8007a10:	82bb      	strh	r3, [r7, #20]
 8007a12:	8abb      	ldrh	r3, [r7, #20]
 8007a14:	f083 0320 	eor.w	r3, r3, #32
 8007a18:	82bb      	strh	r3, [r7, #20]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	441a      	add	r2, r3
 8007a28:	8abb      	ldrh	r3, [r7, #20]
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3790      	adds	r7, #144	@ 0x90
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	607b      	str	r3, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	817b      	strh	r3, [r7, #10]
 8007a56:	4613      	mov	r3, r2
 8007a58:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007a5a:	897b      	ldrh	r3, [r7, #10]
 8007a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	f003 0207 	and.w	r2, r3, #7
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	3310      	adds	r3, #16
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	e009      	b.n	8007a92 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a7e:	897a      	ldrh	r2, [r7, #10]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a92:	893b      	ldrh	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d107      	bne.n	8007aa8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	80da      	strh	r2, [r3, #6]
 8007aa6:	e00b      	b.n	8007ac0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	0c1b      	lsrs	r3, r3, #16
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e272      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8087 	beq.w	8007bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007aec:	4b92      	ldr	r3, [pc, #584]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 030c 	and.w	r3, r3, #12
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d00c      	beq.n	8007b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007af8:	4b8f      	ldr	r3, [pc, #572]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 030c 	and.w	r3, r3, #12
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d112      	bne.n	8007b2a <HAL_RCC_OscConfig+0x5e>
 8007b04:	4b8c      	ldr	r3, [pc, #560]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b10:	d10b      	bne.n	8007b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b12:	4b89      	ldr	r3, [pc, #548]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d06c      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x12c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d168      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e24c      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b32:	d106      	bne.n	8007b42 <HAL_RCC_OscConfig+0x76>
 8007b34:	4b80      	ldr	r3, [pc, #512]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a7f      	ldr	r2, [pc, #508]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e02e      	b.n	8007ba0 <HAL_RCC_OscConfig+0xd4>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10c      	bne.n	8007b64 <HAL_RCC_OscConfig+0x98>
 8007b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a7a      	ldr	r2, [pc, #488]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	4b78      	ldr	r3, [pc, #480]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a77      	ldr	r2, [pc, #476]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	e01d      	b.n	8007ba0 <HAL_RCC_OscConfig+0xd4>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b6c:	d10c      	bne.n	8007b88 <HAL_RCC_OscConfig+0xbc>
 8007b6e:	4b72      	ldr	r3, [pc, #456]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a71      	ldr	r2, [pc, #452]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a6e      	ldr	r2, [pc, #440]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e00b      	b.n	8007ba0 <HAL_RCC_OscConfig+0xd4>
 8007b88:	4b6b      	ldr	r3, [pc, #428]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a6a      	ldr	r2, [pc, #424]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	4b68      	ldr	r3, [pc, #416]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a67      	ldr	r2, [pc, #412]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d013      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba8:	f7fa f932 	bl	8001e10 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb0:	f7fa f92e 	bl	8001e10 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b64      	cmp	r3, #100	@ 0x64
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e200      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f0      	beq.n	8007bb0 <HAL_RCC_OscConfig+0xe4>
 8007bce:	e014      	b.n	8007bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd0:	f7fa f91e 	bl	8001e10 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd8:	f7fa f91a 	bl	8001e10 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b64      	cmp	r3, #100	@ 0x64
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e1ec      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bea:	4b53      	ldr	r3, [pc, #332]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x10c>
 8007bf6:	e000      	b.n	8007bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d063      	beq.n	8007cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c06:	4b4c      	ldr	r3, [pc, #304]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f003 030c 	and.w	r3, r3, #12
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007c12:	4b49      	ldr	r3, [pc, #292]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f003 030c 	and.w	r3, r3, #12
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d11c      	bne.n	8007c58 <HAL_RCC_OscConfig+0x18c>
 8007c1e:	4b46      	ldr	r3, [pc, #280]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d116      	bne.n	8007c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c2a:	4b43      	ldr	r3, [pc, #268]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_RCC_OscConfig+0x176>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d001      	beq.n	8007c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e1c0      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c42:	4b3d      	ldr	r3, [pc, #244]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	4939      	ldr	r1, [pc, #228]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c56:	e03a      	b.n	8007cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c60:	4b36      	ldr	r3, [pc, #216]	@ (8007d3c <HAL_RCC_OscConfig+0x270>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c66:	f7fa f8d3 	bl	8001e10 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c6e:	f7fa f8cf 	bl	8001e10 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e1a1      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c80:	4b2d      	ldr	r3, [pc, #180]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4927      	ldr	r1, [pc, #156]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]
 8007ca0:	e015      	b.n	8007cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca2:	4b26      	ldr	r3, [pc, #152]	@ (8007d3c <HAL_RCC_OscConfig+0x270>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca8:	f7fa f8b2 	bl	8001e10 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cb0:	f7fa f8ae 	bl	8001e10 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e180      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f0      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d03a      	beq.n	8007d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d019      	beq.n	8007d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ce2:	4b17      	ldr	r3, [pc, #92]	@ (8007d40 <HAL_RCC_OscConfig+0x274>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ce8:	f7fa f892 	bl	8001e10 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cf0:	f7fa f88e 	bl	8001e10 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e160      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <HAL_RCC_OscConfig+0x26c>)
 8007d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f0      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007d0e:	2001      	movs	r0, #1
 8007d10:	f000 faba 	bl	8008288 <RCC_Delay>
 8007d14:	e01c      	b.n	8007d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <HAL_RCC_OscConfig+0x274>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d1c:	f7fa f878 	bl	8001e10 <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d22:	e00f      	b.n	8007d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d24:	f7fa f874 	bl	8001e10 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d908      	bls.n	8007d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e146      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
 8007d36:	bf00      	nop
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	42420000 	.word	0x42420000
 8007d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d44:	4b92      	ldr	r3, [pc, #584]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e9      	bne.n	8007d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80a6 	beq.w	8007eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d62:	4b8b      	ldr	r3, [pc, #556]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d6e:	4b88      	ldr	r3, [pc, #544]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	4a87      	ldr	r2, [pc, #540]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d78:	61d3      	str	r3, [r2, #28]
 8007d7a:	4b85      	ldr	r3, [pc, #532]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8a:	4b82      	ldr	r3, [pc, #520]	@ (8007f94 <HAL_RCC_OscConfig+0x4c8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d118      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d96:	4b7f      	ldr	r3, [pc, #508]	@ (8007f94 <HAL_RCC_OscConfig+0x4c8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f94 <HAL_RCC_OscConfig+0x4c8>)
 8007d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007da2:	f7fa f835 	bl	8001e10 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007daa:	f7fa f831 	bl	8001e10 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b64      	cmp	r3, #100	@ 0x64
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e103      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dbc:	4b75      	ldr	r3, [pc, #468]	@ (8007f94 <HAL_RCC_OscConfig+0x4c8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d106      	bne.n	8007dde <HAL_RCC_OscConfig+0x312>
 8007dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	6213      	str	r3, [r2, #32]
 8007ddc:	e02d      	b.n	8007e3a <HAL_RCC_OscConfig+0x36e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10c      	bne.n	8007e00 <HAL_RCC_OscConfig+0x334>
 8007de6:	4b6a      	ldr	r3, [pc, #424]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4a69      	ldr	r2, [pc, #420]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	6213      	str	r3, [r2, #32]
 8007df2:	4b67      	ldr	r3, [pc, #412]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	4a66      	ldr	r2, [pc, #408]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007df8:	f023 0304 	bic.w	r3, r3, #4
 8007dfc:	6213      	str	r3, [r2, #32]
 8007dfe:	e01c      	b.n	8007e3a <HAL_RCC_OscConfig+0x36e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b05      	cmp	r3, #5
 8007e06:	d10c      	bne.n	8007e22 <HAL_RCC_OscConfig+0x356>
 8007e08:	4b61      	ldr	r3, [pc, #388]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	4a60      	ldr	r2, [pc, #384]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e0e:	f043 0304 	orr.w	r3, r3, #4
 8007e12:	6213      	str	r3, [r2, #32]
 8007e14:	4b5e      	ldr	r3, [pc, #376]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	4a5d      	ldr	r2, [pc, #372]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6213      	str	r3, [r2, #32]
 8007e20:	e00b      	b.n	8007e3a <HAL_RCC_OscConfig+0x36e>
 8007e22:	4b5b      	ldr	r3, [pc, #364]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	4a5a      	ldr	r2, [pc, #360]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	6213      	str	r3, [r2, #32]
 8007e2e:	4b58      	ldr	r3, [pc, #352]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	4a57      	ldr	r2, [pc, #348]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e34:	f023 0304 	bic.w	r3, r3, #4
 8007e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d015      	beq.n	8007e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e42:	f7f9 ffe5 	bl	8001e10 <HAL_GetTick>
 8007e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e48:	e00a      	b.n	8007e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e4a:	f7f9 ffe1 	bl	8001e10 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e0b1      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e60:	4b4b      	ldr	r3, [pc, #300]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0ee      	beq.n	8007e4a <HAL_RCC_OscConfig+0x37e>
 8007e6c:	e014      	b.n	8007e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e6e:	f7f9 ffcf 	bl	8001e10 <HAL_GetTick>
 8007e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e74:	e00a      	b.n	8007e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e76:	f7f9 ffcb 	bl	8001e10 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e09b      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e8c:	4b40      	ldr	r3, [pc, #256]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1ee      	bne.n	8007e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d105      	bne.n	8007eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8087 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007eb4:	4b36      	ldr	r3, [pc, #216]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 030c 	and.w	r3, r3, #12
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d061      	beq.n	8007f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d146      	bne.n	8007f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec8:	4b33      	ldr	r3, [pc, #204]	@ (8007f98 <HAL_RCC_OscConfig+0x4cc>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ece:	f7f9 ff9f 	bl	8001e10 <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed6:	f7f9 ff9b 	bl	8001e10 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e06d      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ee8:	4b29      	ldr	r3, [pc, #164]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f0      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007efc:	d108      	bne.n	8007f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007efe:	4b24      	ldr	r3, [pc, #144]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	4921      	ldr	r1, [pc, #132]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f10:	4b1f      	ldr	r3, [pc, #124]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a19      	ldr	r1, [r3, #32]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	430b      	orrs	r3, r1
 8007f22:	491b      	ldr	r1, [pc, #108]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f28:	4b1b      	ldr	r3, [pc, #108]	@ (8007f98 <HAL_RCC_OscConfig+0x4cc>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2e:	f7f9 ff6f 	bl	8001e10 <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f34:	e008      	b.n	8007f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f36:	f7f9 ff6b 	bl	8001e10 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e03d      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f48:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f0      	beq.n	8007f36 <HAL_RCC_OscConfig+0x46a>
 8007f54:	e035      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f56:	4b10      	ldr	r3, [pc, #64]	@ (8007f98 <HAL_RCC_OscConfig+0x4cc>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5c:	f7f9 ff58 	bl	8001e10 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f64:	f7f9 ff54 	bl	8001e10 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e026      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f76:	4b06      	ldr	r3, [pc, #24]	@ (8007f90 <HAL_RCC_OscConfig+0x4c4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f0      	bne.n	8007f64 <HAL_RCC_OscConfig+0x498>
 8007f82:	e01e      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e019      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
 8007f90:	40021000 	.word	0x40021000
 8007f94:	40007000 	.word	0x40007000
 8007f98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fcc <HAL_RCC_OscConfig+0x500>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d106      	bne.n	8007fbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d001      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40021000 	.word	0x40021000

08007fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e0d0      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d910      	bls.n	8008014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff2:	4b67      	ldr	r3, [pc, #412]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 0207 	bic.w	r2, r3, #7
 8007ffa:	4965      	ldr	r1, [pc, #404]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b63      	ldr	r3, [pc, #396]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d001      	beq.n	8008014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0b8      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d020      	beq.n	8008062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800802c:	4b59      	ldr	r3, [pc, #356]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a58      	ldr	r2, [pc, #352]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008032:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008044:	4b53      	ldr	r3, [pc, #332]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	4a52      	ldr	r2, [pc, #328]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800804a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800804e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008050:	4b50      	ldr	r3, [pc, #320]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	494d      	ldr	r1, [pc, #308]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800805e:	4313      	orrs	r3, r2
 8008060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d040      	beq.n	80080f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d107      	bne.n	8008086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	4b47      	ldr	r3, [pc, #284]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d115      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d107      	bne.n	800809e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800808e:	4b41      	ldr	r3, [pc, #260]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e073      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800809e:	4b3d      	ldr	r3, [pc, #244]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e06b      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ae:	4b39      	ldr	r3, [pc, #228]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f023 0203 	bic.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4936      	ldr	r1, [pc, #216]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c0:	f7f9 fea6 	bl	8001e10 <HAL_GetTick>
 80080c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c6:	e00a      	b.n	80080de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c8:	f7f9 fea2 	bl	8001e10 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e053      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080de:	4b2d      	ldr	r3, [pc, #180]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f003 020c 	and.w	r2, r3, #12
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d1eb      	bne.n	80080c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080f0:	4b27      	ldr	r3, [pc, #156]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0307 	and.w	r3, r3, #7
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d210      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fe:	4b24      	ldr	r3, [pc, #144]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f023 0207 	bic.w	r2, r3, #7
 8008106:	4922      	ldr	r1, [pc, #136]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	4313      	orrs	r3, r2
 800810c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800810e:	4b20      	ldr	r3, [pc, #128]	@ (8008190 <HAL_RCC_ClockConfig+0x1c0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d001      	beq.n	8008120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e032      	b.n	8008186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800812c:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4916      	ldr	r1, [pc, #88]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800813a:	4313      	orrs	r3, r2
 800813c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800814a:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	490e      	ldr	r1, [pc, #56]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 800815a:	4313      	orrs	r3, r2
 800815c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800815e:	f000 f821 	bl	80081a4 <HAL_RCC_GetSysClockFreq>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_RCC_ClockConfig+0x1c4>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	490a      	ldr	r1, [pc, #40]	@ (8008198 <HAL_RCC_ClockConfig+0x1c8>)
 8008170:	5ccb      	ldrb	r3, [r1, r3]
 8008172:	fa22 f303 	lsr.w	r3, r2, r3
 8008176:	4a09      	ldr	r2, [pc, #36]	@ (800819c <HAL_RCC_ClockConfig+0x1cc>)
 8008178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800817a:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <HAL_RCC_ClockConfig+0x1d0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 fe04 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40022000 	.word	0x40022000
 8008194:	40021000 	.word	0x40021000
 8008198:	0800ef8c 	.word	0x0800ef8c
 800819c:	2000000c 	.word	0x2000000c
 80081a0:	20000010 	.word	0x20000010

080081a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x94>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 030c 	and.w	r3, r3, #12
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d002      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x30>
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d003      	beq.n	80081da <HAL_RCC_GetSysClockFreq+0x36>
 80081d2:	e027      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081d4:	4b19      	ldr	r3, [pc, #100]	@ (800823c <HAL_RCC_GetSysClockFreq+0x98>)
 80081d6:	613b      	str	r3, [r7, #16]
      break;
 80081d8:	e027      	b.n	800822a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	0c9b      	lsrs	r3, r3, #18
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	4a17      	ldr	r2, [pc, #92]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80081e4:	5cd3      	ldrb	r3, [r2, r3]
 80081e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80081f2:	4b11      	ldr	r3, [pc, #68]	@ (8008238 <HAL_RCC_GetSysClockFreq+0x94>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	0c5b      	lsrs	r3, r3, #17
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	4a11      	ldr	r2, [pc, #68]	@ (8008244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80081fe:	5cd3      	ldrb	r3, [r2, r3]
 8008200:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a0d      	ldr	r2, [pc, #52]	@ (800823c <HAL_RCC_GetSysClockFreq+0x98>)
 8008206:	fb03 f202 	mul.w	r2, r3, r2
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e004      	b.n	800821e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0c      	ldr	r2, [pc, #48]	@ (8008248 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008218:	fb02 f303 	mul.w	r3, r2, r3
 800821c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	613b      	str	r3, [r7, #16]
      break;
 8008222:	e002      	b.n	800822a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008224:	4b05      	ldr	r3, [pc, #20]	@ (800823c <HAL_RCC_GetSysClockFreq+0x98>)
 8008226:	613b      	str	r3, [r7, #16]
      break;
 8008228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800822a:	693b      	ldr	r3, [r7, #16]
}
 800822c:	4618      	mov	r0, r3
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40021000 	.word	0x40021000
 800823c:	007a1200 	.word	0x007a1200
 8008240:	0800efa4 	.word	0x0800efa4
 8008244:	0800efb4 	.word	0x0800efb4
 8008248:	003d0900 	.word	0x003d0900

0800824c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008250:	4b02      	ldr	r3, [pc, #8]	@ (800825c <HAL_RCC_GetHCLKFreq+0x10>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr
 800825c:	2000000c 	.word	0x2000000c

08008260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008264:	f7ff fff2 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8008268:	4602      	mov	r2, r0
 800826a:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	4903      	ldr	r1, [pc, #12]	@ (8008284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008276:	5ccb      	ldrb	r3, [r1, r3]
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800827c:	4618      	mov	r0, r3
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40021000 	.word	0x40021000
 8008284:	0800ef9c 	.word	0x0800ef9c

08008288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <RCC_Delay+0x34>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a0a      	ldr	r2, [pc, #40]	@ (80082c0 <RCC_Delay+0x38>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	0a5b      	lsrs	r3, r3, #9
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80082a4:	bf00      	nop
  }
  while (Delay --);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1e5a      	subs	r2, r3, #1
 80082aa:	60fa      	str	r2, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f9      	bne.n	80082a4 <RCC_Delay+0x1c>
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr
 80082bc:	2000000c 	.word	0x2000000c
 80082c0:	10624dd3 	.word	0x10624dd3

080082c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d07d      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10d      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082f0:	4b4c      	ldr	r3, [pc, #304]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4a4b      	ldr	r2, [pc, #300]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082fa:	61d3      	str	r3, [r2, #28]
 80082fc:	4b49      	ldr	r3, [pc, #292]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830c:	4b46      	ldr	r3, [pc, #280]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	d118      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008318:	4b43      	ldr	r3, [pc, #268]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a42      	ldr	r2, [pc, #264]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800831e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008324:	f7f9 fd74 	bl	8001e10 <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800832a:	e008      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832c:	f7f9 fd70 	bl	8001e10 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b64      	cmp	r3, #100	@ 0x64
 8008338:	d901      	bls.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e06d      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833e:	4b3a      	ldr	r3, [pc, #232]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800834a:	4b36      	ldr	r3, [pc, #216]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008352:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02e      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	429a      	cmp	r2, r3
 8008366:	d027      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008368:	4b2e      	ldr	r3, [pc, #184]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008370:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008372:	4b2e      	ldr	r3, [pc, #184]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008378:	4b2c      	ldr	r3, [pc, #176]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800837e:	4a29      	ldr	r2, [pc, #164]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d014      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800838e:	f7f9 fd3f 	bl	8001e10 <HAL_GetTick>
 8008392:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008394:	e00a      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008396:	f7f9 fd3b 	bl	8001e10 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d901      	bls.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e036      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0ee      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4917      	ldr	r1, [pc, #92]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d105      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d0:	4b14      	ldr	r3, [pc, #80]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	4a13      	ldr	r2, [pc, #76]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d008      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	490b      	ldr	r1, [pc, #44]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008406:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	4904      	ldr	r1, [pc, #16]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008414:	4313      	orrs	r3, r2
 8008416:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40021000 	.word	0x40021000
 8008428:	40007000 	.word	0x40007000
 800842c:	42420440 	.word	0x42420440

08008430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e041      	b.n	80084c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7f9 fb04 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f000 fab2 	bl	80089d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e041      	b.n	8008564 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f839 	bl	800856c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3304      	adds	r3, #4
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f000 fa63 	bl	80089d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr
	...

08008580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <HAL_TIM_PWM_Start+0x24>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b01      	cmp	r3, #1
 800859a:	bf14      	ite	ne
 800859c:	2301      	movne	r3, #1
 800859e:	2300      	moveq	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	e022      	b.n	80085ea <HAL_TIM_PWM_Start+0x6a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d109      	bne.n	80085be <HAL_TIM_PWM_Start+0x3e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	bf14      	ite	ne
 80085b6:	2301      	movne	r3, #1
 80085b8:	2300      	moveq	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	e015      	b.n	80085ea <HAL_TIM_PWM_Start+0x6a>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d109      	bne.n	80085d8 <HAL_TIM_PWM_Start+0x58>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	bf14      	ite	ne
 80085d0:	2301      	movne	r3, #1
 80085d2:	2300      	moveq	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	e008      	b.n	80085ea <HAL_TIM_PWM_Start+0x6a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	bf14      	ite	ne
 80085e4:	2301      	movne	r3, #1
 80085e6:	2300      	moveq	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e05e      	b.n	80086b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <HAL_TIM_PWM_Start+0x82>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008600:	e013      	b.n	800862a <HAL_TIM_PWM_Start+0xaa>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b04      	cmp	r3, #4
 8008606:	d104      	bne.n	8008612 <HAL_TIM_PWM_Start+0x92>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008610:	e00b      	b.n	800862a <HAL_TIM_PWM_Start+0xaa>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d104      	bne.n	8008622 <HAL_TIM_PWM_Start+0xa2>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008620:	e003      	b.n	800862a <HAL_TIM_PWM_Start+0xaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2201      	movs	r2, #1
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fc5c 	bl	8008ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <HAL_TIM_PWM_Start+0x138>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d107      	bne.n	8008652 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008650:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a18      	ldr	r2, [pc, #96]	@ (80086b8 <HAL_TIM_PWM_Start+0x138>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIM_PWM_Start+0xfa>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008664:	d009      	beq.n	800867a <HAL_TIM_PWM_Start+0xfa>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a14      	ldr	r2, [pc, #80]	@ (80086bc <HAL_TIM_PWM_Start+0x13c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIM_PWM_Start+0xfa>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a12      	ldr	r2, [pc, #72]	@ (80086c0 <HAL_TIM_PWM_Start+0x140>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d111      	bne.n	800869e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b06      	cmp	r3, #6
 800868a:	d010      	beq.n	80086ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	e007      	b.n	80086ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0201 	orr.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40012c00 	.word	0x40012c00
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800

080086c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086de:	2302      	movs	r3, #2
 80086e0:	e0ae      	b.n	8008840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b0c      	cmp	r3, #12
 80086ee:	f200 809f 	bhi.w	8008830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	0800872d 	.word	0x0800872d
 80086fc:	08008831 	.word	0x08008831
 8008700:	08008831 	.word	0x08008831
 8008704:	08008831 	.word	0x08008831
 8008708:	0800876d 	.word	0x0800876d
 800870c:	08008831 	.word	0x08008831
 8008710:	08008831 	.word	0x08008831
 8008714:	08008831 	.word	0x08008831
 8008718:	080087af 	.word	0x080087af
 800871c:	08008831 	.word	0x08008831
 8008720:	08008831 	.word	0x08008831
 8008724:	08008831 	.word	0x08008831
 8008728:	080087ef 	.word	0x080087ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f9be 	bl	8008ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0208 	orr.w	r2, r2, #8
 8008746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699a      	ldr	r2, [r3, #24]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0204 	bic.w	r2, r2, #4
 8008756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6999      	ldr	r1, [r3, #24]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	619a      	str	r2, [r3, #24]
      break;
 800876a:	e064      	b.n	8008836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fa04 	bl	8008b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6999      	ldr	r1, [r3, #24]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	619a      	str	r2, [r3, #24]
      break;
 80087ac:	e043      	b.n	8008836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fa4d 	bl	8008c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69da      	ldr	r2, [r3, #28]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0208 	orr.w	r2, r2, #8
 80087c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0204 	bic.w	r2, r2, #4
 80087d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69d9      	ldr	r1, [r3, #28]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	61da      	str	r2, [r3, #28]
      break;
 80087ec:	e023      	b.n	8008836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fa97 	bl	8008d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69da      	ldr	r2, [r3, #28]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69d9      	ldr	r1, [r3, #28]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	021a      	lsls	r2, r3, #8
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	61da      	str	r2, [r3, #28]
      break;
 800882e:	e002      	b.n	8008836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
      break;
 8008834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIM_ConfigClockSource+0x1c>
 8008860:	2302      	movs	r3, #2
 8008862:	e0b4      	b.n	80089ce <HAL_TIM_ConfigClockSource+0x186>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800888a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800889c:	d03e      	beq.n	800891c <HAL_TIM_ConfigClockSource+0xd4>
 800889e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088a2:	f200 8087 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088aa:	f000 8086 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x172>
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b2:	d87f      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088b4:	2b70      	cmp	r3, #112	@ 0x70
 80088b6:	d01a      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0xa6>
 80088b8:	2b70      	cmp	r3, #112	@ 0x70
 80088ba:	d87b      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088bc:	2b60      	cmp	r3, #96	@ 0x60
 80088be:	d050      	beq.n	8008962 <HAL_TIM_ConfigClockSource+0x11a>
 80088c0:	2b60      	cmp	r3, #96	@ 0x60
 80088c2:	d877      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088c4:	2b50      	cmp	r3, #80	@ 0x50
 80088c6:	d03c      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0xfa>
 80088c8:	2b50      	cmp	r3, #80	@ 0x50
 80088ca:	d873      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088cc:	2b40      	cmp	r3, #64	@ 0x40
 80088ce:	d058      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x13a>
 80088d0:	2b40      	cmp	r3, #64	@ 0x40
 80088d2:	d86f      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088d4:	2b30      	cmp	r3, #48	@ 0x30
 80088d6:	d064      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x15a>
 80088d8:	2b30      	cmp	r3, #48	@ 0x30
 80088da:	d86b      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d060      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x15a>
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	d867      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d05c      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x15a>
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d05a      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x15a>
 80088ec:	e062      	b.n	80089b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088fe:	f000 fad8 	bl	8008eb2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	609a      	str	r2, [r3, #8]
      break;
 800891a:	e04f      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800892c:	f000 fac1 	bl	8008eb2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800893e:	609a      	str	r2, [r3, #8]
      break;
 8008940:	e03c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800894e:	461a      	mov	r2, r3
 8008950:	f000 fa38 	bl	8008dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2150      	movs	r1, #80	@ 0x50
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fa8f 	bl	8008e7e <TIM_ITRx_SetConfig>
      break;
 8008960:	e02c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800896e:	461a      	mov	r2, r3
 8008970:	f000 fa56 	bl	8008e20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2160      	movs	r1, #96	@ 0x60
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fa7f 	bl	8008e7e <TIM_ITRx_SetConfig>
      break;
 8008980:	e01c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800898e:	461a      	mov	r2, r3
 8008990:	f000 fa18 	bl	8008dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2140      	movs	r1, #64	@ 0x40
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fa6f 	bl	8008e7e <TIM_ITRx_SetConfig>
      break;
 80089a0:	e00c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f000 fa66 	bl	8008e7e <TIM_ITRx_SetConfig>
      break;
 80089b2:	e003      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
      break;
 80089b8:	e000      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a2f      	ldr	r2, [pc, #188]	@ (8008aa8 <TIM_Base_SetConfig+0xd0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00b      	beq.n	8008a08 <TIM_Base_SetConfig+0x30>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f6:	d007      	beq.n	8008a08 <TIM_Base_SetConfig+0x30>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a2c      	ldr	r2, [pc, #176]	@ (8008aac <TIM_Base_SetConfig+0xd4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0x30>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a2b      	ldr	r2, [pc, #172]	@ (8008ab0 <TIM_Base_SetConfig+0xd8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d108      	bne.n	8008a1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a22      	ldr	r2, [pc, #136]	@ (8008aa8 <TIM_Base_SetConfig+0xd0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00b      	beq.n	8008a3a <TIM_Base_SetConfig+0x62>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a28:	d007      	beq.n	8008a3a <TIM_Base_SetConfig+0x62>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <TIM_Base_SetConfig+0xd4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d003      	beq.n	8008a3a <TIM_Base_SetConfig+0x62>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab0 <TIM_Base_SetConfig+0xd8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d108      	bne.n	8008a4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa8 <TIM_Base_SetConfig+0xd0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d103      	bne.n	8008a80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f023 0201 	bic.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	611a      	str	r2, [r3, #16]
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800

08008ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f023 0201 	bic.w	r2, r3, #1
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0303 	bic.w	r3, r3, #3
 8008aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f023 0302 	bic.w	r3, r3, #2
 8008afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b7c <TIM_OC1_SetConfig+0xc8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10c      	bne.n	8008b2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0308 	bic.w	r3, r3, #8
 8008b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f023 0304 	bic.w	r3, r3, #4
 8008b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a13      	ldr	r2, [pc, #76]	@ (8008b7c <TIM_OC1_SetConfig+0xc8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d111      	bne.n	8008b56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	621a      	str	r2, [r3, #32]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40012c00 	.word	0x40012c00

08008b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f023 0210 	bic.w	r2, r3, #16
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f023 0320 	bic.w	r3, r3, #32
 8008bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1d      	ldr	r2, [pc, #116]	@ (8008c50 <TIM_OC2_SetConfig+0xd0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10d      	bne.n	8008bfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a14      	ldr	r2, [pc, #80]	@ (8008c50 <TIM_OC2_SetConfig+0xd0>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d113      	bne.n	8008c2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	621a      	str	r2, [r3, #32]
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr
 8008c50:	40012c00 	.word	0x40012c00

08008c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1d      	ldr	r2, [pc, #116]	@ (8008d24 <TIM_OC3_SetConfig+0xd0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10d      	bne.n	8008cce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a14      	ldr	r2, [pc, #80]	@ (8008d24 <TIM_OC3_SetConfig+0xd0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d113      	bne.n	8008cfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	621a      	str	r2, [r3, #32]
}
 8008d18:	bf00      	nop
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40012c00 	.word	0x40012c00

08008d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	031b      	lsls	r3, r3, #12
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a0f      	ldr	r2, [pc, #60]	@ (8008dc0 <TIM_OC4_SetConfig+0x98>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d109      	bne.n	8008d9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	019b      	lsls	r3, r3, #6
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr
 8008dc0:	40012c00 	.word	0x40012c00

08008dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	f023 0201 	bic.w	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f023 030a 	bic.w	r3, r3, #10
 8008e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	621a      	str	r2, [r3, #32]
}
 8008e16:	bf00      	nop
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr

08008e20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f023 0210 	bic.w	r2, r3, #16
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	031b      	lsls	r3, r3, #12
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	621a      	str	r2, [r3, #32]
}
 8008e74:	bf00      	nop
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr

08008e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	f043 0307 	orr.w	r3, r3, #7
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	609a      	str	r2, [r3, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b087      	sub	sp, #28
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	021a      	lsls	r2, r3, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	609a      	str	r2, [r3, #8]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2201      	movs	r2, #1
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a1a      	ldr	r2, [r3, #32]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	401a      	ands	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	fa01 f303 	lsl.w	r3, r1, r3
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e046      	b.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a16      	ldr	r2, [pc, #88]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00e      	beq.n	8008fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9c:	d009      	beq.n	8008fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a12      	ldr	r2, [pc, #72]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d004      	beq.n	8008fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a10      	ldr	r2, [pc, #64]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d10c      	bne.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr
 8008fe8:	40012c00 	.word	0x40012c00
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40000800 	.word	0x40000800

08008ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800900c:	2302      	movs	r3, #2
 800900e:	e03d      	b.n	800908c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr

08009096 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	4638      	mov	r0, r7
 80090a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr

080090b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090c0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80090c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr

080090dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090e4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80090e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	43db      	mvns	r3, r3
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	4013      	ands	r3, r2
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr

08009110 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr

08009128 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	4638      	mov	r0, r7
 8009132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr
	...

08009164 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009164:	b480      	push	{r7}
 8009166:	b09d      	sub	sp, #116	@ 0x74
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	78db      	ldrb	r3, [r3, #3]
 8009192:	2b03      	cmp	r3, #3
 8009194:	d81f      	bhi.n	80091d6 <USB_ActivateEndpoint+0x72>
 8009196:	a201      	add	r2, pc, #4	@ (adr r2, 800919c <USB_ActivateEndpoint+0x38>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091ad 	.word	0x080091ad
 80091a0:	080091c9 	.word	0x080091c9
 80091a4:	080091df 	.word	0x080091df
 80091a8:	080091bb 	.word	0x080091bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80091ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80091b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80091b8:	e012      	b.n	80091e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80091ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80091be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80091c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80091c6:	e00b      	b.n	80091e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80091c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80091cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80091d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80091d4:	e004      	b.n	80091e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80091dc:	e000      	b.n	80091e0 <USB_ActivateEndpoint+0x7c>
      break;
 80091de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	441a      	add	r2, r3
 80091ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	b29b      	uxth	r3, r3
 8009210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009218:	b29b      	uxth	r3, r3
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	7812      	ldrb	r2, [r2, #0]
 800921e:	4313      	orrs	r3, r2
 8009220:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	7b1b      	ldrb	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 8178 	bne.w	8009540 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8084 	beq.w	8009362 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	61bb      	str	r3, [r7, #24]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	4413      	add	r3, r2
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	011a      	lsls	r2, r3, #4
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	b29b      	uxth	r3, r3
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	827b      	strh	r3, [r7, #18]
 800929c:	8a7b      	ldrh	r3, [r7, #18]
 800929e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01b      	beq.n	80092de <USB_ActivateEndpoint+0x17a>
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092bc:	823b      	strh	r3, [r7, #16]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	441a      	add	r2, r3
 80092c8:	8a3b      	ldrh	r3, [r7, #16]
 80092ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092da:	b29b      	uxth	r3, r3
 80092dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	78db      	ldrb	r3, [r3, #3]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d020      	beq.n	8009328 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fc:	81bb      	strh	r3, [r7, #12]
 80092fe:	89bb      	ldrh	r3, [r7, #12]
 8009300:	f083 0320 	eor.w	r3, r3, #32
 8009304:	81bb      	strh	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	89bb      	ldrh	r3, [r7, #12]
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]
 8009326:	e2d5      	b.n	80098d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800933e:	81fb      	strh	r3, [r7, #14]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	89fb      	ldrh	r3, [r7, #14]
 800934c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935c:	b29b      	uxth	r3, r3
 800935e:	8013      	strh	r3, [r2, #0]
 8009360:	e2b8      	b.n	80098d4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	633b      	str	r3, [r7, #48]	@ 0x30
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800936c:	b29b      	uxth	r3, r3
 800936e:	461a      	mov	r2, r3
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	4413      	add	r3, r2
 8009374:	633b      	str	r3, [r7, #48]	@ 0x30
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	011a      	lsls	r2, r3, #4
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	4413      	add	r3, r2
 8009380:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	88db      	ldrh	r3, [r3, #6]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	461a      	mov	r2, r3
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	4413      	add	r3, r2
 80093a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	011a      	lsls	r2, r3, #4
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	4413      	add	r3, r2
 80093b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80093d0:	d91d      	bls.n	800940e <USB_ActivateEndpoint+0x2aa>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d102      	bne.n	80093ec <USB_ActivateEndpoint+0x288>
 80093e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093e8:	3b01      	subs	r3, #1
 80093ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	029b      	lsls	r3, r3, #10
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4313      	orrs	r3, r2
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e026      	b.n	800945c <USB_ActivateEndpoint+0x2f8>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <USB_ActivateEndpoint+0x2c8>
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009424:	b29a      	uxth	r2, r3
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	e017      	b.n	800945c <USB_ActivateEndpoint+0x2f8>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	085b      	lsrs	r3, r3, #1
 8009432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <USB_ActivateEndpoint+0x2e2>
 8009440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009442:	3301      	adds	r3, #1
 8009444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29a      	uxth	r2, r3
 800944c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800944e:	b29b      	uxth	r3, r3
 8009450:	029b      	lsls	r3, r3, #10
 8009452:	b29b      	uxth	r3, r3
 8009454:	4313      	orrs	r3, r2
 8009456:	b29a      	uxth	r2, r3
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	847b      	strh	r3, [r7, #34]	@ 0x22
 800946a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800946c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01b      	beq.n	80094ac <USB_ActivateEndpoint+0x348>
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948a:	843b      	strh	r3, [r7, #32]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	441a      	add	r2, r3
 8009496:	8c3b      	ldrh	r3, [r7, #32]
 8009498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800949c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d124      	bne.n	80094fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ca:	83bb      	strh	r3, [r7, #28]
 80094cc:	8bbb      	ldrh	r3, [r7, #28]
 80094ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80094d2:	83bb      	strh	r3, [r7, #28]
 80094d4:	8bbb      	ldrh	r3, [r7, #28]
 80094d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80094da:	83bb      	strh	r3, [r7, #28]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	441a      	add	r2, r3
 80094e6:	8bbb      	ldrh	r3, [r7, #28]
 80094e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	8013      	strh	r3, [r2, #0]
 80094fc:	e1ea      	b.n	80098d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009514:	83fb      	strh	r3, [r7, #30]
 8009516:	8bfb      	ldrh	r3, [r7, #30]
 8009518:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800951c:	83fb      	strh	r3, [r7, #30]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	441a      	add	r2, r3
 8009528:	8bfb      	ldrh	r3, [r7, #30]
 800952a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800952e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953a:	b29b      	uxth	r3, r3
 800953c:	8013      	strh	r3, [r2, #0]
 800953e:	e1c9      	b.n	80098d4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	78db      	ldrb	r3, [r3, #3]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d11e      	bne.n	8009586 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800955a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009578:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800957c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009580:	b29b      	uxth	r3, r3
 8009582:	8013      	strh	r3, [r2, #0]
 8009584:	e01d      	b.n	80095c2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800959c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	441a      	add	r2, r3
 80095aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80095ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095be:	b29b      	uxth	r3, r3
 80095c0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095d2:	4413      	add	r3, r2
 80095d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	011a      	lsls	r2, r3, #4
 80095dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	891b      	ldrh	r3, [r3, #8]
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	005b      	lsls	r3, r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095f4:	801a      	strh	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009600:	b29b      	uxth	r3, r3
 8009602:	461a      	mov	r2, r3
 8009604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009606:	4413      	add	r3, r2
 8009608:	657b      	str	r3, [r7, #84]	@ 0x54
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	011a      	lsls	r2, r3, #4
 8009610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009612:	4413      	add	r3, r2
 8009614:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009618:	653b      	str	r3, [r7, #80]	@ 0x50
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	895b      	ldrh	r3, [r3, #10]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	b29b      	uxth	r3, r3
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009628:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 8093 	bne.w	800975a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01b      	beq.n	8009688 <USB_ActivateEndpoint+0x524>
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009666:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	441a      	add	r2, r3
 8009672:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800967c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009684:	b29b      	uxth	r3, r3
 8009686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009696:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01b      	beq.n	80096d8 <USB_ActivateEndpoint+0x574>
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	441a      	add	r2, r3
 80096c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80096c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80096f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80096f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80096f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80096f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80096fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80096fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	441a      	add	r2, r3
 800970a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800970c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800971c:	b29b      	uxth	r3, r3
 800971e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009736:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	441a      	add	r2, r3
 8009742:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800974c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009754:	b29b      	uxth	r3, r3
 8009756:	8013      	strh	r3, [r2, #0]
 8009758:	e0bc      	b.n	80098d4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800976a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800976e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01d      	beq.n	80097b2 <USB_ActivateEndpoint+0x64e>
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800978c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	441a      	add	r2, r3
 800979a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800979e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80097c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80097c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01d      	beq.n	800980a <USB_ActivateEndpoint+0x6a6>
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	441a      	add	r2, r3
 80097f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80097f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009802:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	78db      	ldrb	r3, [r3, #3]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d024      	beq.n	800985c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009828:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800982c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009830:	f083 0320 	eor.w	r3, r3, #32
 8009834:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	441a      	add	r2, r3
 8009842:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800984a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009856:	b29b      	uxth	r3, r3
 8009858:	8013      	strh	r3, [r2, #0]
 800985a:	e01d      	b.n	8009898 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800986e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009872:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	441a      	add	r2, r3
 8009880:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800988c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009894:	b29b      	uxth	r3, r3
 8009896:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	441a      	add	r2, r3
 80098bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80098c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80098d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3774      	adds	r7, #116	@ 0x74
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop

080098e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b08d      	sub	sp, #52	@ 0x34
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	7b1b      	ldrb	r3, [r3, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f040 808e 	bne.w	8009a14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d044      	beq.n	800998a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	81bb      	strh	r3, [r7, #12]
 800990e:	89bb      	ldrh	r3, [r7, #12]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01b      	beq.n	8009950 <USB_DeactivateEndpoint+0x6c>
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800992a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800992e:	817b      	strh	r3, [r7, #10]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	441a      	add	r2, r3
 800993a:	897b      	ldrh	r3, [r7, #10]
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009948:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009966:	813b      	strh	r3, [r7, #8]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	893b      	ldrh	r3, [r7, #8]
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800997c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]
 8009988:	e192      	b.n	8009cb0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	827b      	strh	r3, [r7, #18]
 8009998:	8a7b      	ldrh	r3, [r7, #18]
 800999a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <USB_DeactivateEndpoint+0xf6>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099b8:	823b      	strh	r3, [r7, #16]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	8a3b      	ldrh	r3, [r7, #16]
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f0:	81fb      	strh	r3, [r7, #14]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	441a      	add	r2, r3
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	8013      	strh	r3, [r2, #0]
 8009a12:	e14d      	b.n	8009cb0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 80a5 	bne.w	8009b68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	843b      	strh	r3, [r7, #32]
 8009a2c:	8c3b      	ldrh	r3, [r7, #32]
 8009a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d01b      	beq.n	8009a6e <USB_DeactivateEndpoint+0x18a>
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a4c:	83fb      	strh	r3, [r7, #30]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	441a      	add	r2, r3
 8009a58:	8bfb      	ldrh	r3, [r7, #30]
 8009a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	83bb      	strh	r3, [r7, #28]
 8009a7c:	8bbb      	ldrh	r3, [r7, #28]
 8009a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d01b      	beq.n	8009abe <USB_DeactivateEndpoint+0x1da>
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a9c:	837b      	strh	r3, [r7, #26]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	441a      	add	r2, r3
 8009aa8:	8b7b      	ldrh	r3, [r7, #26]
 8009aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad4:	833b      	strh	r3, [r7, #24]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	441a      	add	r2, r3
 8009ae0:	8b3b      	ldrh	r3, [r7, #24]
 8009ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b0c:	82fb      	strh	r3, [r7, #22]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	441a      	add	r2, r3
 8009b18:	8afb      	ldrh	r3, [r7, #22]
 8009b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b44:	82bb      	strh	r3, [r7, #20]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	441a      	add	r2, r3
 8009b50:	8abb      	ldrh	r3, [r7, #20]
 8009b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	8013      	strh	r3, [r2, #0]
 8009b66:	e0a3      	b.n	8009cb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009b76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01b      	beq.n	8009bb8 <USB_DeactivateEndpoint+0x2d4>
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b96:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009bc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01b      	beq.n	8009c08 <USB_DeactivateEndpoint+0x324>
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	441a      	add	r2, r3
 8009bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	441a      	add	r2, r3
 8009c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	441a      	add	r2, r3
 8009c9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3734      	adds	r7, #52	@ 0x34
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr

08009cbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b0c2      	sub	sp, #264	@ 0x108
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cca:	6018      	str	r0, [r3, #0]
 8009ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	f040 86b7 	bne.w	800aa56 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d908      	bls.n	8009d16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009d14:	e007      	b.n	8009d26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	7b1b      	ldrb	r3, [r3, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d13a      	bne.n	8009dac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6959      	ldr	r1, [r3, #20]
 8009d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	88da      	ldrh	r2, [r3, #6]
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d5c:	6800      	ldr	r0, [r0, #0]
 8009d5e:	f001 fc9c 	bl	800b69a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	461a      	mov	r2, r3
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	4413      	add	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	011a      	lsls	r2, r3, #4
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	4413      	add	r3, r2
 8009d98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	f000 be1f 	b.w	800a9ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f040 8462 	bne.w	800a682 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a1a      	ldr	r2, [r3, #32]
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	f240 83df 	bls.w	800a59a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	441a      	add	r2, r3
 8009e20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6a1a      	ldr	r2, [r3, #32]
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 81c7 	beq.w	800a20c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d177      	bne.n	8009f8a <USB_EPStartXfer+0x2ce>
 8009e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	4413      	add	r3, r2
 8009ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	011a      	lsls	r2, r3, #4
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	4413      	add	r3, r2
 8009ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eec:	d921      	bls.n	8009f32 <USB_EPStartXfer+0x276>
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <USB_EPStartXfer+0x252>
 8009f04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	029b      	lsls	r3, r3, #10
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	e050      	b.n	8009fd4 <USB_EPStartXfer+0x318>
 8009f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <USB_EPStartXfer+0x294>
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	e041      	b.n	8009fd4 <USB_EPStartXfer+0x318>
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <USB_EPStartXfer+0x2b4>
 8009f66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	029b      	lsls	r3, r3, #10
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4313      	orrs	r3, r2
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	801a      	strh	r2, [r3, #0]
 8009f88:	e024      	b.n	8009fd4 <USB_EPStartXfer+0x318>
 8009f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	785b      	ldrb	r3, [r3, #1]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d11c      	bne.n	8009fd4 <USB_EPStartXfer+0x318>
 8009f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	461a      	mov	r2, r3
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	4413      	add	r3, r2
 8009fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	011a      	lsls	r2, r3, #4
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6959      	ldr	r1, [r3, #20]
 8009ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ffa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ffe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a002:	6800      	ldr	r0, [r0, #0]
 800a004:	f001 fb49 	bl	800b69a <USB_WritePMA>
            ep->xfer_buff += len;
 800a008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a018:	441a      	add	r2, r3
 800a01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a01e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6a1a      	ldr	r2, [r3, #32]
 800a032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d90f      	bls.n	800a062 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a052:	1ad2      	subs	r2, r2, r3
 800a054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	621a      	str	r2, [r3, #32]
 800a060:	e00e      	b.n	800a080 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2200      	movs	r2, #0
 800a07e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d177      	bne.n	800a180 <USB_EPStartXfer+0x4c4>
 800a090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	61bb      	str	r3, [r7, #24]
 800a09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	61bb      	str	r3, [r7, #24]
 800a0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	011a      	lsls	r2, r3, #4
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	801a      	strh	r2, [r3, #0]
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0e2:	d921      	bls.n	800a128 <USB_EPStartXfer+0x46c>
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e8:	095b      	lsrs	r3, r3, #5
 800a0ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f2:	f003 031f 	and.w	r3, r3, #31
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d104      	bne.n	800a104 <USB_EPStartXfer+0x448>
 800a0fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0fe:	3b01      	subs	r3, #1
 800a100:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a10e:	b29b      	uxth	r3, r3
 800a110:	029b      	lsls	r3, r3, #10
 800a112:	b29b      	uxth	r3, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	b29b      	uxth	r3, r3
 800a118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a11c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a120:	b29a      	uxth	r2, r3
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	e056      	b.n	800a1d6 <USB_EPStartXfer+0x51a>
 800a128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <USB_EPStartXfer+0x48a>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13e:	b29a      	uxth	r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	e047      	b.n	800a1d6 <USB_EPStartXfer+0x51a>
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <USB_EPStartXfer+0x4aa>
 800a15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a160:	3301      	adds	r3, #1
 800a162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a170:	b29b      	uxth	r3, r3
 800a172:	029b      	lsls	r3, r3, #10
 800a174:	b29b      	uxth	r3, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	b29a      	uxth	r2, r3
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	e02a      	b.n	800a1d6 <USB_EPStartXfer+0x51a>
 800a180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d122      	bne.n	800a1d6 <USB_EPStartXfer+0x51a>
 800a190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	623b      	str	r3, [r7, #32]
 800a19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	623b      	str	r3, [r7, #32]
 800a1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	011a      	lsls	r2, r3, #4
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	891b      	ldrh	r3, [r3, #8]
 800a1e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6959      	ldr	r1, [r3, #20]
 800a1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a1fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a200:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a204:	6800      	ldr	r0, [r0, #0]
 800a206:	f001 fa48 	bl	800b69a <USB_WritePMA>
 800a20a:	e3ee      	b.n	800a9ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d177      	bne.n	800a30c <USB_EPStartXfer+0x650>
 800a21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a23c:	4413      	add	r3, r2
 800a23e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	011a      	lsls	r2, r3, #4
 800a24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a250:	4413      	add	r3, r2
 800a252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a256:	647b      	str	r3, [r7, #68]	@ 0x44
 800a258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a262:	b29a      	uxth	r2, r3
 800a264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a266:	801a      	strh	r2, [r3, #0]
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a26c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a26e:	d921      	bls.n	800a2b4 <USB_EPStartXfer+0x5f8>
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a274:	095b      	lsrs	r3, r3, #5
 800a276:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	2b00      	cmp	r3, #0
 800a284:	d104      	bne.n	800a290 <USB_EPStartXfer+0x5d4>
 800a286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a28a:	3b01      	subs	r3, #1
 800a28c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29a      	uxth	r2, r3
 800a296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	029b      	lsls	r3, r3, #10
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b0:	801a      	strh	r2, [r3, #0]
 800a2b2:	e056      	b.n	800a362 <USB_EPStartXfer+0x6a6>
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10a      	bne.n	800a2d2 <USB_EPStartXfer+0x616>
 800a2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	e047      	b.n	800a362 <USB_EPStartXfer+0x6a6>
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <USB_EPStartXfer+0x636>
 800a2e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a2f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	029b      	lsls	r3, r3, #10
 800a300:	b29b      	uxth	r3, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	b29a      	uxth	r2, r3
 800a306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a308:	801a      	strh	r2, [r3, #0]
 800a30a:	e02a      	b.n	800a362 <USB_EPStartXfer+0x6a6>
 800a30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d122      	bne.n	800a362 <USB_EPStartXfer+0x6a6>
 800a31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	653b      	str	r3, [r7, #80]	@ 0x50
 800a328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a336:	b29b      	uxth	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a33c:	4413      	add	r3, r2
 800a33e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	011a      	lsls	r2, r3, #4
 800a34e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a350:	4413      	add	r3, r2
 800a352:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	891b      	ldrh	r3, [r3, #8]
 800a36e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6959      	ldr	r1, [r3, #20]
 800a37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a382:	b29b      	uxth	r3, r3
 800a384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a388:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a38c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a390:	6800      	ldr	r0, [r0, #0]
 800a392:	f001 f982 	bl	800b69a <USB_WritePMA>
            ep->xfer_buff += len;
 800a396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	695a      	ldr	r2, [r3, #20]
 800a3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a6:	441a      	add	r2, r3
 800a3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6a1a      	ldr	r2, [r3, #32]
 800a3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d90f      	bls.n	800a3f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a3d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a1a      	ldr	r2, [r3, #32]
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	1ad2      	subs	r2, r2, r3
 800a3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	621a      	str	r2, [r3, #32]
 800a3ee:	e00e      	b.n	800a40e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	643b      	str	r3, [r7, #64]	@ 0x40
 800a41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d177      	bne.n	800a51a <USB_EPStartXfer+0x85e>
 800a42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a444:	b29b      	uxth	r3, r3
 800a446:	461a      	mov	r2, r3
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	4413      	add	r3, r2
 800a44c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	011a      	lsls	r2, r3, #4
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	4413      	add	r3, r2
 800a460:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a470:	b29a      	uxth	r2, r3
 800a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a474:	801a      	strh	r2, [r3, #0]
 800a476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a47c:	d921      	bls.n	800a4c2 <USB_EPStartXfer+0x806>
 800a47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48c:	f003 031f 	and.w	r3, r3, #31
 800a490:	2b00      	cmp	r3, #0
 800a492:	d104      	bne.n	800a49e <USB_EPStartXfer+0x7e2>
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a498:	3b01      	subs	r3, #1
 800a49a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	029b      	lsls	r3, r3, #10
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	e050      	b.n	800a564 <USB_EPStartXfer+0x8a8>
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <USB_EPStartXfer+0x824>
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	e041      	b.n	800a564 <USB_EPStartXfer+0x8a8>
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <USB_EPStartXfer+0x844>
 800a4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	b29a      	uxth	r2, r3
 800a506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	029b      	lsls	r3, r3, #10
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4313      	orrs	r3, r2
 800a512:	b29a      	uxth	r2, r3
 800a514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a516:	801a      	strh	r2, [r3, #0]
 800a518:	e024      	b.n	800a564 <USB_EPStartXfer+0x8a8>
 800a51a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a51e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d11c      	bne.n	800a564 <USB_EPStartXfer+0x8a8>
 800a52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a53e:	4413      	add	r3, r2
 800a540:	643b      	str	r3, [r7, #64]	@ 0x40
 800a542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	011a      	lsls	r2, r3, #4
 800a550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a552:	4413      	add	r3, r2
 800a554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55e:	b29a      	uxth	r2, r3
 800a560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a562:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	895b      	ldrh	r3, [r3, #10]
 800a570:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6959      	ldr	r1, [r3, #20]
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	b29b      	uxth	r3, r3
 800a586:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a58a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a58e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a592:	6800      	ldr	r0, [r0, #0]
 800a594:	f001 f881 	bl	800b69a <USB_WritePMA>
 800a598:	e227      	b.n	800a9ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	441a      	add	r2, r3
 800a5ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a5f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a602:	b29b      	uxth	r3, r3
 800a604:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a620:	b29b      	uxth	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a626:	4413      	add	r3, r2
 800a628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	011a      	lsls	r2, r3, #4
 800a638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a63a:	4413      	add	r3, r2
 800a63c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a640:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a646:	b29a      	uxth	r2, r3
 800a648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a64a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	891b      	ldrh	r3, [r3, #8]
 800a658:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6959      	ldr	r1, [r3, #20]
 800a668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a672:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a676:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	f001 f80d 	bl	800b69a <USB_WritePMA>
 800a680:	e1b3      	b.n	800a9ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 80c6 	beq.w	800a854 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d177      	bne.n	800a7d4 <USB_EPStartXfer+0xb18>
 800a6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a704:	4413      	add	r3, r2
 800a706:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	011a      	lsls	r2, r3, #4
 800a716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a718:	4413      	add	r3, r2
 800a71a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a71e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a734:	2b3e      	cmp	r3, #62	@ 0x3e
 800a736:	d921      	bls.n	800a77c <USB_EPStartXfer+0xac0>
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73c:	095b      	lsrs	r3, r3, #5
 800a73e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a746:	f003 031f 	and.w	r3, r3, #31
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <USB_EPStartXfer+0xa9c>
 800a74e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a752:	3b01      	subs	r3, #1
 800a754:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a762:	b29b      	uxth	r3, r3
 800a764:	029b      	lsls	r3, r3, #10
 800a766:	b29b      	uxth	r3, r3
 800a768:	4313      	orrs	r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a774:	b29a      	uxth	r2, r3
 800a776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a778:	801a      	strh	r2, [r3, #0]
 800a77a:	e050      	b.n	800a81e <USB_EPStartXfer+0xb62>
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <USB_EPStartXfer+0xade>
 800a784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a78e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a792:	b29a      	uxth	r2, r3
 800a794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a796:	801a      	strh	r2, [r3, #0]
 800a798:	e041      	b.n	800a81e <USB_EPStartXfer+0xb62>
 800a79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a79e:	085b      	lsrs	r3, r3, #1
 800a7a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d004      	beq.n	800a7ba <USB_EPStartXfer+0xafe>
 800a7b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a7ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	029b      	lsls	r3, r3, #10
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	e024      	b.n	800a81e <USB_EPStartXfer+0xb62>
 800a7d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d11c      	bne.n	800a81e <USB_EPStartXfer+0xb62>
 800a7e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7f8:	4413      	add	r3, r2
 800a7fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	011a      	lsls	r2, r3, #4
 800a80a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a80c:	4413      	add	r3, r2
 800a80e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a818:	b29a      	uxth	r2, r3
 800a81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a81c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a81e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	895b      	ldrh	r3, [r3, #10]
 800a82a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6959      	ldr	r1, [r3, #20]
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a844:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a848:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f000 ff24 	bl	800b69a <USB_WritePMA>
 800a852:	e0ca      	b.n	800a9ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d177      	bne.n	800a954 <USB_EPStartXfer+0xc98>
 800a864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a87e:	b29b      	uxth	r3, r3
 800a880:	461a      	mov	r2, r3
 800a882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a884:	4413      	add	r3, r2
 800a886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	011a      	lsls	r2, r3, #4
 800a896:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a898:	4413      	add	r3, r2
 800a89a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a89e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8b6:	d921      	bls.n	800a8fc <USB_EPStartXfer+0xc40>
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8bc:	095b      	lsrs	r3, r3, #5
 800a8be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c6:	f003 031f 	and.w	r3, r3, #31
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <USB_EPStartXfer+0xc1c>
 800a8ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a8d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	029b      	lsls	r3, r3, #10
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8f8:	801a      	strh	r2, [r3, #0]
 800a8fa:	e05c      	b.n	800a9b6 <USB_EPStartXfer+0xcfa>
 800a8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <USB_EPStartXfer+0xc5e>
 800a904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a912:	b29a      	uxth	r2, r3
 800a914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a916:	801a      	strh	r2, [r3, #0]
 800a918:	e04d      	b.n	800a9b6 <USB_EPStartXfer+0xcfa>
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <USB_EPStartXfer+0xc7e>
 800a930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a934:	3301      	adds	r3, #1
 800a936:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	b29a      	uxth	r2, r3
 800a940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a944:	b29b      	uxth	r3, r3
 800a946:	029b      	lsls	r3, r3, #10
 800a948:	b29b      	uxth	r3, r3
 800a94a:	4313      	orrs	r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	e030      	b.n	800a9b6 <USB_EPStartXfer+0xcfa>
 800a954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d128      	bne.n	800a9b6 <USB_EPStartXfer+0xcfa>
 800a964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a980:	b29b      	uxth	r3, r3
 800a982:	461a      	mov	r2, r3
 800a984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a988:	4413      	add	r3, r2
 800a98a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	011a      	lsls	r2, r3, #4
 800a99c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a9b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	891b      	ldrh	r3, [r3, #8]
 800a9c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6959      	ldr	r1, [r3, #20]
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a9dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a9e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a9e4:	6800      	ldr	r0, [r0, #0]
 800a9e6:	f000 fe58 	bl	800b69a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a9ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa10:	817b      	strh	r3, [r7, #10]
 800aa12:	897b      	ldrh	r3, [r7, #10]
 800aa14:	f083 0310 	eor.w	r3, r3, #16
 800aa18:	817b      	strh	r3, [r7, #10]
 800aa1a:	897b      	ldrh	r3, [r7, #10]
 800aa1c:	f083 0320 	eor.w	r3, r3, #32
 800aa20:	817b      	strh	r3, [r7, #10]
 800aa22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	441a      	add	r2, r3
 800aa3c:	897b      	ldrh	r3, [r7, #10]
 800aa3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	8013      	strh	r3, [r2, #0]
 800aa52:	f000 bcde 	b.w	800b412 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aa56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	7b1b      	ldrb	r3, [r3, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 80bb 	bne.w	800abde <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	699a      	ldr	r2, [r3, #24]
 800aa74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d917      	bls.n	800aab4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800aa84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	699a      	ldr	r2, [r3, #24]
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa4:	1ad2      	subs	r2, r2, r3
 800aaa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	619a      	str	r2, [r3, #24]
 800aab2:	e00e      	b.n	800aad2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800aab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800aac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2200      	movs	r2, #0
 800aad0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	011a      	lsls	r2, r3, #4
 800ab0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab0e:	4413      	add	r3, r2
 800ab10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab30:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab32:	d924      	bls.n	800ab7e <USB_EPStartXfer+0xec2>
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab38:	095b      	lsrs	r3, r3, #5
 800ab3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab42:	f003 031f 	and.w	r3, r3, #31
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <USB_EPStartXfer+0xe98>
 800ab4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	029b      	lsls	r3, r3, #10
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	f000 bc10 	b.w	800b39e <USB_EPStartXfer+0x16e2>
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10c      	bne.n	800aba0 <USB_EPStartXfer+0xee4>
 800ab86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e3fe      	b.n	800b39e <USB_EPStartXfer+0x16e2>
 800aba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <USB_EPStartXfer+0xf04>
 800abb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800abba:	3301      	adds	r3, #1
 800abbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800abc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800abcc:	b29b      	uxth	r3, r3
 800abce:	029b      	lsls	r3, r3, #10
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	4313      	orrs	r3, r2
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abda:	801a      	strh	r2, [r3, #0]
 800abdc:	e3df      	b.n	800b39e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800abde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	78db      	ldrb	r3, [r3, #3]
 800abea:	2b02      	cmp	r3, #2
 800abec:	f040 8218 	bne.w	800b020 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800abf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 809d 	bne.w	800ad3c <USB_EPStartXfer+0x1080>
 800ac02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac26:	4413      	add	r3, r2
 800ac28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	011a      	lsls	r2, r3, #4
 800ac3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3e:	4413      	add	r3, r2
 800ac40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ac5a:	801a      	strh	r2, [r3, #0]
 800ac5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac6a:	d92b      	bls.n	800acc4 <USB_EPStartXfer+0x1008>
 800ac6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	095b      	lsrs	r3, r3, #5
 800ac7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ac7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f003 031f 	and.w	r3, r3, #31
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d104      	bne.n	800ac9c <USB_EPStartXfer+0xfe0>
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac96:	3b01      	subs	r3, #1
 800ac98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ac9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	029b      	lsls	r3, r3, #10
 800acac:	b29b      	uxth	r3, r3
 800acae:	4313      	orrs	r3, r2
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acba:	b29a      	uxth	r2, r3
 800acbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acc0:	801a      	strh	r2, [r3, #0]
 800acc2:	e070      	b.n	800ada6 <USB_EPStartXfer+0x10ea>
 800acc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10c      	bne.n	800acee <USB_EPStartXfer+0x1032>
 800acd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acea:	801a      	strh	r2, [r3, #0]
 800acec:	e05b      	b.n	800ada6 <USB_EPStartXfer+0x10ea>
 800acee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	085b      	lsrs	r3, r3, #1
 800acfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <USB_EPStartXfer+0x1062>
 800ad14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad18:	3301      	adds	r3, #1
 800ad1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	029b      	lsls	r3, r3, #10
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	4313      	orrs	r3, r2
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad38:	801a      	strh	r2, [r3, #0]
 800ad3a:	e034      	b.n	800ada6 <USB_EPStartXfer+0x10ea>
 800ad3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d12c      	bne.n	800ada6 <USB_EPStartXfer+0x10ea>
 800ad4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad70:	4413      	add	r3, r2
 800ad72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	011a      	lsls	r2, r3, #4
 800ad84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad88:	4413      	add	r3, r2
 800ad8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ada4:	801a      	strh	r2, [r3, #0]
 800ada6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800adb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	785b      	ldrb	r3, [r3, #1]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f040 809d 	bne.w	800af00 <USB_EPStartXfer+0x1244>
 800adc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800add4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800add8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adea:	4413      	add	r3, r2
 800adec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	011a      	lsls	r2, r3, #4
 800adfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae02:	4413      	add	r3, r2
 800ae04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ae08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae2e:	d92b      	bls.n	800ae88 <USB_EPStartXfer+0x11cc>
 800ae30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	095b      	lsrs	r3, r3, #5
 800ae3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ae42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f003 031f 	and.w	r3, r3, #31
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <USB_EPStartXfer+0x11a4>
 800ae56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ae60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	029b      	lsls	r3, r3, #10
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	4313      	orrs	r3, r2
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae84:	801a      	strh	r2, [r3, #0]
 800ae86:	e069      	b.n	800af5c <USB_EPStartXfer+0x12a0>
 800ae88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <USB_EPStartXfer+0x11f6>
 800ae98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aeae:	801a      	strh	r2, [r3, #0]
 800aeb0:	e054      	b.n	800af5c <USB_EPStartXfer+0x12a0>
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	085b      	lsrs	r3, r3, #1
 800aec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d004      	beq.n	800aee2 <USB_EPStartXfer+0x1226>
 800aed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aedc:	3301      	adds	r3, #1
 800aede:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	029b      	lsls	r3, r3, #10
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	4313      	orrs	r3, r2
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	e02d      	b.n	800af5c <USB_EPStartXfer+0x12a0>
 800af00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d125      	bne.n	800af5c <USB_EPStartXfer+0x12a0>
 800af10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af1e:	b29b      	uxth	r3, r3
 800af20:	461a      	mov	r2, r3
 800af22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800af26:	4413      	add	r3, r2
 800af28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800af2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	011a      	lsls	r2, r3, #4
 800af3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800af3e:	4413      	add	r3, r2
 800af40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800af44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800af48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	b29a      	uxth	r2, r3
 800af56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800af5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 8218 	beq.w	800b39e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800af6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d005      	beq.n	800afa6 <USB_EPStartXfer+0x12ea>
 800af9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10d      	bne.n	800afc2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800afaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f040 81f5 	bne.w	800b39e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800afb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f040 81ee 	bne.w	800b39e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800afc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afe8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800afec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800affa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	441a      	add	r2, r3
 800b006:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b00a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b00e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b016:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	8013      	strh	r3, [r2, #0]
 800b01e:	e1be      	b.n	800b39e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	78db      	ldrb	r3, [r3, #3]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	f040 81b4 	bne.w	800b39a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d917      	bls.n	800b07e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699a      	ldr	r2, [r3, #24]
 800b06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06e:	1ad2      	subs	r2, r2, r3
 800b070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	619a      	str	r2, [r3, #24]
 800b07c:	e00e      	b.n	800b09c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2200      	movs	r2, #0
 800b09a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f040 8085 	bne.w	800b1b8 <USB_EPStartXfer+0x14fc>
 800b0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	011a      	lsls	r2, r3, #4
 800b0e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b0f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b100:	b29a      	uxth	r2, r3
 800b102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b106:	801a      	strh	r2, [r3, #0]
 800b108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b10e:	d923      	bls.n	800b158 <USB_EPStartXfer+0x149c>
 800b110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b11e:	f003 031f 	and.w	r3, r3, #31
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <USB_EPStartXfer+0x1474>
 800b126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b12a:	3b01      	subs	r3, #1
 800b12c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	b29a      	uxth	r2, r3
 800b138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	029b      	lsls	r3, r3, #10
 800b140:	b29b      	uxth	r3, r3
 800b142:	4313      	orrs	r3, r2
 800b144:	b29b      	uxth	r3, r3
 800b146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b14e:	b29a      	uxth	r2, r3
 800b150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	e060      	b.n	800b21a <USB_EPStartXfer+0x155e>
 800b158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10c      	bne.n	800b17a <USB_EPStartXfer+0x14be>
 800b160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b170:	b29a      	uxth	r2, r3
 800b172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b176:	801a      	strh	r2, [r3, #0]
 800b178:	e04f      	b.n	800b21a <USB_EPStartXfer+0x155e>
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <USB_EPStartXfer+0x14de>
 800b190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b194:	3301      	adds	r3, #1
 800b196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b19a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	029b      	lsls	r3, r3, #10
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	e030      	b.n	800b21a <USB_EPStartXfer+0x155e>
 800b1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d128      	bne.n	800b21a <USB_EPStartXfer+0x155e>
 800b1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	011a      	lsls	r2, r3, #4
 800b200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b204:	4413      	add	r3, r2
 800b206:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b20a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b212:	b29a      	uxth	r2, r3
 800b214:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b218:	801a      	strh	r2, [r3, #0]
 800b21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b21e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f040 8085 	bne.w	800b344 <USB_EPStartXfer+0x1688>
 800b23a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b256:	b29b      	uxth	r3, r3
 800b258:	461a      	mov	r2, r3
 800b25a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b25e:	4413      	add	r3, r2
 800b260:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	011a      	lsls	r2, r3, #4
 800b272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b276:	4413      	add	r3, r2
 800b278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b27c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	b29b      	uxth	r3, r3
 800b288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	2b3e      	cmp	r3, #62	@ 0x3e
 800b29a:	d923      	bls.n	800b2e4 <USB_EPStartXfer+0x1628>
 800b29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2aa:	f003 031f 	and.w	r3, r3, #31
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <USB_EPStartXfer+0x1600>
 800b2b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	029b      	lsls	r3, r3, #10
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	e05c      	b.n	800b39e <USB_EPStartXfer+0x16e2>
 800b2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10c      	bne.n	800b306 <USB_EPStartXfer+0x164a>
 800b2ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b302:	801a      	strh	r2, [r3, #0]
 800b304:	e04b      	b.n	800b39e <USB_EPStartXfer+0x16e2>
 800b306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b30a:	085b      	lsrs	r3, r3, #1
 800b30c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b314:	f003 0301 	and.w	r3, r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <USB_EPStartXfer+0x166a>
 800b31c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b320:	3301      	adds	r3, #1
 800b322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b332:	b29b      	uxth	r3, r3
 800b334:	029b      	lsls	r3, r3, #10
 800b336:	b29b      	uxth	r3, r3
 800b338:	4313      	orrs	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b340:	801a      	strh	r2, [r3, #0]
 800b342:	e02c      	b.n	800b39e <USB_EPStartXfer+0x16e2>
 800b344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	785b      	ldrb	r3, [r3, #1]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d124      	bne.n	800b39e <USB_EPStartXfer+0x16e2>
 800b354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b362:	b29b      	uxth	r3, r3
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b36a:	4413      	add	r3, r2
 800b36c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	011a      	lsls	r2, r3, #4
 800b37e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b382:	4413      	add	r3, r2
 800b384:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b390:	b29a      	uxth	r2, r3
 800b392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b396:	801a      	strh	r2, [r3, #0]
 800b398:	e001      	b.n	800b39e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e03a      	b.n	800b414 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b3c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b3cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b3d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b3d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b3d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b3dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	441a      	add	r2, r3
 800b3fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b3fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b40e:	b29b      	uxth	r3, r3
 800b410:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b41e:	b480      	push	{r7}
 800b420:	b085      	sub	sp, #20
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	785b      	ldrb	r3, [r3, #1]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d020      	beq.n	800b472 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b446:	81bb      	strh	r3, [r7, #12]
 800b448:	89bb      	ldrh	r3, [r7, #12]
 800b44a:	f083 0310 	eor.w	r3, r3, #16
 800b44e:	81bb      	strh	r3, [r7, #12]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	441a      	add	r2, r3
 800b45a:	89bb      	ldrh	r3, [r7, #12]
 800b45c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	8013      	strh	r3, [r2, #0]
 800b470:	e01f      	b.n	800b4b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b488:	81fb      	strh	r3, [r7, #14]
 800b48a:	89fb      	ldrh	r3, [r7, #14]
 800b48c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b490:	81fb      	strh	r3, [r7, #14]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	441a      	add	r2, r3
 800b49c:	89fb      	ldrh	r3, [r7, #14]
 800b49e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr

0800b4be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b087      	sub	sp, #28
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	7b1b      	ldrb	r3, [r3, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f040 809d 	bne.w	800b60c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d04c      	beq.n	800b574 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	823b      	strh	r3, [r7, #16]
 800b4e8:	8a3b      	ldrh	r3, [r7, #16]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d01b      	beq.n	800b52a <USB_EPClearStall+0x6c>
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b508:	81fb      	strh	r3, [r7, #14]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	441a      	add	r2, r3
 800b514:	89fb      	ldrh	r3, [r7, #14]
 800b516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b51a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b51e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b522:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b526:	b29b      	uxth	r3, r3
 800b528:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	78db      	ldrb	r3, [r3, #3]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d06c      	beq.n	800b60c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b548:	81bb      	strh	r3, [r7, #12]
 800b54a:	89bb      	ldrh	r3, [r7, #12]
 800b54c:	f083 0320 	eor.w	r3, r3, #32
 800b550:	81bb      	strh	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	441a      	add	r2, r3
 800b55c:	89bb      	ldrh	r3, [r7, #12]
 800b55e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b56e:	b29b      	uxth	r3, r3
 800b570:	8013      	strh	r3, [r2, #0]
 800b572:	e04b      	b.n	800b60c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	82fb      	strh	r3, [r7, #22]
 800b582:	8afb      	ldrh	r3, [r7, #22]
 800b584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01b      	beq.n	800b5c4 <USB_EPClearStall+0x106>
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5a2:	82bb      	strh	r3, [r7, #20]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	441a      	add	r2, r3
 800b5ae:	8abb      	ldrh	r3, [r7, #20]
 800b5b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5da:	827b      	strh	r3, [r7, #18]
 800b5dc:	8a7b      	ldrh	r3, [r7, #18]
 800b5de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b5e2:	827b      	strh	r3, [r7, #18]
 800b5e4:	8a7b      	ldrh	r3, [r7, #18]
 800b5e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b5ea:	827b      	strh	r3, [r7, #18]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	441a      	add	r2, r3
 800b5f6:	8a7b      	ldrh	r3, [r7, #18]
 800b5f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b608:	b29b      	uxth	r3, r3
 800b60a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	bc80      	pop	{r7}
 800b616:	4770      	bx	lr

0800b618 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d103      	bne.n	800b632 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2280      	movs	r2, #128	@ 0x80
 800b62e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr

0800b63e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc80      	pop	{r7}
 800b650:	4770      	bx	lr

0800b652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	bc80      	pop	{r7}
 800b664:	4770      	bx	lr

0800b666 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b674:	b29b      	uxth	r3, r3
 800b676:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b678:	68fb      	ldr	r3, [r7, #12]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	bc80      	pop	{r7}
 800b698:	4770      	bx	lr

0800b69a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b08b      	sub	sp, #44	@ 0x2c
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	80fb      	strh	r3, [r7, #6]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b6b0:	88bb      	ldrh	r3, [r7, #4]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	085b      	lsrs	r3, r3, #1
 800b6b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	005a      	lsls	r2, r3, #1
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d2:	e01f      	b.n	800b714 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	b21b      	sxth	r3, r3
 800b6e2:	021b      	lsls	r3, r3, #8
 800b6e4:	b21a      	sxth	r2, r3
 800b6e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	b21b      	sxth	r3, r3
 800b6ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	8a7a      	ldrh	r2, [r7, #18]
 800b6f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	3302      	adds	r3, #2
 800b700:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3301      	adds	r3, #1
 800b706:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	3301      	adds	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	3b01      	subs	r3, #1
 800b712:	627b      	str	r3, [r7, #36]	@ 0x24
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1dc      	bne.n	800b6d4 <USB_WritePMA+0x3a>
  }
}
 800b71a:	bf00      	nop
 800b71c:	bf00      	nop
 800b71e:	372c      	adds	r7, #44	@ 0x2c
 800b720:	46bd      	mov	sp, r7
 800b722:	bc80      	pop	{r7}
 800b724:	4770      	bx	lr

0800b726 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b726:	b480      	push	{r7}
 800b728:	b08b      	sub	sp, #44	@ 0x2c
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	4611      	mov	r1, r2
 800b732:	461a      	mov	r2, r3
 800b734:	460b      	mov	r3, r1
 800b736:	80fb      	strh	r3, [r7, #6]
 800b738:	4613      	mov	r3, r2
 800b73a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b73c:	88bb      	ldrh	r3, [r7, #4]
 800b73e:	085b      	lsrs	r3, r3, #1
 800b740:	b29b      	uxth	r3, r3
 800b742:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b74c:	88fb      	ldrh	r3, [r7, #6]
 800b74e:	005a      	lsls	r2, r3, #1
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b758:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b75e:	e01b      	b.n	800b798 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	3302      	adds	r3, #2
 800b76c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	b2da      	uxtb	r2, r3
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	3301      	adds	r3, #1
 800b77a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	0a1b      	lsrs	r3, r3, #8
 800b780:	b2da      	uxtb	r2, r3
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	3301      	adds	r3, #1
 800b78a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	3302      	adds	r3, #2
 800b790:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	3b01      	subs	r3, #1
 800b796:	627b      	str	r3, [r7, #36]	@ 0x24
 800b798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1e0      	bne.n	800b760 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b79e:	88bb      	ldrh	r3, [r7, #4]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d007      	beq.n	800b7ba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	701a      	strb	r2, [r3, #0]
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	372c      	adds	r7, #44	@ 0x2c
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bc80      	pop	{r7}
 800b7c2:	4770      	bx	lr

0800b7c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7c1b      	ldrb	r3, [r3, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d115      	bne.n	800b808 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	2181      	movs	r1, #129	@ 0x81
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 feac 	bl	800d542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fea2 	bl	800d542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b806:	e012      	b.n	800b82e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b808:	2340      	movs	r3, #64	@ 0x40
 800b80a:	2202      	movs	r2, #2
 800b80c:	2181      	movs	r1, #129	@ 0x81
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f001 fe97 	bl	800d542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b81a:	2340      	movs	r3, #64	@ 0x40
 800b81c:	2202      	movs	r2, #2
 800b81e:	2101      	movs	r1, #1
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 fe8e 	bl	800d542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b82e:	2308      	movs	r3, #8
 800b830:	2203      	movs	r2, #3
 800b832:	2182      	movs	r1, #130	@ 0x82
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 fe84 	bl	800d542 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b840:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b844:	f001 ffa4 	bl	800d790 <USBD_static_malloc>
 800b848:	4602      	mov	r2, r0
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d102      	bne.n	800b860 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b85a:	2301      	movs	r3, #1
 800b85c:	73fb      	strb	r3, [r7, #15]
 800b85e:	e026      	b.n	800b8ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	7c1b      	ldrb	r3, [r3, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d109      	bne.n	800b89e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b894:	2101      	movs	r1, #1
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 ff43 	bl	800d722 <USBD_LL_PrepareReceive>
 800b89c:	e007      	b.n	800b8ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8a4:	2340      	movs	r3, #64	@ 0x40
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 ff3a 	bl	800d722 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b8c8:	2181      	movs	r1, #129	@ 0x81
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 fe5f 	bl	800d58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 fe58 	bl	800d58e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b8e6:	2182      	movs	r1, #130	@ 0x82
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 fe50 	bl	800d58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 ff4a 	bl	800d7a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b936:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d039      	beq.n	800b9c4 <USBD_CDC_Setup+0x9e>
 800b950:	2b20      	cmp	r3, #32
 800b952:	d17f      	bne.n	800ba54 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	88db      	ldrh	r3, [r3, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d029      	beq.n	800b9b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	b25b      	sxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	da11      	bge.n	800b98a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b972:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	88d2      	ldrh	r2, [r2, #6]
 800b978:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b97a:	6939      	ldr	r1, [r7, #16]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	88db      	ldrh	r3, [r3, #6]
 800b980:	461a      	mov	r2, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f001 fa06 	bl	800cd94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b988:	e06b      	b.n	800ba62 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	785a      	ldrb	r2, [r3, #1]
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	88db      	ldrh	r3, [r3, #6]
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b9a0:	6939      	ldr	r1, [r7, #16]
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	88db      	ldrh	r3, [r3, #6]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 fa21 	bl	800cdf0 <USBD_CtlPrepareRx>
      break;
 800b9ae:	e058      	b.n	800ba62 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	7850      	ldrb	r0, [r2, #1]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	4798      	blx	r3
      break;
 800b9c2:	e04e      	b.n	800ba62 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	2b0b      	cmp	r3, #11
 800b9ca:	d02e      	beq.n	800ba2a <USBD_CDC_Setup+0x104>
 800b9cc:	2b0b      	cmp	r3, #11
 800b9ce:	dc38      	bgt.n	800ba42 <USBD_CDC_Setup+0x11c>
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <USBD_CDC_Setup+0xb4>
 800b9d4:	2b0a      	cmp	r3, #10
 800b9d6:	d014      	beq.n	800ba02 <USBD_CDC_Setup+0xdc>
 800b9d8:	e033      	b.n	800ba42 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d107      	bne.n	800b9f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b9e4:	f107 030c 	add.w	r3, r7, #12
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 f9d1 	bl	800cd94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9f2:	e02e      	b.n	800ba52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f001 f962 	bl	800ccc0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	75fb      	strb	r3, [r7, #23]
          break;
 800ba00:	e027      	b.n	800ba52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d107      	bne.n	800ba1c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba0c:	f107 030f 	add.w	r3, r7, #15
 800ba10:	2201      	movs	r2, #1
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 f9bd 	bl	800cd94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba1a:	e01a      	b.n	800ba52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 f94e 	bl	800ccc0 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba24:	2302      	movs	r3, #2
 800ba26:	75fb      	strb	r3, [r7, #23]
          break;
 800ba28:	e013      	b.n	800ba52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d00d      	beq.n	800ba50 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 f942 	bl	800ccc0 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba40:	e006      	b.n	800ba50 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 f93b 	bl	800ccc0 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ba4e:	e000      	b.n	800ba52 <USBD_CDC_Setup+0x12c>
          break;
 800ba50:	bf00      	nop
      }
      break;
 800ba52:	e006      	b.n	800ba62 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 f932 	bl	800ccc0 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba60:	bf00      	nop
  }

  return ret;
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	460b      	mov	r3, r1
 800ba76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba86:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d03a      	beq.n	800bb08 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	440b      	add	r3, r1
 800baa0:	331c      	adds	r3, #28
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d029      	beq.n	800bafc <USBD_CDC_DataIn+0x90>
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	4613      	mov	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	440b      	add	r3, r1
 800bab6:	331c      	adds	r3, #28
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	78f9      	ldrb	r1, [r7, #3]
 800babc:	68b8      	ldr	r0, [r7, #8]
 800babe:	460b      	mov	r3, r1
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	00db      	lsls	r3, r3, #3
 800bac6:	4403      	add	r3, r0
 800bac8:	3320      	adds	r3, #32
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bad0:	fb01 f303 	mul.w	r3, r1, r3
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d110      	bne.n	800bafc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	440b      	add	r3, r1
 800bae8:	331c      	adds	r3, #28
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800baee:	78f9      	ldrb	r1, [r7, #3]
 800baf0:	2300      	movs	r3, #0
 800baf2:	2200      	movs	r2, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 fdf1 	bl	800d6dc <USBD_LL_Transmit>
 800bafa:	e003      	b.n	800bb04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e000      	b.n	800bb0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bb08:	2302      	movs	r3, #2
  }
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b084      	sub	sp, #16
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 fe1c 	bl	800d768 <USBD_LL_GetRxDataSize>
 800bb30:	4602      	mov	r2, r0
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00d      	beq.n	800bb5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bb56:	4611      	mov	r1, r2
 800bb58:	4798      	blx	r3

    return USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e000      	b.n	800bb60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bb5e:	2302      	movs	r3, #2
  }
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d014      	beq.n	800bbac <USBD_CDC_EP0_RxReady+0x44>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bb88:	2bff      	cmp	r3, #255	@ 0xff
 800bb8a:	d00f      	beq.n	800bbac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bb9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bba2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	22ff      	movs	r2, #255	@ 0xff
 800bba8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
	...

0800bbb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2243      	movs	r2, #67	@ 0x43
 800bbc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bbc6:	4b03      	ldr	r3, [pc, #12]	@ (800bbd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bc80      	pop	{r7}
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	200000a0 	.word	0x200000a0

0800bbd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2243      	movs	r2, #67	@ 0x43
 800bbe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bbe6:	4b03      	ldr	r3, [pc, #12]	@ (800bbf4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bc80      	pop	{r7}
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	2000005c 	.word	0x2000005c

0800bbf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2243      	movs	r2, #67	@ 0x43
 800bc04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bc06:	4b03      	ldr	r3, [pc, #12]	@ (800bc14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bc80      	pop	{r7}
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	200000e4 	.word	0x200000e4

0800bc18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	220a      	movs	r2, #10
 800bc24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bc26:	4b03      	ldr	r3, [pc, #12]	@ (800bc34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bc80      	pop	{r7}
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000018 	.word	0x20000018

0800bc38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bc42:	2302      	movs	r3, #2
 800bc44:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d005      	beq.n	800bc58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bc80      	pop	{r7}
 800bc62:	4770      	bx	lr

0800bc64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	371c      	adds	r7, #28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr

0800bc96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bc80      	pop	{r7}
 800bcba:	4770      	bx	lr

0800bcbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d01c      	beq.n	800bd10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d115      	bne.n	800bd0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	2181      	movs	r1, #129	@ 0x81
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 fcea 	bl	800d6dc <USBD_LL_Transmit>

      return USBD_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e002      	b.n	800bd12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e000      	b.n	800bd12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bd10:	2302      	movs	r3, #2
  }
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d017      	beq.n	800bd64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7c1b      	ldrb	r3, [r3, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d109      	bne.n	800bd50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd46:	2101      	movs	r1, #1
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fcea 	bl	800d722 <USBD_LL_PrepareReceive>
 800bd4e:	e007      	b.n	800bd60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd56:	2340      	movs	r3, #64	@ 0x40
 800bd58:	2101      	movs	r1, #1
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fce1 	bl	800d722 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	e000      	b.n	800bd66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bd64:	2302      	movs	r3, #2
  }
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	60f8      	str	r0, [r7, #12]
 800bd76:	60b9      	str	r1, [r7, #8]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd82:	2302      	movs	r3, #2
 800bd84:	e01a      	b.n	800bdbc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	79fa      	ldrb	r2, [r7, #7]
 800bdb2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f001 fb4f 	bl	800d458 <USBD_LL_Init>

  return USBD_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d006      	beq.n	800bde6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]
 800bde4:	e001      	b.n	800bdea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bde6:	2302      	movs	r3, #2
 800bde8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bc80      	pop	{r7}
 800bdf4:	4770      	bx	lr

0800bdf6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fb84 	bl	800d50c <USBD_LL_Start>

  return USBD_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bc80      	pop	{r7}
 800be20:	4770      	bx	lr

0800be22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be2e:	2302      	movs	r3, #2
 800be30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00c      	beq.n	800be56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	78fa      	ldrb	r2, [r7, #3]
 800be46:	4611      	mov	r1, r2
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	4798      	blx	r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800be56:	7bfb      	ldrb	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	78fa      	ldrb	r2, [r7, #3]
 800be76:	4611      	mov	r1, r2
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3

  return USBD_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fed8 	bl	800cc4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800beac:	461a      	mov	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800beba:	f003 031f 	and.w	r3, r3, #31
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d016      	beq.n	800bef0 <USBD_LL_SetupStage+0x6a>
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d81c      	bhi.n	800bf00 <USBD_LL_SetupStage+0x7a>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <USBD_LL_SetupStage+0x4a>
 800beca:	2b01      	cmp	r3, #1
 800becc:	d008      	beq.n	800bee0 <USBD_LL_SetupStage+0x5a>
 800bece:	e017      	b.n	800bf00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f9cb 	bl	800c274 <USBD_StdDevReq>
      break;
 800bede:	e01a      	b.n	800bf16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fa2d 	bl	800c348 <USBD_StdItfReq>
      break;
 800beee:	e012      	b.n	800bf16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fa6d 	bl	800c3d8 <USBD_StdEPReq>
      break;
 800befe:	e00a      	b.n	800bf16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800bf06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 fb5c 	bl	800d5cc <USBD_LL_StallEP>
      break;
 800bf14:	bf00      	nop
  }

  return USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	607a      	str	r2, [r7, #4]
 800bf2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bf2e:	7afb      	ldrb	r3, [r7, #11]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d14b      	bne.n	800bfcc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bf3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d134      	bne.n	800bfb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d919      	bls.n	800bf86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	68da      	ldr	r2, [r3, #12]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	1ad2      	subs	r2, r2, r3
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d203      	bcs.n	800bf74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	e002      	b.n	800bf7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 ff54 	bl	800ce2c <USBD_CtlContinueRx>
 800bf84:	e038      	b.n	800bff8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d105      	bne.n	800bfa8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 ff51 	bl	800ce50 <USBD_CtlSendStatus>
 800bfae:	e023      	b.n	800bff8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	d11e      	bne.n	800bff8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f001 fb01 	bl	800d5cc <USBD_LL_StallEP>
 800bfca:	e015      	b.n	800bff8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00d      	beq.n	800bff4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d108      	bne.n	800bff4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	7afa      	ldrb	r2, [r7, #11]
 800bfec:	4611      	mov	r1, r2
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	4798      	blx	r3
 800bff2:	e001      	b.n	800bff8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bff4:	2302      	movs	r3, #2
 800bff6:	e000      	b.n	800bffa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	460b      	mov	r3, r1
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d17f      	bne.n	800c116 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3314      	adds	r3, #20
 800c01a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c022:	2b02      	cmp	r3, #2
 800c024:	d15c      	bne.n	800c0e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d915      	bls.n	800c05e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	68da      	ldr	r2, [r3, #12]
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	1ad2      	subs	r2, r2, r3
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	b29b      	uxth	r3, r3
 800c046:	461a      	mov	r2, r3
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 febe 	bl	800cdcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c050:	2300      	movs	r3, #0
 800c052:	2200      	movs	r2, #0
 800c054:	2100      	movs	r1, #0
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f001 fb63 	bl	800d722 <USBD_LL_PrepareReceive>
 800c05c:	e04e      	b.n	800c0fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	6912      	ldr	r2, [r2, #16]
 800c066:	fbb3 f1f2 	udiv	r1, r3, r2
 800c06a:	fb01 f202 	mul.w	r2, r1, r2
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	2b00      	cmp	r3, #0
 800c072:	d11c      	bne.n	800c0ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d316      	bcc.n	800c0ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d20f      	bcs.n	800c0ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 fe9a 	bl	800cdcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f001 fb3b 	bl	800d722 <USBD_LL_PrepareReceive>
 800c0ac:	e026      	b.n	800c0fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d105      	bne.n	800c0d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c0d0:	2180      	movs	r1, #128	@ 0x80
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f001 fa7a 	bl	800d5cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f000 fecc 	bl	800ce76 <USBD_CtlReceiveStatus>
 800c0de:	e00d      	b.n	800c0fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d004      	beq.n	800c0f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c0f4:	2180      	movs	r1, #128	@ 0x80
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f001 fa68 	bl	800d5cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c102:	2b01      	cmp	r3, #1
 800c104:	d11d      	bne.n	800c142 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7ff fe81 	bl	800be0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c114:	e015      	b.n	800c142 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00d      	beq.n	800c13e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d108      	bne.n	800c13e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	7afa      	ldrb	r2, [r7, #11]
 800c136:	4611      	mov	r1, r2
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	4798      	blx	r3
 800c13c:	e001      	b.n	800c142 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c13e:	2302      	movs	r3, #2
 800c140:	e000      	b.n	800c144 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c154:	2340      	movs	r3, #64	@ 0x40
 800c156:	2200      	movs	r2, #0
 800c158:	2100      	movs	r1, #0
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f9f1 	bl	800d542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2240      	movs	r2, #64	@ 0x40
 800c16c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c170:	2340      	movs	r3, #64	@ 0x40
 800c172:	2200      	movs	r2, #0
 800c174:	2180      	movs	r1, #128	@ 0x80
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 f9e3 	bl	800d542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2240      	movs	r2, #64	@ 0x40
 800c186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	6852      	ldr	r2, [r2, #4]
 800c1bc:	b2d2      	uxtb	r2, r2
 800c1be:	4611      	mov	r1, r2
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	4798      	blx	r3
  }

  return USBD_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bc80      	pop	{r7}
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2204      	movs	r2, #4
 800c204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bc80      	pop	{r7}
 800c212:	4770      	bx	lr

0800c214 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c222:	2b04      	cmp	r3, #4
 800c224:	d105      	bne.n	800c232 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	bc80      	pop	{r7}
 800c23c:	4770      	bx	lr

0800c23e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b082      	sub	sp, #8
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d10b      	bne.n	800c268 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d005      	beq.n	800c268 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
	...

0800c274 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c28a:	2b40      	cmp	r3, #64	@ 0x40
 800c28c:	d005      	beq.n	800c29a <USBD_StdDevReq+0x26>
 800c28e:	2b40      	cmp	r3, #64	@ 0x40
 800c290:	d84f      	bhi.n	800c332 <USBD_StdDevReq+0xbe>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d009      	beq.n	800c2aa <USBD_StdDevReq+0x36>
 800c296:	2b20      	cmp	r3, #32
 800c298:	d14b      	bne.n	800c332 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
      break;
 800c2a8:	e048      	b.n	800c33c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	d839      	bhi.n	800c326 <USBD_StdDevReq+0xb2>
 800c2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b8 <USBD_StdDevReq+0x44>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c309 	.word	0x0800c309
 800c2bc:	0800c31d 	.word	0x0800c31d
 800c2c0:	0800c327 	.word	0x0800c327
 800c2c4:	0800c313 	.word	0x0800c313
 800c2c8:	0800c327 	.word	0x0800c327
 800c2cc:	0800c2eb 	.word	0x0800c2eb
 800c2d0:	0800c2e1 	.word	0x0800c2e1
 800c2d4:	0800c327 	.word	0x0800c327
 800c2d8:	0800c2ff 	.word	0x0800c2ff
 800c2dc:	0800c2f5 	.word	0x0800c2f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f9dc 	bl	800c6a0 <USBD_GetDescriptor>
          break;
 800c2e8:	e022      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fb3f 	bl	800c970 <USBD_SetAddress>
          break;
 800c2f2:	e01d      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fb7e 	bl	800c9f8 <USBD_SetConfig>
          break;
 800c2fc:	e018      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fc07 	bl	800cb14 <USBD_GetConfig>
          break;
 800c306:	e013      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fc37 	bl	800cb7e <USBD_GetStatus>
          break;
 800c310:	e00e      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fc65 	bl	800cbe4 <USBD_SetFeature>
          break;
 800c31a:	e009      	b.n	800c330 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fc74 	bl	800cc0c <USBD_ClrFeature>
          break;
 800c324:	e004      	b.n	800c330 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fcc9 	bl	800ccc0 <USBD_CtlError>
          break;
 800c32e:	bf00      	nop
      }
      break;
 800c330:	e004      	b.n	800c33c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fcc3 	bl	800ccc0 <USBD_CtlError>
      break;
 800c33a:	bf00      	nop
  }

  return ret;
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop

0800c348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c35e:	2b40      	cmp	r3, #64	@ 0x40
 800c360:	d005      	beq.n	800c36e <USBD_StdItfReq+0x26>
 800c362:	2b40      	cmp	r3, #64	@ 0x40
 800c364:	d82e      	bhi.n	800c3c4 <USBD_StdItfReq+0x7c>
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <USBD_StdItfReq+0x26>
 800c36a:	2b20      	cmp	r3, #32
 800c36c:	d12a      	bne.n	800c3c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c374:	3b01      	subs	r3, #1
 800c376:	2b02      	cmp	r3, #2
 800c378:	d81d      	bhi.n	800c3b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	889b      	ldrh	r3, [r3, #4]
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2b01      	cmp	r3, #1
 800c382:	d813      	bhi.n	800c3ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	88db      	ldrh	r3, [r3, #6]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d110      	bne.n	800c3c0 <USBD_StdItfReq+0x78>
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10d      	bne.n	800c3c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fd53 	bl	800ce50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3aa:	e009      	b.n	800c3c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fc86 	bl	800ccc0 <USBD_CtlError>
          break;
 800c3b4:	e004      	b.n	800c3c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c3b6:	6839      	ldr	r1, [r7, #0]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fc81 	bl	800ccc0 <USBD_CtlError>
          break;
 800c3be:	e000      	b.n	800c3c2 <USBD_StdItfReq+0x7a>
          break;
 800c3c0:	bf00      	nop
      }
      break;
 800c3c2:	e004      	b.n	800c3ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fc7a 	bl	800ccc0 <USBD_CtlError>
      break;
 800c3cc:	bf00      	nop
  }

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	889b      	ldrh	r3, [r3, #4]
 800c3ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3f4:	2b40      	cmp	r3, #64	@ 0x40
 800c3f6:	d007      	beq.n	800c408 <USBD_StdEPReq+0x30>
 800c3f8:	2b40      	cmp	r3, #64	@ 0x40
 800c3fa:	f200 8146 	bhi.w	800c68a <USBD_StdEPReq+0x2b2>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00a      	beq.n	800c418 <USBD_StdEPReq+0x40>
 800c402:	2b20      	cmp	r3, #32
 800c404:	f040 8141 	bne.w	800c68a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	4798      	blx	r3
      break;
 800c416:	e13d      	b.n	800c694 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c420:	2b20      	cmp	r3, #32
 800c422:	d10a      	bne.n	800c43a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	6839      	ldr	r1, [r7, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
 800c432:	4603      	mov	r3, r0
 800c434:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	e12d      	b.n	800c696 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	785b      	ldrb	r3, [r3, #1]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d007      	beq.n	800c452 <USBD_StdEPReq+0x7a>
 800c442:	2b03      	cmp	r3, #3
 800c444:	f300 811b 	bgt.w	800c67e <USBD_StdEPReq+0x2a6>
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d072      	beq.n	800c532 <USBD_StdEPReq+0x15a>
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d03a      	beq.n	800c4c6 <USBD_StdEPReq+0xee>
 800c450:	e115      	b.n	800c67e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d002      	beq.n	800c462 <USBD_StdEPReq+0x8a>
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d015      	beq.n	800c48c <USBD_StdEPReq+0xb4>
 800c460:	e02b      	b.n	800c4ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00c      	beq.n	800c482 <USBD_StdEPReq+0xaa>
 800c468:	7bbb      	ldrb	r3, [r7, #14]
 800c46a:	2b80      	cmp	r3, #128	@ 0x80
 800c46c:	d009      	beq.n	800c482 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 f8aa 	bl	800d5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c478:	2180      	movs	r1, #128	@ 0x80
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f001 f8a6 	bl	800d5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c480:	e020      	b.n	800c4c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fc1b 	bl	800ccc0 <USBD_CtlError>
              break;
 800c48a:	e01b      	b.n	800c4c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10e      	bne.n	800c4b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <USBD_StdEPReq+0xda>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	@ 0x80
 800c49e:	d008      	beq.n	800c4b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 f88d 	bl	800d5cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fccc 	bl	800ce50 <USBD_CtlSendStatus>

              break;
 800c4b8:	e004      	b.n	800c4c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fbff 	bl	800ccc0 <USBD_CtlError>
              break;
 800c4c2:	bf00      	nop
          }
          break;
 800c4c4:	e0e0      	b.n	800c688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d002      	beq.n	800c4d6 <USBD_StdEPReq+0xfe>
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d015      	beq.n	800c500 <USBD_StdEPReq+0x128>
 800c4d4:	e026      	b.n	800c524 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4d6:	7bbb      	ldrb	r3, [r7, #14]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00c      	beq.n	800c4f6 <USBD_StdEPReq+0x11e>
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	2b80      	cmp	r3, #128	@ 0x80
 800c4e0:	d009      	beq.n	800c4f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 f870 	bl	800d5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c4ec:	2180      	movs	r1, #128	@ 0x80
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 f86c 	bl	800d5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4f4:	e01c      	b.n	800c530 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fbe1 	bl	800ccc0 <USBD_CtlError>
              break;
 800c4fe:	e017      	b.n	800c530 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	885b      	ldrh	r3, [r3, #2]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d112      	bne.n	800c52e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 f877 	bl	800d60a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fc97 	bl	800ce50 <USBD_CtlSendStatus>
              }
              break;
 800c522:	e004      	b.n	800c52e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fbca 	bl	800ccc0 <USBD_CtlError>
              break;
 800c52c:	e000      	b.n	800c530 <USBD_StdEPReq+0x158>
              break;
 800c52e:	bf00      	nop
          }
          break;
 800c530:	e0aa      	b.n	800c688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d002      	beq.n	800c542 <USBD_StdEPReq+0x16a>
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d032      	beq.n	800c5a6 <USBD_StdEPReq+0x1ce>
 800c540:	e097      	b.n	800c672 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <USBD_StdEPReq+0x180>
 800c548:	7bbb      	ldrb	r3, [r7, #14]
 800c54a:	2b80      	cmp	r3, #128	@ 0x80
 800c54c:	d004      	beq.n	800c558 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fbb5 	bl	800ccc0 <USBD_CtlError>
                break;
 800c556:	e091      	b.n	800c67c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	da0b      	bge.n	800c578 <USBD_StdEPReq+0x1a0>
 800c560:	7bbb      	ldrb	r3, [r7, #14]
 800c562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c566:	4613      	mov	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4413      	add	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	3310      	adds	r3, #16
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	4413      	add	r3, r2
 800c574:	3304      	adds	r3, #4
 800c576:	e00b      	b.n	800c590 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	3304      	adds	r3, #4
 800c590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2202      	movs	r2, #2
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fbf8 	bl	800cd94 <USBD_CtlSendData>
              break;
 800c5a4:	e06a      	b.n	800c67c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	da11      	bge.n	800c5d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	f003 020f 	and.w	r2, r3, #15
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	440b      	add	r3, r1
 800c5c0:	3318      	adds	r3, #24
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d117      	bne.n	800c5f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fb78 	bl	800ccc0 <USBD_CtlError>
                  break;
 800c5d0:	e054      	b.n	800c67c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5d2:	7bbb      	ldrb	r3, [r7, #14]
 800c5d4:	f003 020f 	and.w	r2, r3, #15
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d104      	bne.n	800c5f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fb65 	bl	800ccc0 <USBD_CtlError>
                  break;
 800c5f6:	e041      	b.n	800c67c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	da0b      	bge.n	800c618 <USBD_StdEPReq+0x240>
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	3310      	adds	r3, #16
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	3304      	adds	r3, #4
 800c616:	e00b      	b.n	800c630 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	3304      	adds	r3, #4
 800c630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <USBD_StdEPReq+0x266>
 800c638:	7bbb      	ldrb	r3, [r7, #14]
 800c63a:	2b80      	cmp	r3, #128	@ 0x80
 800c63c:	d103      	bne.n	800c646 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	e00e      	b.n	800c664 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fffc 	bl	800d648 <USBD_LL_IsStallEP>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e002      	b.n	800c664 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	2200      	movs	r2, #0
 800c662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2202      	movs	r2, #2
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fb92 	bl	800cd94 <USBD_CtlSendData>
              break;
 800c670:	e004      	b.n	800c67c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fb23 	bl	800ccc0 <USBD_CtlError>
              break;
 800c67a:	bf00      	nop
          }
          break;
 800c67c:	e004      	b.n	800c688 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fb1d 	bl	800ccc0 <USBD_CtlError>
          break;
 800c686:	bf00      	nop
      }
      break;
 800c688:	e004      	b.n	800c694 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb17 	bl	800ccc0 <USBD_CtlError>
      break;
 800c692:	bf00      	nop
  }

  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	0a1b      	lsrs	r3, r3, #8
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	2b06      	cmp	r3, #6
 800c6c2:	f200 8128 	bhi.w	800c916 <USBD_GetDescriptor+0x276>
 800c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6cc <USBD_GetDescriptor+0x2c>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6e9 	.word	0x0800c6e9
 800c6d0:	0800c701 	.word	0x0800c701
 800c6d4:	0800c741 	.word	0x0800c741
 800c6d8:	0800c917 	.word	0x0800c917
 800c6dc:	0800c917 	.word	0x0800c917
 800c6e0:	0800c8b7 	.word	0x0800c8b7
 800c6e4:	0800c8e3 	.word	0x0800c8e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	7c12      	ldrb	r2, [r2, #16]
 800c6f4:	f107 0108 	add.w	r1, r7, #8
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4798      	blx	r3
 800c6fc:	60f8      	str	r0, [r7, #12]
      break;
 800c6fe:	e112      	b.n	800c926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7c1b      	ldrb	r3, [r3, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10d      	bne.n	800c724 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c710:	f107 0208 	add.w	r2, r7, #8
 800c714:	4610      	mov	r0, r2
 800c716:	4798      	blx	r3
 800c718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3301      	adds	r3, #1
 800c71e:	2202      	movs	r2, #2
 800c720:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c722:	e100      	b.n	800c926 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c72c:	f107 0208 	add.w	r2, r7, #8
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
 800c734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3301      	adds	r3, #1
 800c73a:	2202      	movs	r2, #2
 800c73c:	701a      	strb	r2, [r3, #0]
      break;
 800c73e:	e0f2      	b.n	800c926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	885b      	ldrh	r3, [r3, #2]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b05      	cmp	r3, #5
 800c748:	f200 80ac 	bhi.w	800c8a4 <USBD_GetDescriptor+0x204>
 800c74c:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <USBD_GetDescriptor+0xb4>)
 800c74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c76d 	.word	0x0800c76d
 800c758:	0800c7a1 	.word	0x0800c7a1
 800c75c:	0800c7d5 	.word	0x0800c7d5
 800c760:	0800c809 	.word	0x0800c809
 800c764:	0800c83d 	.word	0x0800c83d
 800c768:	0800c871 	.word	0x0800c871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	7c12      	ldrb	r2, [r2, #16]
 800c784:	f107 0108 	add.w	r1, r7, #8
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
 800c78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c78e:	e091      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fa94 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c798:	7afb      	ldrb	r3, [r7, #11]
 800c79a:	3301      	adds	r3, #1
 800c79c:	72fb      	strb	r3, [r7, #11]
          break;
 800c79e:	e089      	b.n	800c8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	7c12      	ldrb	r2, [r2, #16]
 800c7b8:	f107 0108 	add.w	r1, r7, #8
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7c2:	e077      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fa7a 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7d2:	e06f      	b.n	800c8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00b      	beq.n	800c7f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	7c12      	ldrb	r2, [r2, #16]
 800c7ec:	f107 0108 	add.w	r1, r7, #8
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7f6:	e05d      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa60 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c800:	7afb      	ldrb	r3, [r7, #11]
 800c802:	3301      	adds	r3, #1
 800c804:	72fb      	strb	r3, [r7, #11]
          break;
 800c806:	e055      	b.n	800c8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	7c12      	ldrb	r2, [r2, #16]
 800c820:	f107 0108 	add.w	r1, r7, #8
 800c824:	4610      	mov	r0, r2
 800c826:	4798      	blx	r3
 800c828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c82a:	e043      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fa46 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c834:	7afb      	ldrb	r3, [r7, #11]
 800c836:	3301      	adds	r3, #1
 800c838:	72fb      	strb	r3, [r7, #11]
          break;
 800c83a:	e03b      	b.n	800c8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00b      	beq.n	800c860 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c84e:	695b      	ldr	r3, [r3, #20]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	7c12      	ldrb	r2, [r2, #16]
 800c854:	f107 0108 	add.w	r1, r7, #8
 800c858:	4610      	mov	r0, r2
 800c85a:	4798      	blx	r3
 800c85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c85e:	e029      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fa2c 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c868:	7afb      	ldrb	r3, [r7, #11]
 800c86a:	3301      	adds	r3, #1
 800c86c:	72fb      	strb	r3, [r7, #11]
          break;
 800c86e:	e021      	b.n	800c8b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00b      	beq.n	800c894 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	7c12      	ldrb	r2, [r2, #16]
 800c888:	f107 0108 	add.w	r1, r7, #8
 800c88c:	4610      	mov	r0, r2
 800c88e:	4798      	blx	r3
 800c890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c892:	e00f      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fa12 	bl	800ccc0 <USBD_CtlError>
            err++;
 800c89c:	7afb      	ldrb	r3, [r7, #11]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8a2:	e007      	b.n	800c8b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fa0a 	bl	800ccc0 <USBD_CtlError>
          err++;
 800c8ac:	7afb      	ldrb	r3, [r7, #11]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c8b2:	e038      	b.n	800c926 <USBD_GetDescriptor+0x286>
 800c8b4:	e037      	b.n	800c926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7c1b      	ldrb	r3, [r3, #16]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d109      	bne.n	800c8d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c6:	f107 0208 	add.w	r2, r7, #8
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	4798      	blx	r3
 800c8ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8d0:	e029      	b.n	800c926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f9f3 	bl	800ccc0 <USBD_CtlError>
        err++;
 800c8da:	7afb      	ldrb	r3, [r7, #11]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	72fb      	strb	r3, [r7, #11]
      break;
 800c8e0:	e021      	b.n	800c926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	7c1b      	ldrb	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10d      	bne.n	800c906 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f2:	f107 0208 	add.w	r2, r7, #8
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4798      	blx	r3
 800c8fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3301      	adds	r3, #1
 800c900:	2207      	movs	r2, #7
 800c902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c904:	e00f      	b.n	800c926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f9d9 	bl	800ccc0 <USBD_CtlError>
        err++;
 800c90e:	7afb      	ldrb	r3, [r7, #11]
 800c910:	3301      	adds	r3, #1
 800c912:	72fb      	strb	r3, [r7, #11]
      break;
 800c914:	e007      	b.n	800c926 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f9d1 	bl	800ccc0 <USBD_CtlError>
      err++;
 800c91e:	7afb      	ldrb	r3, [r7, #11]
 800c920:	3301      	adds	r3, #1
 800c922:	72fb      	strb	r3, [r7, #11]
      break;
 800c924:	bf00      	nop
  }

  if (err != 0U)
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d11c      	bne.n	800c966 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c92c:	893b      	ldrh	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d011      	beq.n	800c956 <USBD_GetDescriptor+0x2b6>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	88db      	ldrh	r3, [r3, #6]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00d      	beq.n	800c956 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	88da      	ldrh	r2, [r3, #6]
 800c93e:	893b      	ldrh	r3, [r7, #8]
 800c940:	4293      	cmp	r3, r2
 800c942:	bf28      	it	cs
 800c944:	4613      	movcs	r3, r2
 800c946:	b29b      	uxth	r3, r3
 800c948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c94a:	893b      	ldrh	r3, [r7, #8]
 800c94c:	461a      	mov	r2, r3
 800c94e:	68f9      	ldr	r1, [r7, #12]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fa1f 	bl	800cd94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	88db      	ldrh	r3, [r3, #6]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d104      	bne.n	800c968 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fa76 	bl	800ce50 <USBD_CtlSendStatus>
 800c964:	e000      	b.n	800c968 <USBD_GetDescriptor+0x2c8>
    return;
 800c966:	bf00      	nop
    }
  }
}
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d130      	bne.n	800c9e4 <USBD_SetAddress+0x74>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	88db      	ldrh	r3, [r3, #6]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d12c      	bne.n	800c9e4 <USBD_SetAddress+0x74>
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	885b      	ldrh	r3, [r3, #2]
 800c98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c990:	d828      	bhi.n	800c9e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9a4:	2b03      	cmp	r3, #3
 800c9a6:	d104      	bne.n	800c9b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f988 	bl	800ccc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b0:	e01d      	b.n	800c9ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7bfa      	ldrb	r2, [r7, #15]
 800c9b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fe6d 	bl	800d69e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fa43 	bl	800ce50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d004      	beq.n	800c9da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d8:	e009      	b.n	800c9ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e2:	e004      	b.n	800c9ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f96a 	bl	800ccc0 <USBD_CtlError>
  }
}
 800c9ec:	bf00      	nop
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	885b      	ldrh	r3, [r3, #2]
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	4b41      	ldr	r3, [pc, #260]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca0c:	4b40      	ldr	r3, [pc, #256]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d904      	bls.n	800ca1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f952 	bl	800ccc0 <USBD_CtlError>
 800ca1c:	e075      	b.n	800cb0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d002      	beq.n	800ca2e <USBD_SetConfig+0x36>
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d023      	beq.n	800ca74 <USBD_SetConfig+0x7c>
 800ca2c:	e062      	b.n	800caf4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ca2e:	4b38      	ldr	r3, [pc, #224]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d01a      	beq.n	800ca6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ca36:	4b36      	ldr	r3, [pc, #216]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2203      	movs	r2, #3
 800ca44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca48:	4b31      	ldr	r3, [pc, #196]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff f9e7 	bl	800be22 <USBD_SetClassConfig>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d104      	bne.n	800ca64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f92f 	bl	800ccc0 <USBD_CtlError>
            return;
 800ca62:	e052      	b.n	800cb0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f9f3 	bl	800ce50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ca6a:	e04e      	b.n	800cb0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f9ef 	bl	800ce50 <USBD_CtlSendStatus>
        break;
 800ca72:	e04a      	b.n	800cb0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ca74:	4b26      	ldr	r3, [pc, #152]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d112      	bne.n	800caa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ca84:	4b22      	ldr	r3, [pc, #136]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ca8e:	4b20      	ldr	r3, [pc, #128]	@ (800cb10 <USBD_SetConfig+0x118>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff f9e3 	bl	800be60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f9d8 	bl	800ce50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800caa0:	e033      	b.n	800cb0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800caa2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb10 <USBD_SetConfig+0x118>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d01d      	beq.n	800caec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff f9d1 	bl	800be60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cabe:	4b14      	ldr	r3, [pc, #80]	@ (800cb10 <USBD_SetConfig+0x118>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cac8:	4b11      	ldr	r3, [pc, #68]	@ (800cb10 <USBD_SetConfig+0x118>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff f9a7 	bl	800be22 <USBD_SetClassConfig>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d104      	bne.n	800cae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f8ef 	bl	800ccc0 <USBD_CtlError>
            return;
 800cae2:	e012      	b.n	800cb0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f9b3 	bl	800ce50 <USBD_CtlSendStatus>
        break;
 800caea:	e00e      	b.n	800cb0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f9af 	bl	800ce50 <USBD_CtlSendStatus>
        break;
 800caf2:	e00a      	b.n	800cb0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f8e2 	bl	800ccc0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cafc:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <USBD_SetConfig+0x118>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff f9ac 	bl	800be60 <USBD_ClrClassConfig>
        break;
 800cb08:	bf00      	nop
    }
  }
}
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200009e4 	.word	0x200009e4

0800cb14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	88db      	ldrh	r3, [r3, #6]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d004      	beq.n	800cb30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f8c9 	bl	800ccc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb2e:	e022      	b.n	800cb76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dc02      	bgt.n	800cb40 <USBD_GetConfig+0x2c>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dc03      	bgt.n	800cb46 <USBD_GetConfig+0x32>
 800cb3e:	e015      	b.n	800cb6c <USBD_GetConfig+0x58>
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d00b      	beq.n	800cb5c <USBD_GetConfig+0x48>
 800cb44:	e012      	b.n	800cb6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	2201      	movs	r2, #1
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f91d 	bl	800cd94 <USBD_CtlSendData>
        break;
 800cb5a:	e00c      	b.n	800cb76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	2201      	movs	r2, #1
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f915 	bl	800cd94 <USBD_CtlSendData>
        break;
 800cb6a:	e004      	b.n	800cb76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f8a6 	bl	800ccc0 <USBD_CtlError>
        break;
 800cb74:	bf00      	nop
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d81e      	bhi.n	800cbd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	88db      	ldrh	r3, [r3, #6]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d004      	beq.n	800cba6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f88e 	bl	800ccc0 <USBD_CtlError>
        break;
 800cba4:	e01a      	b.n	800cbdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f043 0202 	orr.w	r2, r3, #2
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	330c      	adds	r3, #12
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8e2 	bl	800cd94 <USBD_CtlSendData>
      break;
 800cbd0:	e004      	b.n	800cbdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f873 	bl	800ccc0 <USBD_CtlError>
      break;
 800cbda:	bf00      	nop
  }
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d106      	bne.n	800cc04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f926 	bl	800ce50 <USBD_CtlSendStatus>
  }
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d80b      	bhi.n	800cc3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	885b      	ldrh	r3, [r3, #2]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d10c      	bne.n	800cc44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f90c 	bl	800ce50 <USBD_CtlSendStatus>
      }
      break;
 800cc38:	e004      	b.n	800cc44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f83f 	bl	800ccc0 <USBD_CtlError>
      break;
 800cc42:	e000      	b.n	800cc46 <USBD_ClrFeature+0x3a>
      break;
 800cc44:	bf00      	nop
  }
}
 800cc46:	bf00      	nop
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b083      	sub	sp, #12
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	781a      	ldrb	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	785a      	ldrb	r2, [r3, #1]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	3303      	adds	r3, #3
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	021b      	lsls	r3, r3, #8
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	4413      	add	r3, r2
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	3304      	adds	r3, #4
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	3305      	adds	r3, #5
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	021b      	lsls	r3, r3, #8
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4413      	add	r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	3306      	adds	r3, #6
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	3307      	adds	r3, #7
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	4413      	add	r3, r2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	80da      	strh	r2, [r3, #6]

}
 800ccb6:	bf00      	nop
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bc80      	pop	{r7}
 800ccbe:	4770      	bx	lr

0800ccc0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ccca:	2180      	movs	r1, #128	@ 0x80
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fc7d 	bl	800d5cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fc79 	bl	800d5cc <USBD_LL_StallEP>
}
 800ccda:	bf00      	nop
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b086      	sub	sp, #24
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d032      	beq.n	800cd5e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 f834 	bl	800cd66 <USBD_GetLen>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	3301      	adds	r3, #1
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	75fa      	strb	r2, [r7, #23]
 800cd12:	461a      	mov	r2, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4413      	add	r3, r2
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	7812      	ldrb	r2, [r2, #0]
 800cd1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	75fa      	strb	r2, [r7, #23]
 800cd24:	461a      	mov	r2, r3
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	4413      	add	r3, r2
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cd2e:	e012      	b.n	800cd56 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	60fa      	str	r2, [r7, #12]
 800cd36:	7dfa      	ldrb	r2, [r7, #23]
 800cd38:	1c51      	adds	r1, r2, #1
 800cd3a:	75f9      	strb	r1, [r7, #23]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	440a      	add	r2, r1
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	75fa      	strb	r2, [r7, #23]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	4413      	add	r3, r2
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1e8      	bne.n	800cd30 <USBD_GetString+0x4e>
    }
  }
}
 800cd5e:	bf00      	nop
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cd72:	e005      	b.n	800cd80 <USBD_GetLen+0x1a>
  {
    len++;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	3301      	adds	r3, #1
 800cd78:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1f5      	bne.n	800cd74 <USBD_GetLen+0xe>
  }

  return len;
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bc80      	pop	{r7}
 800cd92:	4770      	bx	lr

0800cd94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2202      	movs	r2, #2
 800cda6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cdaa:	88fa      	ldrh	r2, [r7, #6]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cdb0:	88fa      	ldrh	r2, [r7, #6]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	2100      	movs	r1, #0
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 fc8d 	bl	800d6dc <USBD_LL_Transmit>

  return USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdda:	88fb      	ldrh	r3, [r7, #6]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	2100      	movs	r1, #0
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 fc7b 	bl	800d6dc <USBD_LL_Transmit>

  return USBD_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2203      	movs	r2, #3
 800ce02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce06:	88fa      	ldrh	r2, [r7, #6]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ce0e:	88fa      	ldrh	r2, [r7, #6]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce16:	88fb      	ldrh	r3, [r7, #6]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 fc80 	bl	800d722 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	4613      	mov	r3, r2
 800ce38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	2100      	movs	r1, #0
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 fc6e 	bl	800d722 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce60:	2300      	movs	r3, #0
 800ce62:	2200      	movs	r2, #0
 800ce64:	2100      	movs	r1, #0
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fc38 	bl	800d6dc <USBD_LL_Transmit>

  return USBD_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2205      	movs	r2, #5
 800ce82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce86:	2300      	movs	r3, #0
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fc48 	bl	800d722 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cea0:	2200      	movs	r2, #0
 800cea2:	4912      	ldr	r1, [pc, #72]	@ (800ceec <MX_USB_DEVICE_Init+0x50>)
 800cea4:	4812      	ldr	r0, [pc, #72]	@ (800cef0 <MX_USB_DEVICE_Init+0x54>)
 800cea6:	f7fe ff62 	bl	800bd6e <USBD_Init>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ceb0:	f7f4 f974 	bl	800119c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ceb4:	490f      	ldr	r1, [pc, #60]	@ (800cef4 <MX_USB_DEVICE_Init+0x58>)
 800ceb6:	480e      	ldr	r0, [pc, #56]	@ (800cef0 <MX_USB_DEVICE_Init+0x54>)
 800ceb8:	f7fe ff84 	bl	800bdc4 <USBD_RegisterClass>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cec2:	f7f4 f96b 	bl	800119c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cec6:	490c      	ldr	r1, [pc, #48]	@ (800cef8 <MX_USB_DEVICE_Init+0x5c>)
 800cec8:	4809      	ldr	r0, [pc, #36]	@ (800cef0 <MX_USB_DEVICE_Init+0x54>)
 800ceca:	f7fe feb5 	bl	800bc38 <USBD_CDC_RegisterInterface>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ced4:	f7f4 f962 	bl	800119c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ced8:	4805      	ldr	r0, [pc, #20]	@ (800cef0 <MX_USB_DEVICE_Init+0x54>)
 800ceda:	f7fe ff8c 	bl	800bdf6 <USBD_Start>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cee4:	f7f4 f95a 	bl	800119c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cee8:	bf00      	nop
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20000138 	.word	0x20000138
 800cef0:	200009e8 	.word	0x200009e8
 800cef4:	20000024 	.word	0x20000024
 800cef8:	20000128 	.word	0x20000128

0800cefc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf00:	2200      	movs	r2, #0
 800cf02:	4905      	ldr	r1, [pc, #20]	@ (800cf18 <CDC_Init_FS+0x1c>)
 800cf04:	4805      	ldr	r0, [pc, #20]	@ (800cf1c <CDC_Init_FS+0x20>)
 800cf06:	f7fe fead 	bl	800bc64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf0a:	4905      	ldr	r1, [pc, #20]	@ (800cf20 <CDC_Init_FS+0x24>)
 800cf0c:	4803      	ldr	r0, [pc, #12]	@ (800cf1c <CDC_Init_FS+0x20>)
 800cf0e:	f7fe fec2 	bl	800bc96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	200010ac 	.word	0x200010ac
 800cf1c:	200009e8 	.word	0x200009e8
 800cf20:	20000cac 	.word	0x20000cac

0800cf24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf24:	b480      	push	{r7}
 800cf26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bc80      	pop	{r7}
 800cf30:	4770      	bx	lr
	...

0800cf34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	6039      	str	r1, [r7, #0]
 800cf3e:	71fb      	strb	r3, [r7, #7]
 800cf40:	4613      	mov	r3, r2
 800cf42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	2b23      	cmp	r3, #35	@ 0x23
 800cf48:	d84a      	bhi.n	800cfe0 <CDC_Control_FS+0xac>
 800cf4a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf50 <CDC_Control_FS+0x1c>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800cfe1 	.word	0x0800cfe1
 800cf54:	0800cfe1 	.word	0x0800cfe1
 800cf58:	0800cfe1 	.word	0x0800cfe1
 800cf5c:	0800cfe1 	.word	0x0800cfe1
 800cf60:	0800cfe1 	.word	0x0800cfe1
 800cf64:	0800cfe1 	.word	0x0800cfe1
 800cf68:	0800cfe1 	.word	0x0800cfe1
 800cf6c:	0800cfe1 	.word	0x0800cfe1
 800cf70:	0800cfe1 	.word	0x0800cfe1
 800cf74:	0800cfe1 	.word	0x0800cfe1
 800cf78:	0800cfe1 	.word	0x0800cfe1
 800cf7c:	0800cfe1 	.word	0x0800cfe1
 800cf80:	0800cfe1 	.word	0x0800cfe1
 800cf84:	0800cfe1 	.word	0x0800cfe1
 800cf88:	0800cfe1 	.word	0x0800cfe1
 800cf8c:	0800cfe1 	.word	0x0800cfe1
 800cf90:	0800cfe1 	.word	0x0800cfe1
 800cf94:	0800cfe1 	.word	0x0800cfe1
 800cf98:	0800cfe1 	.word	0x0800cfe1
 800cf9c:	0800cfe1 	.word	0x0800cfe1
 800cfa0:	0800cfe1 	.word	0x0800cfe1
 800cfa4:	0800cfe1 	.word	0x0800cfe1
 800cfa8:	0800cfe1 	.word	0x0800cfe1
 800cfac:	0800cfe1 	.word	0x0800cfe1
 800cfb0:	0800cfe1 	.word	0x0800cfe1
 800cfb4:	0800cfe1 	.word	0x0800cfe1
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cfe1 	.word	0x0800cfe1
 800cfc0:	0800cfe1 	.word	0x0800cfe1
 800cfc4:	0800cfe1 	.word	0x0800cfe1
 800cfc8:	0800cfe1 	.word	0x0800cfe1
 800cfcc:	0800cfe1 	.word	0x0800cfe1
 800cfd0:	0800cfe1 	.word	0x0800cfe1
 800cfd4:	0800cfe1 	.word	0x0800cfe1
 800cfd8:	0800cfe1 	.word	0x0800cfe1
 800cfdc:	0800cfe1 	.word	0x0800cfe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cfe0:	bf00      	nop
  }

  return (USBD_OK);
 800cfe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bc80      	pop	{r7}
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop

0800cff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  if (Buf[0] == 'a') {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Por ejemplo, toggle de un LED
//  }
	for(short i = 0;i < *Len;i++){
 800cffa:	2300      	movs	r3, #0
 800cffc:	81fb      	strh	r3, [r7, #14]
 800cffe:	e00f      	b.n	800d020 <CDC_Receive_FS+0x30>
		On_Data_RX(&rx,Buf[i]);
 800d000:	4b10      	ldr	r3, [pc, #64]	@ (800d044 <CDC_Receive_FS+0x54>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	440a      	add	r2, r1
 800d00c:	7812      	ldrb	r2, [r2, #0]
 800d00e:	4611      	mov	r1, r2
 800d010:	480d      	ldr	r0, [pc, #52]	@ (800d048 <CDC_Receive_FS+0x58>)
 800d012:	4798      	blx	r3
	for(short i = 0;i < *Len;i++){
 800d014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	3301      	adds	r3, #1
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	81fb      	strh	r3, [r7, #14]
 800d020:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d3e9      	bcc.n	800d000 <CDC_Receive_FS+0x10>
	}
//  char msg[] = "Dato recibido\r\n";
//  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));

  // Reestablecer recepción USB
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	4807      	ldr	r0, [pc, #28]	@ (800d04c <CDC_Receive_FS+0x5c>)
 800d030:	f7fe fe31 	bl	800bc96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d034:	4805      	ldr	r0, [pc, #20]	@ (800d04c <CDC_Receive_FS+0x5c>)
 800d036:	f7fe fe70 	bl	800bd1a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d03a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	200014ac 	.word	0x200014ac
 800d048:	200005a0 	.word	0x200005a0
 800d04c:	200009e8 	.word	0x200009e8

0800d050 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	460b      	mov	r3, r1
 800d05a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d060:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <CDC_Transmit_FS+0x48>)
 800d062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d066:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d072:	2301      	movs	r3, #1
 800d074:	e00b      	b.n	800d08e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d076:	887b      	ldrh	r3, [r7, #2]
 800d078:	461a      	mov	r2, r3
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4806      	ldr	r0, [pc, #24]	@ (800d098 <CDC_Transmit_FS+0x48>)
 800d07e:	f7fe fdf1 	bl	800bc64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d082:	4805      	ldr	r0, [pc, #20]	@ (800d098 <CDC_Transmit_FS+0x48>)
 800d084:	f7fe fe1a 	bl	800bcbc <USBD_CDC_TransmitPacket>
 800d088:	4603      	mov	r3, r0
 800d08a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	200009e8 	.word	0x200009e8

0800d09c <CDC_Attach_RX_Funct>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_RX_Funct(void(*rxFunction)(_sRx *rx, uint8_t data)){
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	On_Data_RX = rxFunction;
 800d0a4:	4a03      	ldr	r2, [pc, #12]	@ (800d0b4 <CDC_Attach_RX_Funct+0x18>)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6013      	str	r3, [r2, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bc80      	pop	{r7}
 800d0b2:	4770      	bx	lr
 800d0b4:	200014ac 	.word	0x200014ac

0800d0b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6039      	str	r1, [r7, #0]
 800d0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	2212      	movs	r2, #18
 800d0c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0ca:	4b03      	ldr	r3, [pc, #12]	@ (800d0d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bc80      	pop	{r7}
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	20000154 	.word	0x20000154

0800d0dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	6039      	str	r1, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2204      	movs	r2, #4
 800d0ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0ee:	4b03      	ldr	r3, [pc, #12]	@ (800d0fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bc80      	pop	{r7}
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20000168 	.word	0x20000168

0800d100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	6039      	str	r1, [r7, #0]
 800d10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d105      	bne.n	800d11e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	4907      	ldr	r1, [pc, #28]	@ (800d134 <USBD_FS_ProductStrDescriptor+0x34>)
 800d116:	4808      	ldr	r0, [pc, #32]	@ (800d138 <USBD_FS_ProductStrDescriptor+0x38>)
 800d118:	f7ff fde3 	bl	800cce2 <USBD_GetString>
 800d11c:	e004      	b.n	800d128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	4904      	ldr	r1, [pc, #16]	@ (800d134 <USBD_FS_ProductStrDescriptor+0x34>)
 800d122:	4805      	ldr	r0, [pc, #20]	@ (800d138 <USBD_FS_ProductStrDescriptor+0x38>)
 800d124:	f7ff fddd 	bl	800cce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d128:	4b02      	ldr	r3, [pc, #8]	@ (800d134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	200014b0 	.word	0x200014b0
 800d138:	0800e1dc 	.word	0x0800e1dc

0800d13c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	4603      	mov	r3, r0
 800d144:	6039      	str	r1, [r7, #0]
 800d146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	4904      	ldr	r1, [pc, #16]	@ (800d15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d14c:	4804      	ldr	r0, [pc, #16]	@ (800d160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d14e:	f7ff fdc8 	bl	800cce2 <USBD_GetString>
  return USBD_StrDesc;
 800d152:	4b02      	ldr	r3, [pc, #8]	@ (800d15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200014b0 	.word	0x200014b0
 800d160:	0800e1f4 	.word	0x0800e1f4

0800d164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	6039      	str	r1, [r7, #0]
 800d16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	221a      	movs	r2, #26
 800d174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d176:	f000 f843 	bl	800d200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d17a:	4b02      	ldr	r3, [pc, #8]	@ (800d184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000016c 	.word	0x2000016c

0800d188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	6039      	str	r1, [r7, #0]
 800d192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d105      	bne.n	800d1a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	4907      	ldr	r1, [pc, #28]	@ (800d1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d19e:	4808      	ldr	r0, [pc, #32]	@ (800d1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1a0:	f7ff fd9f 	bl	800cce2 <USBD_GetString>
 800d1a4:	e004      	b.n	800d1b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	4904      	ldr	r1, [pc, #16]	@ (800d1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1aa:	4805      	ldr	r0, [pc, #20]	@ (800d1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1ac:	f7ff fd99 	bl	800cce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1b0:	4b02      	ldr	r3, [pc, #8]	@ (800d1bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	200014b0 	.word	0x200014b0
 800d1c0:	0800e208 	.word	0x0800e208

0800d1c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	6039      	str	r1, [r7, #0]
 800d1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d105      	bne.n	800d1e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	4907      	ldr	r1, [pc, #28]	@ (800d1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1da:	4808      	ldr	r0, [pc, #32]	@ (800d1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1dc:	f7ff fd81 	bl	800cce2 <USBD_GetString>
 800d1e0:	e004      	b.n	800d1ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	4904      	ldr	r1, [pc, #16]	@ (800d1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1e6:	4805      	ldr	r0, [pc, #20]	@ (800d1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1e8:	f7ff fd7b 	bl	800cce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1ec:	4b02      	ldr	r3, [pc, #8]	@ (800d1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	200014b0 	.word	0x200014b0
 800d1fc:	0800e214 	.word	0x0800e214

0800d200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d206:	4b0f      	ldr	r3, [pc, #60]	@ (800d244 <Get_SerialNum+0x44>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d20c:	4b0e      	ldr	r3, [pc, #56]	@ (800d248 <Get_SerialNum+0x48>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d212:	4b0e      	ldr	r3, [pc, #56]	@ (800d24c <Get_SerialNum+0x4c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4413      	add	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d009      	beq.n	800d23a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d226:	2208      	movs	r2, #8
 800d228:	4909      	ldr	r1, [pc, #36]	@ (800d250 <Get_SerialNum+0x50>)
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 f814 	bl	800d258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d230:	2204      	movs	r2, #4
 800d232:	4908      	ldr	r1, [pc, #32]	@ (800d254 <Get_SerialNum+0x54>)
 800d234:	68b8      	ldr	r0, [r7, #8]
 800d236:	f000 f80f 	bl	800d258 <IntToUnicode>
  }
}
 800d23a:	bf00      	nop
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	1ffff7e8 	.word	0x1ffff7e8
 800d248:	1ffff7ec 	.word	0x1ffff7ec
 800d24c:	1ffff7f0 	.word	0x1ffff7f0
 800d250:	2000016e 	.word	0x2000016e
 800d254:	2000017e 	.word	0x2000017e

0800d258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d258:	b480      	push	{r7}
 800d25a:	b087      	sub	sp, #28
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	4613      	mov	r3, r2
 800d264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]
 800d26e:	e027      	b.n	800d2c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	0f1b      	lsrs	r3, r3, #28
 800d274:	2b09      	cmp	r3, #9
 800d276:	d80b      	bhi.n	800d290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	0f1b      	lsrs	r3, r3, #28
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	4619      	mov	r1, r3
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	440b      	add	r3, r1
 800d288:	3230      	adds	r2, #48	@ 0x30
 800d28a:	b2d2      	uxtb	r2, r2
 800d28c:	701a      	strb	r2, [r3, #0]
 800d28e:	e00a      	b.n	800d2a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	0f1b      	lsrs	r3, r3, #28
 800d294:	b2da      	uxtb	r2, r3
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4619      	mov	r1, r3
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	440b      	add	r3, r1
 800d2a0:	3237      	adds	r2, #55	@ 0x37
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	75fb      	strb	r3, [r7, #23]
 800d2c0:	7dfa      	ldrb	r2, [r7, #23]
 800d2c2:	79fb      	ldrb	r3, [r7, #7]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d3d3      	bcc.n	800d270 <IntToUnicode+0x18>
  }
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	371c      	adds	r7, #28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr

0800d2d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a0d      	ldr	r2, [pc, #52]	@ (800d318 <HAL_PCD_MspInit+0x44>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d113      	bne.n	800d30e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d31c <HAL_PCD_MspInit+0x48>)
 800d2e8:	69db      	ldr	r3, [r3, #28]
 800d2ea:	4a0c      	ldr	r2, [pc, #48]	@ (800d31c <HAL_PCD_MspInit+0x48>)
 800d2ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d2f0:	61d3      	str	r3, [r2, #28]
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <HAL_PCD_MspInit+0x48>)
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800d2fe:	2200      	movs	r2, #0
 800d300:	2100      	movs	r1, #0
 800d302:	2014      	movs	r0, #20
 800d304:	f7f5 fa27 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d308:	2014      	movs	r0, #20
 800d30a:	f7f5 fa40 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d30e:	bf00      	nop
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	40005c00 	.word	0x40005c00
 800d31c:	40021000 	.word	0x40021000

0800d320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f7fe fda5 	bl	800be86 <USBD_LL_SetupStage>
}
 800d33c:	bf00      	nop
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800d356:	78fa      	ldrb	r2, [r7, #3]
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	440b      	add	r3, r1
 800d364:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	4619      	mov	r1, r3
 800d36e:	f7fe fdd7 	bl	800bf20 <USBD_LL_DataOutStage>
}
 800d372:	bf00      	nop
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800d38c:	78fa      	ldrb	r2, [r7, #3]
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4613      	mov	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4413      	add	r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	440b      	add	r3, r1
 800d39a:	3324      	adds	r3, #36	@ 0x24
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	78fb      	ldrb	r3, [r7, #3]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f7fe fe2e 	bl	800c002 <USBD_LL_DataInStage>
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fe ff3e 	bl	800c23e <USBD_LL_SOF>
}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b084      	sub	sp, #16
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	799b      	ldrb	r3, [r3, #6]
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d001      	beq.n	800d3e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d3de:	f7f3 fedd 	bl	800119c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3e8:	7bfa      	ldrb	r2, [r7, #15]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe feee 	bl	800c1ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fea7 	bl	800c14c <USBD_LL_Reset>
}
 800d3fe:	bf00      	nop
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fee8 	bl	800c1ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	7a9b      	ldrb	r3, [r3, #10]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d005      	beq.n	800d430 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d424:	4b04      	ldr	r3, [pc, #16]	@ (800d438 <HAL_PCD_SuspendCallback+0x30>)
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	4a03      	ldr	r2, [pc, #12]	@ (800d438 <HAL_PCD_SuspendCallback+0x30>)
 800d42a:	f043 0306 	orr.w	r3, r3, #6
 800d42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	e000ed00 	.word	0xe000ed00

0800d43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fee2 	bl	800c214 <USBD_LL_Resume>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d460:	4a28      	ldr	r2, [pc, #160]	@ (800d504 <USBD_LL_Init+0xac>)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a26      	ldr	r2, [pc, #152]	@ (800d504 <USBD_LL_Init+0xac>)
 800d46c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d470:	4b24      	ldr	r3, [pc, #144]	@ (800d504 <USBD_LL_Init+0xac>)
 800d472:	4a25      	ldr	r2, [pc, #148]	@ (800d508 <USBD_LL_Init+0xb0>)
 800d474:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d476:	4b23      	ldr	r3, [pc, #140]	@ (800d504 <USBD_LL_Init+0xac>)
 800d478:	2208      	movs	r2, #8
 800d47a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d47c:	4b21      	ldr	r3, [pc, #132]	@ (800d504 <USBD_LL_Init+0xac>)
 800d47e:	2202      	movs	r2, #2
 800d480:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d482:	4b20      	ldr	r3, [pc, #128]	@ (800d504 <USBD_LL_Init+0xac>)
 800d484:	2200      	movs	r2, #0
 800d486:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d488:	4b1e      	ldr	r3, [pc, #120]	@ (800d504 <USBD_LL_Init+0xac>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d48e:	4b1d      	ldr	r3, [pc, #116]	@ (800d504 <USBD_LL_Init+0xac>)
 800d490:	2200      	movs	r2, #0
 800d492:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d494:	481b      	ldr	r0, [pc, #108]	@ (800d504 <USBD_LL_Init+0xac>)
 800d496:	f7f8 fdb9 	bl	800600c <HAL_PCD_Init>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d4a0:	f7f3 fe7c 	bl	800119c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d4aa:	2318      	movs	r3, #24
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	f7fa faca 	bl	8007a48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d4ba:	2358      	movs	r3, #88	@ 0x58
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2180      	movs	r1, #128	@ 0x80
 800d4c0:	f7fa fac2 	bl	8007a48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d4ca:	23c0      	movs	r3, #192	@ 0xc0
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	2181      	movs	r1, #129	@ 0x81
 800d4d0:	f7fa faba 	bl	8007a48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d4da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	f7fa fab1 	bl	8007a48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d4ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2182      	movs	r1, #130	@ 0x82
 800d4f4:	f7fa faa8 	bl	8007a48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	200016b0 	.word	0x200016b0
 800d508:	40005c00 	.word	0x40005c00

0800d50c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d522:	4618      	mov	r0, r3
 800d524:	f7f8 fe68 	bl	80061f8 <HAL_PCD_Start>
 800d528:	4603      	mov	r3, r0
 800d52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f94e 	bl	800d7d0 <USBD_Get_USB_Status>
 800d534:	4603      	mov	r3, r0
 800d536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d538:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	4608      	mov	r0, r1
 800d54c:	4611      	mov	r1, r2
 800d54e:	461a      	mov	r2, r3
 800d550:	4603      	mov	r3, r0
 800d552:	70fb      	strb	r3, [r7, #3]
 800d554:	460b      	mov	r3, r1
 800d556:	70bb      	strb	r3, [r7, #2]
 800d558:	4613      	mov	r3, r2
 800d55a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d56a:	78bb      	ldrb	r3, [r7, #2]
 800d56c:	883a      	ldrh	r2, [r7, #0]
 800d56e:	78f9      	ldrb	r1, [r7, #3]
 800d570:	f7f8 ffbc 	bl	80064ec <HAL_PCD_EP_Open>
 800d574:	4603      	mov	r3, r0
 800d576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d578:	7bfb      	ldrb	r3, [r7, #15]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 f928 	bl	800d7d0 <USBD_Get_USB_Status>
 800d580:	4603      	mov	r3, r0
 800d582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d584:	7bbb      	ldrb	r3, [r7, #14]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	460b      	mov	r3, r1
 800d598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5a8:	78fa      	ldrb	r2, [r7, #3]
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f8 fffa 	bl	80065a6 <HAL_PCD_EP_Close>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 f909 	bl	800d7d0 <USBD_Get_USB_Status>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f9 f8a2 	bl	8006734 <HAL_PCD_EP_SetStall>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 f8ea 	bl	800d7d0 <USBD_Get_USB_Status>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d600:	7bbb      	ldrb	r3, [r7, #14]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b084      	sub	sp, #16
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	460b      	mov	r3, r1
 800d614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d624:	78fa      	ldrb	r2, [r7, #3]
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f7f9 f8e3 	bl	80067f4 <HAL_PCD_EP_ClrStall>
 800d62e:	4603      	mov	r3, r0
 800d630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	4618      	mov	r0, r3
 800d636:	f000 f8cb 	bl	800d7d0 <USBD_Get_USB_Status>
 800d63a:	4603      	mov	r3, r0
 800d63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d65a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d660:	2b00      	cmp	r3, #0
 800d662:	da0b      	bge.n	800d67c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d664:	78fb      	ldrb	r3, [r7, #3]
 800d666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d66a:	68f9      	ldr	r1, [r7, #12]
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	440b      	add	r3, r1
 800d676:	3312      	adds	r3, #18
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	e00b      	b.n	800d694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d682:	68f9      	ldr	r1, [r7, #12]
 800d684:	4613      	mov	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d692:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	bc80      	pop	{r7}
 800d69c:	4770      	bx	lr

0800d69e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d6b8:	78fa      	ldrb	r2, [r7, #3]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7f8 fef1 	bl	80064a4 <HAL_PCD_SetAddress>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f881 	bl	800d7d0 <USBD_Get_USB_Status>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	607a      	str	r2, [r7, #4]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	72fb      	strb	r3, [r7, #11]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d6fe:	893b      	ldrh	r3, [r7, #8]
 800d700:	7af9      	ldrb	r1, [r7, #11]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	f7f8 ffdf 	bl	80066c6 <HAL_PCD_EP_Transmit>
 800d708:	4603      	mov	r3, r0
 800d70a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 f85e 	bl	800d7d0 <USBD_Get_USB_Status>
 800d714:	4603      	mov	r3, r0
 800d716:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d718:	7dbb      	ldrb	r3, [r7, #22]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b086      	sub	sp, #24
 800d726:	af00      	add	r7, sp, #0
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	461a      	mov	r2, r3
 800d72e:	460b      	mov	r3, r1
 800d730:	72fb      	strb	r3, [r7, #11]
 800d732:	4613      	mov	r3, r2
 800d734:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d744:	893b      	ldrh	r3, [r7, #8]
 800d746:	7af9      	ldrb	r1, [r7, #11]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	f7f8 ff74 	bl	8006636 <HAL_PCD_EP_Receive>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	4618      	mov	r0, r3
 800d756:	f000 f83b 	bl	800d7d0 <USBD_Get_USB_Status>
 800d75a:	4603      	mov	r3, r0
 800d75c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d75e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	4611      	mov	r1, r2
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f8 ff8a 	bl	8006698 <HAL_PCD_EP_GetRxCount>
 800d784:	4603      	mov	r3, r0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d798:	4b02      	ldr	r3, [pc, #8]	@ (800d7a4 <USBD_static_malloc+0x14>)
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bc80      	pop	{r7}
 800d7a2:	4770      	bx	lr
 800d7a4:	20001988 	.word	0x20001988

0800d7a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]

}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bc80      	pop	{r7}
 800d7b8:	4770      	bx	lr

0800d7ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b083      	sub	sp, #12
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d7c6:	bf00      	nop
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bc80      	pop	{r7}
 800d7ce:	4770      	bx	lr

0800d7d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	2b03      	cmp	r3, #3
 800d7e2:	d817      	bhi.n	800d814 <USBD_Get_USB_Status+0x44>
 800d7e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ec <USBD_Get_USB_Status+0x1c>)
 800d7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ea:	bf00      	nop
 800d7ec:	0800d7fd 	.word	0x0800d7fd
 800d7f0:	0800d803 	.word	0x0800d803
 800d7f4:	0800d809 	.word	0x0800d809
 800d7f8:	0800d80f 	.word	0x0800d80f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d800:	e00b      	b.n	800d81a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d802:	2302      	movs	r3, #2
 800d804:	73fb      	strb	r3, [r7, #15]
    break;
 800d806:	e008      	b.n	800d81a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d808:	2301      	movs	r3, #1
 800d80a:	73fb      	strb	r3, [r7, #15]
    break;
 800d80c:	e005      	b.n	800d81a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d80e:	2302      	movs	r3, #2
 800d810:	73fb      	strb	r3, [r7, #15]
    break;
 800d812:	e002      	b.n	800d81a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d814:	2302      	movs	r3, #2
 800d816:	73fb      	strb	r3, [r7, #15]
    break;
 800d818:	bf00      	nop
  }
  return usb_status;
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	bc80      	pop	{r7}
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <siprintf>:
 800d828:	b40e      	push	{r1, r2, r3}
 800d82a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d82e:	b510      	push	{r4, lr}
 800d830:	2400      	movs	r4, #0
 800d832:	b09d      	sub	sp, #116	@ 0x74
 800d834:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d836:	9002      	str	r0, [sp, #8]
 800d838:	9006      	str	r0, [sp, #24]
 800d83a:	9107      	str	r1, [sp, #28]
 800d83c:	9104      	str	r1, [sp, #16]
 800d83e:	4809      	ldr	r0, [pc, #36]	@ (800d864 <siprintf+0x3c>)
 800d840:	4909      	ldr	r1, [pc, #36]	@ (800d868 <siprintf+0x40>)
 800d842:	f853 2b04 	ldr.w	r2, [r3], #4
 800d846:	9105      	str	r1, [sp, #20]
 800d848:	6800      	ldr	r0, [r0, #0]
 800d84a:	a902      	add	r1, sp, #8
 800d84c:	9301      	str	r3, [sp, #4]
 800d84e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d850:	f000 f9a0 	bl	800db94 <_svfiprintf_r>
 800d854:	9b02      	ldr	r3, [sp, #8]
 800d856:	701c      	strb	r4, [r3, #0]
 800d858:	b01d      	add	sp, #116	@ 0x74
 800d85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d85e:	b003      	add	sp, #12
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	20000188 	.word	0x20000188
 800d868:	ffff0208 	.word	0xffff0208

0800d86c <memset>:
 800d86c:	4603      	mov	r3, r0
 800d86e:	4402      	add	r2, r0
 800d870:	4293      	cmp	r3, r2
 800d872:	d100      	bne.n	800d876 <memset+0xa>
 800d874:	4770      	bx	lr
 800d876:	f803 1b01 	strb.w	r1, [r3], #1
 800d87a:	e7f9      	b.n	800d870 <memset+0x4>

0800d87c <__errno>:
 800d87c:	4b01      	ldr	r3, [pc, #4]	@ (800d884 <__errno+0x8>)
 800d87e:	6818      	ldr	r0, [r3, #0]
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000188 	.word	0x20000188

0800d888 <__libc_init_array>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	2600      	movs	r6, #0
 800d88c:	4d0c      	ldr	r5, [pc, #48]	@ (800d8c0 <__libc_init_array+0x38>)
 800d88e:	4c0d      	ldr	r4, [pc, #52]	@ (800d8c4 <__libc_init_array+0x3c>)
 800d890:	1b64      	subs	r4, r4, r5
 800d892:	10a4      	asrs	r4, r4, #2
 800d894:	42a6      	cmp	r6, r4
 800d896:	d109      	bne.n	800d8ac <__libc_init_array+0x24>
 800d898:	f000 fc76 	bl	800e188 <_init>
 800d89c:	2600      	movs	r6, #0
 800d89e:	4d0a      	ldr	r5, [pc, #40]	@ (800d8c8 <__libc_init_array+0x40>)
 800d8a0:	4c0a      	ldr	r4, [pc, #40]	@ (800d8cc <__libc_init_array+0x44>)
 800d8a2:	1b64      	subs	r4, r4, r5
 800d8a4:	10a4      	asrs	r4, r4, #2
 800d8a6:	42a6      	cmp	r6, r4
 800d8a8:	d105      	bne.n	800d8b6 <__libc_init_array+0x2e>
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}
 800d8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8b0:	4798      	blx	r3
 800d8b2:	3601      	adds	r6, #1
 800d8b4:	e7ee      	b.n	800d894 <__libc_init_array+0xc>
 800d8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ba:	4798      	blx	r3
 800d8bc:	3601      	adds	r6, #1
 800d8be:	e7f2      	b.n	800d8a6 <__libc_init_array+0x1e>
 800d8c0:	0800efec 	.word	0x0800efec
 800d8c4:	0800efec 	.word	0x0800efec
 800d8c8:	0800efec 	.word	0x0800efec
 800d8cc:	0800eff0 	.word	0x0800eff0

0800d8d0 <__retarget_lock_acquire_recursive>:
 800d8d0:	4770      	bx	lr

0800d8d2 <__retarget_lock_release_recursive>:
 800d8d2:	4770      	bx	lr

0800d8d4 <memcpy>:
 800d8d4:	440a      	add	r2, r1
 800d8d6:	4291      	cmp	r1, r2
 800d8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8dc:	d100      	bne.n	800d8e0 <memcpy+0xc>
 800d8de:	4770      	bx	lr
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e6:	4291      	cmp	r1, r2
 800d8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ec:	d1f9      	bne.n	800d8e2 <memcpy+0xe>
 800d8ee:	bd10      	pop	{r4, pc}

0800d8f0 <_free_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	d040      	beq.n	800d97a <_free_r+0x8a>
 800d8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8fc:	1f0c      	subs	r4, r1, #4
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	bfb8      	it	lt
 800d902:	18e4      	addlt	r4, r4, r3
 800d904:	f000 f8de 	bl	800dac4 <__malloc_lock>
 800d908:	4a1c      	ldr	r2, [pc, #112]	@ (800d97c <_free_r+0x8c>)
 800d90a:	6813      	ldr	r3, [r2, #0]
 800d90c:	b933      	cbnz	r3, 800d91c <_free_r+0x2c>
 800d90e:	6063      	str	r3, [r4, #4]
 800d910:	6014      	str	r4, [r2, #0]
 800d912:	4628      	mov	r0, r5
 800d914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d918:	f000 b8da 	b.w	800dad0 <__malloc_unlock>
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d908      	bls.n	800d932 <_free_r+0x42>
 800d920:	6820      	ldr	r0, [r4, #0]
 800d922:	1821      	adds	r1, r4, r0
 800d924:	428b      	cmp	r3, r1
 800d926:	bf01      	itttt	eq
 800d928:	6819      	ldreq	r1, [r3, #0]
 800d92a:	685b      	ldreq	r3, [r3, #4]
 800d92c:	1809      	addeq	r1, r1, r0
 800d92e:	6021      	streq	r1, [r4, #0]
 800d930:	e7ed      	b.n	800d90e <_free_r+0x1e>
 800d932:	461a      	mov	r2, r3
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	b10b      	cbz	r3, 800d93c <_free_r+0x4c>
 800d938:	42a3      	cmp	r3, r4
 800d93a:	d9fa      	bls.n	800d932 <_free_r+0x42>
 800d93c:	6811      	ldr	r1, [r2, #0]
 800d93e:	1850      	adds	r0, r2, r1
 800d940:	42a0      	cmp	r0, r4
 800d942:	d10b      	bne.n	800d95c <_free_r+0x6c>
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	4401      	add	r1, r0
 800d948:	1850      	adds	r0, r2, r1
 800d94a:	4283      	cmp	r3, r0
 800d94c:	6011      	str	r1, [r2, #0]
 800d94e:	d1e0      	bne.n	800d912 <_free_r+0x22>
 800d950:	6818      	ldr	r0, [r3, #0]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	4408      	add	r0, r1
 800d956:	6010      	str	r0, [r2, #0]
 800d958:	6053      	str	r3, [r2, #4]
 800d95a:	e7da      	b.n	800d912 <_free_r+0x22>
 800d95c:	d902      	bls.n	800d964 <_free_r+0x74>
 800d95e:	230c      	movs	r3, #12
 800d960:	602b      	str	r3, [r5, #0]
 800d962:	e7d6      	b.n	800d912 <_free_r+0x22>
 800d964:	6820      	ldr	r0, [r4, #0]
 800d966:	1821      	adds	r1, r4, r0
 800d968:	428b      	cmp	r3, r1
 800d96a:	bf01      	itttt	eq
 800d96c:	6819      	ldreq	r1, [r3, #0]
 800d96e:	685b      	ldreq	r3, [r3, #4]
 800d970:	1809      	addeq	r1, r1, r0
 800d972:	6021      	streq	r1, [r4, #0]
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	6054      	str	r4, [r2, #4]
 800d978:	e7cb      	b.n	800d912 <_free_r+0x22>
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	20001cec 	.word	0x20001cec

0800d980 <sbrk_aligned>:
 800d980:	b570      	push	{r4, r5, r6, lr}
 800d982:	4e0f      	ldr	r6, [pc, #60]	@ (800d9c0 <sbrk_aligned+0x40>)
 800d984:	460c      	mov	r4, r1
 800d986:	6831      	ldr	r1, [r6, #0]
 800d988:	4605      	mov	r5, r0
 800d98a:	b911      	cbnz	r1, 800d992 <sbrk_aligned+0x12>
 800d98c:	f000 fba8 	bl	800e0e0 <_sbrk_r>
 800d990:	6030      	str	r0, [r6, #0]
 800d992:	4621      	mov	r1, r4
 800d994:	4628      	mov	r0, r5
 800d996:	f000 fba3 	bl	800e0e0 <_sbrk_r>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	d103      	bne.n	800d9a6 <sbrk_aligned+0x26>
 800d99e:	f04f 34ff 	mov.w	r4, #4294967295
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	bd70      	pop	{r4, r5, r6, pc}
 800d9a6:	1cc4      	adds	r4, r0, #3
 800d9a8:	f024 0403 	bic.w	r4, r4, #3
 800d9ac:	42a0      	cmp	r0, r4
 800d9ae:	d0f8      	beq.n	800d9a2 <sbrk_aligned+0x22>
 800d9b0:	1a21      	subs	r1, r4, r0
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f000 fb94 	bl	800e0e0 <_sbrk_r>
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d1f2      	bne.n	800d9a2 <sbrk_aligned+0x22>
 800d9bc:	e7ef      	b.n	800d99e <sbrk_aligned+0x1e>
 800d9be:	bf00      	nop
 800d9c0:	20001ce8 	.word	0x20001ce8

0800d9c4 <_malloc_r>:
 800d9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c8:	1ccd      	adds	r5, r1, #3
 800d9ca:	f025 0503 	bic.w	r5, r5, #3
 800d9ce:	3508      	adds	r5, #8
 800d9d0:	2d0c      	cmp	r5, #12
 800d9d2:	bf38      	it	cc
 800d9d4:	250c      	movcc	r5, #12
 800d9d6:	2d00      	cmp	r5, #0
 800d9d8:	4606      	mov	r6, r0
 800d9da:	db01      	blt.n	800d9e0 <_malloc_r+0x1c>
 800d9dc:	42a9      	cmp	r1, r5
 800d9de:	d904      	bls.n	800d9ea <_malloc_r+0x26>
 800d9e0:	230c      	movs	r3, #12
 800d9e2:	6033      	str	r3, [r6, #0]
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dac0 <_malloc_r+0xfc>
 800d9ee:	f000 f869 	bl	800dac4 <__malloc_lock>
 800d9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9f6:	461c      	mov	r4, r3
 800d9f8:	bb44      	cbnz	r4, 800da4c <_malloc_r+0x88>
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff ffbf 	bl	800d980 <sbrk_aligned>
 800da02:	1c43      	adds	r3, r0, #1
 800da04:	4604      	mov	r4, r0
 800da06:	d158      	bne.n	800daba <_malloc_r+0xf6>
 800da08:	f8d8 4000 	ldr.w	r4, [r8]
 800da0c:	4627      	mov	r7, r4
 800da0e:	2f00      	cmp	r7, #0
 800da10:	d143      	bne.n	800da9a <_malloc_r+0xd6>
 800da12:	2c00      	cmp	r4, #0
 800da14:	d04b      	beq.n	800daae <_malloc_r+0xea>
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	4639      	mov	r1, r7
 800da1a:	4630      	mov	r0, r6
 800da1c:	eb04 0903 	add.w	r9, r4, r3
 800da20:	f000 fb5e 	bl	800e0e0 <_sbrk_r>
 800da24:	4581      	cmp	r9, r0
 800da26:	d142      	bne.n	800daae <_malloc_r+0xea>
 800da28:	6821      	ldr	r1, [r4, #0]
 800da2a:	4630      	mov	r0, r6
 800da2c:	1a6d      	subs	r5, r5, r1
 800da2e:	4629      	mov	r1, r5
 800da30:	f7ff ffa6 	bl	800d980 <sbrk_aligned>
 800da34:	3001      	adds	r0, #1
 800da36:	d03a      	beq.n	800daae <_malloc_r+0xea>
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	442b      	add	r3, r5
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	f8d8 3000 	ldr.w	r3, [r8]
 800da42:	685a      	ldr	r2, [r3, #4]
 800da44:	bb62      	cbnz	r2, 800daa0 <_malloc_r+0xdc>
 800da46:	f8c8 7000 	str.w	r7, [r8]
 800da4a:	e00f      	b.n	800da6c <_malloc_r+0xa8>
 800da4c:	6822      	ldr	r2, [r4, #0]
 800da4e:	1b52      	subs	r2, r2, r5
 800da50:	d420      	bmi.n	800da94 <_malloc_r+0xd0>
 800da52:	2a0b      	cmp	r2, #11
 800da54:	d917      	bls.n	800da86 <_malloc_r+0xc2>
 800da56:	1961      	adds	r1, r4, r5
 800da58:	42a3      	cmp	r3, r4
 800da5a:	6025      	str	r5, [r4, #0]
 800da5c:	bf18      	it	ne
 800da5e:	6059      	strne	r1, [r3, #4]
 800da60:	6863      	ldr	r3, [r4, #4]
 800da62:	bf08      	it	eq
 800da64:	f8c8 1000 	streq.w	r1, [r8]
 800da68:	5162      	str	r2, [r4, r5]
 800da6a:	604b      	str	r3, [r1, #4]
 800da6c:	4630      	mov	r0, r6
 800da6e:	f000 f82f 	bl	800dad0 <__malloc_unlock>
 800da72:	f104 000b 	add.w	r0, r4, #11
 800da76:	1d23      	adds	r3, r4, #4
 800da78:	f020 0007 	bic.w	r0, r0, #7
 800da7c:	1ac2      	subs	r2, r0, r3
 800da7e:	bf1c      	itt	ne
 800da80:	1a1b      	subne	r3, r3, r0
 800da82:	50a3      	strne	r3, [r4, r2]
 800da84:	e7af      	b.n	800d9e6 <_malloc_r+0x22>
 800da86:	6862      	ldr	r2, [r4, #4]
 800da88:	42a3      	cmp	r3, r4
 800da8a:	bf0c      	ite	eq
 800da8c:	f8c8 2000 	streq.w	r2, [r8]
 800da90:	605a      	strne	r2, [r3, #4]
 800da92:	e7eb      	b.n	800da6c <_malloc_r+0xa8>
 800da94:	4623      	mov	r3, r4
 800da96:	6864      	ldr	r4, [r4, #4]
 800da98:	e7ae      	b.n	800d9f8 <_malloc_r+0x34>
 800da9a:	463c      	mov	r4, r7
 800da9c:	687f      	ldr	r7, [r7, #4]
 800da9e:	e7b6      	b.n	800da0e <_malloc_r+0x4a>
 800daa0:	461a      	mov	r2, r3
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	42a3      	cmp	r3, r4
 800daa6:	d1fb      	bne.n	800daa0 <_malloc_r+0xdc>
 800daa8:	2300      	movs	r3, #0
 800daaa:	6053      	str	r3, [r2, #4]
 800daac:	e7de      	b.n	800da6c <_malloc_r+0xa8>
 800daae:	230c      	movs	r3, #12
 800dab0:	4630      	mov	r0, r6
 800dab2:	6033      	str	r3, [r6, #0]
 800dab4:	f000 f80c 	bl	800dad0 <__malloc_unlock>
 800dab8:	e794      	b.n	800d9e4 <_malloc_r+0x20>
 800daba:	6005      	str	r5, [r0, #0]
 800dabc:	e7d6      	b.n	800da6c <_malloc_r+0xa8>
 800dabe:	bf00      	nop
 800dac0:	20001cec 	.word	0x20001cec

0800dac4 <__malloc_lock>:
 800dac4:	4801      	ldr	r0, [pc, #4]	@ (800dacc <__malloc_lock+0x8>)
 800dac6:	f7ff bf03 	b.w	800d8d0 <__retarget_lock_acquire_recursive>
 800daca:	bf00      	nop
 800dacc:	20001ce4 	.word	0x20001ce4

0800dad0 <__malloc_unlock>:
 800dad0:	4801      	ldr	r0, [pc, #4]	@ (800dad8 <__malloc_unlock+0x8>)
 800dad2:	f7ff befe 	b.w	800d8d2 <__retarget_lock_release_recursive>
 800dad6:	bf00      	nop
 800dad8:	20001ce4 	.word	0x20001ce4

0800dadc <__ssputs_r>:
 800dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	461f      	mov	r7, r3
 800dae2:	688e      	ldr	r6, [r1, #8]
 800dae4:	4682      	mov	sl, r0
 800dae6:	42be      	cmp	r6, r7
 800dae8:	460c      	mov	r4, r1
 800daea:	4690      	mov	r8, r2
 800daec:	680b      	ldr	r3, [r1, #0]
 800daee:	d82d      	bhi.n	800db4c <__ssputs_r+0x70>
 800daf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800daf8:	d026      	beq.n	800db48 <__ssputs_r+0x6c>
 800dafa:	6965      	ldr	r5, [r4, #20]
 800dafc:	6909      	ldr	r1, [r1, #16]
 800dafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db02:	eba3 0901 	sub.w	r9, r3, r1
 800db06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db0a:	1c7b      	adds	r3, r7, #1
 800db0c:	444b      	add	r3, r9
 800db0e:	106d      	asrs	r5, r5, #1
 800db10:	429d      	cmp	r5, r3
 800db12:	bf38      	it	cc
 800db14:	461d      	movcc	r5, r3
 800db16:	0553      	lsls	r3, r2, #21
 800db18:	d527      	bpl.n	800db6a <__ssputs_r+0x8e>
 800db1a:	4629      	mov	r1, r5
 800db1c:	f7ff ff52 	bl	800d9c4 <_malloc_r>
 800db20:	4606      	mov	r6, r0
 800db22:	b360      	cbz	r0, 800db7e <__ssputs_r+0xa2>
 800db24:	464a      	mov	r2, r9
 800db26:	6921      	ldr	r1, [r4, #16]
 800db28:	f7ff fed4 	bl	800d8d4 <memcpy>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	6126      	str	r6, [r4, #16]
 800db3a:	444e      	add	r6, r9
 800db3c:	6026      	str	r6, [r4, #0]
 800db3e:	463e      	mov	r6, r7
 800db40:	6165      	str	r5, [r4, #20]
 800db42:	eba5 0509 	sub.w	r5, r5, r9
 800db46:	60a5      	str	r5, [r4, #8]
 800db48:	42be      	cmp	r6, r7
 800db4a:	d900      	bls.n	800db4e <__ssputs_r+0x72>
 800db4c:	463e      	mov	r6, r7
 800db4e:	4632      	mov	r2, r6
 800db50:	4641      	mov	r1, r8
 800db52:	6820      	ldr	r0, [r4, #0]
 800db54:	f000 faaa 	bl	800e0ac <memmove>
 800db58:	2000      	movs	r0, #0
 800db5a:	68a3      	ldr	r3, [r4, #8]
 800db5c:	1b9b      	subs	r3, r3, r6
 800db5e:	60a3      	str	r3, [r4, #8]
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	4433      	add	r3, r6
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6a:	462a      	mov	r2, r5
 800db6c:	f000 fad6 	bl	800e11c <_realloc_r>
 800db70:	4606      	mov	r6, r0
 800db72:	2800      	cmp	r0, #0
 800db74:	d1e0      	bne.n	800db38 <__ssputs_r+0x5c>
 800db76:	4650      	mov	r0, sl
 800db78:	6921      	ldr	r1, [r4, #16]
 800db7a:	f7ff feb9 	bl	800d8f0 <_free_r>
 800db7e:	230c      	movs	r3, #12
 800db80:	f8ca 3000 	str.w	r3, [sl]
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f04f 30ff 	mov.w	r0, #4294967295
 800db8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	e7e9      	b.n	800db66 <__ssputs_r+0x8a>
	...

0800db94 <_svfiprintf_r>:
 800db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	4698      	mov	r8, r3
 800db9a:	898b      	ldrh	r3, [r1, #12]
 800db9c:	4607      	mov	r7, r0
 800db9e:	061b      	lsls	r3, r3, #24
 800dba0:	460d      	mov	r5, r1
 800dba2:	4614      	mov	r4, r2
 800dba4:	b09d      	sub	sp, #116	@ 0x74
 800dba6:	d510      	bpl.n	800dbca <_svfiprintf_r+0x36>
 800dba8:	690b      	ldr	r3, [r1, #16]
 800dbaa:	b973      	cbnz	r3, 800dbca <_svfiprintf_r+0x36>
 800dbac:	2140      	movs	r1, #64	@ 0x40
 800dbae:	f7ff ff09 	bl	800d9c4 <_malloc_r>
 800dbb2:	6028      	str	r0, [r5, #0]
 800dbb4:	6128      	str	r0, [r5, #16]
 800dbb6:	b930      	cbnz	r0, 800dbc6 <_svfiprintf_r+0x32>
 800dbb8:	230c      	movs	r3, #12
 800dbba:	603b      	str	r3, [r7, #0]
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc0:	b01d      	add	sp, #116	@ 0x74
 800dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc6:	2340      	movs	r3, #64	@ 0x40
 800dbc8:	616b      	str	r3, [r5, #20]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbce:	2320      	movs	r3, #32
 800dbd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbd4:	2330      	movs	r3, #48	@ 0x30
 800dbd6:	f04f 0901 	mov.w	r9, #1
 800dbda:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dd78 <_svfiprintf_r+0x1e4>
 800dbe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	469a      	mov	sl, r3
 800dbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbee:	b10a      	cbz	r2, 800dbf4 <_svfiprintf_r+0x60>
 800dbf0:	2a25      	cmp	r2, #37	@ 0x25
 800dbf2:	d1f9      	bne.n	800dbe8 <_svfiprintf_r+0x54>
 800dbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf8:	d00b      	beq.n	800dc12 <_svfiprintf_r+0x7e>
 800dbfa:	465b      	mov	r3, fp
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ff6b 	bl	800dadc <__ssputs_r>
 800dc06:	3001      	adds	r0, #1
 800dc08:	f000 80a7 	beq.w	800dd5a <_svfiprintf_r+0x1c6>
 800dc0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc0e:	445a      	add	r2, fp
 800dc10:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 809f 	beq.w	800dd5a <_svfiprintf_r+0x1c6>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc26:	f10a 0a01 	add.w	sl, sl, #1
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	9307      	str	r3, [sp, #28]
 800dc2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc32:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc34:	4654      	mov	r4, sl
 800dc36:	2205      	movs	r2, #5
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	484e      	ldr	r0, [pc, #312]	@ (800dd78 <_svfiprintf_r+0x1e4>)
 800dc3e:	f000 fa5f 	bl	800e100 <memchr>
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	b9d8      	cbnz	r0, 800dc7e <_svfiprintf_r+0xea>
 800dc46:	06d0      	lsls	r0, r2, #27
 800dc48:	bf44      	itt	mi
 800dc4a:	2320      	movmi	r3, #32
 800dc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc50:	0711      	lsls	r1, r2, #28
 800dc52:	bf44      	itt	mi
 800dc54:	232b      	movmi	r3, #43	@ 0x2b
 800dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc60:	d015      	beq.n	800dc8e <_svfiprintf_r+0xfa>
 800dc62:	4654      	mov	r4, sl
 800dc64:	2000      	movs	r0, #0
 800dc66:	f04f 0c0a 	mov.w	ip, #10
 800dc6a:	9a07      	ldr	r2, [sp, #28]
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc72:	3b30      	subs	r3, #48	@ 0x30
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d94b      	bls.n	800dd10 <_svfiprintf_r+0x17c>
 800dc78:	b1b0      	cbz	r0, 800dca8 <_svfiprintf_r+0x114>
 800dc7a:	9207      	str	r2, [sp, #28]
 800dc7c:	e014      	b.n	800dca8 <_svfiprintf_r+0x114>
 800dc7e:	eba0 0308 	sub.w	r3, r0, r8
 800dc82:	fa09 f303 	lsl.w	r3, r9, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	46a2      	mov	sl, r4
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	e7d2      	b.n	800dc34 <_svfiprintf_r+0xa0>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d19      	adds	r1, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9103      	str	r1, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbb      	ittet	lt
 800dc9a:	425b      	neglt	r3, r3
 800dc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dca0:	9307      	strge	r3, [sp, #28]
 800dca2:	9307      	strlt	r3, [sp, #28]
 800dca4:	bfb8      	it	lt
 800dca6:	9204      	strlt	r2, [sp, #16]
 800dca8:	7823      	ldrb	r3, [r4, #0]
 800dcaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcac:	d10a      	bne.n	800dcc4 <_svfiprintf_r+0x130>
 800dcae:	7863      	ldrb	r3, [r4, #1]
 800dcb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcb2:	d132      	bne.n	800dd1a <_svfiprintf_r+0x186>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	3402      	adds	r4, #2
 800dcb8:	1d1a      	adds	r2, r3, #4
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	9203      	str	r2, [sp, #12]
 800dcbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcc2:	9305      	str	r3, [sp, #20]
 800dcc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dd7c <_svfiprintf_r+0x1e8>
 800dcc8:	2203      	movs	r2, #3
 800dcca:	4650      	mov	r0, sl
 800dccc:	7821      	ldrb	r1, [r4, #0]
 800dcce:	f000 fa17 	bl	800e100 <memchr>
 800dcd2:	b138      	cbz	r0, 800dce4 <_svfiprintf_r+0x150>
 800dcd4:	2240      	movs	r2, #64	@ 0x40
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	eba0 000a 	sub.w	r0, r0, sl
 800dcdc:	4082      	lsls	r2, r0
 800dcde:	4313      	orrs	r3, r2
 800dce0:	3401      	adds	r4, #1
 800dce2:	9304      	str	r3, [sp, #16]
 800dce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce8:	2206      	movs	r2, #6
 800dcea:	4825      	ldr	r0, [pc, #148]	@ (800dd80 <_svfiprintf_r+0x1ec>)
 800dcec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcf0:	f000 fa06 	bl	800e100 <memchr>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d036      	beq.n	800dd66 <_svfiprintf_r+0x1d2>
 800dcf8:	4b22      	ldr	r3, [pc, #136]	@ (800dd84 <_svfiprintf_r+0x1f0>)
 800dcfa:	bb1b      	cbnz	r3, 800dd44 <_svfiprintf_r+0x1b0>
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	3307      	adds	r3, #7
 800dd00:	f023 0307 	bic.w	r3, r3, #7
 800dd04:	3308      	adds	r3, #8
 800dd06:	9303      	str	r3, [sp, #12]
 800dd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0a:	4433      	add	r3, r6
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	e76a      	b.n	800dbe6 <_svfiprintf_r+0x52>
 800dd10:	460c      	mov	r4, r1
 800dd12:	2001      	movs	r0, #1
 800dd14:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd18:	e7a8      	b.n	800dc6c <_svfiprintf_r+0xd8>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f04f 0c0a 	mov.w	ip, #10
 800dd20:	4619      	mov	r1, r3
 800dd22:	3401      	adds	r4, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	4620      	mov	r0, r4
 800dd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd2c:	3a30      	subs	r2, #48	@ 0x30
 800dd2e:	2a09      	cmp	r2, #9
 800dd30:	d903      	bls.n	800dd3a <_svfiprintf_r+0x1a6>
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d0c6      	beq.n	800dcc4 <_svfiprintf_r+0x130>
 800dd36:	9105      	str	r1, [sp, #20]
 800dd38:	e7c4      	b.n	800dcc4 <_svfiprintf_r+0x130>
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd42:	e7f0      	b.n	800dd26 <_svfiprintf_r+0x192>
 800dd44:	ab03      	add	r3, sp, #12
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	462a      	mov	r2, r5
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd88 <_svfiprintf_r+0x1f4>)
 800dd4e:	a904      	add	r1, sp, #16
 800dd50:	f3af 8000 	nop.w
 800dd54:	1c42      	adds	r2, r0, #1
 800dd56:	4606      	mov	r6, r0
 800dd58:	d1d6      	bne.n	800dd08 <_svfiprintf_r+0x174>
 800dd5a:	89ab      	ldrh	r3, [r5, #12]
 800dd5c:	065b      	lsls	r3, r3, #25
 800dd5e:	f53f af2d 	bmi.w	800dbbc <_svfiprintf_r+0x28>
 800dd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd64:	e72c      	b.n	800dbc0 <_svfiprintf_r+0x2c>
 800dd66:	ab03      	add	r3, sp, #12
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	4b06      	ldr	r3, [pc, #24]	@ (800dd88 <_svfiprintf_r+0x1f4>)
 800dd70:	a904      	add	r1, sp, #16
 800dd72:	f000 f87d 	bl	800de70 <_printf_i>
 800dd76:	e7ed      	b.n	800dd54 <_svfiprintf_r+0x1c0>
 800dd78:	0800efb6 	.word	0x0800efb6
 800dd7c:	0800efbc 	.word	0x0800efbc
 800dd80:	0800efc0 	.word	0x0800efc0
 800dd84:	00000000 	.word	0x00000000
 800dd88:	0800dadd 	.word	0x0800dadd

0800dd8c <_printf_common>:
 800dd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd90:	4616      	mov	r6, r2
 800dd92:	4698      	mov	r8, r3
 800dd94:	688a      	ldr	r2, [r1, #8]
 800dd96:	690b      	ldr	r3, [r1, #16]
 800dd98:	4607      	mov	r7, r0
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	bfb8      	it	lt
 800dd9e:	4613      	movlt	r3, r2
 800dda0:	6033      	str	r3, [r6, #0]
 800dda2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dda6:	460c      	mov	r4, r1
 800dda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddac:	b10a      	cbz	r2, 800ddb2 <_printf_common+0x26>
 800ddae:	3301      	adds	r3, #1
 800ddb0:	6033      	str	r3, [r6, #0]
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	0699      	lsls	r1, r3, #26
 800ddb6:	bf42      	ittt	mi
 800ddb8:	6833      	ldrmi	r3, [r6, #0]
 800ddba:	3302      	addmi	r3, #2
 800ddbc:	6033      	strmi	r3, [r6, #0]
 800ddbe:	6825      	ldr	r5, [r4, #0]
 800ddc0:	f015 0506 	ands.w	r5, r5, #6
 800ddc4:	d106      	bne.n	800ddd4 <_printf_common+0x48>
 800ddc6:	f104 0a19 	add.w	sl, r4, #25
 800ddca:	68e3      	ldr	r3, [r4, #12]
 800ddcc:	6832      	ldr	r2, [r6, #0]
 800ddce:	1a9b      	subs	r3, r3, r2
 800ddd0:	42ab      	cmp	r3, r5
 800ddd2:	dc2b      	bgt.n	800de2c <_printf_common+0xa0>
 800ddd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ddd8:	6822      	ldr	r2, [r4, #0]
 800ddda:	3b00      	subs	r3, #0
 800dddc:	bf18      	it	ne
 800ddde:	2301      	movne	r3, #1
 800dde0:	0692      	lsls	r2, r2, #26
 800dde2:	d430      	bmi.n	800de46 <_printf_common+0xba>
 800dde4:	4641      	mov	r1, r8
 800dde6:	4638      	mov	r0, r7
 800dde8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddec:	47c8      	blx	r9
 800ddee:	3001      	adds	r0, #1
 800ddf0:	d023      	beq.n	800de3a <_printf_common+0xae>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	6922      	ldr	r2, [r4, #16]
 800ddf6:	f003 0306 	and.w	r3, r3, #6
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	bf14      	ite	ne
 800ddfe:	2500      	movne	r5, #0
 800de00:	6833      	ldreq	r3, [r6, #0]
 800de02:	f04f 0600 	mov.w	r6, #0
 800de06:	bf08      	it	eq
 800de08:	68e5      	ldreq	r5, [r4, #12]
 800de0a:	f104 041a 	add.w	r4, r4, #26
 800de0e:	bf08      	it	eq
 800de10:	1aed      	subeq	r5, r5, r3
 800de12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800de16:	bf08      	it	eq
 800de18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de1c:	4293      	cmp	r3, r2
 800de1e:	bfc4      	itt	gt
 800de20:	1a9b      	subgt	r3, r3, r2
 800de22:	18ed      	addgt	r5, r5, r3
 800de24:	42b5      	cmp	r5, r6
 800de26:	d11a      	bne.n	800de5e <_printf_common+0xd2>
 800de28:	2000      	movs	r0, #0
 800de2a:	e008      	b.n	800de3e <_printf_common+0xb2>
 800de2c:	2301      	movs	r3, #1
 800de2e:	4652      	mov	r2, sl
 800de30:	4641      	mov	r1, r8
 800de32:	4638      	mov	r0, r7
 800de34:	47c8      	blx	r9
 800de36:	3001      	adds	r0, #1
 800de38:	d103      	bne.n	800de42 <_printf_common+0xb6>
 800de3a:	f04f 30ff 	mov.w	r0, #4294967295
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	3501      	adds	r5, #1
 800de44:	e7c1      	b.n	800ddca <_printf_common+0x3e>
 800de46:	2030      	movs	r0, #48	@ 0x30
 800de48:	18e1      	adds	r1, r4, r3
 800de4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de54:	4422      	add	r2, r4
 800de56:	3302      	adds	r3, #2
 800de58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de5c:	e7c2      	b.n	800dde4 <_printf_common+0x58>
 800de5e:	2301      	movs	r3, #1
 800de60:	4622      	mov	r2, r4
 800de62:	4641      	mov	r1, r8
 800de64:	4638      	mov	r0, r7
 800de66:	47c8      	blx	r9
 800de68:	3001      	adds	r0, #1
 800de6a:	d0e6      	beq.n	800de3a <_printf_common+0xae>
 800de6c:	3601      	adds	r6, #1
 800de6e:	e7d9      	b.n	800de24 <_printf_common+0x98>

0800de70 <_printf_i>:
 800de70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de74:	7e0f      	ldrb	r7, [r1, #24]
 800de76:	4691      	mov	r9, r2
 800de78:	2f78      	cmp	r7, #120	@ 0x78
 800de7a:	4680      	mov	r8, r0
 800de7c:	460c      	mov	r4, r1
 800de7e:	469a      	mov	sl, r3
 800de80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de86:	d807      	bhi.n	800de98 <_printf_i+0x28>
 800de88:	2f62      	cmp	r7, #98	@ 0x62
 800de8a:	d80a      	bhi.n	800dea2 <_printf_i+0x32>
 800de8c:	2f00      	cmp	r7, #0
 800de8e:	f000 80d1 	beq.w	800e034 <_printf_i+0x1c4>
 800de92:	2f58      	cmp	r7, #88	@ 0x58
 800de94:	f000 80b8 	beq.w	800e008 <_printf_i+0x198>
 800de98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dea0:	e03a      	b.n	800df18 <_printf_i+0xa8>
 800dea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dea6:	2b15      	cmp	r3, #21
 800dea8:	d8f6      	bhi.n	800de98 <_printf_i+0x28>
 800deaa:	a101      	add	r1, pc, #4	@ (adr r1, 800deb0 <_printf_i+0x40>)
 800deac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800deb0:	0800df09 	.word	0x0800df09
 800deb4:	0800df1d 	.word	0x0800df1d
 800deb8:	0800de99 	.word	0x0800de99
 800debc:	0800de99 	.word	0x0800de99
 800dec0:	0800de99 	.word	0x0800de99
 800dec4:	0800de99 	.word	0x0800de99
 800dec8:	0800df1d 	.word	0x0800df1d
 800decc:	0800de99 	.word	0x0800de99
 800ded0:	0800de99 	.word	0x0800de99
 800ded4:	0800de99 	.word	0x0800de99
 800ded8:	0800de99 	.word	0x0800de99
 800dedc:	0800e01b 	.word	0x0800e01b
 800dee0:	0800df47 	.word	0x0800df47
 800dee4:	0800dfd5 	.word	0x0800dfd5
 800dee8:	0800de99 	.word	0x0800de99
 800deec:	0800de99 	.word	0x0800de99
 800def0:	0800e03d 	.word	0x0800e03d
 800def4:	0800de99 	.word	0x0800de99
 800def8:	0800df47 	.word	0x0800df47
 800defc:	0800de99 	.word	0x0800de99
 800df00:	0800de99 	.word	0x0800de99
 800df04:	0800dfdd 	.word	0x0800dfdd
 800df08:	6833      	ldr	r3, [r6, #0]
 800df0a:	1d1a      	adds	r2, r3, #4
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6032      	str	r2, [r6, #0]
 800df10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df18:	2301      	movs	r3, #1
 800df1a:	e09c      	b.n	800e056 <_printf_i+0x1e6>
 800df1c:	6833      	ldr	r3, [r6, #0]
 800df1e:	6820      	ldr	r0, [r4, #0]
 800df20:	1d19      	adds	r1, r3, #4
 800df22:	6031      	str	r1, [r6, #0]
 800df24:	0606      	lsls	r6, r0, #24
 800df26:	d501      	bpl.n	800df2c <_printf_i+0xbc>
 800df28:	681d      	ldr	r5, [r3, #0]
 800df2a:	e003      	b.n	800df34 <_printf_i+0xc4>
 800df2c:	0645      	lsls	r5, r0, #25
 800df2e:	d5fb      	bpl.n	800df28 <_printf_i+0xb8>
 800df30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df34:	2d00      	cmp	r5, #0
 800df36:	da03      	bge.n	800df40 <_printf_i+0xd0>
 800df38:	232d      	movs	r3, #45	@ 0x2d
 800df3a:	426d      	negs	r5, r5
 800df3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df40:	230a      	movs	r3, #10
 800df42:	4858      	ldr	r0, [pc, #352]	@ (800e0a4 <_printf_i+0x234>)
 800df44:	e011      	b.n	800df6a <_printf_i+0xfa>
 800df46:	6821      	ldr	r1, [r4, #0]
 800df48:	6833      	ldr	r3, [r6, #0]
 800df4a:	0608      	lsls	r0, r1, #24
 800df4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800df50:	d402      	bmi.n	800df58 <_printf_i+0xe8>
 800df52:	0649      	lsls	r1, r1, #25
 800df54:	bf48      	it	mi
 800df56:	b2ad      	uxthmi	r5, r5
 800df58:	2f6f      	cmp	r7, #111	@ 0x6f
 800df5a:	6033      	str	r3, [r6, #0]
 800df5c:	bf14      	ite	ne
 800df5e:	230a      	movne	r3, #10
 800df60:	2308      	moveq	r3, #8
 800df62:	4850      	ldr	r0, [pc, #320]	@ (800e0a4 <_printf_i+0x234>)
 800df64:	2100      	movs	r1, #0
 800df66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df6a:	6866      	ldr	r6, [r4, #4]
 800df6c:	2e00      	cmp	r6, #0
 800df6e:	60a6      	str	r6, [r4, #8]
 800df70:	db05      	blt.n	800df7e <_printf_i+0x10e>
 800df72:	6821      	ldr	r1, [r4, #0]
 800df74:	432e      	orrs	r6, r5
 800df76:	f021 0104 	bic.w	r1, r1, #4
 800df7a:	6021      	str	r1, [r4, #0]
 800df7c:	d04b      	beq.n	800e016 <_printf_i+0x1a6>
 800df7e:	4616      	mov	r6, r2
 800df80:	fbb5 f1f3 	udiv	r1, r5, r3
 800df84:	fb03 5711 	mls	r7, r3, r1, r5
 800df88:	5dc7      	ldrb	r7, [r0, r7]
 800df8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df8e:	462f      	mov	r7, r5
 800df90:	42bb      	cmp	r3, r7
 800df92:	460d      	mov	r5, r1
 800df94:	d9f4      	bls.n	800df80 <_printf_i+0x110>
 800df96:	2b08      	cmp	r3, #8
 800df98:	d10b      	bne.n	800dfb2 <_printf_i+0x142>
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	07df      	lsls	r7, r3, #31
 800df9e:	d508      	bpl.n	800dfb2 <_printf_i+0x142>
 800dfa0:	6923      	ldr	r3, [r4, #16]
 800dfa2:	6861      	ldr	r1, [r4, #4]
 800dfa4:	4299      	cmp	r1, r3
 800dfa6:	bfde      	ittt	le
 800dfa8:	2330      	movle	r3, #48	@ 0x30
 800dfaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfb2:	1b92      	subs	r2, r2, r6
 800dfb4:	6122      	str	r2, [r4, #16]
 800dfb6:	464b      	mov	r3, r9
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4640      	mov	r0, r8
 800dfbc:	f8cd a000 	str.w	sl, [sp]
 800dfc0:	aa03      	add	r2, sp, #12
 800dfc2:	f7ff fee3 	bl	800dd8c <_printf_common>
 800dfc6:	3001      	adds	r0, #1
 800dfc8:	d14a      	bne.n	800e060 <_printf_i+0x1f0>
 800dfca:	f04f 30ff 	mov.w	r0, #4294967295
 800dfce:	b004      	add	sp, #16
 800dfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	f043 0320 	orr.w	r3, r3, #32
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	2778      	movs	r7, #120	@ 0x78
 800dfde:	4832      	ldr	r0, [pc, #200]	@ (800e0a8 <_printf_i+0x238>)
 800dfe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	6831      	ldr	r1, [r6, #0]
 800dfe8:	061f      	lsls	r7, r3, #24
 800dfea:	f851 5b04 	ldr.w	r5, [r1], #4
 800dfee:	d402      	bmi.n	800dff6 <_printf_i+0x186>
 800dff0:	065f      	lsls	r7, r3, #25
 800dff2:	bf48      	it	mi
 800dff4:	b2ad      	uxthmi	r5, r5
 800dff6:	6031      	str	r1, [r6, #0]
 800dff8:	07d9      	lsls	r1, r3, #31
 800dffa:	bf44      	itt	mi
 800dffc:	f043 0320 	orrmi.w	r3, r3, #32
 800e000:	6023      	strmi	r3, [r4, #0]
 800e002:	b11d      	cbz	r5, 800e00c <_printf_i+0x19c>
 800e004:	2310      	movs	r3, #16
 800e006:	e7ad      	b.n	800df64 <_printf_i+0xf4>
 800e008:	4826      	ldr	r0, [pc, #152]	@ (800e0a4 <_printf_i+0x234>)
 800e00a:	e7e9      	b.n	800dfe0 <_printf_i+0x170>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	f023 0320 	bic.w	r3, r3, #32
 800e012:	6023      	str	r3, [r4, #0]
 800e014:	e7f6      	b.n	800e004 <_printf_i+0x194>
 800e016:	4616      	mov	r6, r2
 800e018:	e7bd      	b.n	800df96 <_printf_i+0x126>
 800e01a:	6833      	ldr	r3, [r6, #0]
 800e01c:	6825      	ldr	r5, [r4, #0]
 800e01e:	1d18      	adds	r0, r3, #4
 800e020:	6961      	ldr	r1, [r4, #20]
 800e022:	6030      	str	r0, [r6, #0]
 800e024:	062e      	lsls	r6, r5, #24
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	d501      	bpl.n	800e02e <_printf_i+0x1be>
 800e02a:	6019      	str	r1, [r3, #0]
 800e02c:	e002      	b.n	800e034 <_printf_i+0x1c4>
 800e02e:	0668      	lsls	r0, r5, #25
 800e030:	d5fb      	bpl.n	800e02a <_printf_i+0x1ba>
 800e032:	8019      	strh	r1, [r3, #0]
 800e034:	2300      	movs	r3, #0
 800e036:	4616      	mov	r6, r2
 800e038:	6123      	str	r3, [r4, #16]
 800e03a:	e7bc      	b.n	800dfb6 <_printf_i+0x146>
 800e03c:	6833      	ldr	r3, [r6, #0]
 800e03e:	2100      	movs	r1, #0
 800e040:	1d1a      	adds	r2, r3, #4
 800e042:	6032      	str	r2, [r6, #0]
 800e044:	681e      	ldr	r6, [r3, #0]
 800e046:	6862      	ldr	r2, [r4, #4]
 800e048:	4630      	mov	r0, r6
 800e04a:	f000 f859 	bl	800e100 <memchr>
 800e04e:	b108      	cbz	r0, 800e054 <_printf_i+0x1e4>
 800e050:	1b80      	subs	r0, r0, r6
 800e052:	6060      	str	r0, [r4, #4]
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	6123      	str	r3, [r4, #16]
 800e058:	2300      	movs	r3, #0
 800e05a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e05e:	e7aa      	b.n	800dfb6 <_printf_i+0x146>
 800e060:	4632      	mov	r2, r6
 800e062:	4649      	mov	r1, r9
 800e064:	4640      	mov	r0, r8
 800e066:	6923      	ldr	r3, [r4, #16]
 800e068:	47d0      	blx	sl
 800e06a:	3001      	adds	r0, #1
 800e06c:	d0ad      	beq.n	800dfca <_printf_i+0x15a>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	079b      	lsls	r3, r3, #30
 800e072:	d413      	bmi.n	800e09c <_printf_i+0x22c>
 800e074:	68e0      	ldr	r0, [r4, #12]
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	4298      	cmp	r0, r3
 800e07a:	bfb8      	it	lt
 800e07c:	4618      	movlt	r0, r3
 800e07e:	e7a6      	b.n	800dfce <_printf_i+0x15e>
 800e080:	2301      	movs	r3, #1
 800e082:	4632      	mov	r2, r6
 800e084:	4649      	mov	r1, r9
 800e086:	4640      	mov	r0, r8
 800e088:	47d0      	blx	sl
 800e08a:	3001      	adds	r0, #1
 800e08c:	d09d      	beq.n	800dfca <_printf_i+0x15a>
 800e08e:	3501      	adds	r5, #1
 800e090:	68e3      	ldr	r3, [r4, #12]
 800e092:	9903      	ldr	r1, [sp, #12]
 800e094:	1a5b      	subs	r3, r3, r1
 800e096:	42ab      	cmp	r3, r5
 800e098:	dcf2      	bgt.n	800e080 <_printf_i+0x210>
 800e09a:	e7eb      	b.n	800e074 <_printf_i+0x204>
 800e09c:	2500      	movs	r5, #0
 800e09e:	f104 0619 	add.w	r6, r4, #25
 800e0a2:	e7f5      	b.n	800e090 <_printf_i+0x220>
 800e0a4:	0800efc7 	.word	0x0800efc7
 800e0a8:	0800efd8 	.word	0x0800efd8

0800e0ac <memmove>:
 800e0ac:	4288      	cmp	r0, r1
 800e0ae:	b510      	push	{r4, lr}
 800e0b0:	eb01 0402 	add.w	r4, r1, r2
 800e0b4:	d902      	bls.n	800e0bc <memmove+0x10>
 800e0b6:	4284      	cmp	r4, r0
 800e0b8:	4623      	mov	r3, r4
 800e0ba:	d807      	bhi.n	800e0cc <memmove+0x20>
 800e0bc:	1e43      	subs	r3, r0, #1
 800e0be:	42a1      	cmp	r1, r4
 800e0c0:	d008      	beq.n	800e0d4 <memmove+0x28>
 800e0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ca:	e7f8      	b.n	800e0be <memmove+0x12>
 800e0cc:	4601      	mov	r1, r0
 800e0ce:	4402      	add	r2, r0
 800e0d0:	428a      	cmp	r2, r1
 800e0d2:	d100      	bne.n	800e0d6 <memmove+0x2a>
 800e0d4:	bd10      	pop	{r4, pc}
 800e0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0de:	e7f7      	b.n	800e0d0 <memmove+0x24>

0800e0e0 <_sbrk_r>:
 800e0e0:	b538      	push	{r3, r4, r5, lr}
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	4d05      	ldr	r5, [pc, #20]	@ (800e0fc <_sbrk_r+0x1c>)
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4608      	mov	r0, r1
 800e0ea:	602b      	str	r3, [r5, #0]
 800e0ec:	f7f3 fdd6 	bl	8001c9c <_sbrk>
 800e0f0:	1c43      	adds	r3, r0, #1
 800e0f2:	d102      	bne.n	800e0fa <_sbrk_r+0x1a>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	b103      	cbz	r3, 800e0fa <_sbrk_r+0x1a>
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	20001ce0 	.word	0x20001ce0

0800e100 <memchr>:
 800e100:	4603      	mov	r3, r0
 800e102:	b510      	push	{r4, lr}
 800e104:	b2c9      	uxtb	r1, r1
 800e106:	4402      	add	r2, r0
 800e108:	4293      	cmp	r3, r2
 800e10a:	4618      	mov	r0, r3
 800e10c:	d101      	bne.n	800e112 <memchr+0x12>
 800e10e:	2000      	movs	r0, #0
 800e110:	e003      	b.n	800e11a <memchr+0x1a>
 800e112:	7804      	ldrb	r4, [r0, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	428c      	cmp	r4, r1
 800e118:	d1f6      	bne.n	800e108 <memchr+0x8>
 800e11a:	bd10      	pop	{r4, pc}

0800e11c <_realloc_r>:
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	4607      	mov	r7, r0
 800e122:	4614      	mov	r4, r2
 800e124:	460d      	mov	r5, r1
 800e126:	b921      	cbnz	r1, 800e132 <_realloc_r+0x16>
 800e128:	4611      	mov	r1, r2
 800e12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e12e:	f7ff bc49 	b.w	800d9c4 <_malloc_r>
 800e132:	b92a      	cbnz	r2, 800e140 <_realloc_r+0x24>
 800e134:	f7ff fbdc 	bl	800d8f0 <_free_r>
 800e138:	4625      	mov	r5, r4
 800e13a:	4628      	mov	r0, r5
 800e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e140:	f000 f81a 	bl	800e178 <_malloc_usable_size_r>
 800e144:	4284      	cmp	r4, r0
 800e146:	4606      	mov	r6, r0
 800e148:	d802      	bhi.n	800e150 <_realloc_r+0x34>
 800e14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e14e:	d8f4      	bhi.n	800e13a <_realloc_r+0x1e>
 800e150:	4621      	mov	r1, r4
 800e152:	4638      	mov	r0, r7
 800e154:	f7ff fc36 	bl	800d9c4 <_malloc_r>
 800e158:	4680      	mov	r8, r0
 800e15a:	b908      	cbnz	r0, 800e160 <_realloc_r+0x44>
 800e15c:	4645      	mov	r5, r8
 800e15e:	e7ec      	b.n	800e13a <_realloc_r+0x1e>
 800e160:	42b4      	cmp	r4, r6
 800e162:	4622      	mov	r2, r4
 800e164:	4629      	mov	r1, r5
 800e166:	bf28      	it	cs
 800e168:	4632      	movcs	r2, r6
 800e16a:	f7ff fbb3 	bl	800d8d4 <memcpy>
 800e16e:	4629      	mov	r1, r5
 800e170:	4638      	mov	r0, r7
 800e172:	f7ff fbbd 	bl	800d8f0 <_free_r>
 800e176:	e7f1      	b.n	800e15c <_realloc_r+0x40>

0800e178 <_malloc_usable_size_r>:
 800e178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17c:	1f18      	subs	r0, r3, #4
 800e17e:	2b00      	cmp	r3, #0
 800e180:	bfbc      	itt	lt
 800e182:	580b      	ldrlt	r3, [r1, r0]
 800e184:	18c0      	addlt	r0, r0, r3
 800e186:	4770      	bx	lr

0800e188 <_init>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	bf00      	nop
 800e18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18e:	bc08      	pop	{r3}
 800e190:	469e      	mov	lr, r3
 800e192:	4770      	bx	lr

0800e194 <_fini>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr
