
Modules_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb20  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  0800cc2c  0800cc2c  0000dc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7c8  0800d7c8  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d7c8  0800d7c8  0000f1d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d7c8  0800d7c8  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7c8  0800d7c8  0000e7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7cc  0800d7cc  0000e7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d7d0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b84  200001d8  0800d9a8  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  0800d9a8  0000fd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169b0  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dde  00000000  00000000  00025bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00029990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001037  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b176  00000000  00000000  0002bee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adb2  00000000  00000000  0004705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009048f  00000000  00000000  00061e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f229e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  000f22e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f7fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cc14 	.word	0x0800cc14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800cc14 	.word	0x0800cc14

0800014c <UNER_SetTxFunction>:

/**
 * @brief Asigna la función de transmisión para el protocolo.
 */
void UNER_SetTxFunction(txFunct_t func)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    sendFunction = func;
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <UNER_SetTxFunction+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200001f4 	.word	0x200001f4

08000168 <UNER_Init>:

/**
 * @brief Inicializa las estructuras de transmisión y recepción.
 */
void UNER_Init(_sTx *tx, uint8_t *txBuf, _sRx *rx, uint8_t *rxBuf)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
 8000174:	603b      	str	r3, [r7, #0]
    tx->buf = txBuf;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
    tx->iw = 0;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	711a      	strb	r2, [r3, #4]
    tx->ir = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	715a      	strb	r2, [r3, #5]
    tx->length = SIZEBUFTX - 1;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	22ff      	movs	r2, #255	@ 0xff
 800018c:	719a      	strb	r2, [r3, #6]
    tx->chks = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	71da      	strb	r2, [r3, #7]

    rx->buf = rxBuf;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	601a      	str	r2, [r3, #0]
    rx->iw = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
    rx->ir = 0;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
    rx->header = HEADER_U;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
    rx->length = SIZEBUFRX - 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	71da      	strb	r2, [r3, #7]
    rx->size = 0;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	721a      	strb	r2, [r3, #8]
    rx->data = 0;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2200      	movs	r2, #0
 80001bc:	725a      	strb	r2, [r3, #9]
    rx->chks = 0;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2200      	movs	r2, #0
 80001c2:	729a      	strb	r2, [r3, #10]

    protocolState = HEADER_U;
 80001c4:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <UNER_Init+0x74>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
    CMDID = UNKNOWN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <UNER_Init+0x78>)
 80001cc:	22ff      	movs	r2, #255	@ 0xff
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200001f9 	.word	0x200001f9
 80001e0:	200001f8 	.word	0x200001f8

080001e4 <UNER_SerialTask>:

/**
 * @brief Lógica periódica de recepción y transmisión de datos.
 */
void UNER_SerialTask(_sTx *tx, _sRx *rx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (rx->iw != rx->ir) {
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	791a      	ldrb	r2, [r3, #4]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	795b      	ldrb	r3, [r3, #5]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d003      	beq.n	8000202 <UNER_SerialTask+0x1e>
        UNER_DecodeHeader(rx, tx);
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f000 f841 	bl	8000284 <UNER_DecodeHeader>
    }

    if (tx->ir != tx->iw) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	795a      	ldrb	r2, [r3, #5]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d016      	beq.n	800023c <UNER_SerialTask+0x58>
        sendFunction(&tx->buf[tx->ir]);
 800020e:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <UNER_SerialTask+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	7949      	ldrb	r1, [r1, #5]
 800021a:	440a      	add	r2, r1
 800021c:	4610      	mov	r0, r2
 800021e:	4798      	blx	r3
        tx->ir++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	715a      	strb	r2, [r3, #5]
        tx->ir &= tx->length;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	4013      	ands	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	715a      	strb	r2, [r3, #5]
    }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001f4 	.word	0x200001f4

08000248 <UNER_OnRxByte>:

/**
 * @brief Almacena cada byte recibido en el buffer.
 */
void UNER_OnRxByte(_sRx *rx, uint8_t data)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    rx->buf[rx->iw++] = data;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	b2c8      	uxtb	r0, r1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	7108      	strb	r0, [r1, #4]
 8000264:	4413      	add	r3, r2
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	701a      	strb	r2, [r3, #0]
    rx->iw &= rx->length;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	791a      	ldrb	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	4013      	ands	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	711a      	strb	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <UNER_DecodeHeader>:
 * @brief Decodifica el encabezado del protocolo UNER.
 * @param rx Buffer de recepción.
 * @param tx Buffer de transmisión.
 */
void UNER_DecodeHeader(_sRx *rx, _sTx *tx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint8_t i = rx->iw;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	73fb      	strb	r3, [r7, #15]
    while(rx->ir != i){
 8000294:	e0de      	b.n	8000454 <UNER_DecodeHeader+0x1d0>
        switch(rx->header){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	2b06      	cmp	r3, #6
 800029c:	f200 80c7 	bhi.w	800042e <UNER_DecodeHeader+0x1aa>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <UNER_DecodeHeader+0x24>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002c5 	.word	0x080002c5
 80002ac:	080002df 	.word	0x080002df
 80002b0:	0800030b 	.word	0x0800030b
 80002b4:	08000337 	.word	0x08000337
 80002b8:	08000363 	.word	0x08000363
 80002bc:	0800037b 	.word	0x0800037b
 80002c0:	080003d1 	.word	0x080003d1
            case HEADER_U:
                if(rx->buf[rx->ir] == 'U'){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b55      	cmp	r3, #85	@ 0x55
 80002d2:	f040 80b0 	bne.w	8000436 <UNER_DecodeHeader+0x1b2>
                    rx->header = HEADER_N;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	719a      	strb	r2, [r3, #6]
                }
            break;
 80002dc:	e0ab      	b.n	8000436 <UNER_DecodeHeader+0x1b2>
            case HEADER_N:
                if(rx->buf[rx->ir] == 'N'){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7952      	ldrb	r2, [r2, #5]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80002ec:	d103      	bne.n	80002f6 <UNER_DecodeHeader+0x72>
                    rx->header = HEADER_E;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2202      	movs	r2, #2
 80002f2:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80002f4:	e0a0      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
            break;
 8000308:	e096      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_E:
                if(rx->buf[rx->ir] == 'E'){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7952      	ldrb	r2, [r2, #5]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b45      	cmp	r3, #69	@ 0x45
 8000318:	d103      	bne.n	8000322 <UNER_DecodeHeader+0x9e>
                    rx->header = HEADER_R;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2203      	movs	r2, #3
 800031e:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 8000320:	e08a      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	715a      	strb	r2, [r3, #5]
            break;
 8000334:	e080      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_R:
                if(rx->buf[rx->ir] == 'R'){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7952      	ldrb	r2, [r2, #5]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	@ 0x52
 8000344:	d103      	bne.n	800034e <UNER_DecodeHeader+0xca>
                    rx->header = NBYTES;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 800034c:	e074      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	715a      	strb	r2, [r3, #5]
            break;
 8000360:	e06a      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case NBYTES:
                rx->header = TOKEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2205      	movs	r2, #5
 8000366:	719a      	strb	r2, [r3, #6]
                rx->size = rx->buf[rx->ir];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7952      	ldrb	r2, [r2, #5]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	721a      	strb	r2, [r3, #8]
            break;
 8000378:	e05e      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case TOKEN:
                if(rx->buf[rx->ir] == ':'){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7952      	ldrb	r2, [r2, #5]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b3a      	cmp	r3, #58	@ 0x3a
 8000388:	d118      	bne.n	80003bc <UNER_DecodeHeader+0x138>
                    rx->chks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ rx->size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	729a      	strb	r2, [r3, #10]
                    rx->header = PAYLOAD;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2206      	movs	r2, #6
 800039c:	719a      	strb	r2, [r3, #6]
                    rx->data = rx->ir + 1;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	725a      	strb	r2, [r3, #9]
                    rx->data &= rx->length;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5a      	ldrb	r2, [r3, #9]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	725a      	strb	r2, [r3, #9]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80003ba:	e03d      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	715a      	strb	r2, [r3, #5]
            break;
 80003ce:	e033      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case PAYLOAD:
                rx->size--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	721a      	strb	r2, [r3, #8]
                if(rx->size > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <UNER_DecodeHeader+0x17a>
                    rx->chks ^= rx->buf[rx->ir];
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a9a      	ldrb	r2, [r3, #10]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	7949      	ldrb	r1, [r1, #5]
 80003f0:	440b      	add	r3, r1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	729a      	strb	r2, [r3, #10]
                    if(rx->buf[rx->ir] == rx->chks){
                        UNER_DecodePayload(rx->buf[rx->data], tx);
                    }
                    rx->header = HEADER_U;
                }
            break;
 80003fc:	e01c      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    if(rx->buf[rx->ir] == rx->chks){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7952      	ldrb	r2, [r2, #5]
 8000406:	4413      	add	r3, r2
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7a9b      	ldrb	r3, [r3, #10]
 800040e:	429a      	cmp	r2, r3
 8000410:	d109      	bne.n	8000426 <UNER_DecodeHeader+0x1a2>
                        UNER_DecodePayload(rx->buf[rx->data], tx);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7a52      	ldrb	r2, [r2, #9]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	6839      	ldr	r1, [r7, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f823 	bl	800046c <UNER_DecodePayload>
                    rx->header = HEADER_U;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	719a      	strb	r2, [r3, #6]
            break;
 800042c:	e004      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            default:
                rx->header = HEADER_U;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2200      	movs	r2, #0
 8000432:	719a      	strb	r2, [r3, #6]
            break;
 8000434:	e000      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            break;
 8000436:	bf00      	nop
        }
        rx->ir++;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	3301      	adds	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	715a      	strb	r2, [r3, #5]
        rx->ir &= rx->length;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795a      	ldrb	r2, [r3, #5]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	79db      	ldrb	r3, [r3, #7]
 800044c:	4013      	ands	r3, r2
 800044e:	b2da      	uxtb	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	715a      	strb	r2, [r3, #5]
    while(rx->ir != i){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	7bfa      	ldrb	r2, [r7, #15]
 800045a:	429a      	cmp	r2, r3
 800045c:	f47f af1b 	bne.w	8000296 <UNER_DecodeHeader+0x12>
    }
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop

0800046c <UNER_DecodePayload>:

void UNER_DecodePayload(uint8_t bufRx,_sTx *tx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	6039      	str	r1, [r7, #0]
 8000476:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2bf0      	cmp	r3, #240	@ 0xf0
 800047c:	d105      	bne.n	800048a <UNER_DecodePayload+0x1e>
        case ALIVE:
            UNER_WriteContentTx(bufRx, tx);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	6839      	ldr	r1, [r7, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f80b 	bl	800049e <UNER_WriteContentTx>
        break;
 8000488:	e005      	b.n	8000496 <UNER_DecodePayload+0x2a>
        default:
            UNER_WriteContentTx(bufRx, tx);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	6839      	ldr	r1, [r7, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f805 	bl	800049e <UNER_WriteContentTx>
        break;
 8000494:	bf00      	nop
    }
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <UNER_WriteContentTx>:

void UNER_WriteContentTx(uint8_t bufRx,_sTx *tx)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	6039      	str	r1, [r7, #0]
 80004a8:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80004ae:	d10f      	bne.n	80004d0 <UNER_WriteContentTx+0x32>
        case ALIVE:
            UNER_PutHeaderOnTx(tx, ALIVE, 2);
 80004b0:	2202      	movs	r2, #2
 80004b2:	21f0      	movs	r1, #240	@ 0xf0
 80004b4:	6838      	ldr	r0, [r7, #0]
 80004b6:	f000 f825 	bl	8000504 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, ACK);
 80004ba:	210d      	movs	r1, #13
 80004bc:	6838      	ldr	r0, [r7, #0]
 80004be:	f000 f8d0 	bl	8000662 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	79db      	ldrb	r3, [r3, #7]
 80004c6:	4619      	mov	r1, r3
 80004c8:	6838      	ldr	r0, [r7, #0]
 80004ca:	f000 f8ca 	bl	8000662 <UNER_PutByteOnTx>
        break;
 80004ce:	e015      	b.n	80004fc <UNER_WriteContentTx+0x5e>
        default:
            UNER_PutHeaderOnTx(tx, (_eCmd)tx->buf[tx->iw], 2);
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2202      	movs	r2, #2
 80004de:	4619      	mov	r1, r3
 80004e0:	6838      	ldr	r0, [r7, #0]
 80004e2:	f000 f80f 	bl	8000504 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, UNKNOWN);
 80004e6:	21ff      	movs	r1, #255	@ 0xff
 80004e8:	6838      	ldr	r0, [r7, #0]
 80004ea:	f000 f8ba 	bl	8000662 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	79db      	ldrb	r3, [r3, #7]
 80004f2:	4619      	mov	r1, r3
 80004f4:	6838      	ldr	r0, [r7, #0]
 80004f6:	f000 f8b4 	bl	8000662 <UNER_PutByteOnTx>
        break;
 80004fa:	bf00      	nop
    }
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <UNER_PutHeaderOnTx>:

uint8_t UNER_PutHeaderOnTx(_sTx *tx, _eCmd ID, uint8_t N)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]
    tx->chks = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	71da      	strb	r2, [r3, #7]
    tx->buf[tx->iw++] = 'U';
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	1c59      	adds	r1, r3, #1
 8000524:	b2c8      	uxtb	r0, r1
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	7108      	strb	r0, [r1, #4]
 800052a:	4413      	add	r3, r2
 800052c:	2255      	movs	r2, #85	@ 0x55
 800052e:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791a      	ldrb	r2, [r3, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	799b      	ldrb	r3, [r3, #6]
 8000538:	4013      	ands	r3, r2
 800053a:	b2da      	uxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'N';
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	b2c8      	uxtb	r0, r1
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	7108      	strb	r0, [r1, #4]
 8000550:	4413      	add	r3, r2
 8000552:	224e      	movs	r2, #78	@ 0x4e
 8000554:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791a      	ldrb	r2, [r3, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	799b      	ldrb	r3, [r3, #6]
 800055e:	4013      	ands	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'E';
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	1c59      	adds	r1, r3, #1
 8000570:	b2c8      	uxtb	r0, r1
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	7108      	strb	r0, [r1, #4]
 8000576:	4413      	add	r3, r2
 8000578:	2245      	movs	r2, #69	@ 0x45
 800057a:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791a      	ldrb	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	799b      	ldrb	r3, [r3, #6]
 8000584:	4013      	ands	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'R';
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	1c59      	adds	r1, r3, #1
 8000596:	b2c8      	uxtb	r0, r1
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	7108      	strb	r0, [r1, #4]
 800059c:	4413      	add	r3, r2
 800059e:	2252      	movs	r2, #82	@ 0x52
 80005a0:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791a      	ldrb	r2, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	799b      	ldrb	r3, [r3, #6]
 80005aa:	4013      	ands	r3, r2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = N + 1;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	b2c8      	uxtb	r0, r1
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	7108      	strb	r0, [r1, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	3201      	adds	r2, #1
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791a      	ldrb	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	799b      	ldrb	r3, [r3, #6]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ':';
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	1c59      	adds	r1, r3, #1
 80005e6:	b2c8      	uxtb	r0, r1
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	7108      	strb	r0, [r1, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	223a      	movs	r2, #58	@ 0x3a
 80005f0:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791a      	ldrb	r2, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	799b      	ldrb	r3, [r3, #6]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ID;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	1c59      	adds	r1, r3, #1
 800060c:	b2c8      	uxtb	r0, r1
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	7108      	strb	r0, [r1, #4]
 8000612:	4413      	add	r3, r2
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791a      	ldrb	r2, [r3, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	799b      	ldrb	r3, [r3, #6]
 8000620:	4013      	ands	r3, r2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	711a      	strb	r2, [r3, #4]
    tx->chks ^= (N + 1);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	b25a      	sxtb	r2, r3
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	3301      	adds	r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4053      	eors	r3, r2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	71da      	strb	r2, [r3, #7]
    tx->chks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ID ^ ':');
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	79da      	ldrb	r2, [r3, #7]
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	4053      	eors	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800064e:	b2da      	uxtb	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	79db      	ldrb	r3, [r3, #7]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <UNER_PutByteOnTx>:

uint8_t UNER_PutByteOnTx(_sTx *tx, uint8_t byte)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	70fb      	strb	r3, [r7, #3]
    tx->buf[tx->iw++] = byte;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	1c59      	adds	r1, r3, #1
 8000678:	b2c8      	uxtb	r0, r1
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	7108      	strb	r0, [r1, #4]
 800067e:	4413      	add	r3, r2
 8000680:	78fa      	ldrb	r2, [r7, #3]
 8000682:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791a      	ldrb	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	4013      	ands	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	711a      	strb	r2, [r3, #4]
    tx->chks ^= byte;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	79da      	ldrb	r2, [r3, #7]
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	4053      	eors	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	79db      	ldrb	r3, [r3, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <sendByteOverUSB>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendByteOverUSB(uint8_t *byte)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    // CDC_Transmit_FS envía un buffer, acá mandamos 1 byte
    while(CDC_Transmit_FS(byte, 1) == USBD_BUSY){
 80006b8:	bf00      	nop
 80006ba:	2101      	movs	r1, #1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f00b f9f3 	bl	800baa8 <CDC_Transmit_FS>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d0f8      	beq.n	80006ba <sendByteOverUSB+0xa>
        // Esperar o hacer algo mientras el USB está ocupado
    }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f83c 	bl	8001754 <HAL_Init>

  /* USER CODE BEGIN Init */
  UNER_Init(&tx, bufTx, &rx, bufRx);
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <main+0xb4>)
 80006de:	4a2b      	ldr	r2, [pc, #172]	@ (800078c <main+0xb8>)
 80006e0:	492b      	ldr	r1, [pc, #172]	@ (8000790 <main+0xbc>)
 80006e2:	482c      	ldr	r0, [pc, #176]	@ (8000794 <main+0xc0>)
 80006e4:	f7ff fd40 	bl	8000168 <UNER_Init>

  UNER_SetTxFunction(sendByteOverUSB);
 80006e8:	482b      	ldr	r0, [pc, #172]	@ (8000798 <main+0xc4>)
 80006ea:	f7ff fd2f 	bl	800014c <UNER_SetTxFunction>

  CDC_Attach_RX_Funct(&UNER_OnRxByte);
 80006ee:	482b      	ldr	r0, [pc, #172]	@ (800079c <main+0xc8>)
 80006f0:	f00b fa00 	bl	800baf4 <CDC_Attach_RX_Funct>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f860 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 fa18 	bl	8000b2c <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 f9f8 	bl	8000af0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000700:	f00b f8f8 	bl	800b8f4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000704:	f000 f8b2 	bl	800086c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000708:	f000 f8de 	bl	80008c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800070c:	f000 f97c 	bl	8000a08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Inicializacion PWM motores
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000710:	2100      	movs	r1, #0
 8000712:	4823      	ldr	r0, [pc, #140]	@ (80007a0 <main+0xcc>)
 8000714:	f006 fc60 	bl	8006fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000718:	2104      	movs	r1, #4
 800071a:	4822      	ldr	r0, [pc, #136]	@ (80007a4 <main+0xd0>)
 800071c:	f006 fc5c 	bl	8006fd8 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000726:	4820      	ldr	r0, [pc, #128]	@ (80007a8 <main+0xd4>)
 8000728:	f001 fd9e 	bl	8002268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2101      	movs	r1, #1
 8000730:	481d      	ldr	r0, [pc, #116]	@ (80007a8 <main+0xd4>)
 8000732:	f001 fd99 	bl	8002268 <HAL_GPIO_WritePin>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <main+0xcc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2232      	movs	r2, #50	@ 0x32
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,50);
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <main+0xd0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2232      	movs	r2, #50	@ 0x32
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38

  // Inicialización del OLED
      if (!SSD1306_Init()) {
 8000746:	f000 fa89 	bl	8000c5c <SSD1306_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <main+0x80>
          while (1);
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <main+0x7c>
      }

      // Dibujamos algo (texto, figuras, etc.)
      SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fc75 	bl	8001044 <SSD1306_Fill>
      SSD1306_GotoXY(0, 0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fce7 	bl	8001130 <SSD1306_GotoXY>
      SSD1306_Puts("AAAAA", &Font_7x10, SSD1306_COLOR_WHITE);
 8000762:	2201      	movs	r2, #1
 8000764:	4911      	ldr	r1, [pc, #68]	@ (80007ac <main+0xd8>)
 8000766:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <main+0xdc>)
 8000768:	f000 fd76 	bl	8001258 <SSD1306_Puts>

      // Iniciamos refresco no bloqueante
      ssd_update_done = 1;  // importante para que inicie desde 0
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <main+0xe0>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
      SSD1306_UpdateScreen();
 8000772:	f000 fbc9 	bl	8000f08 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UNER_SerialTask(&tx,&rx);
 8000776:	4905      	ldr	r1, [pc, #20]	@ (800078c <main+0xb8>)
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <main+0xc0>)
 800077a:	f7ff fd33 	bl	80001e4 <UNER_SerialTask>

	  SSD1306_Task();
 800077e:	f000 fa15 	bl	8000bac <SSD1306_Task>
	  UNER_SerialTask(&tx,&rx);
 8000782:	bf00      	nop
 8000784:	e7f7      	b.n	8000776 <main+0xa2>
 8000786:	bf00      	nop
 8000788:	20000324 	.word	0x20000324
 800078c:	20000524 	.word	0x20000524
 8000790:	20000424 	.word	0x20000424
 8000794:	20000530 	.word	0x20000530
 8000798:	080006b1 	.word	0x080006b1
 800079c:	08000249 	.word	0x08000249
 80007a0:	20000294 	.word	0x20000294
 80007a4:	200002dc 	.word	0x200002dc
 80007a8:	40010800 	.word	0x40010800
 80007ac:	20000004 	.word	0x20000004
 80007b0:	0800cc2c 	.word	0x0800cc2c
 80007b4:	20000000 	.word	0x20000000

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c2:	2228      	movs	r2, #40	@ 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00b fd96 	bl	800c2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000804:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080e:	4618      	mov	r0, r3
 8000810:	f005 fe88 	bl	8006524 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800081a:	f000 f9c1 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800082e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2102      	movs	r1, #2
 800083a:	4618      	mov	r0, r3
 800083c:	f006 f8f4 	bl	8006a28 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000846:	f000 f9ab 	bl	8000ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800084a:	2310      	movs	r3, #16
 800084c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4618      	mov	r0, r3
 8000856:	f006 fa61 	bl	8006d1c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000860:	f000 f99e 	bl	8000ba0 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	@ 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <MX_I2C1_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_I2C1_Init+0x50>)
 800088a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800088e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_I2C1_Init+0x50>)
 80008aa:	f001 fcf5 	bl	8002298 <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f974 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001fc 	.word	0x200001fc
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00061a80 	.word	0x00061a80

080008c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	@ 0x58
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f00b fcf9 	bl	800c2f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000906:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <MX_TIM1_Init+0x138>)
 8000908:	4a3e      	ldr	r2, [pc, #248]	@ (8000a04 <MX_TIM1_Init+0x13c>)
 800090a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800090c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800090e:	2247      	movs	r2, #71	@ 0x47
 8000910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b3b      	ldr	r3, [pc, #236]	@ (8000a00 <MX_TIM1_Init+0x138>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000918:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800091a:	2263      	movs	r2, #99	@ 0x63
 800091c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b38      	ldr	r3, [pc, #224]	@ (8000a00 <MX_TIM1_Init+0x138>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000924:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <MX_TIM1_Init+0x138>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000930:	4833      	ldr	r0, [pc, #204]	@ (8000a00 <MX_TIM1_Init+0x138>)
 8000932:	f006 faa9 	bl	8006e88 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800093c:	f000 f930 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000944:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800094a:	4619      	mov	r1, r3
 800094c:	482c      	ldr	r0, [pc, #176]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800094e:	f006 fca7 	bl	80072a0 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000958:	f000 f922 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800095c:	4828      	ldr	r0, [pc, #160]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800095e:	f006 fae2 	bl	8006f26 <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000968:	f000 f91a 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000974:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000978:	4619      	mov	r1, r3
 800097a:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <MX_TIM1_Init+0x138>)
 800097c:	f007 f808 	bl	8007990 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000986:	f000 f90b 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	@ 0x60
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <MX_TIM1_Init+0x138>)
 80009b0:	f006 fbb4 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009ba:	f000 f8f1 	bl	8000ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM1_Init+0x138>)
 80009e2:	f007 f833 	bl	8007a4c <HAL_TIMEx_ConfigBreakDeadTime>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009ec:	f000 f8d8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM1_Init+0x138>)
 80009f2:	f000 fd9b 	bl	800152c <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3758      	adds	r7, #88	@ 0x58
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000294 	.word	0x20000294
 8000a04:	40012c00 	.word	0x40012c00

08000a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	@ 0x38
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	f107 0320 	add.w	r3, r7, #32
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a42:	2247      	movs	r2, #71	@ 0x47
 8000a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a4e:	2263      	movs	r2, #99	@ 0x63
 8000a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5e:	4823      	ldr	r0, [pc, #140]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a60:	f006 fa12 	bl	8006e88 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a6a:	f000 f899 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481c      	ldr	r0, [pc, #112]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a7c:	f006 fc10 	bl	80072a0 <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a86:	f000 f88b 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a8a:	4818      	ldr	r0, [pc, #96]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000a8c:	f006 fa4b 	bl	8006f26 <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a96:	f000 f883 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4810      	ldr	r0, [pc, #64]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000aaa:	f006 ff71 	bl	8007990 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ab4:	f000 f874 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2204      	movs	r2, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000ad0:	f006 fb24 	bl	800711c <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000ada:	f000 f861 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_TIM2_Init+0xe4>)
 8000ae0:	f000 fd24 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	@ 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200002dc 	.word	0x200002dc

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_DMA_Init+0x38>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <MX_DMA_Init+0x38>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_DMA_Init+0x38>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2010      	movs	r0, #16
 8000b14:	f000 ff7b 	bl	8001a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f000 ff94 	bl	8001a46 <HAL_NVIC_EnableIRQ>

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <MX_GPIO_Init+0x70>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <SSD1306_Task>:

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_Task(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if (ssd_update_done) {
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SSD1306_Task+0x18>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SSD1306_Task+0x12>
		SSD1306_UpdateScreen(); // lanza siguiente refresco
 8000bba:	f000 f9a5 	bl	8000f08 <SSD1306_UpdateScreen>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <USB_Debug>:


/**
 * @brief  Envía un mensaje formateado por USB CDC (VCP), en trozos de 64 bytes.
 */
static void USB_Debug(const char *fmt, ...) {
 8000bc8:	b40f      	push	{r0, r1, r2, r3}
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b0a4      	sub	sp, #144	@ 0x90
 8000bce:	af00      	add	r7, sp, #0
    char buf[128];
    va_list ap;
    va_start(ap, fmt);
 8000bd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bd4:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, ap);
 8000bd6:	1d38      	adds	r0, r7, #4
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	f00b fb7c 	bl	800c2dc <vsniprintf>
 8000be4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    va_end(ap);

    if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) {
 8000be8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <USB_Debug+0x90>)
 8000bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d12b      	bne.n	8000c4a <USB_Debug+0x82>
        return;  // No enviar si no estamos enumerados
    }

    uint8_t *p = (uint8_t*)buf;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (len > 0) {
 8000bf8:	e022      	b.n	8000c40 <USB_Debug+0x78>
        uint16_t chunk = (len > 64) ? 64 : len;
 8000bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bfe:	2b40      	cmp	r3, #64	@ 0x40
 8000c00:	bfa8      	it	ge
 8000c02:	2340      	movge	r3, #64	@ 0x40
 8000c04:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
        while (CDC_Transmit_FS(p, chunk) == USBD_BUSY) {
 8000c08:	e002      	b.n	8000c10 <USB_Debug+0x48>
            HAL_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fe04 	bl	8001818 <HAL_Delay>
        while (CDC_Transmit_FS(p, chunk) == USBD_BUSY) {
 8000c10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000c14:	4619      	mov	r1, r3
 8000c16:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000c1a:	f00a ff45 	bl	800baa8 <CDC_Transmit_FS>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d0f2      	beq.n	8000c0a <USB_Debug+0x42>
        }
        p   += chunk;
 8000c24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000c28:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        len -= chunk;
 8000c32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000c36:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (len > 0) {
 8000c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dcd8      	bgt.n	8000bfa <USB_Debug+0x32>
 8000c48:	e000      	b.n	8000c4c <USB_Debug+0x84>
        return;  // No enviar si no estamos enumerados
 8000c4a:	bf00      	nop
    }
}
 8000c4c:	3790      	adds	r7, #144	@ 0x90
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr
 8000c58:	20000a54 	.word	0x20000a54

08000c5c <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    USB_Debug("SSD1306_Init: Inicializando I2C...\r\n");
 8000c62:	486d      	ldr	r0, [pc, #436]	@ (8000e18 <SSD1306_Init+0x1bc>)
 8000c64:	f7ff ffb0 	bl	8000bc8 <USB_Debug>
    SSD1306_I2C_Init();
 8000c68:	f000 fb1c 	bl	80012a4 <SSD1306_I2C_Init>

    USB_Debug("SSD1306_Init: Comprobando I2C addr=0x%02X...\r\n", SSD1306_I2C_ADDR);
 8000c6c:	2178      	movs	r1, #120	@ 0x78
 8000c6e:	486b      	ldr	r0, [pc, #428]	@ (8000e1c <SSD1306_Init+0x1c0>)
 8000c70:	f7ff ffaa 	bl	8000bc8 <USB_Debug>
    if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 2000) != HAL_OK) {
 8000c74:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2178      	movs	r1, #120	@ 0x78
 8000c7c:	4868      	ldr	r0, [pc, #416]	@ (8000e20 <SSD1306_Init+0x1c4>)
 8000c7e:	f001 fe85 	bl	800298c <HAL_I2C_IsDeviceReady>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d004      	beq.n	8000c92 <SSD1306_Init+0x36>
        USB_Debug("SSD1306_Init: ERROR, no responde I2C\r\n");
 8000c88:	4866      	ldr	r0, [pc, #408]	@ (8000e24 <SSD1306_Init+0x1c8>)
 8000c8a:	f7ff ff9d 	bl	8000bc8 <USB_Debug>
        return 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e0be      	b.n	8000e10 <SSD1306_Init+0x1b4>
    }
    USB_Debug("SSD1306_Init: I2C OK\r\n");
 8000c92:	4865      	ldr	r0, [pc, #404]	@ (8000e28 <SSD1306_Init+0x1cc>)
 8000c94:	f7ff ff98 	bl	8000bc8 <USB_Debug>

    USB_Debug("SSD1306_Init: Retardo inicial...\r\n");
 8000c98:	4864      	ldr	r0, [pc, #400]	@ (8000e2c <SSD1306_Init+0x1d0>)
 8000c9a:	f7ff ff95 	bl	8000bc8 <USB_Debug>
    for (volatile uint32_t p = 250000; p; --p) { __NOP(); }
 8000c9e:	4b64      	ldr	r3, [pc, #400]	@ (8000e30 <SSD1306_Init+0x1d4>)
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e003      	b.n	8000cac <SSD1306_Init+0x50>
 8000ca4:	bf00      	nop
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f8      	bne.n	8000ca4 <SSD1306_Init+0x48>

    USB_Debug("SSD1306_Init: Enviando comandos de init...\r\n");
 8000cb2:	4860      	ldr	r0, [pc, #384]	@ (8000e34 <SSD1306_Init+0x1d8>)
 8000cb4:	f7ff ff88 	bl	8000bc8 <USB_Debug>
    SSD1306_WRITECOMMAND(0xAE);
 8000cb8:	22ae      	movs	r2, #174	@ 0xae
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	@ 0x78
 8000cbe:	f000 fb05 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	@ 0x78
 8000cc8:	f000 fb00 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000ccc:	2210      	movs	r2, #16
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	@ 0x78
 8000cd2:	f000 fafb 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xB0);
 8000cd6:	22b0      	movs	r2, #176	@ 0xb0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	@ 0x78
 8000cdc:	f000 faf6 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xC8);
 8000ce0:	22c8      	movs	r2, #200	@ 0xc8
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	@ 0x78
 8000ce6:	f000 faf1 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 faec 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	@ 0x78
 8000cfa:	f000 fae7 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40);
 8000cfe:	2240      	movs	r2, #64	@ 0x40
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	@ 0x78
 8000d04:	f000 fae2 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x81);
 8000d08:	2281      	movs	r2, #129	@ 0x81
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	@ 0x78
 8000d0e:	f000 fadd 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);
 8000d12:	22ff      	movs	r2, #255	@ 0xff
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	@ 0x78
 8000d18:	f000 fad8 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA1);
 8000d1c:	22a1      	movs	r2, #161	@ 0xa1
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	@ 0x78
 8000d22:	f000 fad3 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA6);
 8000d26:	22a6      	movs	r2, #166	@ 0xa6
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	@ 0x78
 8000d2c:	f000 face 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA8);
 8000d30:	22a8      	movs	r2, #168	@ 0xa8
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	@ 0x78
 8000d36:	f000 fac9 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x3F);
 8000d3a:	223f      	movs	r2, #63	@ 0x3f
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	@ 0x78
 8000d40:	f000 fac4 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA4);
 8000d44:	22a4      	movs	r2, #164	@ 0xa4
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	@ 0x78
 8000d4a:	f000 fabf 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD3);
 8000d4e:	22d3      	movs	r2, #211	@ 0xd3
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	@ 0x78
 8000d54:	f000 faba 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	@ 0x78
 8000d5e:	f000 fab5 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD5);
 8000d62:	22d5      	movs	r2, #213	@ 0xd5
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	@ 0x78
 8000d68:	f000 fab0 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xF0);
 8000d6c:	22f0      	movs	r2, #240	@ 0xf0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f000 faab 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD9);
 8000d76:	22d9      	movs	r2, #217	@ 0xd9
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	@ 0x78
 8000d7c:	f000 faa6 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 8000d80:	2222      	movs	r2, #34	@ 0x22
 8000d82:	2100      	movs	r1, #0
 8000d84:	2078      	movs	r0, #120	@ 0x78
 8000d86:	f000 faa1 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDA);
 8000d8a:	22da      	movs	r2, #218	@ 0xda
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2078      	movs	r0, #120	@ 0x78
 8000d90:	f000 fa9c 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x12);
 8000d94:	2212      	movs	r2, #18
 8000d96:	2100      	movs	r1, #0
 8000d98:	2078      	movs	r0, #120	@ 0x78
 8000d9a:	f000 fa97 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDB);
 8000d9e:	22db      	movs	r2, #219	@ 0xdb
 8000da0:	2100      	movs	r1, #0
 8000da2:	2078      	movs	r0, #120	@ 0x78
 8000da4:	f000 fa92 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8000da8:	2220      	movs	r2, #32
 8000daa:	2100      	movs	r1, #0
 8000dac:	2078      	movs	r0, #120	@ 0x78
 8000dae:	f000 fa8d 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x8D);
 8000db2:	228d      	movs	r2, #141	@ 0x8d
 8000db4:	2100      	movs	r1, #0
 8000db6:	2078      	movs	r0, #120	@ 0x78
 8000db8:	f000 fa88 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14);
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2078      	movs	r0, #120	@ 0x78
 8000dc2:	f000 fa83 	bl	80012cc <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xAF);
 8000dc6:	22af      	movs	r2, #175	@ 0xaf
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2078      	movs	r0, #120	@ 0x78
 8000dcc:	f000 fa7e 	bl	80012cc <SSD1306_I2C_Write>

    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000dd0:	222e      	movs	r2, #46	@ 0x2e
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2078      	movs	r0, #120	@ 0x78
 8000dd6:	f000 fa79 	bl	80012cc <SSD1306_I2C_Write>
    USB_Debug("SSD1306_Init: Comandos init enviados\r\n");
 8000dda:	4817      	ldr	r0, [pc, #92]	@ (8000e38 <SSD1306_Init+0x1dc>)
 8000ddc:	f7ff fef4 	bl	8000bc8 <USB_Debug>

    USB_Debug("SSD1306_Init: Limpiando pantalla...\r\n");
 8000de0:	4816      	ldr	r0, [pc, #88]	@ (8000e3c <SSD1306_Init+0x1e0>)
 8000de2:	f7ff fef1 	bl	8000bc8 <USB_Debug>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f92c 	bl	8001044 <SSD1306_Fill>

    USB_Debug("SSD1306_Init: Actualizando pantalla...\r\n");
 8000dec:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <SSD1306_Init+0x1e4>)
 8000dee:	f7ff feeb 	bl	8000bc8 <USB_Debug>
    SSD1306_UpdateScreen_Blocking();
 8000df2:	f000 f82b 	bl	8000e4c <SSD1306_UpdateScreen_Blocking>

    SSD1306.CurrentX = 0;
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <SSD1306_Init+0x1e8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <SSD1306_Init+0x1e8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <SSD1306_Init+0x1e8>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	715a      	strb	r2, [r3, #5]

    USB_Debug("SSD1306_Init: COMPLETADO\r\n");
 8000e08:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <SSD1306_Init+0x1ec>)
 8000e0a:	f7ff fedd 	bl	8000bc8 <USB_Debug>
    return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	0800cc34 	.word	0x0800cc34
 8000e1c:	0800cc5c 	.word	0x0800cc5c
 8000e20:	200001fc 	.word	0x200001fc
 8000e24:	0800cc8c 	.word	0x0800cc8c
 8000e28:	0800ccb4 	.word	0x0800ccb4
 8000e2c:	0800cccc 	.word	0x0800cccc
 8000e30:	0003d090 	.word	0x0003d090
 8000e34:	0800ccf0 	.word	0x0800ccf0
 8000e38:	0800cd20 	.word	0x0800cd20
 8000e3c:	0800cd48 	.word	0x0800cd48
 8000e40:	0800cd70 	.word	0x0800cd70
 8000e44:	2000093c 	.word	0x2000093c
 8000e48:	0800cd9c 	.word	0x0800cd9c

08000e4c <SSD1306_UpdateScreen_Blocking>:

void SSD1306_UpdateScreen_Blocking(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0a4      	sub	sp, #144	@ 0x90
 8000e50:	af02      	add	r7, sp, #8
    USB_Debug("SSD1306_UpdateScreen_Blocking: Comenzando actualizacion (blocking)\r\n");
 8000e52:	4827      	ldr	r0, [pc, #156]	@ (8000ef0 <SSD1306_UpdateScreen_Blocking+0xa4>)
 8000e54:	f7ff feb8 	bl	8000bc8 <USB_Debug>

    // buffer temporal: 1 byte de control + 128 bytes de datos
    uint8_t buf[1 + SSD1306_WIDTH];

    for (uint8_t m = 0; m < 8; m++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000e5e:	e03c      	b.n	8000eda <SSD1306_UpdateScreen_Blocking+0x8e>
        USB_Debug("SSD1306_UpdateScreen_Blocking: Pagina %u\r\n", m);
 8000e60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e64:	4619      	mov	r1, r3
 8000e66:	4823      	ldr	r0, [pc, #140]	@ (8000ef4 <SSD1306_UpdateScreen_Blocking+0xa8>)
 8000e68:	f7ff feae 	bl	8000bc8 <USB_Debug>

        // 1) envía comandos de posicionamiento
        SSD1306_WRITECOMMAND(0xB0 + m);
 8000e6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e70:	3b50      	subs	r3, #80	@ 0x50
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	@ 0x78
 8000e7a:	f000 fa27 	bl	80012cc <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	@ 0x78
 8000e84:	f000 fa22 	bl	80012cc <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 8000e88:	2210      	movs	r2, #16
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	@ 0x78
 8000e8e:	f000 fa1d 	bl	80012cc <SSD1306_I2C_Write>

        // 2) monta el paquete de datos: control=0x40 + página de 128 bytes
        buf[0] = 0x40;
 8000e92:	2340      	movs	r3, #64	@ 0x40
 8000e94:	713b      	strb	r3, [r7, #4]
        memcpy(&buf[1],
               &SSD1306_Buffer[SSD1306_WIDTH * m],
 8000e96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e9a:	01db      	lsls	r3, r3, #7
 8000e9c:	4a16      	ldr	r2, [pc, #88]	@ (8000ef8 <SSD1306_UpdateScreen_Blocking+0xac>)
 8000e9e:	1899      	adds	r1, r3, r2
        memcpy(&buf[1],
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00b fa5a 	bl	800c360 <memcpy>
               SSD1306_WIDTH);

        // 3) envía todo con HAL_I2C_Master_Transmit (bloqueante)
        if (HAL_I2C_Master_Transmit(
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2381      	movs	r3, #129	@ 0x81
 8000eb6:	2178      	movs	r1, #120	@ 0x78
 8000eb8:	4810      	ldr	r0, [pc, #64]	@ (8000efc <SSD1306_UpdateScreen_Blocking+0xb0>)
 8000eba:	f001 fb45 	bl	8002548 <HAL_I2C_Master_Transmit>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <SSD1306_UpdateScreen_Blocking+0x84>
                SSD1306_I2C_ADDR,
                buf,
                sizeof(buf),
                HAL_MAX_DELAY) != HAL_OK)
        {
            USB_Debug("ERROR: I2C transmit pagina %u\r\n", m);
 8000ec4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <SSD1306_UpdateScreen_Blocking+0xb4>)
 8000ecc:	f7ff fe7c 	bl	8000bc8 <USB_Debug>
    for (uint8_t m = 0; m < 8; m++) {
 8000ed0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000eda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	d9be      	bls.n	8000e60 <SSD1306_UpdateScreen_Blocking+0x14>
        }
    }

    USB_Debug("SSD1306_UpdateScreen_Blocking: Pantalla actualizada (blocking)\r\n");
 8000ee2:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <SSD1306_UpdateScreen_Blocking+0xb8>)
 8000ee4:	f7ff fe70 	bl	8000bc8 <USB_Debug>
}
 8000ee8:	bf00      	nop
 8000eea:	3788      	adds	r7, #136	@ 0x88
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	0800cdb8 	.word	0x0800cdb8
 8000ef4:	0800ce00 	.word	0x0800ce00
 8000ef8:	2000053c 	.word	0x2000053c
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	0800ce2c 	.word	0x0800ce2c
 8000f04:	0800ce4c 	.word	0x0800ce4c

08000f08 <SSD1306_UpdateScreen>:



void SSD1306_UpdateScreen(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
    static uint8_t page  = 0;
    static uint8_t state = 0; // 0=idle,1=prep,2=waiting DMA
    uint8_t counter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]

    switch (state) {
 8000f12:	4b41      	ldr	r3, [pc, #260]	@ (8001018 <SSD1306_UpdateScreen+0x110>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d046      	beq.n	8000fa8 <SSD1306_UpdateScreen+0xa0>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	dc78      	bgt.n	8001010 <SSD1306_UpdateScreen+0x108>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <SSD1306_UpdateScreen+0x20>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d00c      	beq.n	8000f40 <SSD1306_UpdateScreen+0x38>
            		USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
            	}
            }
            break;
    }
}
 8000f26:	e073      	b.n	8001010 <SSD1306_UpdateScreen+0x108>
            USB_Debug("SSD1306_Update: iniciando refresco NB\r\n");
 8000f28:	483c      	ldr	r0, [pc, #240]	@ (800101c <SSD1306_UpdateScreen+0x114>)
 8000f2a:	f7ff fe4d 	bl	8000bc8 <USB_Debug>
            page             = 0;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
            ssd_update_done  = 0;  // marca que el refresco está en curso
 8000f34:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <SSD1306_UpdateScreen+0x11c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
            state            = 1;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <SSD1306_UpdateScreen+0x110>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
            if (!i2c1_tx_busy) {
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <SSD1306_UpdateScreen+0x120>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d15f      	bne.n	800100a <SSD1306_UpdateScreen+0x102>
                USB_Debug("SSD1306_Update: enviando pagina %u\r\n", page);
 8000f4a:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4836      	ldr	r0, [pc, #216]	@ (800102c <SSD1306_UpdateScreen+0x124>)
 8000f52:	f7ff fe39 	bl	8000bc8 <USB_Debug>
                SSD1306_WRITECOMMAND(0xB0 + page);
 8000f56:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3b50      	subs	r3, #80	@ 0x50
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	2078      	movs	r0, #120	@ 0x78
 8000f64:	f000 f9b2 	bl	80012cc <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x00);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2078      	movs	r0, #120	@ 0x78
 8000f6e:	f000 f9ad 	bl	80012cc <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x10);
 8000f72:	2210      	movs	r2, #16
 8000f74:	2100      	movs	r1, #0
 8000f76:	2078      	movs	r0, #120	@ 0x78
 8000f78:	f000 f9a8 	bl	80012cc <SSD1306_I2C_Write>
                uint8_t *buf = &SSD1306_Buffer[SSD1306_WIDTH * page];
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	01db      	lsls	r3, r3, #7
 8000f82:	4a2b      	ldr	r2, [pc, #172]	@ (8001030 <SSD1306_UpdateScreen+0x128>)
 8000f84:	4413      	add	r3, r2
 8000f86:	603b      	str	r3, [r7, #0]
                SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, buf, SSD1306_WIDTH);
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	2140      	movs	r1, #64	@ 0x40
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 f9ba 	bl	8001308 <SSD1306_I2C_WriteMulti>
                USB_Debug("SSD1306_Update: pagina enviada\r\n", page);
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4826      	ldr	r0, [pc, #152]	@ (8001034 <SSD1306_UpdateScreen+0x12c>)
 8000f9c:	f7ff fe14 	bl	8000bc8 <USB_Debug>
                state = 2;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <SSD1306_UpdateScreen+0x110>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	701a      	strb	r2, [r3, #0]
            break;
 8000fa6:	e030      	b.n	800100a <SSD1306_UpdateScreen+0x102>
            if (!i2c1_tx_busy) {
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <SSD1306_UpdateScreen+0x120>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11d      	bne.n	8000fee <SSD1306_UpdateScreen+0xe6>
                USB_Debug("SSD1306_Update: página %u completada\r\n", page);
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481f      	ldr	r0, [pc, #124]	@ (8001038 <SSD1306_UpdateScreen+0x130>)
 8000fba:	f7ff fe05 	bl	8000bc8 <USB_Debug>
                page++;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000fc8:	701a      	strb	r2, [r3, #0]
                if (page < 8) {
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <SSD1306_UpdateScreen+0x118>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d803      	bhi.n	8000fda <SSD1306_UpdateScreen+0xd2>
                    state = 1;  // preparamos la siguiente página
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <SSD1306_UpdateScreen+0x110>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
            break;
 8000fd8:	e019      	b.n	800100e <SSD1306_UpdateScreen+0x106>
                    USB_Debug("SSD1306_Update: refresco NB completo\r\n");
 8000fda:	4818      	ldr	r0, [pc, #96]	@ (800103c <SSD1306_UpdateScreen+0x134>)
 8000fdc:	f7ff fdf4 	bl	8000bc8 <USB_Debug>
                    ssd_update_done = 1;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <SSD1306_UpdateScreen+0x11c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
                    state           = 0;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <SSD1306_UpdateScreen+0x110>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
            break;
 8000fec:	e00f      	b.n	800100e <SSD1306_UpdateScreen+0x106>
            	if (counter <= 10) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b0a      	cmp	r3, #10
 8000ff2:	d80c      	bhi.n	800100e <SSD1306_UpdateScreen+0x106>
            		counter++;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
            		USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <SSD1306_UpdateScreen+0x120>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4619      	mov	r1, r3
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <SSD1306_UpdateScreen+0x138>)
 8001004:	f7ff fde0 	bl	8000bc8 <USB_Debug>
            break;
 8001008:	e001      	b.n	800100e <SSD1306_UpdateScreen+0x106>
            break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <SSD1306_UpdateScreen+0x108>
            break;
 800100e:	bf00      	nop
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000a44 	.word	0x20000a44
 800101c:	0800ce90 	.word	0x0800ce90
 8001020:	20000a45 	.word	0x20000a45
 8001024:	20000000 	.word	0x20000000
 8001028:	20000538 	.word	0x20000538
 800102c:	0800ceb8 	.word	0x0800ceb8
 8001030:	2000053c 	.word	0x2000053c
 8001034:	0800cee0 	.word	0x0800cee0
 8001038:	0800cf04 	.word	0x0800cf04
 800103c:	0800cf2c 	.word	0x0800cf2c
 8001040:	0800cf54 	.word	0x0800cf54

08001044 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <SSD1306_Fill+0x14>
 8001054:	2300      	movs	r3, #0
 8001056:	e000      	b.n	800105a <SSD1306_Fill+0x16>
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105e:	4619      	mov	r1, r3
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <SSD1306_Fill+0x2c>)
 8001062:	f00b f949 	bl	800c2f8 <memset>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000053c 	.word	0x2000053c

08001074 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
 800107e:	460b      	mov	r3, r1
 8001080:	80bb      	strh	r3, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	70fb      	strb	r3, [r7, #3]
	if (
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	2b7f      	cmp	r3, #127	@ 0x7f
 800108a:	d848      	bhi.n	800111e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800108c:	88bb      	ldrh	r3, [r7, #4]
 800108e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001090:	d845      	bhi.n	800111e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <SSD1306_DrawPixel+0xb4>)
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11a      	bne.n	80010e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b298      	uxth	r0, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	4413      	add	r3, r2
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <SSD1306_DrawPixel+0xb8>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b259      	sxtb	r1, r3
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	4603      	mov	r3, r0
 80010d8:	01db      	lsls	r3, r3, #7
 80010da:	4413      	add	r3, r2
 80010dc:	b2c9      	uxtb	r1, r1
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <SSD1306_DrawPixel+0xb8>)
 80010e0:	54d1      	strb	r1, [r2, r3]
 80010e2:	e01d      	b.n	8001120 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	b298      	uxth	r0, r3
 80010ec:	4603      	mov	r3, r0
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4413      	add	r3, r2
 80010f2:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <SSD1306_DrawPixel+0xb8>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	b25b      	sxtb	r3, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	b25b      	sxtb	r3, r3
 800110a:	4013      	ands	r3, r2
 800110c:	b259      	sxtb	r1, r3
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	4603      	mov	r3, r0
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	4413      	add	r3, r2
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <SSD1306_DrawPixel+0xb8>)
 800111a:	54d1      	strb	r1, [r2, r3]
 800111c:	e000      	b.n	8001120 <SSD1306_DrawPixel+0xac>
		return;
 800111e:	bf00      	nop
	}
}
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	2000093c 	.word	0x2000093c
 800112c:	2000053c 	.word	0x2000053c

08001130 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	80fb      	strh	r3, [r7, #6]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SSD1306_GotoXY+0x28>)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <SSD1306_GotoXY+0x28>)
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	8053      	strh	r3, [r2, #2]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000093c 	.word	0x2000093c

0800115c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800116c:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <SSD1306_Putc+0xf8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
	if (
 8001178:	2b7f      	cmp	r3, #127	@ 0x7f
 800117a:	dc07      	bgt.n	800118c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800117c:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <SSD1306_Putc+0xf8>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	461a      	mov	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001188:	2b3f      	cmp	r3, #63	@ 0x3f
 800118a:	dd01      	ble.n	8001190 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e05d      	b.n	800124c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e04b      	b.n	800122e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3b20      	subs	r3, #32
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	7849      	ldrb	r1, [r1, #1]
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	4619      	mov	r1, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	e030      	b.n	800121c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d010      	beq.n	80011ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <SSD1306_Putc+0xf8>)
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b298      	uxth	r0, r3
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <SSD1306_Putc+0xf8>)
 80011d8:	885a      	ldrh	r2, [r3, #2]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	79ba      	ldrb	r2, [r7, #6]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff ff45 	bl	8001074 <SSD1306_DrawPixel>
 80011ea:	e014      	b.n	8001216 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <SSD1306_Putc+0xf8>)
 80011ee:	881a      	ldrh	r2, [r3, #0]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b298      	uxth	r0, r3
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <SSD1306_Putc+0xf8>)
 80011fa:	885a      	ldrh	r2, [r3, #2]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b299      	uxth	r1, r3
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	f7ff ff2f 	bl	8001074 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4293      	cmp	r3, r2
 8001226:	d3c8      	bcc.n	80011ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	461a      	mov	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4293      	cmp	r3, r2
 8001238:	d3ad      	bcc.n	8001196 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SSD1306_Putc+0xf8>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <SSD1306_Putc+0xf8>)
 8001248:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800124a:	79fb      	ldrb	r3, [r7, #7]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000093c 	.word	0x2000093c

08001258 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	4613      	mov	r3, r2
 8001264:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001266:	e012      	b.n	800128e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff73 	bl	800115c <SSD1306_Putc>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d002      	beq.n	8001288 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	e008      	b.n	800129a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e8      	bne.n	8001268 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <SSD1306_I2C_Init+0x24>)
 80012ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012ae:	e002      	b.n	80012b6 <SSD1306_I2C_Init+0x12>
		p--;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f9      	bne.n	80012b0 <SSD1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	0003d090 	.word	0x0003d090

080012cc <SSD1306_I2C_Write>:



void SSD1306_I2C_Write(uint8_t address, uint8_t control, uint8_t databyte) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	460b      	mov	r3, r1
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	4613      	mov	r3, r2
 80012dc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2] = { control, databyte };
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	733b      	strb	r3, [r7, #12]
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	b299      	uxth	r1, r3
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2302      	movs	r3, #2
 80012f6:	4803      	ldr	r0, [pc, #12]	@ (8001304 <SSD1306_I2C_Write+0x38>)
 80012f8:	f001 f926 	bl	8002548 <HAL_I2C_Master_Transmit>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001fc 	.word	0x200001fc

08001308 <SSD1306_I2C_WriteMulti>:



void SSD1306_I2C_WriteMulti(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	603a      	str	r2, [r7, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	460b      	mov	r3, r1
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	4613      	mov	r3, r2
 800131c:	80bb      	strh	r3, [r7, #4]
    dma_tx_buffer[0] = ctrl;
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <SSD1306_I2C_WriteMulti+0x6c>)
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	7013      	strb	r3, [r2, #0]
    memcpy(&dma_tx_buffer[1], data, len);
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	4813      	ldr	r0, [pc, #76]	@ (8001378 <SSD1306_I2C_WriteMulti+0x70>)
 800132c:	f00b f818 	bl	800c360 <memcpy>

    // **Sólo** datos: espera si un envío anterior sigue vivo
    while (i2c1_tx_busy) {
 8001330:	e000      	b.n	8001334 <SSD1306_I2C_WriteMulti+0x2c>
        __WFI();
 8001332:	bf30      	wfi
    while (i2c1_tx_busy) {
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <SSD1306_I2C_WriteMulti+0x74>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <SSD1306_I2C_WriteMulti+0x2a>
    }

    // 1) DEBUG: parámetros de la transmisión
    //USB_Debug("WriteMulti: addr=0x%02X ctrl=0x%02X len=%u\r\n", addr, ctrl, len);

    i2c1_tx_busy = 1;
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <SSD1306_I2C_WriteMulti+0x74>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, addr, dma_tx_buffer, len + 1);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b299      	uxth	r1, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <SSD1306_I2C_WriteMulti+0x6c>)
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <SSD1306_I2C_WriteMulti+0x78>)
 8001352:	f001 f9f7 	bl	8002744 <HAL_I2C_Master_Transmit_DMA>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
    /*USB_Debug("Transmit_DMA returned %d, CCR=0x%08lX, CNDTR=%u\r\n",
              ret,
              DMA1_Channel6->CCR,
              DMA1_Channel6->CNDTR);*/

    if (ret != HAL_OK) {
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <SSD1306_I2C_WriteMulti+0x64>
        // Error de DMA: libéralo para no colgarte
        i2c1_tx_busy = 0;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SSD1306_I2C_WriteMulti+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
        USB_Debug("WriteMulti: ¡ERROR en Transmit_DMA!\r\n");
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <SSD1306_I2C_WriteMulti+0x7c>)
 8001368:	f7ff fc2e 	bl	8000bc8 <USB_Debug>
    }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000944 	.word	0x20000944
 8001378:	20000945 	.word	0x20000945
 800137c:	20000538 	.word	0x20000538
 8001380:	200001fc 	.word	0x200001fc
 8001384:	0800cf8c 	.word	0x0800cf8c

08001388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_MspInit+0x5c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_MspInit+0x5c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_MspInit+0x60>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_MspInit+0x60>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000

080013ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <HAL_I2C_MspInit+0xcc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d151      	bne.n	80014b0 <HAL_I2C_MspInit+0xc4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a2a      	ldr	r2, [pc, #168]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001424:	23c0      	movs	r3, #192	@ 0xc0
 8001426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4822      	ldr	r0, [pc, #136]	@ (80014c0 <HAL_I2C_MspInit+0xd4>)
 8001438:	f000 fd92 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001446:	61d3      	str	r3, [r2, #28]
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_I2C_MspInit+0xd0>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_I2C_MspInit+0xdc>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800145c:	2210      	movs	r2, #16
 800145e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001468:	2280      	movs	r2, #128	@ 0x80
 800146a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001484:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001486:	f000 faf9 	bl	8001a7c <HAL_DMA_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001490:	f7ff fb86 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	201f      	movs	r0, #31
 80014a6:	f000 fab2 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014aa:	201f      	movs	r0, #31
 80014ac:	f000 facb 	bl	8001a46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40005400 	.word	0x40005400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	20000250 	.word	0x20000250
 80014c8:	4002006c 	.word	0x4002006c

080014cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <HAL_TIM_Base_MspInit+0x58>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10c      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 80014e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	e010      	b.n	800151a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001500:	d10b      	bne.n	800151a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_TIM_Base_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <HAL_TIM_MspPostInit+0x98>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d119      	bne.n	8001580 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	4814      	ldr	r0, [pc, #80]	@ (80015cc <HAL_TIM_MspPostInit+0xa0>)
 800157a:	f000 fcf1 	bl	8001f60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800157e:	e01c      	b.n	80015ba <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001588:	d117      	bne.n	80015ba <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <HAL_TIM_MspPostInit+0x9c>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_TIM_MspPostInit+0xa0>)
 80015b6:	f000 fcd3 	bl	8001f60 <HAL_GPIO_Init>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010800 	.word	0x40010800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f8de 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <DMA1_Channel6_IRQHandler+0x10>)
 800162e:	f000 fb57 	bl	8001ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000250 	.word	0x20000250

0800163c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001642:	f003 fb2b 	bl	8004c9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000171c 	.word	0x2000171c

08001650 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <I2C1_EV_IRQHandler+0x10>)
 8001656:	f001 fac7 	bl	8002be8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001fc 	.word	0x200001fc

08001664 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d102      	bne.n	800167c <HAL_I2C_MasterTxCpltCallback+0x18>
        i2c1_tx_busy = 0;
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    }
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	20000538 	.word	0x20000538

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f00a fe22 	bl	800c308 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20005000 	.word	0x20005000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	20000a48 	.word	0x20000a48
 80016f8:	20001d60 	.word	0x20001d60

080016fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001708:	f7ff fff8 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480b      	ldr	r0, [pc, #44]	@ (800173c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800170e:	490c      	ldr	r1, [pc, #48]	@ (8001740 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001710:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001724:	4c09      	ldr	r4, [pc, #36]	@ (800174c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f00a fdef 	bl	800c314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001736:	f7fe ffcd 	bl	80006d4 <main>
  bx lr
 800173a:	4770      	bx	lr
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001744:	0800d7d0 	.word	0x0800d7d0
  ldr r2, =_sbss
 8001748:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800174c:	20001d5c 	.word	0x20001d5c

08001750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC1_2_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_Init+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_Init+0x28>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f947 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fe0a 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f95f 	bl	8001a62 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f927 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	@ (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000014 	.word	0x20000014
 80017dc:	20000010 	.word	0x20000010

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_IncTick+0x1c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_IncTick+0x20>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a03      	ldr	r2, [pc, #12]	@ (8001800 <HAL_IncTick+0x20>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000014 	.word	0x20000014
 8001800:	20000a4c 	.word	0x20000a4c

08001804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b02      	ldr	r3, [pc, #8]	@ (8001814 <HAL_GetTick+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000a4c 	.word	0x20000a4c

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fff0 	bl	8001804 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffe0 	bl	8001804 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000014 	.word	0x20000014

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4906      	ldr	r1, [pc, #24]	@ (80018f8 <__NVIC_EnableIRQ+0x34>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff90 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff2d 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff42 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff90 	bl	8001950 <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5f 	bl	80018fc <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff35 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e043      	b.n	8001b1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <HAL_DMA_Init+0xa8>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a22      	ldr	r2, [pc, #136]	@ (8001b28 <HAL_DMA_Init+0xac>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	@ (8001b2c <HAL_DMA_Init+0xb0>)
 8001aae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ac6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	bffdfff8 	.word	0xbffdfff8
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_DMA_Start_IT+0x20>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e04b      	b.n	8001be8 <HAL_DMA_Start_IT+0xb8>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d13a      	bne.n	8001bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f9bc 	bl	8001f06 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 020e 	orr.w	r2, r2, #14
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e00f      	b.n	8001bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0204 	bic.w	r2, r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 020a 	orr.w	r2, r2, #10
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e005      	b.n	8001be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d005      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e051      	b.n	8001cb8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 020e 	bic.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a22      	ldr	r2, [pc, #136]	@ (8001cc4 <HAL_DMA_Abort_IT+0xd4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d029      	beq.n	8001c92 <HAL_DMA_Abort_IT+0xa2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a21      	ldr	r2, [pc, #132]	@ (8001cc8 <HAL_DMA_Abort_IT+0xd8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x9e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ccc <HAL_DMA_Abort_IT+0xdc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01a      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x98>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd0 <HAL_DMA_Abort_IT+0xe0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d012      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x92>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <HAL_DMA_Abort_IT+0xe4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00a      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x8c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <HAL_DMA_Abort_IT+0xe8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d102      	bne.n	8001c76 <HAL_DMA_Abort_IT+0x86>
 8001c70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c74:	e00e      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c7a:	e00b      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c80:	e008      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c86:	e005      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8c:	e002      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c8e:	2310      	movs	r3, #16
 8001c90:	e000      	b.n	8001c94 <HAL_DMA_Abort_IT+0xa4>
 8001c92:	2301      	movs	r3, #1
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <HAL_DMA_Abort_IT+0xec>)
 8001c96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
    } 
  }
  return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020008 	.word	0x40020008
 8001cc8:	4002001c 	.word	0x4002001c
 8001ccc:	40020030 	.word	0x40020030
 8001cd0:	40020044 	.word	0x40020044
 8001cd4:	40020058 	.word	0x40020058
 8001cd8:	4002006c 	.word	0x4002006c
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d04f      	beq.n	8001da8 <HAL_DMA_IRQHandler+0xc8>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d04a      	beq.n	8001da8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0204 	bic.w	r2, r2, #4
 8001d2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a66      	ldr	r2, [pc, #408]	@ (8001ed0 <HAL_DMA_IRQHandler+0x1f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d029      	beq.n	8001d8e <HAL_DMA_IRQHandler+0xae>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a65      	ldr	r2, [pc, #404]	@ (8001ed4 <HAL_DMA_IRQHandler+0x1f4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xaa>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a63      	ldr	r2, [pc, #396]	@ (8001ed8 <HAL_DMA_IRQHandler+0x1f8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_IRQHandler+0xa4>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a62      	ldr	r2, [pc, #392]	@ (8001edc <HAL_DMA_IRQHandler+0x1fc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d012      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x9e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a60      	ldr	r2, [pc, #384]	@ (8001ee0 <HAL_DMA_IRQHandler+0x200>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00a      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x98>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5f      	ldr	r2, [pc, #380]	@ (8001ee4 <HAL_DMA_IRQHandler+0x204>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <HAL_DMA_IRQHandler+0x92>
 8001d6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d70:	e00e      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d76:	e00b      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d78:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d7c:	e008      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d82:	e005      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d88:	e002      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d8a:	2340      	movs	r3, #64	@ 0x40
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_IRQHandler+0xb0>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	4a55      	ldr	r2, [pc, #340]	@ (8001ee8 <HAL_DMA_IRQHandler+0x208>)
 8001d92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8094 	beq.w	8001ec6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001da6:	e08e      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	2202      	movs	r2, #2
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d056      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x186>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d051      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020a 	bic.w	r2, r2, #10
 8001dde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <HAL_DMA_IRQHandler+0x1f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d029      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x166>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a37      	ldr	r2, [pc, #220]	@ (8001ed4 <HAL_DMA_IRQHandler+0x1f4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x162>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	@ (8001ed8 <HAL_DMA_IRQHandler+0x1f8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01a      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x15c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <HAL_DMA_IRQHandler+0x1fc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x156>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a32      	ldr	r2, [pc, #200]	@ (8001ee0 <HAL_DMA_IRQHandler+0x200>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x150>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_DMA_IRQHandler+0x204>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d102      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x14a>
 8001e24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e28:	e00e      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2e:	e00b      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e34:	e008      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3a:	e005      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e40:	e002      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e42:	2320      	movs	r3, #32
 8001e44:	e000      	b.n	8001e48 <HAL_DMA_IRQHandler+0x168>
 8001e46:	2302      	movs	r3, #2
 8001e48:	4a27      	ldr	r2, [pc, #156]	@ (8001ee8 <HAL_DMA_IRQHandler+0x208>)
 8001e4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d034      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e64:	e02f      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d028      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1e8>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020e 	bic.w	r2, r2, #14
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
    }
  }
  return;
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
}
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40020008 	.word	0x40020008
 8001ed4:	4002001c 	.word	0x4002001c
 8001ed8:	40020030 	.word	0x40020030
 8001edc:	40020044 	.word	0x40020044
 8001ee0:	40020058 	.word	0x40020058
 8001ee4:	4002006c 	.word	0x4002006c
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001efa:	b2db      	uxtb	r3, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d108      	bne.n	8001f46 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f44:	e007      	b.n	8001f56 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	60da      	str	r2, [r3, #12]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b08b      	sub	sp, #44	@ 0x2c
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	e169      	b.n	8002248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f74:	2201      	movs	r2, #1
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 8158 	bne.w	8002242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a9a      	ldr	r2, [pc, #616]	@ (8002200 <HAL_GPIO_Init+0x2a0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d05e      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001f9c:	4a98      	ldr	r2, [pc, #608]	@ (8002200 <HAL_GPIO_Init+0x2a0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d875      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fa2:	4a98      	ldr	r2, [pc, #608]	@ (8002204 <HAL_GPIO_Init+0x2a4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d058      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fa8:	4a96      	ldr	r2, [pc, #600]	@ (8002204 <HAL_GPIO_Init+0x2a4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d86f      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fae:	4a96      	ldr	r2, [pc, #600]	@ (8002208 <HAL_GPIO_Init+0x2a8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d052      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fb4:	4a94      	ldr	r2, [pc, #592]	@ (8002208 <HAL_GPIO_Init+0x2a8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d869      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fba:	4a94      	ldr	r2, [pc, #592]	@ (800220c <HAL_GPIO_Init+0x2ac>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d04c      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fc0:	4a92      	ldr	r2, [pc, #584]	@ (800220c <HAL_GPIO_Init+0x2ac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d863      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fc6:	4a92      	ldr	r2, [pc, #584]	@ (8002210 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d046      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fcc:	4a90      	ldr	r2, [pc, #576]	@ (8002210 <HAL_GPIO_Init+0x2b0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d85d      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d82a      	bhi.n	800202c <HAL_GPIO_Init+0xcc>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d859      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fda:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <HAL_GPIO_Init+0x80>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	0800205b 	.word	0x0800205b
 8001fe4:	08002035 	.word	0x08002035
 8001fe8:	08002047 	.word	0x08002047
 8001fec:	08002089 	.word	0x08002089
 8001ff0:	0800208f 	.word	0x0800208f
 8001ff4:	0800208f 	.word	0x0800208f
 8001ff8:	0800208f 	.word	0x0800208f
 8001ffc:	0800208f 	.word	0x0800208f
 8002000:	0800208f 	.word	0x0800208f
 8002004:	0800208f 	.word	0x0800208f
 8002008:	0800208f 	.word	0x0800208f
 800200c:	0800208f 	.word	0x0800208f
 8002010:	0800208f 	.word	0x0800208f
 8002014:	0800208f 	.word	0x0800208f
 8002018:	0800208f 	.word	0x0800208f
 800201c:	0800208f 	.word	0x0800208f
 8002020:	0800208f 	.word	0x0800208f
 8002024:	0800203d 	.word	0x0800203d
 8002028:	08002051 	.word	0x08002051
 800202c:	4a79      	ldr	r2, [pc, #484]	@ (8002214 <HAL_GPIO_Init+0x2b4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002032:	e02c      	b.n	800208e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e029      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	3304      	adds	r3, #4
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e024      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	3308      	adds	r3, #8
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e01f      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	330c      	adds	r3, #12
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e01a      	b.n	8002090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002062:	2304      	movs	r3, #4
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e013      	b.n	8002090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	611a      	str	r2, [r3, #16]
          break;
 800207a:	e009      	b.n	8002090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800207c:	2308      	movs	r3, #8
 800207e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	615a      	str	r2, [r3, #20]
          break;
 8002086:	e003      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
          break;
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x130>
          break;
 800208e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	@ 0xff
 8002094:	d801      	bhi.n	800209a <HAL_GPIO_Init+0x13a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	e001      	b.n	800209e <HAL_GPIO_Init+0x13e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2bff      	cmp	r3, #255	@ 0xff
 80020a4:	d802      	bhi.n	80020ac <HAL_GPIO_Init+0x14c>
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x152>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	3b08      	subs	r3, #8
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	210f      	movs	r1, #15
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80b1 	beq.w	8002242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002218 <HAL_GPIO_Init+0x2b8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002218 <HAL_GPIO_Init+0x2b8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002218 <HAL_GPIO_Init+0x2b8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020f8:	4a48      	ldr	r2, [pc, #288]	@ (800221c <HAL_GPIO_Init+0x2bc>)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	@ (8002220 <HAL_GPIO_Init+0x2c0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_GPIO_Init+0x1ec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <HAL_GPIO_Init+0x2c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00d      	beq.n	8002148 <HAL_GPIO_Init+0x1e8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_GPIO_Init+0x2c8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x1e4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3d      	ldr	r2, [pc, #244]	@ (800222c <HAL_GPIO_Init+0x2cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_GPIO_Init+0x1e0>
 800213c:	2303      	movs	r3, #3
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002140:	2304      	movs	r3, #4
 8002142:	e004      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002144:	2302      	movs	r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 800214c:	2300      	movs	r3, #0
 800214e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800215e:	492f      	ldr	r1, [pc, #188]	@ (800221c <HAL_GPIO_Init+0x2bc>)
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	492c      	ldr	r1, [pc, #176]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002186:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4928      	ldr	r1, [pc, #160]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 8002190:	4013      	ands	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	4922      	ldr	r1, [pc, #136]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ae:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	491e      	ldr	r1, [pc, #120]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4918      	ldr	r1, [pc, #96]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4914      	ldr	r1, [pc, #80]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d021      	beq.n	8002234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e021      	b.n	8002242 <HAL_GPIO_Init+0x2e2>
 80021fe:	bf00      	nop
 8002200:	10320000 	.word	0x10320000
 8002204:	10310000 	.word	0x10310000
 8002208:	10220000 	.word	0x10220000
 800220c:	10210000 	.word	0x10210000
 8002210:	10120000 	.word	0x10120000
 8002214:	10110000 	.word	0x10110000
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	40010800 	.word	0x40010800
 8002224:	40010c00 	.word	0x40010c00
 8002228:	40011000 	.word	0x40011000
 800222c:	40011400 	.word	0x40011400
 8002230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	43db      	mvns	r3, r3
 800223c:	4909      	ldr	r1, [pc, #36]	@ (8002264 <HAL_GPIO_Init+0x304>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f ae8e 	bne.w	8001f74 <HAL_GPIO_Init+0x14>
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	372c      	adds	r7, #44	@ 0x2c
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e12b      	b.n	8002502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff f894 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	@ 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022fc:	f004 fcdc 	bl	8006cb8 <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a81      	ldr	r2, [pc, #516]	@ (800250c <HAL_I2C_Init+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d807      	bhi.n	800231c <HAL_I2C_Init+0x84>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a80      	ldr	r2, [pc, #512]	@ (8002510 <HAL_I2C_Init+0x278>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e006      	b.n	800232a <HAL_I2C_Init+0x92>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a7d      	ldr	r2, [pc, #500]	@ (8002514 <HAL_I2C_Init+0x27c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e7      	b.n	8002502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a78      	ldr	r2, [pc, #480]	@ (8002518 <HAL_I2C_Init+0x280>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a6a      	ldr	r2, [pc, #424]	@ (800250c <HAL_I2C_Init+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d802      	bhi.n	800236c <HAL_I2C_Init+0xd4>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	e009      	b.n	8002380 <HAL_I2C_Init+0xe8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a69      	ldr	r2, [pc, #420]	@ (800251c <HAL_I2C_Init+0x284>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	3301      	adds	r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002392:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	495c      	ldr	r1, [pc, #368]	@ (800250c <HAL_I2C_Init+0x274>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d819      	bhi.n	80023d4 <HAL_I2C_Init+0x13c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e59      	subs	r1, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_I2C_Init+0x138>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e59      	subs	r1, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	e051      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x168>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x18e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x196>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1bc>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002532:	2b80      	cmp	r3, #128	@ 0x80
 8002534:	d103      	bne.n	800253e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	460b      	mov	r3, r1
 8002556:	817b      	strh	r3, [r7, #10]
 8002558:	4613      	mov	r3, r2
 800255a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff f952 	bl	8001804 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	f040 80e0 	bne.w	8002730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2319      	movs	r3, #25
 8002576:	2201      	movs	r2, #1
 8002578:	4970      	ldr	r1, [pc, #448]	@ (800273c <HAL_I2C_Master_Transmit+0x1f4>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f002 f84e 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e0d3      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x50>
 8002594:	2302      	movs	r3, #2
 8002596:	e0cc      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d007      	beq.n	80025be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	@ 0x21
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a50      	ldr	r2, [pc, #320]	@ (8002740 <HAL_I2C_Master_Transmit+0x1f8>)
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f001 fdc8 	bl	800419c <I2C_MasterRequestWrite>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e08d      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800262c:	e066      	b.n	80026fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f002 f90c 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	2b04      	cmp	r3, #4
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06b      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11b      	bne.n	80026d0 <HAL_I2C_Master_Transmit+0x188>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	6a39      	ldr	r1, [r7, #32]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f002 f903 	bl	80048e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d107      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e01a      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d194      	bne.n	800262e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000

08002744 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	461a      	mov	r2, r3
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
 8002754:	4613      	mov	r3, r2
 8002756:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	f040 8101 	bne.w	800296c <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800276a:	4b83      	ldr	r3, [pc, #524]	@ (8002978 <HAL_I2C_Master_Transmit_DMA+0x234>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	4a82      	ldr	r2, [pc, #520]	@ (800297c <HAL_I2C_Master_Transmit_DMA+0x238>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a1a      	lsrs	r2, r3, #8
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009a      	lsls	r2, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	3b01      	subs	r3, #1
 8002788:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d112      	bne.n	80027b6 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0db      	b.n	800296e <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d0df      	beq.n	8002784 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Master_Transmit_DMA+0x8e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0cd      	b.n	800296e <HAL_I2C_Master_Transmit_DMA+0x22a>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d007      	beq.n	80027f8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2221      	movs	r2, #33	@ 0x21
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2210      	movs	r2, #16
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	893a      	ldrh	r2, [r7, #8]
 8002828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a52      	ldr	r2, [pc, #328]	@ (8002980 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800283a:	897a      	ldrh	r2, [r7, #10]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d073      	beq.n	8002930 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	4a4a      	ldr	r2, [pc, #296]	@ (8002988 <HAL_I2C_Master_Transmit_DMA+0x244>)
 800285e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	2200      	movs	r2, #0
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	2200      	movs	r2, #0
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3310      	adds	r3, #16
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002886:	f7ff f953 	bl	8001b30 <HAL_DMA_Start_IT>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d139      	bne.n	8002908 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8002894:	e013      	b.n	80028be <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e057      	b.n	800296e <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80028d4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e4:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028f4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e02f      	b.n	8002968 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0210 	orr.w	r2, r3, #16
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e01e      	b.n	800296e <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800293e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002966:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c
 800297c:	14f8b589 	.word	0x14f8b589
 8002980:	ffff0000 	.word	0xffff0000
 8002984:	080042a1 	.word	0x080042a1
 8002988:	0800445f 	.word	0x0800445f

0800298c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	@ 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	460b      	mov	r3, r1
 800299a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7fe ff32 	bl	8001804 <HAL_GetTick>
 80029a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 8111 	bne.w	8002bd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2319      	movs	r3, #25
 80029ba:	2201      	movs	r2, #1
 80029bc:	4988      	ldr	r1, [pc, #544]	@ (8002be0 <HAL_I2C_IsDeviceReady+0x254>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f001 fe2c 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	e104      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2C_IsDeviceReady+0x50>
 80029d8:	2302      	movs	r3, #2
 80029da:	e0fd      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d007      	beq.n	8002a02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2224      	movs	r2, #36	@ 0x24
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a70      	ldr	r2, [pc, #448]	@ (8002be4 <HAL_I2C_IsDeviceReady+0x258>)
 8002a24:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f001 fdea 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5c:	d103      	bne.n	8002a66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0b6      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fec3 	bl	8001804 <HAL_GetTick>
 8002a7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aae:	e025      	b.n	8002afc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7fe fea8 	bl	8001804 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <HAL_I2C_IsDeviceReady+0x13a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22a0      	movs	r2, #160	@ 0xa0
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b06:	d005      	beq.n	8002b14 <HAL_I2C_IsDeviceReady+0x188>
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_I2C_IsDeviceReady+0x188>
 8002b0e:	7dbb      	ldrb	r3, [r7, #22]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0cd      	beq.n	8002ab0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d129      	bne.n	8002b7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2319      	movs	r3, #25
 8002b56:	2201      	movs	r2, #1
 8002b58:	4921      	ldr	r1, [pc, #132]	@ (8002be0 <HAL_I2C_IsDeviceReady+0x254>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f001 fd5e 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e036      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e02c      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	490f      	ldr	r1, [pc, #60]	@ (8002be0 <HAL_I2C_IsDeviceReady+0x254>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 fd3a 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e012      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f4ff af32 	bcc.w	8002a26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000

08002be8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d003      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0x38>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b40      	cmp	r3, #64	@ 0x40
 8002c1c:	f040 80c1 	bne.w	8002da2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c40:	d003      	beq.n	8002c4a <HAL_I2C_EV_IRQHandler+0x62>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_EV_IRQHandler+0x66>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_I2C_EV_IRQHandler+0x68>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f000 8132 	beq.w	8002eba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x92>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f001 fedf 	bl	8004a30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fce1 	bl	800363a <I2C_Master_SB>
 8002c78:	e092      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xb2>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	0a5b      	lsrs	r3, r3, #9
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fd56 	bl	8003744 <I2C_Master_ADD10>
 8002c98:	e082      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xd2>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	0a5b      	lsrs	r3, r3, #9
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd6f 	bl	8003796 <I2C_Master_ADDR>
 8002cb8:	e072      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03b      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cd4:	f000 80f3 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	09db      	lsrs	r3, r3, #7
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f939 	bl	8002f74 <I2C_MasterTransmit_TXE>
 8002d02:	e04d      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80d6 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0a5b      	lsrs	r3, r3, #9
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80cf 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d20:	7bbb      	ldrb	r3, [r7, #14]
 8002d22:	2b21      	cmp	r3, #33	@ 0x21
 8002d24:	d103      	bne.n	8002d2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9c0 	bl	80030ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2c:	e0c7      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b40      	cmp	r3, #64	@ 0x40
 8002d32:	f040 80c4 	bne.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa2e 	bl	8003198 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3c:	e0bf      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d4c:	f000 80b7 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x194>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x194>
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 faa7 	bl	80032c8 <I2C_MasterReceive_RXNE>
 8002d7a:	e011      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 809a 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	0a5b      	lsrs	r3, r3, #9
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8093 	beq.w	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb5d 	bl	8003458 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9e:	e08e      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8002da0:	e08d      	b.n	8002ebe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e007      	b.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	0a5b      	lsrs	r3, r3, #9
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002dec:	69b9      	ldr	r1, [r7, #24]
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 ff28 	bl	8003c44 <I2C_Slave_ADDR>
 8002df4:	e066      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x22e>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	0a5b      	lsrs	r3, r3, #9
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 ff62 	bl	8003cd8 <I2C_Slave_STOPF>
 8002e14:	e056      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e16:	7bbb      	ldrb	r3, [r7, #14]
 8002e18:	2b21      	cmp	r3, #33	@ 0x21
 8002e1a:	d002      	beq.n	8002e22 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	2b29      	cmp	r3, #41	@ 0x29
 8002e20:	d125      	bne.n	8002e6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	09db      	lsrs	r3, r3, #7
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00f      	beq.n	8002e4e <HAL_I2C_EV_IRQHandler+0x266>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	0a9b      	lsrs	r3, r3, #10
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_I2C_EV_IRQHandler+0x266>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fe40 	bl	8003acc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e4c:	e039      	b.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d033      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	0a5b      	lsrs	r3, r3, #9
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02d      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fe6d 	bl	8003b46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e6c:	e029      	b.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00f      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	0a9b      	lsrs	r3, r3, #10
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fe77 	bl	8003b86 <I2C_SlaveReceive_RXNE>
 8002e98:	e014      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	0a5b      	lsrs	r3, r3, #9
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fea5 	bl	8003c02 <I2C_SlaveReceive_BTF>
 8002eb8:	e004      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d150      	bne.n	800303c <I2C_MasterTransmit_TXE+0xc8>
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b21      	cmp	r3, #33	@ 0x21
 8002f9e:	d14d      	bne.n	800303c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d01d      	beq.n	8002fe2 <I2C_MasterTransmit_TXE+0x6e>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d01a      	beq.n	8002fe2 <I2C_MasterTransmit_TXE+0x6e>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fb2:	d016      	beq.n	8002fe2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fc2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2211      	movs	r2, #17
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fb42 	bl	8001664 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fe0:	e060      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ff0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003000:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b40      	cmp	r3, #64	@ 0x40
 800301a:	d107      	bne.n	800302c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff81 	bl	8002f2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302a:	e03b      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fe fb15 	bl	8001664 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800303a:	e033      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b21      	cmp	r3, #33	@ 0x21
 8003040:	d005      	beq.n	800304e <I2C_MasterTransmit_TXE+0xda>
 8003042:	7bbb      	ldrb	r3, [r7, #14]
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d12d      	bne.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b22      	cmp	r3, #34	@ 0x22
 800304c:	d12a      	bne.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003068:	e01c      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	d103      	bne.n	800307e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f88e 	bl	8003198 <I2C_MemoryTransmit_TXE_BTF>
}
 800307c:	e012      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030a2:	e7ff      	b.n	80030a4 <I2C_MasterTransmit_TXE+0x130>
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b21      	cmp	r3, #33	@ 0x21
 80030c4:	d164      	bne.n	8003190 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d012      	beq.n	80030f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030f4:	e04c      	b.n	8003190 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d01d      	beq.n	8003138 <I2C_MasterTransmit_BTF+0x8c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d01a      	beq.n	8003138 <I2C_MasterTransmit_BTF+0x8c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003108:	d016      	beq.n	8003138 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003118:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2211      	movs	r2, #17
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fe fa97 	bl	8001664 <HAL_I2C_MasterTxCpltCallback>
}
 8003136:	e02b      	b.n	8003190 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003146:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b40      	cmp	r3, #64	@ 0x40
 8003170:	d107      	bne.n	8003182 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fed6 	bl	8002f2c <HAL_I2C_MemTxCpltCallback>
}
 8003180:	e006      	b.n	8003190 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fa6a 	bl	8001664 <HAL_I2C_MasterTxCpltCallback>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10b      	bne.n	80031d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80031ce:	e077      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	121b      	asrs	r3, r3, #8
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031ea:	e069      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10b      	bne.n	800320c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800320a:	e059      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	2b02      	cmp	r3, #2
 8003212:	d152      	bne.n	80032ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b22      	cmp	r3, #34	@ 0x22
 8003218:	d10d      	bne.n	8003236 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003228:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003234:	e044      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b21      	cmp	r3, #33	@ 0x21
 8003244:	d112      	bne.n	800326c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800326a:	e029      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d124      	bne.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b21      	cmp	r3, #33	@ 0x21
 800327a:	d121      	bne.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800328a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fe3a 	bl	8002f2c <HAL_I2C_MemTxCpltCallback>
}
 80032b8:	e002      	b.n	80032c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f930 	bl	8002520 <I2C_Flush_DR>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b22      	cmp	r3, #34	@ 0x22
 80032da:	f040 80b9 	bne.w	8003450 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d921      	bls.n	8003336 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b03      	cmp	r3, #3
 8003320:	f040 8096 	bne.w	8003450 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003332:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003334:	e08c      	b.n	8003450 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	2b02      	cmp	r3, #2
 800333c:	d07f      	beq.n	800343e <I2C_MasterReceive_RXNE+0x176>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <I2C_MasterReceive_RXNE+0x82>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d179      	bne.n	800343e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 fb10 	bl	8004970 <I2C_WaitOnSTOPRequestThroughIT>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d14c      	bne.n	80033f0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003364:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003374:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d10a      	bne.n	80033c6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fdbd 	bl	8002f3e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033c4:	e044      	b.n	8003450 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d002      	beq.n	80033da <I2C_MasterReceive_RXNE+0x112>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d103      	bne.n	80033e2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
 80033e0:	e002      	b.n	80033e8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2212      	movs	r2, #18
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fd6e 	bl	8002eca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033ee:	e02f      	b.n	8003450 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fd8a 	bl	8002f50 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800343c:	e008      	b.n	8003450 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344c:	605a      	str	r2, [r3, #4]
}
 800344e:	e7ff      	b.n	8003450 <I2C_MasterReceive_RXNE+0x188>
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11b      	bne.n	80034a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800347e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034a6:	e0c4      	b.n	8003632 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d129      	bne.n	8003506 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d00a      	beq.n	80034de <I2C_MasterReceive_BTF+0x86>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d007      	beq.n	80034de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003504:	e095      	b.n	8003632 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d17d      	bne.n	800360c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <I2C_MasterReceive_BTF+0xc4>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b10      	cmp	r3, #16
 800351a:	d108      	bne.n	800352e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e016      	b.n	800355c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d002      	beq.n	800353a <I2C_MasterReceive_BTF+0xe2>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d108      	bne.n	800354c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e007      	b.n	800355c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80035b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d10a      	bne.n	80035e2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fcaf 	bl	8002f3e <HAL_I2C_MemRxCpltCallback>
}
 80035e0:	e027      	b.n	8003632 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d002      	beq.n	80035f6 <I2C_MasterReceive_BTF+0x19e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d103      	bne.n	80035fe <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80035fc:	e002      	b.n	8003604 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2212      	movs	r2, #18
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff fc60 	bl	8002eca <HAL_I2C_MasterRxCpltCallback>
}
 800360a:	e012      	b.n	8003632 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d117      	bne.n	800367e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003666:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003668:	e067      	b.n	800373a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2da      	uxtb	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]
}
 800367c:	e05d      	b.n	800373a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003686:	d133      	bne.n	80036f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b21      	cmp	r3, #33	@ 0x21
 8003692:	d109      	bne.n	80036a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036a4:	611a      	str	r2, [r3, #16]
 80036a6:	e008      	b.n	80036ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <I2C_Master_SB+0x92>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d032      	beq.n	800373a <I2C_Master_SB+0x100>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02d      	beq.n	800373a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ec:	605a      	str	r2, [r3, #4]
}
 80036ee:	e024      	b.n	800373a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10e      	bne.n	8003716 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	11db      	asrs	r3, r3, #7
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0306 	and.w	r3, r3, #6
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f063 030f 	orn	r3, r3, #15
 800370c:	b2da      	uxtb	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
}
 8003714:	e011      	b.n	800373a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10d      	bne.n	800373a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	b29b      	uxth	r3, r3
 8003724:	11db      	asrs	r3, r3, #7
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0306 	and.w	r3, r3, #6
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f063 030e 	orn	r3, r3, #14
 8003732:	b2da      	uxtb	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	611a      	str	r2, [r3, #16]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	b2da      	uxtb	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <I2C_Master_ADD10+0x26>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <I2C_Master_ADD10+0x48>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378a:	605a      	str	r2, [r3, #4]
  }
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003796:	b480      	push	{r7}
 8003798:	b091      	sub	sp, #68	@ 0x44
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b22      	cmp	r3, #34	@ 0x22
 80037be:	f040 8174 	bne.w	8003aaa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <I2C_Master_ADDR+0x54>
 80037ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d10b      	bne.n	80037ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	e16b      	b.n	8003ac2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11d      	bne.n	800382e <I2C_Master_ADDR+0x98>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037fa:	d118      	bne.n	800382e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003820:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	651a      	str	r2, [r3, #80]	@ 0x50
 800382c:	e149      	b.n	8003ac2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e120      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 808a 	bne.w	8003980 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003872:	d137      	bne.n	80038e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003882:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003892:	d113      	bne.n	80038bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	e0f2      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038bc:	2300      	movs	r3, #0
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e0de      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d02e      	beq.n	8003948 <I2C_Master_ADDR+0x1b2>
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d02b      	beq.n	8003948 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	2b12      	cmp	r3, #18
 80038f4:	d102      	bne.n	80038fc <I2C_Master_ADDR+0x166>
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d125      	bne.n	8003948 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d00e      	beq.n	8003920 <I2C_Master_ADDR+0x18a>
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	2b02      	cmp	r3, #2
 8003906:	d00b      	beq.n	8003920 <I2C_Master_ADDR+0x18a>
 8003908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390a:	2b10      	cmp	r3, #16
 800390c:	d008      	beq.n	8003920 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e007      	b.n	8003930 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800392e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	e0ac      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003956:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e090      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d158      	bne.n	8003a3c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	2b04      	cmp	r3, #4
 800398e:	d021      	beq.n	80039d4 <I2C_Master_ADDR+0x23e>
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	2b02      	cmp	r3, #2
 8003994:	d01e      	beq.n	80039d4 <I2C_Master_ADDR+0x23e>
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b10      	cmp	r3, #16
 800399a:	d01b      	beq.n	80039d4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e012      	b.n	80039fa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a08:	d14b      	bne.n	8003aa2 <I2C_Master_ADDR+0x30c>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a10:	d00b      	beq.n	8003a2a <I2C_Master_ADDR+0x294>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d008      	beq.n	8003a2a <I2C_Master_ADDR+0x294>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d005      	beq.n	8003a2a <I2C_Master_ADDR+0x294>
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d002      	beq.n	8003a2a <I2C_Master_ADDR+0x294>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d13b      	bne.n	8003aa2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e032      	b.n	8003aa2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5a:	d117      	bne.n	8003a8c <I2C_Master_ADDR+0x2f6>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a62:	d00b      	beq.n	8003a7c <I2C_Master_ADDR+0x2e6>
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d008      	beq.n	8003a7c <I2C_Master_ADDR+0x2e6>
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d005      	beq.n	8003a7c <I2C_Master_ADDR+0x2e6>
 8003a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d002      	beq.n	8003a7c <I2C_Master_ADDR+0x2e6>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d107      	bne.n	8003a8c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003aa8:	e00b      	b.n	8003ac2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
}
 8003ac0:	e7ff      	b.n	8003ac2 <I2C_Master_ADDR+0x32c>
 8003ac2:	bf00      	nop
 8003ac4:	3744      	adds	r7, #68	@ 0x44
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ada:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02b      	beq.n	8003b3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <I2C_SlaveTransmit_TXE+0x72>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b29      	cmp	r3, #41	@ 0x29
 8003b18:	d111      	bne.n	8003b3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2221      	movs	r2, #33	@ 0x21
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2228      	movs	r2, #40	@ 0x28
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff f9cf 	bl	8002edc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d011      	beq.n	8003b7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02c      	beq.n	8003bfa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d114      	bne.n	8003bfa <I2C_SlaveReceive_RXNE+0x74>
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bd4:	d111      	bne.n	8003bfa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2222      	movs	r2, #34	@ 0x22
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2228      	movs	r2, #40	@ 0x28
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff f97a 	bl	8002eee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c5e:	2b28      	cmp	r3, #40	@ 0x28
 8003c60:	d127      	bne.n	8003cb2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	09db      	lsrs	r3, r3, #7
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	81bb      	strh	r3, [r7, #12]
 8003c94:	e002      	b.n	8003c9c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ca4:	89ba      	ldrh	r2, [r7, #12]
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff f928 	bl	8002f00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cb0:	e00e      	b.n	8003cd0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d24:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d34:	d172      	bne.n	8003e1c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b22      	cmp	r3, #34	@ 0x22
 8003d3a:	d002      	beq.n	8003d42 <I2C_Slave_STOPF+0x6a>
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d40:	d135      	bne.n	8003dae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f043 0204 	orr.w	r2, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe f8b6 	bl	8001eec <HAL_DMA_GetState>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d049      	beq.n	8003e1a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	4a69      	ldr	r2, [pc, #420]	@ (8003f30 <I2C_Slave_STOPF+0x258>)
 8003d8c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd ff2c 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03d      	beq.n	8003e1a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dac:	e035      	b.n	8003e1a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f043 0204 	orr.w	r2, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003de0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe f880 	bl	8001eec <HAL_DMA_GetState>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d014      	beq.n	8003e1c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f30 <I2C_Slave_STOPF+0x258>)
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fef6 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
 8003e18:	e000      	b.n	8003e1c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e1a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03e      	beq.n	8003ea4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d112      	bne.n	8003e5a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d112      	bne.n	8003e8e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f843 	bl	8003f38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003eb2:	e039      	b.n	8003f28 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb8:	d109      	bne.n	8003ece <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2228      	movs	r2, #40	@ 0x28
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff f810 	bl	8002eee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b28      	cmp	r3, #40	@ 0x28
 8003ed8:	d111      	bne.n	8003efe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <I2C_Slave_STOPF+0x25c>)
 8003ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff f80f 	bl	8002f1a <HAL_I2C_ListenCpltCallback>
}
 8003efc:	e014      	b.n	8003f28 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	2b22      	cmp	r3, #34	@ 0x22
 8003f04:	d002      	beq.n	8003f0c <I2C_Slave_STOPF+0x234>
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b22      	cmp	r3, #34	@ 0x22
 8003f0a:	d10d      	bne.n	8003f28 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe ffe3 	bl	8002eee <HAL_I2C_SlaveRxCpltCallback>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	080044cd 	.word	0x080044cd
 8003f34:	ffff0000 	.word	0xffff0000

08003f38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f50:	7bbb      	ldrb	r3, [r7, #14]
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d002      	beq.n	8003f5c <I2C_ITError+0x24>
 8003f56:	7bbb      	ldrb	r3, [r7, #14]
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d10a      	bne.n	8003f72 <I2C_ITError+0x3a>
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b22      	cmp	r3, #34	@ 0x22
 8003f60:	d107      	bne.n	8003f72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f78:	2b28      	cmp	r3, #40	@ 0x28
 8003f7a:	d107      	bne.n	8003f8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2228      	movs	r2, #40	@ 0x28
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f8a:	e015      	b.n	8003fb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9a:	d00a      	beq.n	8003fb2 <I2C_ITError+0x7a>
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b60      	cmp	r3, #96	@ 0x60
 8003fa0:	d007      	beq.n	8003fb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc6:	d162      	bne.n	800408e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d020      	beq.n	8004028 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fea:	4a6a      	ldr	r2, [pc, #424]	@ (8004194 <I2C_ITError+0x25c>)
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fdfc 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8089 	beq.w	8004112 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004022:	4610      	mov	r0, r2
 8004024:	4798      	blx	r3
 8004026:	e074      	b.n	8004112 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	4a59      	ldr	r2, [pc, #356]	@ (8004194 <I2C_ITError+0x25c>)
 800402e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd fddb 	bl	8001bf0 <HAL_DMA_Abort_IT>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d068      	beq.n	8004112 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d10b      	bne.n	8004066 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004088:	4610      	mov	r0, r2
 800408a:	4798      	blx	r3
 800408c:	e041      	b.n	8004112 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b60      	cmp	r3, #96	@ 0x60
 8004098:	d125      	bne.n	80040e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b40      	cmp	r3, #64	@ 0x40
 80040b4:	d10b      	bne.n	80040ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe ff3f 	bl	8002f62 <HAL_I2C_AbortCpltCallback>
 80040e4:	e015      	b.n	8004112 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d10b      	bne.n	800410c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe ff1f 	bl	8002f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10e      	bne.n	8004140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004156:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d113      	bne.n	800418c <I2C_ITError+0x254>
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b28      	cmp	r3, #40	@ 0x28
 8004168:	d110      	bne.n	800418c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <I2C_ITError+0x260>)
 800416e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fe fec7 	bl	8002f1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	080044cd 	.word	0x080044cd
 8004198:	ffff0000 	.word	0xffff0000

0800419c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d006      	beq.n	80041c6 <I2C_MasterRequestWrite+0x2a>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d003      	beq.n	80041c6 <I2C_MasterRequestWrite+0x2a>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041c4:	d108      	bne.n	80041d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e00b      	b.n	80041f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	2b12      	cmp	r3, #18
 80041de:	d107      	bne.n	80041f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fa0d 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004216:	d103      	bne.n	8004220 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e035      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800422c:	d108      	bne.n	8004240 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e01b      	b.n	8004278 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	11db      	asrs	r3, r3, #7
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 030f 	orn	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	490e      	ldr	r1, [pc, #56]	@ (8004298 <I2C_MasterRequestWrite+0xfc>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fa56 	bl	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e010      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4907      	ldr	r1, [pc, #28]	@ (800429c <I2C_MasterRequestWrite+0x100>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fa46 	bl	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	00010008 	.word	0x00010008
 800429c:	00010002 	.word	0x00010002

080042a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	2200      	movs	r2, #0
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	2200      	movs	r2, #0
 80042f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80042fa:	2b21      	cmp	r3, #33	@ 0x21
 80042fc:	d007      	beq.n	800430e <I2C_DMAXferCplt+0x6e>
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004304:	2b22      	cmp	r3, #34	@ 0x22
 8004306:	d131      	bne.n	800436c <I2C_DMAXferCplt+0xcc>
 8004308:	7cbb      	ldrb	r3, [r7, #18]
 800430a:	2b20      	cmp	r3, #32
 800430c:	d12e      	bne.n	800436c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800431c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b29      	cmp	r3, #41	@ 0x29
 8004328:	d10a      	bne.n	8004340 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2221      	movs	r2, #33	@ 0x21
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2228      	movs	r2, #40	@ 0x28
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004338:	6978      	ldr	r0, [r7, #20]
 800433a:	f7fe fdcf 	bl	8002edc <HAL_I2C_SlaveTxCpltCallback>
 800433e:	e00c      	b.n	800435a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b2a      	cmp	r3, #42	@ 0x2a
 8004344:	d109      	bne.n	800435a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2222      	movs	r2, #34	@ 0x22
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2228      	movs	r2, #40	@ 0x28
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f7fe fdca 	bl	8002eee <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004368:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800436a:	e074      	b.n	8004456 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d06e      	beq.n	8004456 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d107      	bne.n	8004392 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004390:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043a8:	d009      	beq.n	80043be <I2C_DMAXferCplt+0x11e>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d006      	beq.n	80043be <I2C_DMAXferCplt+0x11e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80043b6:	d002      	beq.n	80043be <I2C_DMAXferCplt+0x11e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d107      	bne.n	80043ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f7fe fda7 	bl	8002f50 <HAL_I2C_ErrorCallback>
}
 8004402:	e028      	b.n	8004456 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d10a      	bne.n	800442e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7fe fd89 	bl	8002f3e <HAL_I2C_MemRxCpltCallback>
}
 800442c:	e013      	b.n	8004456 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d002      	beq.n	8004442 <I2C_DMAXferCplt+0x1a2>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b20      	cmp	r3, #32
 8004440:	d103      	bne.n	800444a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
 8004448:	e002      	b.n	8004450 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2212      	movs	r2, #18
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f7fe fd3a 	bl	8002eca <HAL_I2C_MasterRxCpltCallback>
}
 8004456:	bf00      	nop
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004478:	2200      	movs	r2, #0
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7fe fd46 	bl	8002f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <I2C_DMAAbort+0x148>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004618 <I2C_DMAAbort+0x14c>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0a1a      	lsrs	r2, r3, #8
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00da      	lsls	r2, r3, #3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004512:	e00a      	b.n	800452a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004528:	d0ea      	beq.n	8004500 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004558:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456c:	2200      	movs	r2, #0
 800456e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	2200      	movs	r2, #0
 800457e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b60      	cmp	r3, #96	@ 0x60
 800459a:	d10e      	bne.n	80045ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045b2:	6978      	ldr	r0, [r7, #20]
 80045b4:	f7fe fcd5 	bl	8002f62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045b8:	e027      	b.n	800460a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045c0:	2b28      	cmp	r3, #40	@ 0x28
 80045c2:	d117      	bne.n	80045f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2228      	movs	r2, #40	@ 0x28
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045f2:	e007      	b.n	8004604 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004604:	6978      	ldr	r0, [r7, #20]
 8004606:	f7fe fca3 	bl	8002f50 <HAL_I2C_ErrorCallback>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000000c 	.word	0x2000000c
 8004618:	14f8b589 	.word	0x14f8b589

0800461c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462c:	e048      	b.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d044      	beq.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fd f8e5 	bl	8001804 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d139      	bne.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10d      	bne.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	e00c      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	43da      	mvns	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d116      	bne.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e023      	b.n	8004708 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10d      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	43da      	mvns	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	e00c      	b.n	8004700 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	429a      	cmp	r2, r3
 8004704:	d093      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800471e:	e071      	b.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d123      	bne.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	f043 0204 	orr.w	r2, r3, #4
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e067      	b.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d041      	beq.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fd f840 	bl	8001804 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d136      	bne.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10c      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e00b      	b.n	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e021      	b.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d10c      	bne.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e00b      	b.n	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f af6d 	bne.w	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800485c:	e034      	b.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8b8 	bl	80049d4 <I2C_IsAcknowledgeFailed>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e034      	b.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d028      	beq.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004876:	f7fc ffc5 	bl	8001804 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11d      	bne.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b80      	cmp	r3, #128	@ 0x80
 8004898:	d016      	beq.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e007      	b.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d2:	2b80      	cmp	r3, #128	@ 0x80
 80048d4:	d1c3      	bne.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ec:	e034      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f870 	bl	80049d4 <I2C_IsAcknowledgeFailed>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d028      	beq.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fc ff7d 	bl	8001804 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11d      	bne.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d016      	beq.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d1c3      	bne.n	80048ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800497c:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	4a13      	ldr	r2, [pc, #76]	@ (80049d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	0a1a      	lsrs	r2, r3, #8
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e008      	b.n	80049c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049bc:	d0e9      	beq.n	8004992 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	14f8b589 	.word	0x14f8b589

080049d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ea:	d11b      	bne.n	8004a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a40:	d103      	bne.n	8004a4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a48:	e007      	b.n	8004a5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a52:	d102      	bne.n	8004a5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0e8      	b.n	8004c48 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f007 f94e 	bl	800bd2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2203      	movs	r2, #3
 8004a94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 f846 	bl	8007b34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab2:	f003 f81c 	bl	8007aee <USB_CoreInit>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0bf      	b.n	8004c48 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 f84a 	bl	8007b68 <USB_SetCurrentMode>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0b0      	b.n	8004c48 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
 8004aea:	e03e      	b.n	8004b6a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	3311      	adds	r3, #17
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3310      	adds	r3, #16
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	440b      	add	r3, r1
 8004b22:	3313      	adds	r3, #19
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	440b      	add	r3, r1
 8004b36:	3320      	adds	r3, #32
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	440b      	add	r3, r1
 8004b4a:	3324      	adds	r3, #36	@ 0x24
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	3301      	adds	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	791b      	ldrb	r3, [r3, #4]
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3bb      	bcc.n	8004aec <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e044      	b.n	8004c04 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	440b      	add	r3, r1
 8004b88:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ba6:	7bfa      	ldrb	r2, [r7, #15]
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	3301      	adds	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	791b      	ldrb	r3, [r3, #4]
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3b5      	bcc.n	8004b7a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c18:	f002 ffb2 	bl	8007b80 <USB_DevInit>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00c      	b.n	8004c48 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 fa32 	bl	800a0aa <USB_DevDisconnect>

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_PCD_Start+0x16>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e016      	b.n	8004c94 <HAL_PCD_Start+0x44>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 ff48 	bl	8007b08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004c78:	2101      	movs	r1, #1
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f007 fac9 	bl	800c212 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f005 fa06 	bl	800a096 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f005 fa08 	bl	800a0be <USB_ReadInterrupts>
 8004cae:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fb1a 	bl	80052f4 <PCD_EP_ISR_Handler>

    return;
 8004cc0:	e119      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f007 f89c 	bl	800be22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004cea:	2100      	movs	r1, #0
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f905 	bl	8004efc <HAL_PCD_SetAddress>

    return;
 8004cf2:	e100      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d10:	b292      	uxth	r2, r2
 8004d12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d16:	e0ee      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d34:	b292      	uxth	r2, r2
 8004d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d3a:	e0dc      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d027      	beq.n	8004d96 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0204 	bic.w	r2, r2, #4
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0208 	bic.w	r2, r2, #8
 8004d70:	b292      	uxth	r2, r2
 8004d72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f007 f88c 	bl	800be94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d94:	e0af      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8083 	beq.w	8004ea8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e010      	b.n	8004dca <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	7ffb      	ldrb	r3, [r7, #31]
 8004db6:	8812      	ldrh	r2, [r2, #0]
 8004db8:	b292      	uxth	r2, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	3320      	adds	r3, #32
 8004dbe:	443b      	add	r3, r7
 8004dc0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004dc4:	7ffb      	ldrb	r3, [r7, #31]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	2b07      	cmp	r3, #7
 8004dce:	d9eb      	bls.n	8004da8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	b292      	uxth	r2, r2
 8004de4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004e00:	bf00      	nop
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f6      	beq.n	8004e02 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e26:	b292      	uxth	r2, r2
 8004e28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e00f      	b.n	8004e52 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	7ffa      	ldrb	r2, [r7, #31]
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	440a      	add	r2, r1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	3320      	adds	r3, #32
 8004e44:	443b      	add	r3, r7
 8004e46:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004e4a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004e4c:	7ffb      	ldrb	r3, [r7, #31]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d9ec      	bls.n	8004e32 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e82:	b292      	uxth	r2, r2
 8004e84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0204 	orr.w	r2, r2, #4
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f006 ffdd 	bl	800be60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ea6:	e026      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f006 ff9b 	bl	800be06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ed0:	e011      	b.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ef4:	bf00      	nop
  }
}
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_PCD_SetAddress+0x1a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e012      	b.n	8004f3c <HAL_PCD_SetAddress+0x40>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f005 f89f 	bl	800a070 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	70fb      	strb	r3, [r7, #3]
 8004f56:	460b      	mov	r3, r1
 8004f58:	803b      	strh	r3, [r7, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da0e      	bge.n	8004f88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 0207 	and.w	r2, r3, #7
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3310      	adds	r3, #16
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	705a      	strb	r2, [r3, #1]
 8004f86:	e00e      	b.n	8004fa6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 0207 	and.w	r2, r3, #7
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fb2:	883a      	ldrh	r2, [r7, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	78ba      	ldrb	r2, [r7, #2]
 8004fbc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fbe:	78bb      	ldrb	r3, [r7, #2]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d102      	bne.n	8004fca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_PCD_EP_Open+0x94>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e00e      	b.n	8004ff6 <HAL_PCD_EP_Open+0xb2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68f9      	ldr	r1, [r7, #12]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f002 fde8 	bl	8007bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800500a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	da0e      	bge.n	8005030 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	f003 0207 	and.w	r2, r3, #7
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	3310      	adds	r3, #16
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	705a      	strb	r2, [r3, #1]
 800502e:	e00e      	b.n	800504e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 0207 	and.w	r2, r3, #7
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_PCD_EP_Close+0x6a>
 8005064:	2302      	movs	r3, #2
 8005066:	e00e      	b.n	8005086 <HAL_PCD_EP_Close+0x88>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	4618      	mov	r0, r3
 8005078:	f003 f960 	bl	800833c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	460b      	mov	r3, r1
 800509c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	f003 0207 	and.w	r2, r3, #7
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fb17 	bl	8008714 <USB_EPStartXfer>

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 0207 	and.w	r2, r3, #7
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b086      	sub	sp, #24
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	460b      	mov	r3, r1
 800512c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512e:	7afb      	ldrb	r3, [r7, #11]
 8005130:	f003 0207 	and.w	r2, r3, #7
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3310      	adds	r3, #16
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2201      	movs	r2, #1
 8005168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800516a:	7afb      	ldrb	r3, [r7, #11]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	b2da      	uxtb	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	4618      	mov	r0, r3
 800517e:	f003 fac9 	bl	8008714 <USB_EPStartXfer>

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	7912      	ldrb	r2, [r2, #4]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e04c      	b.n	8005244 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da0e      	bge.n	80051d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f003 0207 	and.w	r2, r3, #7
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	3310      	adds	r3, #16
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	705a      	strb	r2, [r3, #1]
 80051ce:	e00c      	b.n	80051ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_PCD_EP_SetStall+0x7e>
 8005206:	2302      	movs	r3, #2
 8005208:	e01c      	b.n	8005244 <HAL_PCD_EP_SetStall+0xb8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fe2c 	bl	8009e76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f004 ff51 	bl	800a0dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	7912      	ldrb	r2, [r2, #4]
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e040      	b.n	80052ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800526a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da0e      	bge.n	8005290 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 0207 	and.w	r2, r3, #7
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3310      	adds	r3, #16
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	705a      	strb	r2, [r3, #1]
 800528e:	e00e      	b.n	80052ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_PCD_EP_ClrStall+0x82>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e00e      	b.n	80052ec <HAL_PCD_EP_ClrStall+0xa0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	4618      	mov	r0, r3
 80052de:	f004 fe1a 	bl	8009f16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b096      	sub	sp, #88	@ 0x58
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052fc:	e3bb      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005306:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800530a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005318:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 8175 	bne.w	800560c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	d14e      	bne.n	80053cc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800533a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533e:	81fb      	strh	r3, [r7, #14]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3310      	adds	r3, #16
 8005356:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005360:	b29b      	uxth	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	3302      	adds	r3, #2
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005382:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	441a      	add	r2, r3
 800538e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005390:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005392:	2100      	movs	r1, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f006 fd1c 	bl	800bdd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7b5b      	ldrb	r3, [r3, #13]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8368 	beq.w	8005a76 <PCD_EP_ISR_Handler+0x782>
 80053a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8363 	bne.w	8005a76 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7b5b      	ldrb	r3, [r3, #13]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	735a      	strb	r2, [r3, #13]
 80053ca:	e354      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053d2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80053de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d034      	beq.n	8005454 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	3306      	adds	r3, #6
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005422:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005428:	b29b      	uxth	r3, r3
 800542a:	f004 fea8 	bl	800a17e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29a      	uxth	r2, r3
 8005436:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800543a:	4013      	ands	r3, r2
 800543c:	823b      	strh	r3, [r7, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	8a3a      	ldrh	r2, [r7, #16]
 8005444:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005448:	b292      	uxth	r2, r2
 800544a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f006 fc93 	bl	800bd78 <HAL_PCD_SetupStageCallback>
 8005452:	e310      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005454:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005458:	2b00      	cmp	r3, #0
 800545a:	f280 830c 	bge.w	8005a76 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29a      	uxth	r2, r3
 8005466:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800546a:	4013      	ands	r3, r2
 800546c:	83fb      	strh	r3, [r7, #30]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	8bfa      	ldrh	r2, [r7, #30]
 8005474:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005478:	b292      	uxth	r2, r2
 800547a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005484:	b29b      	uxth	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4413      	add	r3, r2
 8005490:	3306      	adds	r3, #6
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80054a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d019      	beq.n	80054e4 <PCD_EP_ISR_Handler+0x1f0>
 80054b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054be:	6959      	ldr	r1, [r3, #20]
 80054c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f004 fe58 	bl	800a17e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80054ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	441a      	add	r2, r3
 80054d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80054dc:	2100      	movs	r1, #0
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f006 fc5c 	bl	800bd9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80054ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f040 82bd 	bne.w	8005a76 <PCD_EP_ISR_Handler+0x782>
 80054fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005500:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005504:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005508:	f000 82b5 	beq.w	8005a76 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4413      	add	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005536:	b29a      	uxth	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b3e      	cmp	r3, #62	@ 0x3e
 8005542:	d91d      	bls.n	8005580 <PCD_EP_ISR_Handler+0x28c>
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	647b      	str	r3, [r7, #68]	@ 0x44
 800554c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <PCD_EP_ISR_Handler+0x26a>
 8005558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800555a:	3b01      	subs	r3, #1
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29a      	uxth	r2, r3
 8005564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e026      	b.n	80055ce <PCD_EP_ISR_Handler+0x2da>
 8005580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <PCD_EP_ISR_Handler+0x2aa>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e017      	b.n	80055ce <PCD_EP_ISR_Handler+0x2da>
 800559e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <PCD_EP_ISR_Handler+0x2c4>
 80055b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b4:	3301      	adds	r3, #1
 80055b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	029b      	lsls	r3, r3, #10
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	827b      	strh	r3, [r7, #18]
 80055e0:	8a7b      	ldrh	r3, [r7, #18]
 80055e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80055e6:	827b      	strh	r3, [r7, #18]
 80055e8:	8a7b      	ldrh	r3, [r7, #18]
 80055ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055ee:	827b      	strh	r3, [r7, #18]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	8a7b      	ldrh	r3, [r7, #18]
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]
 800560a:	e234      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005620:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005624:	2b00      	cmp	r3, #0
 8005626:	f280 80fc 	bge.w	8005822 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29a      	uxth	r2, r3
 800563c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005640:	4013      	ands	r3, r2
 8005642:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005658:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800565c:	b292      	uxth	r2, r2
 800565e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005660:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005678:	7b1b      	ldrb	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d125      	bne.n	80056ca <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005686:	b29b      	uxth	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	3306      	adds	r3, #6
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80056aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8092 	beq.w	80057d8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ba:	6959      	ldr	r1, [r3, #20]
 80056bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056be:	88da      	ldrh	r2, [r3, #6]
 80056c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056c4:	f004 fd5b 	bl	800a17e <USB_ReadPMA>
 80056c8:	e086      	b.n	80057d8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80056ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056cc:	78db      	ldrb	r3, [r3, #3]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d10a      	bne.n	80056e8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80056d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056d6:	461a      	mov	r2, r3
 80056d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9d9 	bl	8005a92 <HAL_PCD_EP_DB_Receive>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80056e6:	e077      	b.n	80057d8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005702:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005724:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d024      	beq.n	8005790 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	3302      	adds	r3, #2
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005772:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02e      	beq.n	80057d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005784:	891a      	ldrh	r2, [r3, #8]
 8005786:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800578a:	f004 fcf8 	bl	800a17e <USB_ReadPMA>
 800578e:	e023      	b.n	80057d8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	3306      	adds	r3, #6
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80057bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ca:	6959      	ldr	r1, [r3, #20]
 80057cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ce:	895a      	ldrh	r2, [r3, #10]
 80057d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057d4:	f004 fcd3 	bl	800a17e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057e0:	441a      	add	r2, r3
 80057e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057ee:	441a      	add	r2, r3
 80057f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80057f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <PCD_EP_ISR_Handler+0x514>
 80057fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	429a      	cmp	r2, r3
 8005806:	d206      	bcs.n	8005816 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f006 fac4 	bl	800bd9c <HAL_PCD_DataOutStageCallback>
 8005814:	e005      	b.n	8005822 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800581c:	4618      	mov	r0, r3
 800581e:	f002 ff79 	bl	8008714 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005822:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8123 	beq.w	8005a76 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8005830:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3310      	adds	r3, #16
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587c:	b29b      	uxth	r3, r3
 800587e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005882:	78db      	ldrb	r3, [r3, #3]
 8005884:	2b01      	cmp	r3, #1
 8005886:	f040 80a2 	bne.w	80059ce <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800588a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588c:	2200      	movs	r2, #0
 800588e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005892:	7b1b      	ldrb	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8093 	beq.w	80059c0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800589a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d046      	beq.n	8005934 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d126      	bne.n	80058fc <PCD_EP_ISR_Handler+0x608>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058bc:	b29b      	uxth	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	4413      	add	r3, r2
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	4413      	add	r3, r2
 80058d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	e061      	b.n	80059c0 <PCD_EP_ISR_Handler+0x6cc>
 80058fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d15d      	bne.n	80059c0 <PCD_EP_ISR_Handler+0x6cc>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005918:	4413      	add	r3, r2
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800591c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011a      	lsls	r2, r3, #4
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	4413      	add	r3, r2
 8005926:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	2200      	movs	r2, #0
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e045      	b.n	80059c0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800593a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d126      	bne.n	8005990 <PCD_EP_ISR_Handler+0x69c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	4413      	add	r3, r2
 8005958:	637b      	str	r3, [r7, #52]	@ 0x34
 800595a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005962:	4413      	add	r3, r2
 8005964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005968:	633b      	str	r3, [r7, #48]	@ 0x30
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005974:	b29a      	uxth	r2, r3
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e017      	b.n	80059c0 <PCD_EP_ISR_Handler+0x6cc>
 8005990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <PCD_EP_ISR_Handler+0x6cc>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a6:	4413      	add	r3, r2
 80059a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	2200      	movs	r2, #0
 80059be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f006 fa03 	bl	800bdd2 <HAL_PCD_DataInStageCallback>
 80059cc:	e053      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d146      	bne.n	8005a68 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	3302      	adds	r3, #2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d907      	bls.n	8005a22 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	e002      	b.n	8005a28 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f006 f9cb 	bl	800bdd2 <HAL_PCD_DataInStageCallback>
 8005a3c:	e01b      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a46:	441a      	add	r2, r3
 8005a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a54:	441a      	add	r2, r3
 8005a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a58:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a60:	4618      	mov	r0, r3
 8005a62:	f002 fe57 	bl	8008714 <USB_EPStartXfer>
 8005a66:	e006      	b.n	8005a76 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f91b 	bl	8005cac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f6ff ac3b 	blt.w	80052fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3758      	adds	r7, #88	@ 0x58
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b088      	sub	sp, #32
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d07e      	beq.n	8005ba8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	3302      	adds	r3, #2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	8b7b      	ldrh	r3, [r7, #26]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d306      	bcc.n	8005aec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	8b7b      	ldrh	r3, [r7, #26]
 8005ae4:	1ad2      	subs	r2, r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	619a      	str	r2, [r3, #24]
 8005aea:	e002      	b.n	8005af2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d123      	bne.n	8005b42 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b14:	833b      	strh	r3, [r7, #24]
 8005b16:	8b3b      	ldrh	r3, [r7, #24]
 8005b18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b1c:	833b      	strh	r3, [r7, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	8b3b      	ldrh	r3, [r7, #24]
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01f      	beq.n	8005b8c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b66:	82fb      	strh	r3, [r7, #22]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	8afb      	ldrh	r3, [r7, #22]
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b8c:	8b7b      	ldrh	r3, [r7, #26]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8087 	beq.w	8005ca2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6959      	ldr	r1, [r3, #20]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	891a      	ldrh	r2, [r3, #8]
 8005ba0:	8b7b      	ldrh	r3, [r7, #26]
 8005ba2:	f004 faec 	bl	800a17e <USB_ReadPMA>
 8005ba6:	e07c      	b.n	8005ca2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3306      	adds	r3, #6
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	8b7b      	ldrh	r3, [r7, #26]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d306      	bcc.n	8005bea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	8b7b      	ldrh	r3, [r7, #26]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	619a      	str	r2, [r3, #24]
 8005be8:	e002      	b.n	8005bf0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d123      	bne.n	8005c40 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	83fb      	strh	r3, [r7, #30]
 8005c14:	8bfb      	ldrh	r3, [r7, #30]
 8005c16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c1a:	83fb      	strh	r3, [r7, #30]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	8bfb      	ldrh	r3, [r7, #30]
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11f      	bne.n	8005c8a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c64:	83bb      	strh	r3, [r7, #28]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	8bbb      	ldrh	r3, [r7, #28]
 8005c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c8a:	8b7b      	ldrh	r3, [r7, #26]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	895a      	ldrh	r2, [r3, #10]
 8005c9c:	8b7b      	ldrh	r3, [r7, #26]
 8005c9e:	f004 fa6e 	bl	800a17e <USB_ReadPMA>
    }
  }

  return count;
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b0a4      	sub	sp, #144	@ 0x90
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 81dd 	beq.w	8006080 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	3302      	adds	r3, #2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d907      	bls.n	8005d0e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	619a      	str	r2, [r3, #24]
 8005d0c:	e002      	b.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 80b9 	bne.w	8005e90 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d126      	bne.n	8005d74 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	4413      	add	r3, r2
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	011a      	lsls	r2, r3, #4
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e01a      	b.n	8005daa <HAL_PCD_EP_DB_Transmit+0xfe>
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d116      	bne.n	8005daa <HAL_PCD_EP_DB_Transmit+0xfe>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d90:	4413      	add	r3, r2
 8005d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	011a      	lsls	r2, r3, #4
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	2200      	movs	r2, #0
 8005da8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d126      	bne.n	8005e06 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e017      	b.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d113      	bne.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	4413      	add	r3, r2
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	011a      	lsls	r2, r3, #4
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2200      	movs	r2, #0
 8005e34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f005 ffc8 	bl	800bdd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 82fc 	beq.w	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	82fb      	strh	r3, [r7, #22]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	8afb      	ldrh	r3, [r7, #22]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]
 8005e8e:	e2da      	b.n	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d021      	beq.n	8005ede <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 82ae 	bne.w	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ef2:	441a      	add	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f00:	441a      	add	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a1a      	ldr	r2, [r3, #32]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d30b      	bcc.n	8005f2a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	621a      	str	r2, [r3, #32]
 8005f28:	e017      	b.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005f32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f42:	e00a      	b.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d165      	bne.n	800602e <HAL_PCD_EP_DB_Transmit+0x382>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f76:	4413      	add	r3, r2
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	011a      	lsls	r2, r3, #4
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fa0:	d91d      	bls.n	8005fde <HAL_PCD_EP_DB_Transmit+0x332>
 8005fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x310>
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e044      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x350>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e035      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006012:	3301      	adds	r3, #1
 8006014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29b      	uxth	r3, r3
 8006024:	4313      	orrs	r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e01c      	b.n	8006068 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d118      	bne.n	8006068 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	647b      	str	r3, [r7, #68]	@ 0x44
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604a:	4413      	add	r3, r2
 800604c:	647b      	str	r3, [r7, #68]	@ 0x44
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006056:	4413      	add	r3, r2
 8006058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800605c:	643b      	str	r3, [r7, #64]	@ 0x40
 800605e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006062:	b29a      	uxth	r2, r3
 8006064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006066:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6959      	ldr	r1, [r3, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	891a      	ldrh	r2, [r3, #8]
 8006074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006078:	b29b      	uxth	r3, r3
 800607a:	f004 f83a 	bl	800a0f2 <USB_WritePMA>
 800607e:	e1e2      	b.n	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	3306      	adds	r3, #6
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d307      	bcc.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060c0:	1ad2      	subs	r2, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	619a      	str	r2, [r3, #24]
 80060c6:	e002      	b.n	80060ce <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f040 80c0 	bne.w	8006258 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d126      	bne.n	800612e <HAL_PCD_EP_DB_Transmit+0x482>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060f4:	4413      	add	r3, r2
 80060f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	011a      	lsls	r2, r3, #4
 80060fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006100:	4413      	add	r3, r2
 8006102:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006106:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006112:	b29a      	uxth	r2, r3
 8006114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e01a      	b.n	8006164 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d116      	bne.n	8006164 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	667b      	str	r3, [r7, #100]	@ 0x64
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614a:	4413      	add	r3, r2
 800614c:	667b      	str	r3, [r7, #100]	@ 0x64
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	011a      	lsls	r2, r3, #4
 8006154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006156:	4413      	add	r3, r2
 8006158:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800615c:	663b      	str	r3, [r7, #96]	@ 0x60
 800615e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006160:	2200      	movs	r2, #0
 8006162:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	677b      	str	r3, [r7, #116]	@ 0x74
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d12b      	bne.n	80061ca <HAL_PCD_EP_DB_Transmit+0x51e>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006186:	4413      	add	r3, r2
 8006188:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	011a      	lsls	r2, r3, #4
 8006190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006192:	4413      	add	r3, r2
 8006194:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800619c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e017      	b.n	80061fa <HAL_PCD_EP_DB_Transmit+0x54e>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d113      	bne.n	80061fa <HAL_PCD_EP_DB_Transmit+0x54e>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061e0:	4413      	add	r3, r2
 80061e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	011a      	lsls	r2, r3, #4
 80061ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80061f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061f6:	2200      	movs	r2, #0
 80061f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f005 fde6 	bl	800bdd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 811a 	bne.w	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800624a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800624e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]
 8006256:	e0f6      	b.n	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d121      	bne.n	80062a6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800629a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 80ca 	bne.w	8006446 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062ba:	441a      	add	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062c8:	441a      	add	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d30b      	bcc.n	80062f2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	621a      	str	r2, [r3, #32]
 80062f0:	e017      	b.n	8006322 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80062fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800630a:	e00a      	b.n	8006322 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2200      	movs	r2, #0
 8006318:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	657b      	str	r3, [r7, #84]	@ 0x54
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d165      	bne.n	80063fc <HAL_PCD_EP_DB_Transmit+0x750>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006344:	4413      	add	r3, r2
 8006346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	011a      	lsls	r2, r3, #4
 800634e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006350:	4413      	add	r3, r2
 8006352:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006356:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006362:	b29a      	uxth	r2, r3
 8006364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636c:	2b3e      	cmp	r3, #62	@ 0x3e
 800636e:	d91d      	bls.n	80063ac <HAL_PCD_EP_DB_Transmit+0x700>
 8006370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <HAL_PCD_EP_DB_Transmit+0x6de>
 8006384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006386:	3b01      	subs	r3, #1
 8006388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800638a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29a      	uxth	r2, r3
 8006390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e041      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x784>
 80063ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <HAL_PCD_EP_DB_Transmit+0x71e>
 80063b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e032      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x784>
 80063ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x738>
 80063de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063e0:	3301      	adds	r3, #1
 80063e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	e019      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x784>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d115      	bne.n	8006430 <HAL_PCD_EP_DB_Transmit+0x784>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800640c:	b29b      	uxth	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006412:	4413      	add	r3, r2
 8006414:	657b      	str	r3, [r7, #84]	@ 0x54
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	011a      	lsls	r2, r3, #4
 800641c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641e:	4413      	add	r3, r2
 8006420:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006424:	653b      	str	r3, [r7, #80]	@ 0x50
 8006426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800642a:	b29a      	uxth	r2, r3
 800642c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800642e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6959      	ldr	r1, [r3, #20]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	895a      	ldrh	r2, [r3, #10]
 800643c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 fe56 	bl	800a0f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006460:	82bb      	strh	r3, [r7, #20]
 8006462:	8abb      	ldrh	r3, [r7, #20]
 8006464:	f083 0310 	eor.w	r3, r3, #16
 8006468:	82bb      	strh	r3, [r7, #20]
 800646a:	8abb      	ldrh	r3, [r7, #20]
 800646c:	f083 0320 	eor.w	r3, r3, #32
 8006470:	82bb      	strh	r3, [r7, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8abb      	ldrh	r3, [r7, #20]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3790      	adds	r7, #144	@ 0x90
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	817b      	strh	r3, [r7, #10]
 80064ae:	4613      	mov	r3, r2
 80064b0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80064b2:	897b      	ldrh	r3, [r7, #10]
 80064b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	f003 0207 	and.w	r2, r3, #7
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	3310      	adds	r3, #16
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e009      	b.n	80064ea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064d6:	897a      	ldrh	r2, [r7, #10]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d107      	bne.n	8006500 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	80da      	strh	r2, [r3, #6]
 80064fe:	e00b      	b.n	8006518 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2201      	movs	r2, #1
 8006504:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	b29a      	uxth	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b29a      	uxth	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e272      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 8087 	beq.w	8006652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006544:	4b92      	ldr	r3, [pc, #584]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 030c 	and.w	r3, r3, #12
 800654c:	2b04      	cmp	r3, #4
 800654e:	d00c      	beq.n	800656a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006550:	4b8f      	ldr	r3, [pc, #572]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 030c 	and.w	r3, r3, #12
 8006558:	2b08      	cmp	r3, #8
 800655a:	d112      	bne.n	8006582 <HAL_RCC_OscConfig+0x5e>
 800655c:	4b8c      	ldr	r3, [pc, #560]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006568:	d10b      	bne.n	8006582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656a:	4b89      	ldr	r3, [pc, #548]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d06c      	beq.n	8006650 <HAL_RCC_OscConfig+0x12c>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d168      	bne.n	8006650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e24c      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658a:	d106      	bne.n	800659a <HAL_RCC_OscConfig+0x76>
 800658c:	4b80      	ldr	r3, [pc, #512]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a7f      	ldr	r2, [pc, #508]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e02e      	b.n	80065f8 <HAL_RCC_OscConfig+0xd4>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10c      	bne.n	80065bc <HAL_RCC_OscConfig+0x98>
 80065a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7a      	ldr	r2, [pc, #488]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	4b78      	ldr	r3, [pc, #480]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a77      	ldr	r2, [pc, #476]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01d      	b.n	80065f8 <HAL_RCC_OscConfig+0xd4>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0xbc>
 80065c6:	4b72      	ldr	r3, [pc, #456]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a71      	ldr	r2, [pc, #452]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0xd4>
 80065e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b68      	ldr	r3, [pc, #416]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a67      	ldr	r2, [pc, #412]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fb f900 	bl	8001804 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006608:	f7fb f8fc 	bl	8001804 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	@ 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e200      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b5d      	ldr	r3, [pc, #372]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0xe4>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fb f8ec 	bl	8001804 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fb f8e8 	bl	8001804 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	@ 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e1ec      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006642:	4b53      	ldr	r3, [pc, #332]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x10c>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d063      	beq.n	8006726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800665e:	4b4c      	ldr	r3, [pc, #304]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800666a:	4b49      	ldr	r3, [pc, #292]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b08      	cmp	r3, #8
 8006674:	d11c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x18c>
 8006676:	4b46      	ldr	r3, [pc, #280]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006682:	4b43      	ldr	r3, [pc, #268]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_RCC_OscConfig+0x176>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e1c0      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669a:	4b3d      	ldr	r3, [pc, #244]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4939      	ldr	r1, [pc, #228]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ae:	e03a      	b.n	8006726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b8:	4b36      	ldr	r3, [pc, #216]	@ (8006794 <HAL_RCC_OscConfig+0x270>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066be:	f7fb f8a1 	bl	8001804 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fb f89d 	bl	8001804 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1a1      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4927      	ldr	r1, [pc, #156]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	e015      	b.n	8006726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fa:	4b26      	ldr	r3, [pc, #152]	@ (8006794 <HAL_RCC_OscConfig+0x270>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006700:	f7fb f880 	bl	8001804 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006708:	f7fb f87c 	bl	8001804 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e180      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671a:	4b1d      	ldr	r3, [pc, #116]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03a      	beq.n	80067a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d019      	beq.n	800676e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800673a:	4b17      	ldr	r3, [pc, #92]	@ (8006798 <HAL_RCC_OscConfig+0x274>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006740:	f7fb f860 	bl	8001804 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006748:	f7fb f85c 	bl	8001804 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e160      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675a:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <HAL_RCC_OscConfig+0x26c>)
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006766:	2001      	movs	r0, #1
 8006768:	f000 faba 	bl	8006ce0 <RCC_Delay>
 800676c:	e01c      	b.n	80067a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800676e:	4b0a      	ldr	r3, [pc, #40]	@ (8006798 <HAL_RCC_OscConfig+0x274>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006774:	f7fb f846 	bl	8001804 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800677a:	e00f      	b.n	800679c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677c:	f7fb f842 	bl	8001804 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d908      	bls.n	800679c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e146      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	42420000 	.word	0x42420000
 8006798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800679c:	4b92      	ldr	r3, [pc, #584]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e9      	bne.n	800677c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80a6 	beq.w	8006902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ba:	4b8b      	ldr	r3, [pc, #556]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10d      	bne.n	80067e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c6:	4b88      	ldr	r3, [pc, #544]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	4a87      	ldr	r2, [pc, #540]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d0:	61d3      	str	r3, [r2, #28]
 80067d2:	4b85      	ldr	r3, [pc, #532]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e2:	4b82      	ldr	r3, [pc, #520]	@ (80069ec <HAL_RCC_OscConfig+0x4c8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d118      	bne.n	8006820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ee:	4b7f      	ldr	r3, [pc, #508]	@ (80069ec <HAL_RCC_OscConfig+0x4c8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7e      	ldr	r2, [pc, #504]	@ (80069ec <HAL_RCC_OscConfig+0x4c8>)
 80067f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067fa:	f7fb f803 	bl	8001804 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006802:	f7fa ffff 	bl	8001804 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b64      	cmp	r3, #100	@ 0x64
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e103      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006814:	4b75      	ldr	r3, [pc, #468]	@ (80069ec <HAL_RCC_OscConfig+0x4c8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d106      	bne.n	8006836 <HAL_RCC_OscConfig+0x312>
 8006828:	4b6f      	ldr	r3, [pc, #444]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	4a6e      	ldr	r2, [pc, #440]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	6213      	str	r3, [r2, #32]
 8006834:	e02d      	b.n	8006892 <HAL_RCC_OscConfig+0x36e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <HAL_RCC_OscConfig+0x334>
 800683e:	4b6a      	ldr	r3, [pc, #424]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	4a69      	ldr	r2, [pc, #420]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	6213      	str	r3, [r2, #32]
 800684a:	4b67      	ldr	r3, [pc, #412]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4a66      	ldr	r2, [pc, #408]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006850:	f023 0304 	bic.w	r3, r3, #4
 8006854:	6213      	str	r3, [r2, #32]
 8006856:	e01c      	b.n	8006892 <HAL_RCC_OscConfig+0x36e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b05      	cmp	r3, #5
 800685e:	d10c      	bne.n	800687a <HAL_RCC_OscConfig+0x356>
 8006860:	4b61      	ldr	r3, [pc, #388]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	4a60      	ldr	r2, [pc, #384]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006866:	f043 0304 	orr.w	r3, r3, #4
 800686a:	6213      	str	r3, [r2, #32]
 800686c:	4b5e      	ldr	r3, [pc, #376]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	4a5d      	ldr	r2, [pc, #372]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	6213      	str	r3, [r2, #32]
 8006878:	e00b      	b.n	8006892 <HAL_RCC_OscConfig+0x36e>
 800687a:	4b5b      	ldr	r3, [pc, #364]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4a5a      	ldr	r2, [pc, #360]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	6213      	str	r3, [r2, #32]
 8006886:	4b58      	ldr	r3, [pc, #352]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	4a57      	ldr	r2, [pc, #348]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d015      	beq.n	80068c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689a:	f7fa ffb3 	bl	8001804 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a0:	e00a      	b.n	80068b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a2:	f7fa ffaf 	bl	8001804 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e0b1      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b8:	4b4b      	ldr	r3, [pc, #300]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0ee      	beq.n	80068a2 <HAL_RCC_OscConfig+0x37e>
 80068c4:	e014      	b.n	80068f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c6:	f7fa ff9d 	bl	8001804 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fa ff99 	bl	8001804 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e09b      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e4:	4b40      	ldr	r3, [pc, #256]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ee      	bne.n	80068ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d105      	bne.n	8006902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f6:	4b3c      	ldr	r3, [pc, #240]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4a3b      	ldr	r2, [pc, #236]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80068fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8087 	beq.w	8006a1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800690c:	4b36      	ldr	r3, [pc, #216]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	2b08      	cmp	r3, #8
 8006916:	d061      	beq.n	80069dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d146      	bne.n	80069ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006920:	4b33      	ldr	r3, [pc, #204]	@ (80069f0 <HAL_RCC_OscConfig+0x4cc>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006926:	f7fa ff6d 	bl	8001804 <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692e:	f7fa ff69 	bl	8001804 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e06d      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006940:	4b29      	ldr	r3, [pc, #164]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006954:	d108      	bne.n	8006968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006956:	4b24      	ldr	r3, [pc, #144]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	4921      	ldr	r1, [pc, #132]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006968:	4b1f      	ldr	r3, [pc, #124]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a19      	ldr	r1, [r3, #32]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	430b      	orrs	r3, r1
 800697a:	491b      	ldr	r1, [pc, #108]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006980:	4b1b      	ldr	r3, [pc, #108]	@ (80069f0 <HAL_RCC_OscConfig+0x4cc>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006986:	f7fa ff3d 	bl	8001804 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698e:	f7fa ff39 	bl	8001804 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e03d      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069a0:	4b11      	ldr	r3, [pc, #68]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x46a>
 80069ac:	e035      	b.n	8006a1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ae:	4b10      	ldr	r3, [pc, #64]	@ (80069f0 <HAL_RCC_OscConfig+0x4cc>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fa ff26 	bl	8001804 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fa ff22 	bl	8001804 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e026      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ce:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <HAL_RCC_OscConfig+0x4c4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x498>
 80069da:	e01e      	b.n	8006a1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d107      	bne.n	80069f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e019      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
 80069e8:	40021000 	.word	0x40021000
 80069ec:	40007000 	.word	0x40007000
 80069f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <HAL_RCC_OscConfig+0x500>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d001      	beq.n	8006a1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40021000 	.word	0x40021000

08006a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0d0      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d910      	bls.n	8006a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4a:	4b67      	ldr	r3, [pc, #412]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f023 0207 	bic.w	r2, r3, #7
 8006a52:	4965      	ldr	r1, [pc, #404]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5a:	4b63      	ldr	r3, [pc, #396]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0b8      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d020      	beq.n	8006aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a84:	4b59      	ldr	r3, [pc, #356]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4a58      	ldr	r2, [pc, #352]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a9c:	4b53      	ldr	r3, [pc, #332]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a52      	ldr	r2, [pc, #328]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006aa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aa8:	4b50      	ldr	r3, [pc, #320]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	494d      	ldr	r1, [pc, #308]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d040      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	4b47      	ldr	r3, [pc, #284]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d115      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e07f      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae6:	4b41      	ldr	r3, [pc, #260]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e073      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af6:	4b3d      	ldr	r3, [pc, #244]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06b      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b06:	4b39      	ldr	r3, [pc, #228]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f023 0203 	bic.w	r2, r3, #3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4936      	ldr	r1, [pc, #216]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b18:	f7fa fe74 	bl	8001804 <HAL_GetTick>
 8006b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b20:	f7fa fe70 	bl	8001804 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e053      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	4b2d      	ldr	r3, [pc, #180]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 020c 	and.w	r2, r3, #12
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1eb      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b27      	ldr	r3, [pc, #156]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d210      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b24      	ldr	r3, [pc, #144]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 0207 	bic.w	r2, r3, #7
 8006b5e:	4922      	ldr	r1, [pc, #136]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b20      	ldr	r3, [pc, #128]	@ (8006be8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e032      	b.n	8006bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b84:	4b19      	ldr	r3, [pc, #100]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4916      	ldr	r1, [pc, #88]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ba2:	4b12      	ldr	r3, [pc, #72]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	490e      	ldr	r1, [pc, #56]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bb6:	f000 f821 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	490a      	ldr	r1, [pc, #40]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc8:	5ccb      	ldrb	r3, [r1, r3]
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	4a09      	ldr	r2, [pc, #36]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8006bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa fdd2 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40022000 	.word	0x40022000
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	0800d768 	.word	0x0800d768
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	20000010 	.word	0x20000010

08006bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	2300      	movs	r3, #0
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c16:	4b1e      	ldr	r3, [pc, #120]	@ (8006c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d002      	beq.n	8006c2c <HAL_RCC_GetSysClockFreq+0x30>
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d003      	beq.n	8006c32 <HAL_RCC_GetSysClockFreq+0x36>
 8006c2a:	e027      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c2c:	4b19      	ldr	r3, [pc, #100]	@ (8006c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c2e:	613b      	str	r3, [r7, #16]
      break;
 8006c30:	e027      	b.n	8006c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	0c9b      	lsrs	r3, r3, #18
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	4a17      	ldr	r2, [pc, #92]	@ (8006c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c3c:	5cd3      	ldrb	r3, [r2, r3]
 8006c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c4a:	4b11      	ldr	r3, [pc, #68]	@ (8006c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	0c5b      	lsrs	r3, r3, #17
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	4a11      	ldr	r2, [pc, #68]	@ (8006c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c56:	5cd3      	ldrb	r3, [r2, r3]
 8006c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c5e:	fb03 f202 	mul.w	r2, r3, r2
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e004      	b.n	8006c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	613b      	str	r3, [r7, #16]
      break;
 8006c7a:	e002      	b.n	8006c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c7c:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8006c7e:	613b      	str	r3, [r7, #16]
      break;
 8006c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c82:	693b      	ldr	r3, [r7, #16]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000
 8006c94:	007a1200 	.word	0x007a1200
 8006c98:	0800d780 	.word	0x0800d780
 8006c9c:	0800d790 	.word	0x0800d790
 8006ca0:	003d0900 	.word	0x003d0900

08006ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	@ (8006cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006caa:	681b      	ldr	r3, [r3, #0]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cbc:	f7ff fff2 	bl	8006ca4 <HAL_RCC_GetHCLKFreq>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	4903      	ldr	r1, [pc, #12]	@ (8006cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cce:	5ccb      	ldrb	r3, [r1, r3]
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	0800d778 	.word	0x0800d778

08006ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <RCC_Delay+0x34>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a0a      	ldr	r2, [pc, #40]	@ (8006d18 <RCC_Delay+0x38>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cfc:	bf00      	nop
  }
  while (Delay --);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	60fa      	str	r2, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f9      	bne.n	8006cfc <RCC_Delay+0x1c>
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	2000000c 	.word	0x2000000c
 8006d18:	10624dd3 	.word	0x10624dd3

08006d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07d      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d48:	4b4c      	ldr	r3, [pc, #304]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	61d3      	str	r3, [r2, #28]
 8006d54:	4b49      	ldr	r3, [pc, #292]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	4b46      	ldr	r3, [pc, #280]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d118      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d70:	4b43      	ldr	r3, [pc, #268]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7c:	f7fa fd42 	bl	8001804 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d82:	e008      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d84:	f7fa fd3e 	bl	8001804 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	@ 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e06d      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d96:	4b3a      	ldr	r3, [pc, #232]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006da2:	4b36      	ldr	r3, [pc, #216]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006daa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02e      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d027      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dca:	4b2e      	ldr	r3, [pc, #184]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dd6:	4a29      	ldr	r2, [pc, #164]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d014      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7fa fd0d 	bl	8001804 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dec:	e00a      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dee:	f7fa fd09 	bl	8001804 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e036      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e04:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0ee      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e10:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4917      	ldr	r1, [pc, #92]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e28:	4b14      	ldr	r3, [pc, #80]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e40:	4b0e      	ldr	r3, [pc, #56]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	490b      	ldr	r1, [pc, #44]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5e:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4904      	ldr	r1, [pc, #16]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	40007000 	.word	0x40007000
 8006e84:	42420440 	.word	0x42420440

08006e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e041      	b.n	8006f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fa fb0c 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f000 fab2 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e041      	b.n	8006fbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f839 	bl	8006fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f000 fa63 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
	...

08006fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_TIM_PWM_Start+0x24>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e022      	b.n	8007042 <HAL_TIM_PWM_Start+0x6a>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d109      	bne.n	8007016 <HAL_TIM_PWM_Start+0x3e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	e015      	b.n	8007042 <HAL_TIM_PWM_Start+0x6a>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d109      	bne.n	8007030 <HAL_TIM_PWM_Start+0x58>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	e008      	b.n	8007042 <HAL_TIM_PWM_Start+0x6a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	bf14      	ite	ne
 800703c:	2301      	movne	r3, #1
 800703e:	2300      	moveq	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e05e      	b.n	8007108 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_TIM_PWM_Start+0x82>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007058:	e013      	b.n	8007082 <HAL_TIM_PWM_Start+0xaa>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Start+0x92>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007068:	e00b      	b.n	8007082 <HAL_TIM_PWM_Start+0xaa>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d104      	bne.n	800707a <HAL_TIM_PWM_Start+0xa2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007078:	e003      	b.n	8007082 <HAL_TIM_PWM_Start+0xaa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2201      	movs	r2, #1
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fc5c 	bl	8007948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <HAL_TIM_PWM_Start+0x138>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d107      	bne.n	80070aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a18      	ldr	r2, [pc, #96]	@ (8007110 <HAL_TIM_PWM_Start+0x138>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_TIM_PWM_Start+0xfa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070bc:	d009      	beq.n	80070d2 <HAL_TIM_PWM_Start+0xfa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a14      	ldr	r2, [pc, #80]	@ (8007114 <HAL_TIM_PWM_Start+0x13c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_TIM_PWM_Start+0xfa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a12      	ldr	r2, [pc, #72]	@ (8007118 <HAL_TIM_PWM_Start+0x140>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d111      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	d010      	beq.n	8007106 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f4:	e007      	b.n	8007106 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800

0800711c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007136:	2302      	movs	r3, #2
 8007138:	e0ae      	b.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b0c      	cmp	r3, #12
 8007146:	f200 809f 	bhi.w	8007288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007185 	.word	0x08007185
 8007154:	08007289 	.word	0x08007289
 8007158:	08007289 	.word	0x08007289
 800715c:	08007289 	.word	0x08007289
 8007160:	080071c5 	.word	0x080071c5
 8007164:	08007289 	.word	0x08007289
 8007168:	08007289 	.word	0x08007289
 800716c:	08007289 	.word	0x08007289
 8007170:	08007207 	.word	0x08007207
 8007174:	08007289 	.word	0x08007289
 8007178:	08007289 	.word	0x08007289
 800717c:	08007289 	.word	0x08007289
 8007180:	08007247 	.word	0x08007247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f9be 	bl	800750c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0208 	orr.w	r2, r2, #8
 800719e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6999      	ldr	r1, [r3, #24]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	619a      	str	r2, [r3, #24]
      break;
 80071c2:	e064      	b.n	800728e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fa04 	bl	80075d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6999      	ldr	r1, [r3, #24]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	021a      	lsls	r2, r3, #8
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	619a      	str	r2, [r3, #24]
      break;
 8007204:	e043      	b.n	800728e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fa4d 	bl	80076ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0208 	orr.w	r2, r2, #8
 8007220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0204 	bic.w	r2, r2, #4
 8007230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69d9      	ldr	r1, [r3, #28]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	61da      	str	r2, [r3, #28]
      break;
 8007244:	e023      	b.n	800728e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fa97 	bl	8007780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69da      	ldr	r2, [r3, #28]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69d9      	ldr	r1, [r3, #28]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	021a      	lsls	r2, r3, #8
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	61da      	str	r2, [r3, #28]
      break;
 8007286:	e002      	b.n	800728e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	75fb      	strb	r3, [r7, #23]
      break;
 800728c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_TIM_ConfigClockSource+0x1c>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e0b4      	b.n	8007426 <HAL_TIM_ConfigClockSource+0x186>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f4:	d03e      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0xd4>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fa:	f200 8087 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x16c>
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007302:	f000 8086 	beq.w	8007412 <HAL_TIM_ConfigClockSource+0x172>
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730a:	d87f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b70      	cmp	r3, #112	@ 0x70
 800730e:	d01a      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0xa6>
 8007310:	2b70      	cmp	r3, #112	@ 0x70
 8007312:	d87b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b60      	cmp	r3, #96	@ 0x60
 8007316:	d050      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x11a>
 8007318:	2b60      	cmp	r3, #96	@ 0x60
 800731a:	d877      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b50      	cmp	r3, #80	@ 0x50
 800731e:	d03c      	beq.n	800739a <HAL_TIM_ConfigClockSource+0xfa>
 8007320:	2b50      	cmp	r3, #80	@ 0x50
 8007322:	d873      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	d058      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x13a>
 8007328:	2b40      	cmp	r3, #64	@ 0x40
 800732a:	d86f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d064      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	2b30      	cmp	r3, #48	@ 0x30
 8007332:	d86b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 8007334:	2b20      	cmp	r3, #32
 8007336:	d060      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15a>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d867      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d05c      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15a>
 8007340:	2b10      	cmp	r3, #16
 8007342:	d05a      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15a>
 8007344:	e062      	b.n	800740c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007356:	f000 fad8 	bl	800790a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]
      break;
 8007372:	e04f      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007384:	f000 fac1 	bl	800790a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007396:	609a      	str	r2, [r3, #8]
      break;
 8007398:	e03c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 fa38 	bl	800781c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2150      	movs	r1, #80	@ 0x50
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fa8f 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e02c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 fa56 	bl	8007878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2160      	movs	r1, #96	@ 0x60
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fa7f 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e01c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	461a      	mov	r2, r3
 80073e8:	f000 fa18 	bl	800781c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2140      	movs	r1, #64	@ 0x40
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fa6f 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 80073f8:	e00c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 fa66 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 800740a:	e003      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e000      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a2f      	ldr	r2, [pc, #188]	@ (8007500 <TIM_Base_SetConfig+0xd0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00b      	beq.n	8007460 <TIM_Base_SetConfig+0x30>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744e:	d007      	beq.n	8007460 <TIM_Base_SetConfig+0x30>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a2c      	ldr	r2, [pc, #176]	@ (8007504 <TIM_Base_SetConfig+0xd4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_Base_SetConfig+0x30>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2b      	ldr	r2, [pc, #172]	@ (8007508 <TIM_Base_SetConfig+0xd8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a22      	ldr	r2, [pc, #136]	@ (8007500 <TIM_Base_SetConfig+0xd0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00b      	beq.n	8007492 <TIM_Base_SetConfig+0x62>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007480:	d007      	beq.n	8007492 <TIM_Base_SetConfig+0x62>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <TIM_Base_SetConfig+0xd4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_Base_SetConfig+0x62>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1e      	ldr	r2, [pc, #120]	@ (8007508 <TIM_Base_SetConfig+0xd8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d108      	bne.n	80074a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007500 <TIM_Base_SetConfig+0xd0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d103      	bne.n	80074d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	691a      	ldr	r2, [r3, #16]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f023 0201 	bic.w	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	611a      	str	r2, [r3, #16]
  }
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800

0800750c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	f023 0201 	bic.w	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 0302 	bic.w	r3, r3, #2
 8007554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <TIM_OC1_SetConfig+0xc8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d10c      	bne.n	8007582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0308 	bic.w	r3, r3, #8
 800756e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a13      	ldr	r2, [pc, #76]	@ (80075d4 <TIM_OC1_SetConfig+0xc8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d111      	bne.n	80075ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	621a      	str	r2, [r3, #32]
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40012c00 	.word	0x40012c00

080075d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	f023 0210 	bic.w	r2, r3, #16
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0320 	bic.w	r3, r3, #32
 8007622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <TIM_OC2_SetConfig+0xd0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10d      	bne.n	8007654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a14      	ldr	r2, [pc, #80]	@ (80076a8 <TIM_OC2_SetConfig+0xd0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d113      	bne.n	8007684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr
 80076a8:	40012c00 	.word	0x40012c00

080076ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1d      	ldr	r2, [pc, #116]	@ (800777c <TIM_OC3_SetConfig+0xd0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d10d      	bne.n	8007726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a14      	ldr	r2, [pc, #80]	@ (800777c <TIM_OC3_SetConfig+0xd0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d113      	bne.n	8007756 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800773c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4313      	orrs	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	621a      	str	r2, [r3, #32]
}
 8007770:	bf00      	nop
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00

08007780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	031b      	lsls	r3, r3, #12
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0f      	ldr	r2, [pc, #60]	@ (8007818 <TIM_OC4_SetConfig+0x98>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d109      	bne.n	80077f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	019b      	lsls	r3, r3, #6
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	40012c00 	.word	0x40012c00

0800781c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 030a 	bic.w	r3, r3, #10
 8007858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr

08007878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0210 	bic.w	r2, r3, #16
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	031b      	lsls	r3, r3, #12
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	621a      	str	r2, [r3, #32]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f043 0307 	orr.w	r3, r3, #7
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	609a      	str	r2, [r3, #8]
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800790a:	b480      	push	{r7}
 800790c:	b087      	sub	sp, #28
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007924:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	021a      	lsls	r2, r3, #8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	431a      	orrs	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4313      	orrs	r3, r2
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 031f 	and.w	r3, r3, #31
 800795a:	2201      	movs	r2, #1
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a1a      	ldr	r2, [r3, #32]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	43db      	mvns	r3, r3
 800796a:	401a      	ands	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1a      	ldr	r2, [r3, #32]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	431a      	orrs	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e046      	b.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a16      	ldr	r2, [pc, #88]	@ (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00e      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f4:	d009      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a12      	ldr	r2, [pc, #72]	@ (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d004      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a10      	ldr	r2, [pc, #64]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d10c      	bne.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800

08007a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e03d      	b.n	8007ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr

08007aee <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	4638      	mov	r0, r7
 8007af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b18:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007b1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b3c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007b40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4013      	ands	r3, r2
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	4638      	mov	r0, r7
 8007b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
	...

08007bbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b09d      	sub	sp, #116	@ 0x74
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d81f      	bhi.n	8007c2e <USB_ActivateEndpoint+0x72>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <USB_ActivateEndpoint+0x38>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c37 	.word	0x08007c37
 8007c00:	08007c13 	.word	0x08007c13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007c04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007c10:	e012      	b.n	8007c38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007c12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c16:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007c1e:	e00b      	b.n	8007c38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007c20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007c2c:	e004      	b.n	8007c38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007c34:	e000      	b.n	8007c38 <USB_ActivateEndpoint+0x7c>
      break;
 8007c36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	7b1b      	ldrb	r3, [r3, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f040 8178 	bne.w	8007f98 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8084 	beq.w	8007dba <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	011a      	lsls	r2, r3, #4
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	88db      	ldrh	r3, [r3, #6]
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	827b      	strh	r3, [r7, #18]
 8007cf4:	8a7b      	ldrh	r3, [r7, #18]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d01b      	beq.n	8007d36 <USB_ActivateEndpoint+0x17a>
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d14:	823b      	strh	r3, [r7, #16]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	441a      	add	r2, r3
 8007d20:	8a3b      	ldrh	r3, [r7, #16]
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	78db      	ldrb	r3, [r3, #3]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d020      	beq.n	8007d80 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d54:	81bb      	strh	r3, [r7, #12]
 8007d56:	89bb      	ldrh	r3, [r7, #12]
 8007d58:	f083 0320 	eor.w	r3, r3, #32
 8007d5c:	81bb      	strh	r3, [r7, #12]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	89bb      	ldrh	r3, [r7, #12]
 8007d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8013      	strh	r3, [r2, #0]
 8007d7e:	e2d5      	b.n	800832c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d96:	81fb      	strh	r3, [r7, #14]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	89fb      	ldrh	r3, [r7, #14]
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	8013      	strh	r3, [r2, #0]
 8007db8:	e2b8      	b.n	800832c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	4413      	add	r3, r2
 8007dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	011a      	lsls	r2, r3, #4
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	4413      	add	r3, r2
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	011a      	lsls	r2, r3, #4
 8007e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e28:	d91d      	bls.n	8007e66 <USB_ActivateEndpoint+0x2aa>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	095b      	lsrs	r3, r3, #5
 8007e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <USB_ActivateEndpoint+0x288>
 8007e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e40:	3b01      	subs	r3, #1
 8007e42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	e026      	b.n	8007eb4 <USB_ActivateEndpoint+0x2f8>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <USB_ActivateEndpoint+0x2c8>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	801a      	strh	r2, [r3, #0]
 8007e82:	e017      	b.n	8007eb4 <USB_ActivateEndpoint+0x2f8>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <USB_ActivateEndpoint+0x2e2>
 8007e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	029b      	lsls	r3, r3, #10
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007ec2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01b      	beq.n	8007f04 <USB_ActivateEndpoint+0x348>
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee2:	843b      	strh	r3, [r7, #32]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	8c3b      	ldrh	r3, [r7, #32]
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d124      	bne.n	8007f56 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	83bb      	strh	r3, [r7, #28]
 8007f24:	8bbb      	ldrh	r3, [r7, #28]
 8007f26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f2a:	83bb      	strh	r3, [r7, #28]
 8007f2c:	8bbb      	ldrh	r3, [r7, #28]
 8007f2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f32:	83bb      	strh	r3, [r7, #28]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	441a      	add	r2, r3
 8007f3e:	8bbb      	ldrh	r3, [r7, #28]
 8007f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	8013      	strh	r3, [r2, #0]
 8007f54:	e1ea      	b.n	800832c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6c:	83fb      	strh	r3, [r7, #30]
 8007f6e:	8bfb      	ldrh	r3, [r7, #30]
 8007f70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f74:	83fb      	strh	r3, [r7, #30]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
 8007f96:	e1c9      	b.n	800832c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	78db      	ldrb	r3, [r3, #3]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d11e      	bne.n	8007fde <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]
 8007fdc:	e01d      	b.n	800801a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800802a:	4413      	add	r3, r2
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	011a      	lsls	r2, r3, #4
 8008034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008036:	4413      	add	r3, r2
 8008038:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800803c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	891b      	ldrh	r3, [r3, #8]
 8008042:	085b      	lsrs	r3, r3, #1
 8008044:	b29b      	uxth	r3, r3
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	657b      	str	r3, [r7, #84]	@ 0x54
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008058:	b29b      	uxth	r3, r3
 800805a:	461a      	mov	r2, r3
 800805c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800805e:	4413      	add	r3, r2
 8008060:	657b      	str	r3, [r7, #84]	@ 0x54
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	011a      	lsls	r2, r3, #4
 8008068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800806a:	4413      	add	r3, r2
 800806c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008070:	653b      	str	r3, [r7, #80]	@ 0x50
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	895b      	ldrh	r3, [r3, #10]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	b29b      	uxth	r3, r3
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008080:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 8093 	bne.w	80081b2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800809c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80080a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <USB_ActivateEndpoint+0x524>
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80080cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080dc:	b29b      	uxth	r3, r3
 80080de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80080ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80080f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01b      	beq.n	8008130 <USB_ActivateEndpoint+0x574>
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800810a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	441a      	add	r2, r3
 800811a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800811c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008128:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800812c:	b29b      	uxth	r3, r3
 800812e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008148:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800814a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800814e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008150:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008152:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008156:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800818a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800818e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
 80081b0:	e0bc      	b.n	800832c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80081c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80081c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01d      	beq.n	800820a <USB_ActivateEndpoint+0x64e>
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800821a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800821e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01d      	beq.n	8008262 <USB_ActivateEndpoint+0x6a6>
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	441a      	add	r2, r3
 800824a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800824e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800825a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800825e:	b29b      	uxth	r3, r3
 8008260:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d024      	beq.n	80082b4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008280:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008284:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008288:	f083 0320 	eor.w	r3, r3, #32
 800828c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800829e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]
 80082b2:	e01d      	b.n	80082f0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	441a      	add	r2, r3
 80082d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008306:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800832c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008330:	4618      	mov	r0, r3
 8008332:	3774      	adds	r7, #116	@ 0x74
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800833c:	b480      	push	{r7}
 800833e:	b08d      	sub	sp, #52	@ 0x34
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	7b1b      	ldrb	r3, [r3, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 808e 	bne.w	800846c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d044      	beq.n	80083e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	81bb      	strh	r3, [r7, #12]
 8008366:	89bb      	ldrh	r3, [r7, #12]
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01b      	beq.n	80083a8 <USB_DeactivateEndpoint+0x6c>
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	817b      	strh	r3, [r7, #10]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	897b      	ldrh	r3, [r7, #10]
 8008394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800839c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083be:	813b      	strh	r3, [r7, #8]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	893b      	ldrh	r3, [r7, #8]
 80083cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8013      	strh	r3, [r2, #0]
 80083e0:	e192      	b.n	8008708 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	827b      	strh	r3, [r7, #18]
 80083f0:	8a7b      	ldrh	r3, [r7, #18]
 80083f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01b      	beq.n	8008432 <USB_DeactivateEndpoint+0xf6>
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008410:	823b      	strh	r3, [r7, #16]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	441a      	add	r2, r3
 800841c:	8a3b      	ldrh	r3, [r7, #16]
 800841e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800842a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842e:	b29b      	uxth	r3, r3
 8008430:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008448:	81fb      	strh	r3, [r7, #14]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	441a      	add	r2, r3
 8008454:	89fb      	ldrh	r3, [r7, #14]
 8008456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800845a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800845e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008466:	b29b      	uxth	r3, r3
 8008468:	8013      	strh	r3, [r2, #0]
 800846a:	e14d      	b.n	8008708 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 80a5 	bne.w	80085c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	843b      	strh	r3, [r7, #32]
 8008484:	8c3b      	ldrh	r3, [r7, #32]
 8008486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01b      	beq.n	80084c6 <USB_DeactivateEndpoint+0x18a>
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a4:	83fb      	strh	r3, [r7, #30]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	8bfb      	ldrh	r3, [r7, #30]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	83bb      	strh	r3, [r7, #28]
 80084d4:	8bbb      	ldrh	r3, [r7, #28]
 80084d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01b      	beq.n	8008516 <USB_DeactivateEndpoint+0x1da>
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f4:	837b      	strh	r3, [r7, #26]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	441a      	add	r2, r3
 8008500:	8b7b      	ldrh	r3, [r7, #26]
 8008502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800850a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800850e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008512:	b29b      	uxth	r3, r3
 8008514:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852c:	833b      	strh	r3, [r7, #24]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	8b3b      	ldrh	r3, [r7, #24]
 800853a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800853e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008546:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800854a:	b29b      	uxth	r3, r3
 800854c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008564:	82fb      	strh	r3, [r7, #22]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	441a      	add	r2, r3
 8008570:	8afb      	ldrh	r3, [r7, #22]
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800857e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800859c:	82bb      	strh	r3, [r7, #20]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	441a      	add	r2, r3
 80085a8:	8abb      	ldrh	r3, [r7, #20]
 80085aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	8013      	strh	r3, [r2, #0]
 80085be:	e0a3      	b.n	8008708 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80085ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80085d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01b      	beq.n	8008610 <USB_DeactivateEndpoint+0x2d4>
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	441a      	add	r2, r3
 80085fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80085fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800860c:	b29b      	uxth	r3, r3
 800860e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800861e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <USB_DeactivateEndpoint+0x324>
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800863a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800863e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	441a      	add	r2, r3
 800864a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800864c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008658:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800865c:	b29b      	uxth	r3, r3
 800865e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008676:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	441a      	add	r2, r3
 8008682:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	441a      	add	r2, r3
 80086ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008704:	b29b      	uxth	r3, r3
 8008706:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3734      	adds	r7, #52	@ 0x34
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b0c2      	sub	sp, #264	@ 0x108
 8008718:	af00      	add	r7, sp, #0
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008722:	6018      	str	r0, [r3, #0]
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	f040 86b7 	bne.w	80094ae <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699a      	ldr	r2, [r3, #24]
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	429a      	cmp	r2, r3
 800875a:	d908      	bls.n	800876e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800875c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800876c:	e007      	b.n	800877e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800877e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	7b1b      	ldrb	r3, [r3, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d13a      	bne.n	8008804 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6959      	ldr	r1, [r3, #20]
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	88da      	ldrh	r2, [r3, #6]
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80087b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80087b4:	6800      	ldr	r0, [r0, #0]
 80087b6:	f001 fc9c 	bl	800a0f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4413      	add	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	011a      	lsls	r2, r3, #4
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	f000 be1f 	b.w	8009442 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	2b02      	cmp	r3, #2
 8008812:	f040 8462 	bne.w	80090da <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	429a      	cmp	r2, r3
 8008830:	f240 83df 	bls.w	8008ff2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800885a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800885e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	441a      	add	r2, r3
 8008878:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800887c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008884:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888c:	b29b      	uxth	r3, r3
 800888e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6a1a      	ldr	r2, [r3, #32]
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	1ad2      	subs	r2, r2, r3
 80088a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 81c7 	beq.w	8008c64 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d177      	bne.n	80089e2 <USB_EPStartXfer+0x2ce>
 80088f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800890c:	b29b      	uxth	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008912:	4413      	add	r3, r2
 8008914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	011a      	lsls	r2, r3, #4
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	4413      	add	r3, r2
 8008928:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008938:	b29a      	uxth	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008942:	2b3e      	cmp	r3, #62	@ 0x3e
 8008944:	d921      	bls.n	800898a <USB_EPStartXfer+0x276>
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <USB_EPStartXfer+0x252>
 800895c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008960:	3b01      	subs	r3, #1
 8008962:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008970:	b29b      	uxth	r3, r3
 8008972:	029b      	lsls	r3, r3, #10
 8008974:	b29b      	uxth	r3, r3
 8008976:	4313      	orrs	r3, r2
 8008978:	b29b      	uxth	r3, r3
 800897a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008982:	b29a      	uxth	r2, r3
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e050      	b.n	8008a2c <USB_EPStartXfer+0x318>
 800898a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <USB_EPStartXfer+0x294>
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	e041      	b.n	8008a2c <USB_EPStartXfer+0x318>
 80089a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80089b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <USB_EPStartXfer+0x2b4>
 80089be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80089c2:	3301      	adds	r3, #1
 80089c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4313      	orrs	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	e024      	b.n	8008a2c <USB_EPStartXfer+0x318>
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d11c      	bne.n	8008a2c <USB_EPStartXfer+0x318>
 80089f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	4413      	add	r3, r2
 8008a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	011a      	lsls	r2, r3, #4
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	895b      	ldrh	r3, [r3, #10]
 8008a38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6959      	ldr	r1, [r3, #20]
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	f001 fb49 	bl	800a0f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695a      	ldr	r2, [r3, #20]
 8008a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a70:	441a      	add	r2, r3
 8008a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d90f      	bls.n	8008aba <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6a1a      	ldr	r2, [r3, #32]
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aaa:	1ad2      	subs	r2, r2, r3
 8008aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	621a      	str	r2, [r3, #32]
 8008ab8:	e00e      	b.n	8008ad8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d177      	bne.n	8008bd8 <USB_EPStartXfer+0x4c4>
 8008ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	4413      	add	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	011a      	lsls	r2, r3, #4
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b3a:	d921      	bls.n	8008b80 <USB_EPStartXfer+0x46c>
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <USB_EPStartXfer+0x448>
 8008b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b56:	3b01      	subs	r3, #1
 8008b58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	029b      	lsls	r3, r3, #10
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e056      	b.n	8008c2e <USB_EPStartXfer+0x51a>
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <USB_EPStartXfer+0x48a>
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	e047      	b.n	8008c2e <USB_EPStartXfer+0x51a>
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <USB_EPStartXfer+0x4aa>
 8008bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	029b      	lsls	r3, r3, #10
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e02a      	b.n	8008c2e <USB_EPStartXfer+0x51a>
 8008bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d122      	bne.n	8008c2e <USB_EPStartXfer+0x51a>
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	623b      	str	r3, [r7, #32]
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	4413      	add	r3, r2
 8008c0a:	623b      	str	r3, [r7, #32]
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	011a      	lsls	r2, r3, #4
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c22:	61fb      	str	r3, [r7, #28]
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	891b      	ldrh	r3, [r3, #8]
 8008c3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6959      	ldr	r1, [r3, #20]
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f001 fa48 	bl	800a0f2 <USB_WritePMA>
 8008c62:	e3ee      	b.n	8009442 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d177      	bne.n	8008d64 <USB_EPStartXfer+0x650>
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c94:	4413      	add	r3, r2
 8008c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	011a      	lsls	r2, r3, #4
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cbe:	801a      	strh	r2, [r3, #0]
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cc6:	d921      	bls.n	8008d0c <USB_EPStartXfer+0x5f8>
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd6:	f003 031f 	and.w	r3, r3, #31
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <USB_EPStartXfer+0x5d4>
 8008cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	029b      	lsls	r3, r3, #10
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	e056      	b.n	8008dba <USB_EPStartXfer+0x6a6>
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <USB_EPStartXfer+0x616>
 8008d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	e047      	b.n	8008dba <USB_EPStartXfer+0x6a6>
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <USB_EPStartXfer+0x636>
 8008d40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d44:	3301      	adds	r3, #1
 8008d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	029b      	lsls	r3, r3, #10
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	e02a      	b.n	8008dba <USB_EPStartXfer+0x6a6>
 8008d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d122      	bne.n	8008dba <USB_EPStartXfer+0x6a6>
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d94:	4413      	add	r3, r2
 8008d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	011a      	lsls	r2, r3, #4
 8008da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	891b      	ldrh	r3, [r3, #8]
 8008dc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6959      	ldr	r1, [r3, #20]
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008de0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008de4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008de8:	6800      	ldr	r0, [r0, #0]
 8008dea:	f001 f982 	bl	800a0f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695a      	ldr	r2, [r3, #20]
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfe:	441a      	add	r2, r3
 8008e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a1a      	ldr	r2, [r3, #32]
 8008e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d90f      	bls.n	8008e48 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6a1a      	ldr	r2, [r3, #32]
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	621a      	str	r2, [r3, #32]
 8008e46:	e00e      	b.n	8008e66 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d177      	bne.n	8008f72 <USB_EPStartXfer+0x85e>
 8008e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	4413      	add	r3, r2
 8008ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	011a      	lsls	r2, r3, #4
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ed4:	d921      	bls.n	8008f1a <USB_EPStartXfer+0x806>
 8008ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <USB_EPStartXfer+0x7e2>
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	029b      	lsls	r3, r3, #10
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	4313      	orrs	r3, r2
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	e050      	b.n	8008fbc <USB_EPStartXfer+0x8a8>
 8008f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <USB_EPStartXfer+0x824>
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e041      	b.n	8008fbc <USB_EPStartXfer+0x8a8>
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <USB_EPStartXfer+0x844>
 8008f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f52:	3301      	adds	r3, #1
 8008f54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	029b      	lsls	r3, r3, #10
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e024      	b.n	8008fbc <USB_EPStartXfer+0x8a8>
 8008f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d11c      	bne.n	8008fbc <USB_EPStartXfer+0x8a8>
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f96:	4413      	add	r3, r2
 8008f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	011a      	lsls	r2, r3, #4
 8008fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008faa:	4413      	add	r3, r2
 8008fac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	895b      	ldrh	r3, [r3, #10]
 8008fc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6959      	ldr	r1, [r3, #20]
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008fe2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008fe6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	f001 f881 	bl	800a0f2 <USB_WritePMA>
 8008ff0:	e227      	b.n	8009442 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009028:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800902c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800904a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800904e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800905a:	b29b      	uxth	r3, r3
 800905c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800905e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800906a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009078:	b29b      	uxth	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907e:	4413      	add	r3, r2
 8009080:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	011a      	lsls	r2, r3, #4
 8009090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009092:	4413      	add	r3, r2
 8009094:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909e:	b29a      	uxth	r2, r3
 80090a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	891b      	ldrh	r3, [r3, #8]
 80090b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6959      	ldr	r1, [r3, #20]
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80090ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80090d2:	6800      	ldr	r0, [r0, #0]
 80090d4:	f001 f80d 	bl	800a0f2 <USB_WritePMA>
 80090d8:	e1b3      	b.n	8009442 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80090da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6a1a      	ldr	r2, [r3, #32]
 80090e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80c6 	beq.w	80092ac <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	673b      	str	r3, [r7, #112]	@ 0x70
 800912c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d177      	bne.n	800922c <USB_EPStartXfer+0xb18>
 800913c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009156:	b29b      	uxth	r3, r3
 8009158:	461a      	mov	r2, r3
 800915a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800915c:	4413      	add	r3, r2
 800915e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	011a      	lsls	r2, r3, #4
 800916e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009170:	4413      	add	r3, r2
 8009172:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009176:	667b      	str	r3, [r7, #100]	@ 0x64
 8009178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009182:	b29a      	uxth	r2, r3
 8009184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918c:	2b3e      	cmp	r3, #62	@ 0x3e
 800918e:	d921      	bls.n	80091d4 <USB_EPStartXfer+0xac0>
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	095b      	lsrs	r3, r3, #5
 8009196:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800919a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d104      	bne.n	80091b0 <USB_EPStartXfer+0xa9c>
 80091a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091aa:	3b01      	subs	r3, #1
 80091ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	029b      	lsls	r3, r3, #10
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4313      	orrs	r3, r2
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	e050      	b.n	8009276 <USB_EPStartXfer+0xb62>
 80091d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <USB_EPStartXfer+0xade>
 80091dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e041      	b.n	8009276 <USB_EPStartXfer+0xb62>
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <USB_EPStartXfer+0xafe>
 8009208:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800920c:	3301      	adds	r3, #1
 800920e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29a      	uxth	r2, r3
 8009218:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800921c:	b29b      	uxth	r3, r3
 800921e:	029b      	lsls	r3, r3, #10
 8009220:	b29b      	uxth	r3, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	b29a      	uxth	r2, r3
 8009226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	e024      	b.n	8009276 <USB_EPStartXfer+0xb62>
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d11c      	bne.n	8009276 <USB_EPStartXfer+0xb62>
 800923c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009250:	4413      	add	r3, r2
 8009252:	673b      	str	r3, [r7, #112]	@ 0x70
 8009254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	011a      	lsls	r2, r3, #4
 8009262:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009264:	4413      	add	r3, r2
 8009266:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800926a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009270:	b29a      	uxth	r2, r3
 8009272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009274:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	895b      	ldrh	r3, [r3, #10]
 8009282:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6959      	ldr	r1, [r3, #20]
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009296:	b29b      	uxth	r3, r3
 8009298:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800929c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80092a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092a4:	6800      	ldr	r0, [r0, #0]
 80092a6:	f000 ff24 	bl	800a0f2 <USB_WritePMA>
 80092aa:	e0ca      	b.n	8009442 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80092ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d177      	bne.n	80093ac <USB_EPStartXfer+0xc98>
 80092bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	461a      	mov	r2, r3
 80092da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092dc:	4413      	add	r3, r2
 80092de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	011a      	lsls	r2, r3, #4
 80092ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092f0:	4413      	add	r3, r2
 80092f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80092f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009302:	b29a      	uxth	r2, r3
 8009304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009306:	801a      	strh	r2, [r3, #0]
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930c:	2b3e      	cmp	r3, #62	@ 0x3e
 800930e:	d921      	bls.n	8009354 <USB_EPStartXfer+0xc40>
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <USB_EPStartXfer+0xc1c>
 8009326:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800932a:	3b01      	subs	r3, #1
 800932c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29a      	uxth	r2, r3
 8009336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29b      	uxth	r3, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	b29b      	uxth	r3, r3
 8009344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934c:	b29a      	uxth	r2, r3
 800934e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e05c      	b.n	800940e <USB_EPStartXfer+0xcfa>
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <USB_EPStartXfer+0xc5e>
 800935c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936a:	b29a      	uxth	r2, r3
 800936c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800936e:	801a      	strh	r2, [r3, #0]
 8009370:	e04d      	b.n	800940e <USB_EPStartXfer+0xcfa>
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800937c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <USB_EPStartXfer+0xc7e>
 8009388:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800938c:	3301      	adds	r3, #1
 800938e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	b29a      	uxth	r2, r3
 8009398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800939c:	b29b      	uxth	r3, r3
 800939e:	029b      	lsls	r3, r3, #10
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	e030      	b.n	800940e <USB_EPStartXfer+0xcfa>
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d128      	bne.n	800940e <USB_EPStartXfer+0xcfa>
 80093bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093d8:	b29b      	uxth	r3, r3
 80093da:	461a      	mov	r2, r3
 80093dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093e0:	4413      	add	r3, r2
 80093e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	011a      	lsls	r2, r3, #4
 80093f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093f8:	4413      	add	r3, r2
 80093fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80093fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009406:	b29a      	uxth	r2, r3
 8009408:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800940c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800940e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	891b      	ldrh	r3, [r3, #8]
 800941a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800941e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6959      	ldr	r1, [r3, #20]
 800942a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800942e:	b29b      	uxth	r3, r3
 8009430:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009434:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009438:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800943c:	6800      	ldr	r0, [r0, #0]
 800943e:	f000 fe58 	bl	800a0f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009468:	817b      	strh	r3, [r7, #10]
 800946a:	897b      	ldrh	r3, [r7, #10]
 800946c:	f083 0310 	eor.w	r3, r3, #16
 8009470:	817b      	strh	r3, [r7, #10]
 8009472:	897b      	ldrh	r3, [r7, #10]
 8009474:	f083 0320 	eor.w	r3, r3, #32
 8009478:	817b      	strh	r3, [r7, #10]
 800947a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	441a      	add	r2, r3
 8009494:	897b      	ldrh	r3, [r7, #10]
 8009496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800949a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	8013      	strh	r3, [r2, #0]
 80094aa:	f000 bcde 	b.w	8009e6a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80094ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	7b1b      	ldrb	r3, [r3, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 80bb 	bne.w	8009636 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80094c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699a      	ldr	r2, [r3, #24]
 80094cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d917      	bls.n	800950c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80094dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80094ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	1ad2      	subs	r2, r2, r3
 80094fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	619a      	str	r2, [r3, #24]
 800950a:	e00e      	b.n	800952a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800950c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800951c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2200      	movs	r2, #0
 8009528:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800952a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009546:	b29b      	uxth	r3, r3
 8009548:	461a      	mov	r2, r3
 800954a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800954e:	4413      	add	r3, r2
 8009550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	011a      	lsls	r2, r3, #4
 8009562:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009566:	4413      	add	r3, r2
 8009568:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800956c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957c:	b29a      	uxth	r2, r3
 800957e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009588:	2b3e      	cmp	r3, #62	@ 0x3e
 800958a:	d924      	bls.n	80095d6 <USB_EPStartXfer+0xec2>
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <USB_EPStartXfer+0xe98>
 80095a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80095a6:	3b01      	subs	r3, #1
 80095a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	029b      	lsls	r3, r3, #10
 80095bc:	b29b      	uxth	r3, r3
 80095be:	4313      	orrs	r3, r2
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095d0:	801a      	strh	r2, [r3, #0]
 80095d2:	f000 bc10 	b.w	8009df6 <USB_EPStartXfer+0x16e2>
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10c      	bne.n	80095f8 <USB_EPStartXfer+0xee4>
 80095de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095f4:	801a      	strh	r2, [r3, #0]
 80095f6:	e3fe      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	085b      	lsrs	r3, r3, #1
 80095fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <USB_EPStartXfer+0xf04>
 800960e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009612:	3301      	adds	r3, #1
 8009614:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29a      	uxth	r2, r3
 8009620:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009624:	b29b      	uxth	r3, r3
 8009626:	029b      	lsls	r3, r3, #10
 8009628:	b29b      	uxth	r3, r3
 800962a:	4313      	orrs	r3, r2
 800962c:	b29a      	uxth	r2, r3
 800962e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009632:	801a      	strh	r2, [r3, #0]
 8009634:	e3df      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	78db      	ldrb	r3, [r3, #3]
 8009642:	2b02      	cmp	r3, #2
 8009644:	f040 8218 	bne.w	8009a78 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f040 809d 	bne.w	8009794 <USB_EPStartXfer+0x1080>
 800965a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009676:	b29b      	uxth	r3, r3
 8009678:	461a      	mov	r2, r3
 800967a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800967e:	4413      	add	r3, r2
 8009680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	011a      	lsls	r2, r3, #4
 8009692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009696:	4413      	add	r3, r2
 8009698:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800969c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096b2:	801a      	strh	r2, [r3, #0]
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c2:	d92b      	bls.n	800971c <USB_EPStartXfer+0x1008>
 80096c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <USB_EPStartXfer+0xfe0>
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ee:	3b01      	subs	r3, #1
 80096f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	b29b      	uxth	r3, r3
 8009702:	029b      	lsls	r3, r3, #10
 8009704:	b29b      	uxth	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b29b      	uxth	r3, r3
 800970a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800970e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009712:	b29a      	uxth	r2, r3
 8009714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009718:	801a      	strh	r2, [r3, #0]
 800971a:	e070      	b.n	80097fe <USB_EPStartXfer+0x10ea>
 800971c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10c      	bne.n	8009746 <USB_EPStartXfer+0x1032>
 800972c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e05b      	b.n	80097fe <USB_EPStartXfer+0x10ea>
 8009746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	085b      	lsrs	r3, r3, #1
 8009754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <USB_EPStartXfer+0x1062>
 800976c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009770:	3301      	adds	r3, #1
 8009772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009782:	b29b      	uxth	r3, r3
 8009784:	029b      	lsls	r3, r3, #10
 8009786:	b29b      	uxth	r3, r3
 8009788:	4313      	orrs	r3, r2
 800978a:	b29a      	uxth	r2, r3
 800978c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	e034      	b.n	80097fe <USB_EPStartXfer+0x10ea>
 8009794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d12c      	bne.n	80097fe <USB_EPStartXfer+0x10ea>
 80097a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097c8:	4413      	add	r3, r2
 80097ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	011a      	lsls	r2, r3, #4
 80097dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097e0:	4413      	add	r3, r2
 80097e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800980c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 809d 	bne.w	8009958 <USB_EPStartXfer+0x1244>
 800981e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800982c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009842:	4413      	add	r3, r2
 8009844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	011a      	lsls	r2, r3, #4
 8009856:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800985a:	4413      	add	r3, r2
 800985c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009870:	b29a      	uxth	r2, r3
 8009872:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009876:	801a      	strh	r2, [r3, #0]
 8009878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b3e      	cmp	r3, #62	@ 0x3e
 8009886:	d92b      	bls.n	80098e0 <USB_EPStartXfer+0x11cc>
 8009888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800988c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	095b      	lsrs	r3, r3, #5
 8009896:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800989a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <USB_EPStartXfer+0x11a4>
 80098ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b2:	3b01      	subs	r3, #1
 80098b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	029b      	lsls	r3, r3, #10
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	4313      	orrs	r3, r2
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098dc:	801a      	strh	r2, [r3, #0]
 80098de:	e069      	b.n	80099b4 <USB_EPStartXfer+0x12a0>
 80098e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10c      	bne.n	800990a <USB_EPStartXfer+0x11f6>
 80098f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009900:	b29a      	uxth	r2, r3
 8009902:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e054      	b.n	80099b4 <USB_EPStartXfer+0x12a0>
 800990a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <USB_EPStartXfer+0x1226>
 8009930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009934:	3301      	adds	r3, #1
 8009936:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800993a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009946:	b29b      	uxth	r3, r3
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	b29b      	uxth	r3, r3
 800994c:	4313      	orrs	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	e02d      	b.n	80099b4 <USB_EPStartXfer+0x12a0>
 8009958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d125      	bne.n	80099b4 <USB_EPStartXfer+0x12a0>
 8009968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009976:	b29b      	uxth	r3, r3
 8009978:	461a      	mov	r2, r3
 800997a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800997e:	4413      	add	r3, r2
 8009980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	011a      	lsls	r2, r3, #4
 8009992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009996:	4413      	add	r3, r2
 8009998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800999c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80099b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 8218 	beq.w	8009df6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80099c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80099ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <USB_EPStartXfer+0x12ea>
 80099f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80099f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10d      	bne.n	8009a1a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f040 81f5 	bne.w	8009df6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 81ee 	bne.w	8009df6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a40:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	441a      	add	r2, r3
 8009a5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	8013      	strh	r3, [r2, #0]
 8009a76:	e1be      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	f040 81b4 	bne.w	8009df2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d917      	bls.n	8009ad6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	619a      	str	r2, [r3, #24]
 8009ad4:	e00e      	b.n	8009af4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2200      	movs	r2, #0
 8009af2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 8085 	bne.w	8009c10 <USB_EPStartXfer+0x14fc>
 8009b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	011a      	lsls	r2, r3, #4
 8009b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009b42:	4413      	add	r3, r2
 8009b44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b66:	d923      	bls.n	8009bb0 <USB_EPStartXfer+0x149c>
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6c:	095b      	lsrs	r3, r3, #5
 8009b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d104      	bne.n	8009b88 <USB_EPStartXfer+0x1474>
 8009b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b82:	3b01      	subs	r3, #1
 8009b84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	029b      	lsls	r3, r3, #10
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bac:	801a      	strh	r2, [r3, #0]
 8009bae:	e060      	b.n	8009c72 <USB_EPStartXfer+0x155e>
 8009bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10c      	bne.n	8009bd2 <USB_EPStartXfer+0x14be>
 8009bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bce:	801a      	strh	r2, [r3, #0]
 8009bd0:	e04f      	b.n	8009c72 <USB_EPStartXfer+0x155e>
 8009bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <USB_EPStartXfer+0x14de>
 8009be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bec:	3301      	adds	r3, #1
 8009bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	e030      	b.n	8009c72 <USB_EPStartXfer+0x155e>
 8009c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d128      	bne.n	8009c72 <USB_EPStartXfer+0x155e>
 8009c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c44:	4413      	add	r3, r2
 8009c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	011a      	lsls	r2, r3, #4
 8009c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 8085 	bne.w	8009d9c <USB_EPStartXfer+0x1688>
 8009c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	011a      	lsls	r2, r3, #4
 8009cca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009cce:	4413      	add	r3, r2
 8009cd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cf2:	d923      	bls.n	8009d3c <USB_EPStartXfer+0x1628>
 8009cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf8:	095b      	lsrs	r3, r3, #5
 8009cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d02:	f003 031f 	and.w	r3, r3, #31
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <USB_EPStartXfer+0x1600>
 8009d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	029b      	lsls	r3, r3, #10
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4313      	orrs	r3, r2
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d38:	801a      	strh	r2, [r3, #0]
 8009d3a:	e05c      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
 8009d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10c      	bne.n	8009d5e <USB_EPStartXfer+0x164a>
 8009d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	e04b      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
 8009d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d62:	085b      	lsrs	r3, r3, #1
 8009d64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <USB_EPStartXfer+0x166a>
 8009d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d78:	3301      	adds	r3, #1
 8009d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	029b      	lsls	r3, r3, #10
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	e02c      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
 8009d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d124      	bne.n	8009df6 <USB_EPStartXfer+0x16e2>
 8009dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	011a      	lsls	r2, r3, #4
 8009dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009dda:	4413      	add	r3, r2
 8009ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009de0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	e001      	b.n	8009df6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e03a      	b.n	8009e6c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009e20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009e24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009e2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009e30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009e34:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d020      	beq.n	8009eca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e9e:	81bb      	strh	r3, [r7, #12]
 8009ea0:	89bb      	ldrh	r3, [r7, #12]
 8009ea2:	f083 0310 	eor.w	r3, r3, #16
 8009ea6:	81bb      	strh	r3, [r7, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	441a      	add	r2, r3
 8009eb2:	89bb      	ldrh	r3, [r7, #12]
 8009eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	8013      	strh	r3, [r2, #0]
 8009ec8:	e01f      	b.n	8009f0a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee0:	81fb      	strh	r3, [r7, #14]
 8009ee2:	89fb      	ldrh	r3, [r7, #14]
 8009ee4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ee8:	81fb      	strh	r3, [r7, #14]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	441a      	add	r2, r3
 8009ef4:	89fb      	ldrh	r3, [r7, #14]
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc80      	pop	{r7}
 8009f14:	4770      	bx	lr

08009f16 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b087      	sub	sp, #28
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	7b1b      	ldrb	r3, [r3, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 809d 	bne.w	800a064 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d04c      	beq.n	8009fcc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	823b      	strh	r3, [r7, #16]
 8009f40:	8a3b      	ldrh	r3, [r7, #16]
 8009f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01b      	beq.n	8009f82 <USB_EPClearStall+0x6c>
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f60:	81fb      	strh	r3, [r7, #14]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	441a      	add	r2, r3
 8009f6c:	89fb      	ldrh	r3, [r7, #14]
 8009f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	78db      	ldrb	r3, [r3, #3]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d06c      	beq.n	800a064 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa0:	81bb      	strh	r3, [r7, #12]
 8009fa2:	89bb      	ldrh	r3, [r7, #12]
 8009fa4:	f083 0320 	eor.w	r3, r3, #32
 8009fa8:	81bb      	strh	r3, [r7, #12]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	441a      	add	r2, r3
 8009fb4:	89bb      	ldrh	r3, [r7, #12]
 8009fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8013      	strh	r3, [r2, #0]
 8009fca:	e04b      	b.n	800a064 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	82fb      	strh	r3, [r7, #22]
 8009fda:	8afb      	ldrh	r3, [r7, #22]
 8009fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01b      	beq.n	800a01c <USB_EPClearStall+0x106>
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ffa:	82bb      	strh	r3, [r7, #20]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	441a      	add	r2, r3
 800a006:	8abb      	ldrh	r3, [r7, #20]
 800a008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a00c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a018:	b29b      	uxth	r3, r3
 800a01a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a032:	827b      	strh	r3, [r7, #18]
 800a034:	8a7b      	ldrh	r3, [r7, #18]
 800a036:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a03a:	827b      	strh	r3, [r7, #18]
 800a03c:	8a7b      	ldrh	r3, [r7, #18]
 800a03e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a042:	827b      	strh	r3, [r7, #18]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	8a7b      	ldrh	r3, [r7, #18]
 800a050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a060:	b29b      	uxth	r3, r3
 800a062:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr

0800a070 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d103      	bne.n	800a08a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2280      	movs	r2, #128	@ 0x80
 800a086:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	bc80      	pop	{r7}
 800a094:	4770      	bx	lr

0800a096 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr

0800a0aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr

0800a0be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr

0800a0dc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr

0800a0f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b08b      	sub	sp, #44	@ 0x2c
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	461a      	mov	r2, r3
 800a100:	460b      	mov	r3, r1
 800a102:	80fb      	strh	r3, [r7, #6]
 800a104:	4613      	mov	r3, r2
 800a106:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a108:	88bb      	ldrh	r3, [r7, #4]
 800a10a:	3301      	adds	r3, #1
 800a10c:	085b      	lsrs	r3, r3, #1
 800a10e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a118:	88fb      	ldrh	r3, [r7, #6]
 800a11a:	005a      	lsls	r2, r3, #1
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a124:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
 800a12a:	e01f      	b.n	800a16c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3301      	adds	r3, #1
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b21b      	sxth	r3, r3
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	b21a      	sxth	r2, r3
 800a13e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a142:	4313      	orrs	r3, r2
 800a144:	b21b      	sxth	r3, r3
 800a146:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	8a7a      	ldrh	r2, [r7, #18]
 800a14c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	3302      	adds	r3, #2
 800a152:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	3302      	adds	r3, #2
 800a158:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	3301      	adds	r3, #1
 800a15e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	3b01      	subs	r3, #1
 800a16a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1dc      	bne.n	800a12c <USB_WritePMA+0x3a>
  }
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	372c      	adds	r7, #44	@ 0x2c
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr

0800a17e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a17e:	b480      	push	{r7}
 800a180:	b08b      	sub	sp, #44	@ 0x2c
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	4611      	mov	r1, r2
 800a18a:	461a      	mov	r2, r3
 800a18c:	460b      	mov	r3, r1
 800a18e:	80fb      	strh	r3, [r7, #6]
 800a190:	4613      	mov	r3, r2
 800a192:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a194:	88bb      	ldrh	r3, [r7, #4]
 800a196:	085b      	lsrs	r3, r3, #1
 800a198:	b29b      	uxth	r3, r3
 800a19a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1a4:	88fb      	ldrh	r3, [r7, #6]
 800a1a6:	005a      	lsls	r2, r3, #1
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1b6:	e01b      	b.n	800a1f0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	3302      	adds	r3, #2
 800a1e8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1e0      	bne.n	800a1b8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a1f6:	88bb      	ldrh	r3, [r7, #4]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	701a      	strb	r2, [r3, #0]
  }
}
 800a212:	bf00      	nop
 800a214:	372c      	adds	r7, #44	@ 0x2c
 800a216:	46bd      	mov	sp, r7
 800a218:	bc80      	pop	{r7}
 800a21a:	4770      	bx	lr

0800a21c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7c1b      	ldrb	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d115      	bne.n	800a260 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a238:	2202      	movs	r2, #2
 800a23a:	2181      	movs	r1, #129	@ 0x81
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f001 feac 	bl	800bf9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a24c:	2202      	movs	r2, #2
 800a24e:	2101      	movs	r1, #1
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 fea2 	bl	800bf9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a25e:	e012      	b.n	800a286 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a260:	2340      	movs	r3, #64	@ 0x40
 800a262:	2202      	movs	r2, #2
 800a264:	2181      	movs	r1, #129	@ 0x81
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 fe97 	bl	800bf9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a272:	2340      	movs	r3, #64	@ 0x40
 800a274:	2202      	movs	r2, #2
 800a276:	2101      	movs	r1, #1
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 fe8e 	bl	800bf9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a286:	2308      	movs	r3, #8
 800a288:	2203      	movs	r2, #3
 800a28a:	2182      	movs	r1, #130	@ 0x82
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 fe84 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a298:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a29c:	f001 ffa4 	bl	800c1e8 <USBD_static_malloc>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
 800a2b6:	e026      	b.n	800a306 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2be:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	7c1b      	ldrb	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 ff43 	bl	800c17a <USBD_LL_PrepareReceive>
 800a2f4:	e007      	b.n	800a306 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2fc:	2340      	movs	r3, #64	@ 0x40
 800a2fe:	2101      	movs	r1, #1
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 ff3a 	bl	800c17a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a320:	2181      	movs	r1, #129	@ 0x81
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fe5f 	bl	800bfe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a32e:	2101      	movs	r1, #1
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 fe58 	bl	800bfe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a33e:	2182      	movs	r1, #130	@ 0x82
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 fe50 	bl	800bfe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00e      	beq.n	800a374 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a366:	4618      	mov	r0, r3
 800a368:	f001 ff4a 	bl	800c200 <USBD_static_free>
    pdev->pClassData = NULL;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b086      	sub	sp, #24
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d039      	beq.n	800a41c <USBD_CDC_Setup+0x9e>
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d17f      	bne.n	800a4ac <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d029      	beq.n	800a408 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da11      	bge.n	800a3e2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a3ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	88d2      	ldrh	r2, [r2, #6]
 800a3d0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3d2:	6939      	ldr	r1, [r7, #16]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	88db      	ldrh	r3, [r3, #6]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fa06 	bl	800b7ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a3e0:	e06b      	b.n	800a4ba <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	785a      	ldrb	r2, [r3, #1]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	88db      	ldrh	r3, [r3, #6]
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3f8:	6939      	ldr	r1, [r7, #16]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	88db      	ldrh	r3, [r3, #6]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fa21 	bl	800b848 <USBD_CtlPrepareRx>
      break;
 800a406:	e058      	b.n	800a4ba <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	7850      	ldrb	r0, [r2, #1]
 800a414:	2200      	movs	r2, #0
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	4798      	blx	r3
      break;
 800a41a:	e04e      	b.n	800a4ba <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b0b      	cmp	r3, #11
 800a422:	d02e      	beq.n	800a482 <USBD_CDC_Setup+0x104>
 800a424:	2b0b      	cmp	r3, #11
 800a426:	dc38      	bgt.n	800a49a <USBD_CDC_Setup+0x11c>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <USBD_CDC_Setup+0xb4>
 800a42c:	2b0a      	cmp	r3, #10
 800a42e:	d014      	beq.n	800a45a <USBD_CDC_Setup+0xdc>
 800a430:	e033      	b.n	800a49a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d107      	bne.n	800a44c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a43c:	f107 030c 	add.w	r3, r7, #12
 800a440:	2202      	movs	r2, #2
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f9d1 	bl	800b7ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a44a:	e02e      	b.n	800a4aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 f962 	bl	800b718 <USBD_CtlError>
            ret = USBD_FAIL;
 800a454:	2302      	movs	r3, #2
 800a456:	75fb      	strb	r3, [r7, #23]
          break;
 800a458:	e027      	b.n	800a4aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a460:	2b03      	cmp	r3, #3
 800a462:	d107      	bne.n	800a474 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a464:	f107 030f 	add.w	r3, r7, #15
 800a468:	2201      	movs	r2, #1
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 f9bd 	bl	800b7ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a472:	e01a      	b.n	800a4aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 f94e 	bl	800b718 <USBD_CtlError>
            ret = USBD_FAIL;
 800a47c:	2302      	movs	r3, #2
 800a47e:	75fb      	strb	r3, [r7, #23]
          break;
 800a480:	e013      	b.n	800a4aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d00d      	beq.n	800a4a8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 f942 	bl	800b718 <USBD_CtlError>
            ret = USBD_FAIL;
 800a494:	2302      	movs	r3, #2
 800a496:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a498:	e006      	b.n	800a4a8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 f93b 	bl	800b718 <USBD_CtlError>
          ret = USBD_FAIL;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4a6:	e000      	b.n	800a4aa <USBD_CDC_Setup+0x12c>
          break;
 800a4a8:	bf00      	nop
      }
      break;
 800a4aa:	e006      	b.n	800a4ba <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 f932 	bl	800b718 <USBD_CtlError>
      ret = USBD_FAIL;
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b8:	bf00      	nop
  }

  return ret;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4de:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d03a      	beq.n	800a560 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	440b      	add	r3, r1
 800a4f8:	331c      	adds	r3, #28
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d029      	beq.n	800a554 <USBD_CDC_DataIn+0x90>
 800a500:	78fa      	ldrb	r2, [r7, #3]
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	331c      	adds	r3, #28
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	78f9      	ldrb	r1, [r7, #3]
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	460b      	mov	r3, r1
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	440b      	add	r3, r1
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	4403      	add	r3, r0
 800a520:	3320      	adds	r3, #32
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	fbb2 f1f3 	udiv	r1, r2, r3
 800a528:	fb01 f303 	mul.w	r3, r1, r3
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d110      	bne.n	800a554 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a532:	78fa      	ldrb	r2, [r7, #3]
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	331c      	adds	r3, #28
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a546:	78f9      	ldrb	r1, [r7, #3]
 800a548:	2300      	movs	r3, #0
 800a54a:	2200      	movs	r2, #0
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 fdf1 	bl	800c134 <USBD_LL_Transmit>
 800a552:	e003      	b.n	800a55c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e000      	b.n	800a562 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a560:	2302      	movs	r3, #2
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	460b      	mov	r3, r1
 800a574:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fe1c 	bl	800c1c0 <USBD_LL_GetRxDataSize>
 800a588:	4602      	mov	r2, r0
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00d      	beq.n	800a5b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4798      	blx	r3

    return USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e000      	b.n	800a5b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a5b6:	2302      	movs	r3, #2
  }
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d014      	beq.n	800a604 <USBD_CDC_EP0_RxReady+0x44>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a5e0:	2bff      	cmp	r3, #255	@ 0xff
 800a5e2:	d00f      	beq.n	800a604 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a5f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22ff      	movs	r2, #255	@ 0xff
 800a600:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2243      	movs	r2, #67	@ 0x43
 800a61c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a61e:	4b03      	ldr	r3, [pc, #12]	@ (800a62c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	200000a0 	.word	0x200000a0

0800a630 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2243      	movs	r2, #67	@ 0x43
 800a63c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a63e:	4b03      	ldr	r3, [pc, #12]	@ (800a64c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	bc80      	pop	{r7}
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	2000005c 	.word	0x2000005c

0800a650 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2243      	movs	r2, #67	@ 0x43
 800a65c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	@ (800a66c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	200000e4 	.word	0x200000e4

0800a670 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	220a      	movs	r2, #10
 800a67c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a67e:	4b03      	ldr	r3, [pc, #12]	@ (800a68c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000018 	.word	0x20000018

0800a690 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr

0800a6bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a6da:	88fa      	ldrh	r2, [r7, #6]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bc80      	pop	{r7}
 800a6ec:	4770      	bx	lr

0800a6ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b085      	sub	sp, #20
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	bc80      	pop	{r7}
 800a712:	4770      	bx	lr

0800a714 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d01c      	beq.n	800a768 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a734:	2b00      	cmp	r3, #0
 800a736:	d115      	bne.n	800a764 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a756:	b29b      	uxth	r3, r3
 800a758:	2181      	movs	r1, #129	@ 0x81
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fcea 	bl	800c134 <USBD_LL_Transmit>

      return USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	e002      	b.n	800a76a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a768:	2302      	movs	r3, #2
  }
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a780:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d017      	beq.n	800a7bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7c1b      	ldrb	r3, [r3, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a79a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a79e:	2101      	movs	r1, #1
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 fcea 	bl	800c17a <USBD_LL_PrepareReceive>
 800a7a6:	e007      	b.n	800a7b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ae:	2340      	movs	r3, #64	@ 0x40
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 fce1 	bl	800c17a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e000      	b.n	800a7be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a7bc:	2302      	movs	r3, #2
  }
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e01a      	b.n	800a814 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	79fa      	ldrb	r2, [r7, #7]
 800a80a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f001 fb4f 	bl	800beb0 <USBD_LL_Init>

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d006      	beq.n	800a83e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e001      	b.n	800a842 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a83e:	2302      	movs	r3, #2
 800a840:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a842:	7bfb      	ldrb	r3, [r7, #15]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	bc80      	pop	{r7}
 800a84c:	4770      	bx	lr

0800a84e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f001 fb84 	bl	800bf64 <USBD_LL_Start>

  return USBD_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a886:	2302      	movs	r3, #2
 800a888:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00c      	beq.n	800a8ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	78fa      	ldrb	r2, [r7, #3]
 800a89e:	4611      	mov	r1, r2
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	78fa      	ldrb	r2, [r7, #3]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	4798      	blx	r3

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fed8 	bl	800b6a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a904:	461a      	mov	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a912:	f003 031f 	and.w	r3, r3, #31
 800a916:	2b02      	cmp	r3, #2
 800a918:	d016      	beq.n	800a948 <USBD_LL_SetupStage+0x6a>
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d81c      	bhi.n	800a958 <USBD_LL_SetupStage+0x7a>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <USBD_LL_SetupStage+0x4a>
 800a922:	2b01      	cmp	r3, #1
 800a924:	d008      	beq.n	800a938 <USBD_LL_SetupStage+0x5a>
 800a926:	e017      	b.n	800a958 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f9cb 	bl	800accc <USBD_StdDevReq>
      break;
 800a936:	e01a      	b.n	800a96e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa2d 	bl	800ada0 <USBD_StdItfReq>
      break;
 800a946:	e012      	b.n	800a96e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fa6d 	bl	800ae30 <USBD_StdEPReq>
      break;
 800a956:	e00a      	b.n	800a96e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a95e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a962:	b2db      	uxtb	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fb5c 	bl	800c024 <USBD_LL_StallEP>
      break;
 800a96c:	bf00      	nop
  }

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	460b      	mov	r3, r1
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d14b      	bne.n	800aa24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a992:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d134      	bne.n	800aa08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	68da      	ldr	r2, [r3, #12]
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d919      	bls.n	800a9de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	68da      	ldr	r2, [r3, #12]
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d203      	bcs.n	800a9cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	e002      	b.n	800a9d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6879      	ldr	r1, [r7, #4]
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 ff54 	bl	800b884 <USBD_CtlContinueRx>
 800a9dc:	e038      	b.n	800aa50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d105      	bne.n	800aa00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 ff51 	bl	800b8a8 <USBD_CtlSendStatus>
 800aa06:	e023      	b.n	800aa50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa0e:	2b05      	cmp	r3, #5
 800aa10:	d11e      	bne.n	800aa50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f001 fb01 	bl	800c024 <USBD_LL_StallEP>
 800aa22:	e015      	b.n	800aa50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d108      	bne.n	800aa4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	7afa      	ldrb	r2, [r7, #11]
 800aa44:	4611      	mov	r1, r2
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	4798      	blx	r3
 800aa4a:	e001      	b.n	800aa50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e000      	b.n	800aa52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	460b      	mov	r3, r1
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d17f      	bne.n	800ab6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3314      	adds	r3, #20
 800aa72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d15c      	bne.n	800ab38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d915      	bls.n	800aab6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 febe 	bl	800b824 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f001 fb63 	bl	800c17a <USBD_LL_PrepareReceive>
 800aab4:	e04e      	b.n	800ab54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	6912      	ldr	r2, [r2, #16]
 800aabe:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac2:	fb01 f202 	mul.w	r2, r1, r2
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d11c      	bne.n	800ab06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d316      	bcc.n	800ab06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d20f      	bcs.n	800ab06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aae6:	2200      	movs	r2, #0
 800aae8:	2100      	movs	r1, #0
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 fe9a 	bl	800b824 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2200      	movs	r2, #0
 800aafc:	2100      	movs	r1, #0
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f001 fb3b 	bl	800c17a <USBD_LL_PrepareReceive>
 800ab04:	e026      	b.n	800ab54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d105      	bne.n	800ab28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ab28:	2180      	movs	r1, #128	@ 0x80
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f001 fa7a 	bl	800c024 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fecc 	bl	800b8ce <USBD_CtlReceiveStatus>
 800ab36:	e00d      	b.n	800ab54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d004      	beq.n	800ab4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d103      	bne.n	800ab54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ab4c:	2180      	movs	r1, #128	@ 0x80
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f001 fa68 	bl	800c024 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d11d      	bne.n	800ab9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7ff fe81 	bl	800a866 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ab6c:	e015      	b.n	800ab9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d108      	bne.n	800ab96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	7afa      	ldrb	r2, [r7, #11]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	4798      	blx	r3
 800ab94:	e001      	b.n	800ab9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab96:	2302      	movs	r3, #2
 800ab98:	e000      	b.n	800ab9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abac:	2340      	movs	r3, #64	@ 0x40
 800abae:	2200      	movs	r2, #0
 800abb0:	2100      	movs	r1, #0
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 f9f1 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2240      	movs	r2, #64	@ 0x40
 800abc4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abc8:	2340      	movs	r3, #64	@ 0x40
 800abca:	2200      	movs	r2, #0
 800abcc:	2180      	movs	r1, #128	@ 0x80
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 f9e3 	bl	800bf9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2240      	movs	r2, #64	@ 0x40
 800abde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d009      	beq.n	800ac1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6852      	ldr	r2, [r2, #4]
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	4611      	mov	r1, r2
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
  }

  return USBD_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	78fa      	ldrb	r2, [r7, #3]
 800ac36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2204      	movs	r2, #4
 800ac5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d105      	bne.n	800ac8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr

0800ac96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d10b      	bne.n	800acc0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d005      	beq.n	800acc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ace2:	2b40      	cmp	r3, #64	@ 0x40
 800ace4:	d005      	beq.n	800acf2 <USBD_StdDevReq+0x26>
 800ace6:	2b40      	cmp	r3, #64	@ 0x40
 800ace8:	d84f      	bhi.n	800ad8a <USBD_StdDevReq+0xbe>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d009      	beq.n	800ad02 <USBD_StdDevReq+0x36>
 800acee:	2b20      	cmp	r3, #32
 800acf0:	d14b      	bne.n	800ad8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
      break;
 800ad00:	e048      	b.n	800ad94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	d839      	bhi.n	800ad7e <USBD_StdDevReq+0xb2>
 800ad0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad10 <USBD_StdDevReq+0x44>)
 800ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad10:	0800ad61 	.word	0x0800ad61
 800ad14:	0800ad75 	.word	0x0800ad75
 800ad18:	0800ad7f 	.word	0x0800ad7f
 800ad1c:	0800ad6b 	.word	0x0800ad6b
 800ad20:	0800ad7f 	.word	0x0800ad7f
 800ad24:	0800ad43 	.word	0x0800ad43
 800ad28:	0800ad39 	.word	0x0800ad39
 800ad2c:	0800ad7f 	.word	0x0800ad7f
 800ad30:	0800ad57 	.word	0x0800ad57
 800ad34:	0800ad4d 	.word	0x0800ad4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f9dc 	bl	800b0f8 <USBD_GetDescriptor>
          break;
 800ad40:	e022      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fb3f 	bl	800b3c8 <USBD_SetAddress>
          break;
 800ad4a:	e01d      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb7e 	bl	800b450 <USBD_SetConfig>
          break;
 800ad54:	e018      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fc07 	bl	800b56c <USBD_GetConfig>
          break;
 800ad5e:	e013      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fc37 	bl	800b5d6 <USBD_GetStatus>
          break;
 800ad68:	e00e      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fc65 	bl	800b63c <USBD_SetFeature>
          break;
 800ad72:	e009      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fc74 	bl	800b664 <USBD_ClrFeature>
          break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fcc9 	bl	800b718 <USBD_CtlError>
          break;
 800ad86:	bf00      	nop
      }
      break;
 800ad88:	e004      	b.n	800ad94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fcc3 	bl	800b718 <USBD_CtlError>
      break;
 800ad92:	bf00      	nop
  }

  return ret;
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop

0800ada0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adb6:	2b40      	cmp	r3, #64	@ 0x40
 800adb8:	d005      	beq.n	800adc6 <USBD_StdItfReq+0x26>
 800adba:	2b40      	cmp	r3, #64	@ 0x40
 800adbc:	d82e      	bhi.n	800ae1c <USBD_StdItfReq+0x7c>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <USBD_StdItfReq+0x26>
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d12a      	bne.n	800ae1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adcc:	3b01      	subs	r3, #1
 800adce:	2b02      	cmp	r3, #2
 800add0:	d81d      	bhi.n	800ae0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	889b      	ldrh	r3, [r3, #4]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	d813      	bhi.n	800ae04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	88db      	ldrh	r3, [r3, #6]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d110      	bne.n	800ae18 <USBD_StdItfReq+0x78>
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10d      	bne.n	800ae18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fd53 	bl	800b8a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae02:	e009      	b.n	800ae18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fc86 	bl	800b718 <USBD_CtlError>
          break;
 800ae0c:	e004      	b.n	800ae18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fc81 	bl	800b718 <USBD_CtlError>
          break;
 800ae16:	e000      	b.n	800ae1a <USBD_StdItfReq+0x7a>
          break;
 800ae18:	bf00      	nop
      }
      break;
 800ae1a:	e004      	b.n	800ae26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fc7a 	bl	800b718 <USBD_CtlError>
      break;
 800ae24:	bf00      	nop
  }

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	889b      	ldrh	r3, [r3, #4]
 800ae42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae4c:	2b40      	cmp	r3, #64	@ 0x40
 800ae4e:	d007      	beq.n	800ae60 <USBD_StdEPReq+0x30>
 800ae50:	2b40      	cmp	r3, #64	@ 0x40
 800ae52:	f200 8146 	bhi.w	800b0e2 <USBD_StdEPReq+0x2b2>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <USBD_StdEPReq+0x40>
 800ae5a:	2b20      	cmp	r3, #32
 800ae5c:	f040 8141 	bne.w	800b0e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
      break;
 800ae6e:	e13d      	b.n	800b0ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d10a      	bne.n	800ae92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	e12d      	b.n	800b0ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d007      	beq.n	800aeaa <USBD_StdEPReq+0x7a>
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	f300 811b 	bgt.w	800b0d6 <USBD_StdEPReq+0x2a6>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d072      	beq.n	800af8a <USBD_StdEPReq+0x15a>
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d03a      	beq.n	800af1e <USBD_StdEPReq+0xee>
 800aea8:	e115      	b.n	800b0d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d002      	beq.n	800aeba <USBD_StdEPReq+0x8a>
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d015      	beq.n	800aee4 <USBD_StdEPReq+0xb4>
 800aeb8:	e02b      	b.n	800af12 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00c      	beq.n	800aeda <USBD_StdEPReq+0xaa>
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b80      	cmp	r3, #128	@ 0x80
 800aec4:	d009      	beq.n	800aeda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 f8aa 	bl	800c024 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aed0:	2180      	movs	r1, #128	@ 0x80
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 f8a6 	bl	800c024 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aed8:	e020      	b.n	800af1c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fc1b 	bl	800b718 <USBD_CtlError>
              break;
 800aee2:	e01b      	b.n	800af1c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	885b      	ldrh	r3, [r3, #2]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10e      	bne.n	800af0a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00b      	beq.n	800af0a <USBD_StdEPReq+0xda>
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b80      	cmp	r3, #128	@ 0x80
 800aef6:	d008      	beq.n	800af0a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	88db      	ldrh	r3, [r3, #6]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d104      	bne.n	800af0a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 f88d 	bl	800c024 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fccc 	bl	800b8a8 <USBD_CtlSendStatus>

              break;
 800af10:	e004      	b.n	800af1c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fbff 	bl	800b718 <USBD_CtlError>
              break;
 800af1a:	bf00      	nop
          }
          break;
 800af1c:	e0e0      	b.n	800b0e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af24:	2b02      	cmp	r3, #2
 800af26:	d002      	beq.n	800af2e <USBD_StdEPReq+0xfe>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d015      	beq.n	800af58 <USBD_StdEPReq+0x128>
 800af2c:	e026      	b.n	800af7c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00c      	beq.n	800af4e <USBD_StdEPReq+0x11e>
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	2b80      	cmp	r3, #128	@ 0x80
 800af38:	d009      	beq.n	800af4e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f001 f870 	bl	800c024 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af44:	2180      	movs	r1, #128	@ 0x80
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 f86c 	bl	800c024 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af4c:	e01c      	b.n	800af88 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fbe1 	bl	800b718 <USBD_CtlError>
              break;
 800af56:	e017      	b.n	800af88 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	885b      	ldrh	r3, [r3, #2]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d112      	bne.n	800af86 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af66:	2b00      	cmp	r3, #0
 800af68:	d004      	beq.n	800af74 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 f877 	bl	800c062 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fc97 	bl	800b8a8 <USBD_CtlSendStatus>
              }
              break;
 800af7a:	e004      	b.n	800af86 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fbca 	bl	800b718 <USBD_CtlError>
              break;
 800af84:	e000      	b.n	800af88 <USBD_StdEPReq+0x158>
              break;
 800af86:	bf00      	nop
          }
          break;
 800af88:	e0aa      	b.n	800b0e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af90:	2b02      	cmp	r3, #2
 800af92:	d002      	beq.n	800af9a <USBD_StdEPReq+0x16a>
 800af94:	2b03      	cmp	r3, #3
 800af96:	d032      	beq.n	800affe <USBD_StdEPReq+0x1ce>
 800af98:	e097      	b.n	800b0ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <USBD_StdEPReq+0x180>
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b80      	cmp	r3, #128	@ 0x80
 800afa4:	d004      	beq.n	800afb0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fbb5 	bl	800b718 <USBD_CtlError>
                break;
 800afae:	e091      	b.n	800b0d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da0b      	bge.n	800afd0 <USBD_StdEPReq+0x1a0>
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	3310      	adds	r3, #16
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	e00b      	b.n	800afe8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	4413      	add	r3, r2
 800afe6:	3304      	adds	r3, #4
 800afe8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2202      	movs	r2, #2
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fbf8 	bl	800b7ec <USBD_CtlSendData>
              break;
 800affc:	e06a      	b.n	800b0d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800affe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b002:	2b00      	cmp	r3, #0
 800b004:	da11      	bge.n	800b02a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	f003 020f 	and.w	r2, r3, #15
 800b00c:	6879      	ldr	r1, [r7, #4]
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	440b      	add	r3, r1
 800b018:	3318      	adds	r3, #24
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d117      	bne.n	800b050 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fb78 	bl	800b718 <USBD_CtlError>
                  break;
 800b028:	e054      	b.n	800b0d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d104      	bne.n	800b050 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fb65 	bl	800b718 <USBD_CtlError>
                  break;
 800b04e:	e041      	b.n	800b0d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b054:	2b00      	cmp	r3, #0
 800b056:	da0b      	bge.n	800b070 <USBD_StdEPReq+0x240>
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	3310      	adds	r3, #16
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	3304      	adds	r3, #4
 800b06e:	e00b      	b.n	800b088 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	3304      	adds	r3, #4
 800b088:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <USBD_StdEPReq+0x266>
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	2b80      	cmp	r3, #128	@ 0x80
 800b094:	d103      	bne.n	800b09e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e00e      	b.n	800b0bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fffc 	bl	800c0a0 <USBD_LL_IsStallEP>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e002      	b.n	800b0bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fb92 	bl	800b7ec <USBD_CtlSendData>
              break;
 800b0c8:	e004      	b.n	800b0d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb23 	bl	800b718 <USBD_CtlError>
              break;
 800b0d2:	bf00      	nop
          }
          break;
 800b0d4:	e004      	b.n	800b0e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fb1d 	bl	800b718 <USBD_CtlError>
          break;
 800b0de:	bf00      	nop
      }
      break;
 800b0e0:	e004      	b.n	800b0ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fb17 	bl	800b718 <USBD_CtlError>
      break;
 800b0ea:	bf00      	nop
  }

  return ret;
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	0a1b      	lsrs	r3, r3, #8
 800b114:	b29b      	uxth	r3, r3
 800b116:	3b01      	subs	r3, #1
 800b118:	2b06      	cmp	r3, #6
 800b11a:	f200 8128 	bhi.w	800b36e <USBD_GetDescriptor+0x276>
 800b11e:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <USBD_GetDescriptor+0x2c>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b141 	.word	0x0800b141
 800b128:	0800b159 	.word	0x0800b159
 800b12c:	0800b199 	.word	0x0800b199
 800b130:	0800b36f 	.word	0x0800b36f
 800b134:	0800b36f 	.word	0x0800b36f
 800b138:	0800b30f 	.word	0x0800b30f
 800b13c:	0800b33b 	.word	0x0800b33b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	7c12      	ldrb	r2, [r2, #16]
 800b14c:	f107 0108 	add.w	r1, r7, #8
 800b150:	4610      	mov	r0, r2
 800b152:	4798      	blx	r3
 800b154:	60f8      	str	r0, [r7, #12]
      break;
 800b156:	e112      	b.n	800b37e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7c1b      	ldrb	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10d      	bne.n	800b17c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b168:	f107 0208 	add.w	r2, r7, #8
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	2202      	movs	r2, #2
 800b178:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b17a:	e100      	b.n	800b37e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	f107 0208 	add.w	r2, r7, #8
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3301      	adds	r3, #1
 800b192:	2202      	movs	r2, #2
 800b194:	701a      	strb	r2, [r3, #0]
      break;
 800b196:	e0f2      	b.n	800b37e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	f200 80ac 	bhi.w	800b2fc <USBD_GetDescriptor+0x204>
 800b1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ac <USBD_GetDescriptor+0xb4>)
 800b1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1aa:	bf00      	nop
 800b1ac:	0800b1c5 	.word	0x0800b1c5
 800b1b0:	0800b1f9 	.word	0x0800b1f9
 800b1b4:	0800b22d 	.word	0x0800b22d
 800b1b8:	0800b261 	.word	0x0800b261
 800b1bc:	0800b295 	.word	0x0800b295
 800b1c0:	0800b2c9 	.word	0x0800b2c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	7c12      	ldrb	r2, [r2, #16]
 800b1dc:	f107 0108 	add.w	r1, r7, #8
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	4798      	blx	r3
 800b1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1e6:	e091      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fa94 	bl	800b718 <USBD_CtlError>
            err++;
 800b1f0:	7afb      	ldrb	r3, [r7, #11]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1f6:	e089      	b.n	800b30c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	7c12      	ldrb	r2, [r2, #16]
 800b210:	f107 0108 	add.w	r1, r7, #8
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21a:	e077      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa7a 	bl	800b718 <USBD_CtlError>
            err++;
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	3301      	adds	r3, #1
 800b228:	72fb      	strb	r3, [r7, #11]
          break;
 800b22a:	e06f      	b.n	800b30c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	7c12      	ldrb	r2, [r2, #16]
 800b244:	f107 0108 	add.w	r1, r7, #8
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b24e:	e05d      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa60 	bl	800b718 <USBD_CtlError>
            err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
          break;
 800b25e:	e055      	b.n	800b30c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00b      	beq.n	800b284 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	7c12      	ldrb	r2, [r2, #16]
 800b278:	f107 0108 	add.w	r1, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b282:	e043      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa46 	bl	800b718 <USBD_CtlError>
            err++;
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	3301      	adds	r3, #1
 800b290:	72fb      	strb	r3, [r7, #11]
          break;
 800b292:	e03b      	b.n	800b30c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	7c12      	ldrb	r2, [r2, #16]
 800b2ac:	f107 0108 	add.w	r1, r7, #8
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
 800b2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b6:	e029      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa2c 	bl	800b718 <USBD_CtlError>
            err++;
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c6:	e021      	b.n	800b30c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	7c12      	ldrb	r2, [r2, #16]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ea:	e00f      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa12 	bl	800b718 <USBD_CtlError>
            err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fa:	e007      	b.n	800b30c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fa0a 	bl	800b718 <USBD_CtlError>
          err++;
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	3301      	adds	r3, #1
 800b308:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b30a:	e038      	b.n	800b37e <USBD_GetDescriptor+0x286>
 800b30c:	e037      	b.n	800b37e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	7c1b      	ldrb	r3, [r3, #16]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d109      	bne.n	800b32a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31e:	f107 0208 	add.w	r2, r7, #8
 800b322:	4610      	mov	r0, r2
 800b324:	4798      	blx	r3
 800b326:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b328:	e029      	b.n	800b37e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9f3 	bl	800b718 <USBD_CtlError>
        err++;
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	3301      	adds	r3, #1
 800b336:	72fb      	strb	r3, [r7, #11]
      break;
 800b338:	e021      	b.n	800b37e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	7c1b      	ldrb	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10d      	bne.n	800b35e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34a:	f107 0208 	add.w	r2, r7, #8
 800b34e:	4610      	mov	r0, r2
 800b350:	4798      	blx	r3
 800b352:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	2207      	movs	r2, #7
 800b35a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b35c:	e00f      	b.n	800b37e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f9d9 	bl	800b718 <USBD_CtlError>
        err++;
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	3301      	adds	r3, #1
 800b36a:	72fb      	strb	r3, [r7, #11]
      break;
 800b36c:	e007      	b.n	800b37e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f9d1 	bl	800b718 <USBD_CtlError>
      err++;
 800b376:	7afb      	ldrb	r3, [r7, #11]
 800b378:	3301      	adds	r3, #1
 800b37a:	72fb      	strb	r3, [r7, #11]
      break;
 800b37c:	bf00      	nop
  }

  if (err != 0U)
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d11c      	bne.n	800b3be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b384:	893b      	ldrh	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d011      	beq.n	800b3ae <USBD_GetDescriptor+0x2b6>
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	88db      	ldrh	r3, [r3, #6]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00d      	beq.n	800b3ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88da      	ldrh	r2, [r3, #6]
 800b396:	893b      	ldrh	r3, [r7, #8]
 800b398:	4293      	cmp	r3, r2
 800b39a:	bf28      	it	cs
 800b39c:	4613      	movcs	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3a2:	893b      	ldrh	r3, [r7, #8]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68f9      	ldr	r1, [r7, #12]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fa1f 	bl	800b7ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	88db      	ldrh	r3, [r3, #6]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d104      	bne.n	800b3c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa76 	bl	800b8a8 <USBD_CtlSendStatus>
 800b3bc:	e000      	b.n	800b3c0 <USBD_GetDescriptor+0x2c8>
    return;
 800b3be:	bf00      	nop
    }
  }
}
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop

0800b3c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	889b      	ldrh	r3, [r3, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d130      	bne.n	800b43c <USBD_SetAddress+0x74>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	88db      	ldrh	r3, [r3, #6]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d12c      	bne.n	800b43c <USBD_SetAddress+0x74>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3e8:	d828      	bhi.n	800b43c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d104      	bne.n	800b40a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f988 	bl	800b718 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b408:	e01d      	b.n	800b446 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fe6d 	bl	800c0f6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa43 	bl	800b8a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b430:	e009      	b.n	800b446 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43a:	e004      	b.n	800b446 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f96a 	bl	800b718 <USBD_CtlError>
  }
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	885b      	ldrh	r3, [r3, #2]
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	4b41      	ldr	r3, [pc, #260]	@ (800b568 <USBD_SetConfig+0x118>)
 800b462:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b464:	4b40      	ldr	r3, [pc, #256]	@ (800b568 <USBD_SetConfig+0x118>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d904      	bls.n	800b476 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f952 	bl	800b718 <USBD_CtlError>
 800b474:	e075      	b.n	800b562 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d002      	beq.n	800b486 <USBD_SetConfig+0x36>
 800b480:	2b03      	cmp	r3, #3
 800b482:	d023      	beq.n	800b4cc <USBD_SetConfig+0x7c>
 800b484:	e062      	b.n	800b54c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b486:	4b38      	ldr	r3, [pc, #224]	@ (800b568 <USBD_SetConfig+0x118>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01a      	beq.n	800b4c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b48e:	4b36      	ldr	r3, [pc, #216]	@ (800b568 <USBD_SetConfig+0x118>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2203      	movs	r2, #3
 800b49c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b4a0:	4b31      	ldr	r3, [pc, #196]	@ (800b568 <USBD_SetConfig+0x118>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff f9e7 	bl	800a87a <USBD_SetClassConfig>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d104      	bne.n	800b4bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f92f 	bl	800b718 <USBD_CtlError>
            return;
 800b4ba:	e052      	b.n	800b562 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f9f3 	bl	800b8a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4c2:	e04e      	b.n	800b562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f9ef 	bl	800b8a8 <USBD_CtlSendStatus>
        break;
 800b4ca:	e04a      	b.n	800b562 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b4cc:	4b26      	ldr	r3, [pc, #152]	@ (800b568 <USBD_SetConfig+0x118>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d112      	bne.n	800b4fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b4dc:	4b22      	ldr	r3, [pc, #136]	@ (800b568 <USBD_SetConfig+0x118>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b4e6:	4b20      	ldr	r3, [pc, #128]	@ (800b568 <USBD_SetConfig+0x118>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff f9e3 	bl	800a8b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f9d8 	bl	800b8a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4f8:	e033      	b.n	800b562 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b4fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b568 <USBD_SetConfig+0x118>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d01d      	beq.n	800b544 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff f9d1 	bl	800a8b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b516:	4b14      	ldr	r3, [pc, #80]	@ (800b568 <USBD_SetConfig+0x118>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b520:	4b11      	ldr	r3, [pc, #68]	@ (800b568 <USBD_SetConfig+0x118>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff f9a7 	bl	800a87a <USBD_SetClassConfig>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d104      	bne.n	800b53c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f8ef 	bl	800b718 <USBD_CtlError>
            return;
 800b53a:	e012      	b.n	800b562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f9b3 	bl	800b8a8 <USBD_CtlSendStatus>
        break;
 800b542:	e00e      	b.n	800b562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f9af 	bl	800b8a8 <USBD_CtlSendStatus>
        break;
 800b54a:	e00a      	b.n	800b562 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f8e2 	bl	800b718 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b554:	4b04      	ldr	r3, [pc, #16]	@ (800b568 <USBD_SetConfig+0x118>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff f9ac 	bl	800a8b8 <USBD_ClrClassConfig>
        break;
 800b560:	bf00      	nop
    }
  }
}
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000a50 	.word	0x20000a50

0800b56c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	88db      	ldrh	r3, [r3, #6]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d004      	beq.n	800b588 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f8c9 	bl	800b718 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b586:	e022      	b.n	800b5ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58e:	2b02      	cmp	r3, #2
 800b590:	dc02      	bgt.n	800b598 <USBD_GetConfig+0x2c>
 800b592:	2b00      	cmp	r3, #0
 800b594:	dc03      	bgt.n	800b59e <USBD_GetConfig+0x32>
 800b596:	e015      	b.n	800b5c4 <USBD_GetConfig+0x58>
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d00b      	beq.n	800b5b4 <USBD_GetConfig+0x48>
 800b59c:	e012      	b.n	800b5c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f91d 	bl	800b7ec <USBD_CtlSendData>
        break;
 800b5b2:	e00c      	b.n	800b5ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f915 	bl	800b7ec <USBD_CtlSendData>
        break;
 800b5c2:	e004      	b.n	800b5ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f8a6 	bl	800b718 <USBD_CtlError>
        break;
 800b5cc:	bf00      	nop
}
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d81e      	bhi.n	800b62a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	88db      	ldrh	r3, [r3, #6]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d004      	beq.n	800b5fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f88e 	bl	800b718 <USBD_CtlError>
        break;
 800b5fc:	e01a      	b.n	800b634 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d005      	beq.n	800b61a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f043 0202 	orr.w	r2, r3, #2
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	330c      	adds	r3, #12
 800b61e:	2202      	movs	r2, #2
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f8e2 	bl	800b7ec <USBD_CtlSendData>
      break;
 800b628:	e004      	b.n	800b634 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f873 	bl	800b718 <USBD_CtlError>
      break;
 800b632:	bf00      	nop
  }
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	885b      	ldrh	r3, [r3, #2]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d106      	bne.n	800b65c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f926 	bl	800b8a8 <USBD_CtlSendStatus>
  }
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b674:	3b01      	subs	r3, #1
 800b676:	2b02      	cmp	r3, #2
 800b678:	d80b      	bhi.n	800b692 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	885b      	ldrh	r3, [r3, #2]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d10c      	bne.n	800b69c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f90c 	bl	800b8a8 <USBD_CtlSendStatus>
      }
      break;
 800b690:	e004      	b.n	800b69c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f83f 	bl	800b718 <USBD_CtlError>
      break;
 800b69a:	e000      	b.n	800b69e <USBD_ClrFeature+0x3a>
      break;
 800b69c:	bf00      	nop
  }
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	785a      	ldrb	r2, [r3, #1]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	3302      	adds	r3, #2
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	3303      	adds	r3, #3
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	4413      	add	r3, r2
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	3305      	adds	r3, #5
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	3306      	adds	r3, #6
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	3307      	adds	r3, #7
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	b29b      	uxth	r3, r3
 800b706:	4413      	add	r3, r2
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	80da      	strh	r2, [r3, #6]

}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	bc80      	pop	{r7}
 800b716:	4770      	bx	lr

0800b718 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b722:	2180      	movs	r1, #128	@ 0x80
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fc7d 	bl	800c024 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b72a:	2100      	movs	r1, #0
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fc79 	bl	800c024 <USBD_LL_StallEP>
}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b086      	sub	sp, #24
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d032      	beq.n	800b7b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f834 	bl	800b7be <USBD_GetLen>
 800b756:	4603      	mov	r3, r0
 800b758:	3301      	adds	r3, #1
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	1c5a      	adds	r2, r3, #1
 800b768:	75fa      	strb	r2, [r7, #23]
 800b76a:	461a      	mov	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4413      	add	r3, r2
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	75fa      	strb	r2, [r7, #23]
 800b77c:	461a      	mov	r2, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	2203      	movs	r2, #3
 800b784:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b786:	e012      	b.n	800b7ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	60fa      	str	r2, [r7, #12]
 800b78e:	7dfa      	ldrb	r2, [r7, #23]
 800b790:	1c51      	adds	r1, r2, #1
 800b792:	75f9      	strb	r1, [r7, #23]
 800b794:	4611      	mov	r1, r2
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	440a      	add	r2, r1
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	75fa      	strb	r2, [r7, #23]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e8      	bne.n	800b788 <USBD_GetString+0x4e>
    }
  }
}
 800b7b6:	bf00      	nop
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b7ca:	e005      	b.n	800b7d8 <USBD_GetLen+0x1a>
  {
    len++;
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1f5      	bne.n	800b7cc <USBD_GetLen+0xe>
  }

  return len;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr

0800b7ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b802:	88fa      	ldrh	r2, [r7, #6]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b808:	88fa      	ldrh	r2, [r7, #6]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	2100      	movs	r1, #0
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 fc8d 	bl	800c134 <USBD_LL_Transmit>

  return USBD_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	4613      	mov	r3, r2
 800b830:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	2100      	movs	r1, #0
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 fc7b 	bl	800c134 <USBD_LL_Transmit>

  return USBD_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	4613      	mov	r3, r2
 800b854:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2203      	movs	r2, #3
 800b85a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b85e:	88fa      	ldrh	r2, [r7, #6]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b866:	88fa      	ldrh	r2, [r7, #6]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	2100      	movs	r1, #0
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fc80 	bl	800c17a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b892:	88fb      	ldrh	r3, [r7, #6]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	2100      	movs	r1, #0
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fc6e 	bl	800c17a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2204      	movs	r2, #4
 800b8b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2100      	movs	r1, #0
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fc38 	bl	800c134 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2205      	movs	r2, #5
 800b8da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fc48 	bl	800c17a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4912      	ldr	r1, [pc, #72]	@ (800b944 <MX_USB_DEVICE_Init+0x50>)
 800b8fc:	4812      	ldr	r0, [pc, #72]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b8fe:	f7fe ff62 	bl	800a7c6 <USBD_Init>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b908:	f7f5 f94a 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b90c:	490f      	ldr	r1, [pc, #60]	@ (800b94c <MX_USB_DEVICE_Init+0x58>)
 800b90e:	480e      	ldr	r0, [pc, #56]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b910:	f7fe ff84 	bl	800a81c <USBD_RegisterClass>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b91a:	f7f5 f941 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b91e:	490c      	ldr	r1, [pc, #48]	@ (800b950 <MX_USB_DEVICE_Init+0x5c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b922:	f7fe feb5 	bl	800a690 <USBD_CDC_RegisterInterface>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b92c:	f7f5 f938 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b930:	4805      	ldr	r0, [pc, #20]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b932:	f7fe ff8c 	bl	800a84e <USBD_Start>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b93c:	f7f5 f930 	bl	8000ba0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b940:	bf00      	nop
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20000138 	.word	0x20000138
 800b948:	20000a54 	.word	0x20000a54
 800b94c:	20000024 	.word	0x20000024
 800b950:	20000128 	.word	0x20000128

0800b954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b958:	2200      	movs	r2, #0
 800b95a:	4905      	ldr	r1, [pc, #20]	@ (800b970 <CDC_Init_FS+0x1c>)
 800b95c:	4805      	ldr	r0, [pc, #20]	@ (800b974 <CDC_Init_FS+0x20>)
 800b95e:	f7fe fead 	bl	800a6bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b962:	4905      	ldr	r1, [pc, #20]	@ (800b978 <CDC_Init_FS+0x24>)
 800b964:	4803      	ldr	r0, [pc, #12]	@ (800b974 <CDC_Init_FS+0x20>)
 800b966:	f7fe fec2 	bl	800a6ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b96a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20001118 	.word	0x20001118
 800b974:	20000a54 	.word	0x20000a54
 800b978:	20000d18 	.word	0x20000d18

0800b97c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b982:	4618      	mov	r0, r3
 800b984:	46bd      	mov	sp, r7
 800b986:	bc80      	pop	{r7}
 800b988:	4770      	bx	lr
	...

0800b98c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
 800b998:	4613      	mov	r3, r2
 800b99a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b23      	cmp	r3, #35	@ 0x23
 800b9a0:	d84a      	bhi.n	800ba38 <CDC_Control_FS+0xac>
 800b9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a8 <CDC_Control_FS+0x1c>)
 800b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a8:	0800ba39 	.word	0x0800ba39
 800b9ac:	0800ba39 	.word	0x0800ba39
 800b9b0:	0800ba39 	.word	0x0800ba39
 800b9b4:	0800ba39 	.word	0x0800ba39
 800b9b8:	0800ba39 	.word	0x0800ba39
 800b9bc:	0800ba39 	.word	0x0800ba39
 800b9c0:	0800ba39 	.word	0x0800ba39
 800b9c4:	0800ba39 	.word	0x0800ba39
 800b9c8:	0800ba39 	.word	0x0800ba39
 800b9cc:	0800ba39 	.word	0x0800ba39
 800b9d0:	0800ba39 	.word	0x0800ba39
 800b9d4:	0800ba39 	.word	0x0800ba39
 800b9d8:	0800ba39 	.word	0x0800ba39
 800b9dc:	0800ba39 	.word	0x0800ba39
 800b9e0:	0800ba39 	.word	0x0800ba39
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800ba39 	.word	0x0800ba39
 800b9ec:	0800ba39 	.word	0x0800ba39
 800b9f0:	0800ba39 	.word	0x0800ba39
 800b9f4:	0800ba39 	.word	0x0800ba39
 800b9f8:	0800ba39 	.word	0x0800ba39
 800b9fc:	0800ba39 	.word	0x0800ba39
 800ba00:	0800ba39 	.word	0x0800ba39
 800ba04:	0800ba39 	.word	0x0800ba39
 800ba08:	0800ba39 	.word	0x0800ba39
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba39 	.word	0x0800ba39
 800ba18:	0800ba39 	.word	0x0800ba39
 800ba1c:	0800ba39 	.word	0x0800ba39
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba39 	.word	0x0800ba39
 800ba28:	0800ba39 	.word	0x0800ba39
 800ba2c:	0800ba39 	.word	0x0800ba39
 800ba30:	0800ba39 	.word	0x0800ba39
 800ba34:	0800ba39 	.word	0x0800ba39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba38:	bf00      	nop
  }

  return (USBD_OK);
 800ba3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bc80      	pop	{r7}
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop

0800ba48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  if (Buf[0] == 'a') {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Por ejemplo, toggle de un LED
//  }
	for(short i = 0;i < *Len;i++){
 800ba52:	2300      	movs	r3, #0
 800ba54:	81fb      	strh	r3, [r7, #14]
 800ba56:	e00f      	b.n	800ba78 <CDC_Receive_FS+0x30>
		On_Data_RX(&rx,Buf[i]);
 800ba58:	4b10      	ldr	r3, [pc, #64]	@ (800ba9c <CDC_Receive_FS+0x54>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	440a      	add	r2, r1
 800ba64:	7812      	ldrb	r2, [r2, #0]
 800ba66:	4611      	mov	r1, r2
 800ba68:	480d      	ldr	r0, [pc, #52]	@ (800baa0 <CDC_Receive_FS+0x58>)
 800ba6a:	4798      	blx	r3
	for(short i = 0;i < *Len;i++){
 800ba6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	3301      	adds	r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	81fb      	strh	r3, [r7, #14]
 800ba78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d3e9      	bcc.n	800ba58 <CDC_Receive_FS+0x10>
	}
//  char msg[] = "Dato recibido\r\n";
//  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));

  // Reestablecer recepción USB
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	4807      	ldr	r0, [pc, #28]	@ (800baa4 <CDC_Receive_FS+0x5c>)
 800ba88:	f7fe fe31 	bl	800a6ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba8c:	4805      	ldr	r0, [pc, #20]	@ (800baa4 <CDC_Receive_FS+0x5c>)
 800ba8e:	f7fe fe70 	bl	800a772 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	20001518 	.word	0x20001518
 800baa0:	20000524 	.word	0x20000524
 800baa4:	20000a54 	.word	0x20000a54

0800baa8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bab8:	4b0d      	ldr	r3, [pc, #52]	@ (800baf0 <CDC_Transmit_FS+0x48>)
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800babe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800baca:	2301      	movs	r3, #1
 800bacc:	e00b      	b.n	800bae6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bace:	887b      	ldrh	r3, [r7, #2]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4806      	ldr	r0, [pc, #24]	@ (800baf0 <CDC_Transmit_FS+0x48>)
 800bad6:	f7fe fdf1 	bl	800a6bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bada:	4805      	ldr	r0, [pc, #20]	@ (800baf0 <CDC_Transmit_FS+0x48>)
 800badc:	f7fe fe1a 	bl	800a714 <USBD_CDC_TransmitPacket>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20000a54 	.word	0x20000a54

0800baf4 <CDC_Attach_RX_Funct>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_RX_Funct(void(*rxFunction)(_sRx *rx, uint8_t data)){
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	On_Data_RX = rxFunction;
 800bafc:	4a03      	ldr	r2, [pc, #12]	@ (800bb0c <CDC_Attach_RX_Funct+0x18>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6013      	str	r3, [r2, #0]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr
 800bb0c:	20001518 	.word	0x20001518

0800bb10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	6039      	str	r1, [r7, #0]
 800bb1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2212      	movs	r2, #18
 800bb20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb22:	4b03      	ldr	r3, [pc, #12]	@ (800bb30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bc80      	pop	{r7}
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20000154 	.word	0x20000154

0800bb34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2204      	movs	r2, #4
 800bb44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb46:	4b03      	ldr	r3, [pc, #12]	@ (800bb54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	20000168 	.word	0x20000168

0800bb58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d105      	bne.n	800bb76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	4907      	ldr	r1, [pc, #28]	@ (800bb8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb6e:	4808      	ldr	r0, [pc, #32]	@ (800bb90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb70:	f7ff fde3 	bl	800b73a <USBD_GetString>
 800bb74:	e004      	b.n	800bb80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	4904      	ldr	r1, [pc, #16]	@ (800bb8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb7a:	4805      	ldr	r0, [pc, #20]	@ (800bb90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb7c:	f7ff fddd 	bl	800b73a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb80:	4b02      	ldr	r3, [pc, #8]	@ (800bb8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2000151c 	.word	0x2000151c
 800bb90:	0800cfb4 	.word	0x0800cfb4

0800bb94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	4904      	ldr	r1, [pc, #16]	@ (800bbb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bba4:	4804      	ldr	r0, [pc, #16]	@ (800bbb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bba6:	f7ff fdc8 	bl	800b73a <USBD_GetString>
  return USBD_StrDesc;
 800bbaa:	4b02      	ldr	r3, [pc, #8]	@ (800bbb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	2000151c 	.word	0x2000151c
 800bbb8:	0800cfcc 	.word	0x0800cfcc

0800bbbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	221a      	movs	r2, #26
 800bbcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbce:	f000 f843 	bl	800bc58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbd2:	4b02      	ldr	r3, [pc, #8]	@ (800bbdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	2000016c 	.word	0x2000016c

0800bbe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4907      	ldr	r1, [pc, #28]	@ (800bc14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbf6:	4808      	ldr	r0, [pc, #32]	@ (800bc18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbf8:	f7ff fd9f 	bl	800b73a <USBD_GetString>
 800bbfc:	e004      	b.n	800bc08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4904      	ldr	r1, [pc, #16]	@ (800bc14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc02:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc04:	f7ff fd99 	bl	800b73a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc08:	4b02      	ldr	r3, [pc, #8]	@ (800bc14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2000151c 	.word	0x2000151c
 800bc18:	0800cfe0 	.word	0x0800cfe0

0800bc1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4907      	ldr	r1, [pc, #28]	@ (800bc50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc32:	4808      	ldr	r0, [pc, #32]	@ (800bc54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc34:	f7ff fd81 	bl	800b73a <USBD_GetString>
 800bc38:	e004      	b.n	800bc44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	4904      	ldr	r1, [pc, #16]	@ (800bc50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc3e:	4805      	ldr	r0, [pc, #20]	@ (800bc54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc40:	f7ff fd7b 	bl	800b73a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc44:	4b02      	ldr	r3, [pc, #8]	@ (800bc50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000151c 	.word	0x2000151c
 800bc54:	0800cfec 	.word	0x0800cfec

0800bc58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc9c <Get_SerialNum+0x44>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc64:	4b0e      	ldr	r3, [pc, #56]	@ (800bca0 <Get_SerialNum+0x48>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bca4 <Get_SerialNum+0x4c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4413      	add	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d009      	beq.n	800bc92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc7e:	2208      	movs	r2, #8
 800bc80:	4909      	ldr	r1, [pc, #36]	@ (800bca8 <Get_SerialNum+0x50>)
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 f814 	bl	800bcb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc88:	2204      	movs	r2, #4
 800bc8a:	4908      	ldr	r1, [pc, #32]	@ (800bcac <Get_SerialNum+0x54>)
 800bc8c:	68b8      	ldr	r0, [r7, #8]
 800bc8e:	f000 f80f 	bl	800bcb0 <IntToUnicode>
  }
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	1ffff7e8 	.word	0x1ffff7e8
 800bca0:	1ffff7ec 	.word	0x1ffff7ec
 800bca4:	1ffff7f0 	.word	0x1ffff7f0
 800bca8:	2000016e 	.word	0x2000016e
 800bcac:	2000017e 	.word	0x2000017e

0800bcb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b087      	sub	sp, #28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	75fb      	strb	r3, [r7, #23]
 800bcc6:	e027      	b.n	800bd18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	0f1b      	lsrs	r3, r3, #28
 800bccc:	2b09      	cmp	r3, #9
 800bcce:	d80b      	bhi.n	800bce8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	0f1b      	lsrs	r3, r3, #28
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	4619      	mov	r1, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	440b      	add	r3, r1
 800bce0:	3230      	adds	r2, #48	@ 0x30
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	e00a      	b.n	800bcfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	0f1b      	lsrs	r3, r3, #28
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	440b      	add	r3, r1
 800bcf8:	3237      	adds	r2, #55	@ 0x37
 800bcfa:	b2d2      	uxtb	r2, r2
 800bcfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	3301      	adds	r3, #1
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	3301      	adds	r3, #1
 800bd16:	75fb      	strb	r3, [r7, #23]
 800bd18:	7dfa      	ldrb	r2, [r7, #23]
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d3d3      	bcc.n	800bcc8 <IntToUnicode+0x18>
  }
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bc80      	pop	{r7}
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a0d      	ldr	r2, [pc, #52]	@ (800bd70 <HAL_PCD_MspInit+0x44>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d113      	bne.n	800bd66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <HAL_PCD_MspInit+0x48>)
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	4a0c      	ldr	r2, [pc, #48]	@ (800bd74 <HAL_PCD_MspInit+0x48>)
 800bd44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd48:	61d3      	str	r3, [r2, #28]
 800bd4a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd74 <HAL_PCD_MspInit+0x48>)
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	2014      	movs	r0, #20
 800bd5c:	f7f5 fe57 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bd60:	2014      	movs	r0, #20
 800bd62:	f7f5 fe70 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	40005c00 	.word	0x40005c00
 800bd74:	40021000 	.word	0x40021000

0800bd78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4610      	mov	r0, r2
 800bd90:	f7fe fda5 	bl	800a8de <USBD_LL_SetupStage>
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	460b      	mov	r3, r1
 800bda6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	440b      	add	r3, r1
 800bdbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	78fb      	ldrb	r3, [r7, #3]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	f7fe fdd7 	bl	800a978 <USBD_LL_DataOutStage>
}
 800bdca:	bf00      	nop
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	460b      	mov	r3, r1
 800bddc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bde4:	78fa      	ldrb	r2, [r7, #3]
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3324      	adds	r3, #36	@ 0x24
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	78fb      	ldrb	r3, [r7, #3]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7fe fe2e 	bl	800aa5a <USBD_LL_DataInStage>
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be14:	4618      	mov	r0, r3
 800be16:	f7fe ff3e 	bl	800ac96 <USBD_LL_SOF>
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be2a:	2301      	movs	r3, #1
 800be2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	799b      	ldrb	r3, [r3, #6]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d001      	beq.n	800be3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be36:	f7f4 feb3 	bl	8000ba0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be40:	7bfa      	ldrb	r2, [r7, #15]
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe feee 	bl	800ac26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fea7 	bl	800aba4 <USBD_LL_Reset>
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fe fee8 	bl	800ac44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	7a9b      	ldrb	r3, [r3, #10]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d005      	beq.n	800be88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be7c:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <HAL_PCD_SuspendCallback+0x30>)
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	4a03      	ldr	r2, [pc, #12]	@ (800be90 <HAL_PCD_SuspendCallback+0x30>)
 800be82:	f043 0306 	orr.w	r3, r3, #6
 800be86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	e000ed00 	.word	0xe000ed00

0800be94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fee2 	bl	800ac6c <USBD_LL_Resume>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800beb8:	4a28      	ldr	r2, [pc, #160]	@ (800bf5c <USBD_LL_Init+0xac>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a26      	ldr	r2, [pc, #152]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bec4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bec8:	4b24      	ldr	r3, [pc, #144]	@ (800bf5c <USBD_LL_Init+0xac>)
 800beca:	4a25      	ldr	r2, [pc, #148]	@ (800bf60 <USBD_LL_Init+0xb0>)
 800becc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bece:	4b23      	ldr	r3, [pc, #140]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bed0:	2208      	movs	r2, #8
 800bed2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bed4:	4b21      	ldr	r3, [pc, #132]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bed6:	2202      	movs	r2, #2
 800bed8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800beda:	4b20      	ldr	r3, [pc, #128]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bedc:	2200      	movs	r2, #0
 800bede:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bee0:	4b1e      	ldr	r3, [pc, #120]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bee6:	4b1d      	ldr	r3, [pc, #116]	@ (800bf5c <USBD_LL_Init+0xac>)
 800bee8:	2200      	movs	r2, #0
 800beea:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800beec:	481b      	ldr	r0, [pc, #108]	@ (800bf5c <USBD_LL_Init+0xac>)
 800beee:	f7f8 fdb9 	bl	8004a64 <HAL_PCD_Init>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bef8:	f7f4 fe52 	bl	8000ba0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf02:	2318      	movs	r3, #24
 800bf04:	2200      	movs	r2, #0
 800bf06:	2100      	movs	r1, #0
 800bf08:	f7fa faca 	bl	80064a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf12:	2358      	movs	r3, #88	@ 0x58
 800bf14:	2200      	movs	r2, #0
 800bf16:	2180      	movs	r1, #128	@ 0x80
 800bf18:	f7fa fac2 	bl	80064a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf22:	23c0      	movs	r3, #192	@ 0xc0
 800bf24:	2200      	movs	r2, #0
 800bf26:	2181      	movs	r1, #129	@ 0x81
 800bf28:	f7fa faba 	bl	80064a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bf36:	2200      	movs	r2, #0
 800bf38:	2101      	movs	r1, #1
 800bf3a:	f7fa fab1 	bl	80064a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bf44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2182      	movs	r1, #130	@ 0x82
 800bf4c:	f7fa faa8 	bl	80064a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000171c 	.word	0x2000171c
 800bf60:	40005c00 	.word	0x40005c00

0800bf64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f8 fe68 	bl	8004c50 <HAL_PCD_Start>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f94e 	bl	800c228 <USBD_Get_USB_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	4608      	mov	r0, r1
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	70fb      	strb	r3, [r7, #3]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70bb      	strb	r3, [r7, #2]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bfc2:	78bb      	ldrb	r3, [r7, #2]
 800bfc4:	883a      	ldrh	r2, [r7, #0]
 800bfc6:	78f9      	ldrb	r1, [r7, #3]
 800bfc8:	f7f8 ffbc 	bl	8004f44 <HAL_PCD_EP_Open>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f928 	bl	800c228 <USBD_Get_USB_Status>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	460b      	mov	r3, r1
 800bff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c000:	78fa      	ldrb	r2, [r7, #3]
 800c002:	4611      	mov	r1, r2
 800c004:	4618      	mov	r0, r3
 800c006:	f7f8 fffa 	bl	8004ffe <HAL_PCD_EP_Close>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f909 	bl	800c228 <USBD_Get_USB_Status>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c03e:	78fa      	ldrb	r2, [r7, #3]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7f9 f8a2 	bl	800518c <HAL_PCD_EP_SetStall>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f8ea 	bl	800c228 <USBD_Get_USB_Status>
 800c054:	4603      	mov	r3, r0
 800c056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	460b      	mov	r3, r1
 800c06c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c07c:	78fa      	ldrb	r2, [r7, #3]
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f7f9 f8e3 	bl	800524c <HAL_PCD_EP_ClrStall>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 f8cb 	bl	800c228 <USBD_Get_USB_Status>
 800c092:	4603      	mov	r3, r0
 800c094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c096:	7bbb      	ldrb	r3, [r7, #14]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c0b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da0b      	bge.n	800c0d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0c2:	68f9      	ldr	r1, [r7, #12]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	440b      	add	r3, r1
 800c0ce:	3312      	adds	r3, #18
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	e00b      	b.n	800c0ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	440b      	add	r3, r1
 800c0e6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c0ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr

0800c0f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	460b      	mov	r3, r1
 800c100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7f8 fef1 	bl	8004efc <HAL_PCD_SetAddress>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	4618      	mov	r0, r3
 800c122:	f000 f881 	bl	800c228 <USBD_Get_USB_Status>
 800c126:	4603      	mov	r3, r0
 800c128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	461a      	mov	r2, r3
 800c140:	460b      	mov	r3, r1
 800c142:	72fb      	strb	r3, [r7, #11]
 800c144:	4613      	mov	r3, r2
 800c146:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c156:	893b      	ldrh	r3, [r7, #8]
 800c158:	7af9      	ldrb	r1, [r7, #11]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	f7f8 ffdf 	bl	800511e <HAL_PCD_EP_Transmit>
 800c160:	4603      	mov	r3, r0
 800c162:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 f85e 	bl	800c228 <USBD_Get_USB_Status>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c170:	7dbb      	ldrb	r3, [r7, #22]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3718      	adds	r7, #24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b086      	sub	sp, #24
 800c17e:	af00      	add	r7, sp, #0
 800c180:	60f8      	str	r0, [r7, #12]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	461a      	mov	r2, r3
 800c186:	460b      	mov	r3, r1
 800c188:	72fb      	strb	r3, [r7, #11]
 800c18a:	4613      	mov	r3, r2
 800c18c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c19c:	893b      	ldrh	r3, [r7, #8]
 800c19e:	7af9      	ldrb	r1, [r7, #11]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	f7f8 ff74 	bl	800508e <HAL_PCD_EP_Receive>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 f83b 	bl	800c228 <USBD_Get_USB_Status>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c1d2:	78fa      	ldrb	r2, [r7, #3]
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f8 ff8a 	bl	80050f0 <HAL_PCD_EP_GetRxCount>
 800c1dc:	4603      	mov	r3, r0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1f0:	4b02      	ldr	r3, [pc, #8]	@ (800c1fc <USBD_static_malloc+0x14>)
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bc80      	pop	{r7}
 800c1fa:	4770      	bx	lr
 800c1fc:	200019f4 	.word	0x200019f4

0800c200 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]

}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bc80      	pop	{r7}
 800c210:	4770      	bx	lr

0800c212 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	460b      	mov	r3, r1
 800c21c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	bc80      	pop	{r7}
 800c226:	4770      	bx	lr

0800c228 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d817      	bhi.n	800c26c <USBD_Get_USB_Status+0x44>
 800c23c:	a201      	add	r2, pc, #4	@ (adr r2, 800c244 <USBD_Get_USB_Status+0x1c>)
 800c23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c242:	bf00      	nop
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c25b 	.word	0x0800c25b
 800c24c:	0800c261 	.word	0x0800c261
 800c250:	0800c267 	.word	0x0800c267
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]
    break;
 800c258:	e00b      	b.n	800c272 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c25a:	2302      	movs	r3, #2
 800c25c:	73fb      	strb	r3, [r7, #15]
    break;
 800c25e:	e008      	b.n	800c272 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c260:	2301      	movs	r3, #1
 800c262:	73fb      	strb	r3, [r7, #15]
    break;
 800c264:	e005      	b.n	800c272 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c266:	2302      	movs	r3, #2
 800c268:	73fb      	strb	r3, [r7, #15]
    break;
 800c26a:	e002      	b.n	800c272 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c26c:	2302      	movs	r3, #2
 800c26e:	73fb      	strb	r3, [r7, #15]
    break;
 800c270:	bf00      	nop
  }
  return usb_status;
 800c272:	7bfb      	ldrb	r3, [r7, #15]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <_vsniprintf_r>:
 800c280:	b530      	push	{r4, r5, lr}
 800c282:	4614      	mov	r4, r2
 800c284:	2c00      	cmp	r4, #0
 800c286:	4605      	mov	r5, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	b09b      	sub	sp, #108	@ 0x6c
 800c28c:	da05      	bge.n	800c29a <_vsniprintf_r+0x1a>
 800c28e:	238b      	movs	r3, #139	@ 0x8b
 800c290:	6003      	str	r3, [r0, #0]
 800c292:	f04f 30ff 	mov.w	r0, #4294967295
 800c296:	b01b      	add	sp, #108	@ 0x6c
 800c298:	bd30      	pop	{r4, r5, pc}
 800c29a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c29e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2a8:	bf0c      	ite	eq
 800c2aa:	4623      	moveq	r3, r4
 800c2ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c2b0:	9302      	str	r3, [sp, #8]
 800c2b2:	9305      	str	r3, [sp, #20]
 800c2b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2b8:	9100      	str	r1, [sp, #0]
 800c2ba:	9104      	str	r1, [sp, #16]
 800c2bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c2c0:	4669      	mov	r1, sp
 800c2c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c2c4:	f000 f9ac 	bl	800c620 <_svfiprintf_r>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	bfbc      	itt	lt
 800c2cc:	238b      	movlt	r3, #139	@ 0x8b
 800c2ce:	602b      	strlt	r3, [r5, #0]
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d0e0      	beq.n	800c296 <_vsniprintf_r+0x16>
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	701a      	strb	r2, [r3, #0]
 800c2da:	e7dc      	b.n	800c296 <_vsniprintf_r+0x16>

0800c2dc <vsniprintf>:
 800c2dc:	b507      	push	{r0, r1, r2, lr}
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	460a      	mov	r2, r1
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	4803      	ldr	r0, [pc, #12]	@ (800c2f4 <vsniprintf+0x18>)
 800c2e8:	6800      	ldr	r0, [r0, #0]
 800c2ea:	f7ff ffc9 	bl	800c280 <_vsniprintf_r>
 800c2ee:	b003      	add	sp, #12
 800c2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2f4:	20000188 	.word	0x20000188

0800c2f8 <memset>:
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	4402      	add	r2, r0
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d100      	bne.n	800c302 <memset+0xa>
 800c300:	4770      	bx	lr
 800c302:	f803 1b01 	strb.w	r1, [r3], #1
 800c306:	e7f9      	b.n	800c2fc <memset+0x4>

0800c308 <__errno>:
 800c308:	4b01      	ldr	r3, [pc, #4]	@ (800c310 <__errno+0x8>)
 800c30a:	6818      	ldr	r0, [r3, #0]
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20000188 	.word	0x20000188

0800c314 <__libc_init_array>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	2600      	movs	r6, #0
 800c318:	4d0c      	ldr	r5, [pc, #48]	@ (800c34c <__libc_init_array+0x38>)
 800c31a:	4c0d      	ldr	r4, [pc, #52]	@ (800c350 <__libc_init_array+0x3c>)
 800c31c:	1b64      	subs	r4, r4, r5
 800c31e:	10a4      	asrs	r4, r4, #2
 800c320:	42a6      	cmp	r6, r4
 800c322:	d109      	bne.n	800c338 <__libc_init_array+0x24>
 800c324:	f000 fc76 	bl	800cc14 <_init>
 800c328:	2600      	movs	r6, #0
 800c32a:	4d0a      	ldr	r5, [pc, #40]	@ (800c354 <__libc_init_array+0x40>)
 800c32c:	4c0a      	ldr	r4, [pc, #40]	@ (800c358 <__libc_init_array+0x44>)
 800c32e:	1b64      	subs	r4, r4, r5
 800c330:	10a4      	asrs	r4, r4, #2
 800c332:	42a6      	cmp	r6, r4
 800c334:	d105      	bne.n	800c342 <__libc_init_array+0x2e>
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33c:	4798      	blx	r3
 800c33e:	3601      	adds	r6, #1
 800c340:	e7ee      	b.n	800c320 <__libc_init_array+0xc>
 800c342:	f855 3b04 	ldr.w	r3, [r5], #4
 800c346:	4798      	blx	r3
 800c348:	3601      	adds	r6, #1
 800c34a:	e7f2      	b.n	800c332 <__libc_init_array+0x1e>
 800c34c:	0800d7c8 	.word	0x0800d7c8
 800c350:	0800d7c8 	.word	0x0800d7c8
 800c354:	0800d7c8 	.word	0x0800d7c8
 800c358:	0800d7cc 	.word	0x0800d7cc

0800c35c <__retarget_lock_acquire_recursive>:
 800c35c:	4770      	bx	lr

0800c35e <__retarget_lock_release_recursive>:
 800c35e:	4770      	bx	lr

0800c360 <memcpy>:
 800c360:	440a      	add	r2, r1
 800c362:	4291      	cmp	r1, r2
 800c364:	f100 33ff 	add.w	r3, r0, #4294967295
 800c368:	d100      	bne.n	800c36c <memcpy+0xc>
 800c36a:	4770      	bx	lr
 800c36c:	b510      	push	{r4, lr}
 800c36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c372:	4291      	cmp	r1, r2
 800c374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c378:	d1f9      	bne.n	800c36e <memcpy+0xe>
 800c37a:	bd10      	pop	{r4, pc}

0800c37c <_free_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4605      	mov	r5, r0
 800c380:	2900      	cmp	r1, #0
 800c382:	d040      	beq.n	800c406 <_free_r+0x8a>
 800c384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c388:	1f0c      	subs	r4, r1, #4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	bfb8      	it	lt
 800c38e:	18e4      	addlt	r4, r4, r3
 800c390:	f000 f8de 	bl	800c550 <__malloc_lock>
 800c394:	4a1c      	ldr	r2, [pc, #112]	@ (800c408 <_free_r+0x8c>)
 800c396:	6813      	ldr	r3, [r2, #0]
 800c398:	b933      	cbnz	r3, 800c3a8 <_free_r+0x2c>
 800c39a:	6063      	str	r3, [r4, #4]
 800c39c:	6014      	str	r4, [r2, #0]
 800c39e:	4628      	mov	r0, r5
 800c3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a4:	f000 b8da 	b.w	800c55c <__malloc_unlock>
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d908      	bls.n	800c3be <_free_r+0x42>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	1821      	adds	r1, r4, r0
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	bf01      	itttt	eq
 800c3b4:	6819      	ldreq	r1, [r3, #0]
 800c3b6:	685b      	ldreq	r3, [r3, #4]
 800c3b8:	1809      	addeq	r1, r1, r0
 800c3ba:	6021      	streq	r1, [r4, #0]
 800c3bc:	e7ed      	b.n	800c39a <_free_r+0x1e>
 800c3be:	461a      	mov	r2, r3
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	b10b      	cbz	r3, 800c3c8 <_free_r+0x4c>
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d9fa      	bls.n	800c3be <_free_r+0x42>
 800c3c8:	6811      	ldr	r1, [r2, #0]
 800c3ca:	1850      	adds	r0, r2, r1
 800c3cc:	42a0      	cmp	r0, r4
 800c3ce:	d10b      	bne.n	800c3e8 <_free_r+0x6c>
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	4401      	add	r1, r0
 800c3d4:	1850      	adds	r0, r2, r1
 800c3d6:	4283      	cmp	r3, r0
 800c3d8:	6011      	str	r1, [r2, #0]
 800c3da:	d1e0      	bne.n	800c39e <_free_r+0x22>
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4408      	add	r0, r1
 800c3e2:	6010      	str	r0, [r2, #0]
 800c3e4:	6053      	str	r3, [r2, #4]
 800c3e6:	e7da      	b.n	800c39e <_free_r+0x22>
 800c3e8:	d902      	bls.n	800c3f0 <_free_r+0x74>
 800c3ea:	230c      	movs	r3, #12
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	e7d6      	b.n	800c39e <_free_r+0x22>
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	1821      	adds	r1, r4, r0
 800c3f4:	428b      	cmp	r3, r1
 800c3f6:	bf01      	itttt	eq
 800c3f8:	6819      	ldreq	r1, [r3, #0]
 800c3fa:	685b      	ldreq	r3, [r3, #4]
 800c3fc:	1809      	addeq	r1, r1, r0
 800c3fe:	6021      	streq	r1, [r4, #0]
 800c400:	6063      	str	r3, [r4, #4]
 800c402:	6054      	str	r4, [r2, #4]
 800c404:	e7cb      	b.n	800c39e <_free_r+0x22>
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20001d58 	.word	0x20001d58

0800c40c <sbrk_aligned>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4e0f      	ldr	r6, [pc, #60]	@ (800c44c <sbrk_aligned+0x40>)
 800c410:	460c      	mov	r4, r1
 800c412:	6831      	ldr	r1, [r6, #0]
 800c414:	4605      	mov	r5, r0
 800c416:	b911      	cbnz	r1, 800c41e <sbrk_aligned+0x12>
 800c418:	f000 fba8 	bl	800cb6c <_sbrk_r>
 800c41c:	6030      	str	r0, [r6, #0]
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	f000 fba3 	bl	800cb6c <_sbrk_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d103      	bne.n	800c432 <sbrk_aligned+0x26>
 800c42a:	f04f 34ff 	mov.w	r4, #4294967295
 800c42e:	4620      	mov	r0, r4
 800c430:	bd70      	pop	{r4, r5, r6, pc}
 800c432:	1cc4      	adds	r4, r0, #3
 800c434:	f024 0403 	bic.w	r4, r4, #3
 800c438:	42a0      	cmp	r0, r4
 800c43a:	d0f8      	beq.n	800c42e <sbrk_aligned+0x22>
 800c43c:	1a21      	subs	r1, r4, r0
 800c43e:	4628      	mov	r0, r5
 800c440:	f000 fb94 	bl	800cb6c <_sbrk_r>
 800c444:	3001      	adds	r0, #1
 800c446:	d1f2      	bne.n	800c42e <sbrk_aligned+0x22>
 800c448:	e7ef      	b.n	800c42a <sbrk_aligned+0x1e>
 800c44a:	bf00      	nop
 800c44c:	20001d54 	.word	0x20001d54

0800c450 <_malloc_r>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	1ccd      	adds	r5, r1, #3
 800c456:	f025 0503 	bic.w	r5, r5, #3
 800c45a:	3508      	adds	r5, #8
 800c45c:	2d0c      	cmp	r5, #12
 800c45e:	bf38      	it	cc
 800c460:	250c      	movcc	r5, #12
 800c462:	2d00      	cmp	r5, #0
 800c464:	4606      	mov	r6, r0
 800c466:	db01      	blt.n	800c46c <_malloc_r+0x1c>
 800c468:	42a9      	cmp	r1, r5
 800c46a:	d904      	bls.n	800c476 <_malloc_r+0x26>
 800c46c:	230c      	movs	r3, #12
 800c46e:	6033      	str	r3, [r6, #0]
 800c470:	2000      	movs	r0, #0
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c54c <_malloc_r+0xfc>
 800c47a:	f000 f869 	bl	800c550 <__malloc_lock>
 800c47e:	f8d8 3000 	ldr.w	r3, [r8]
 800c482:	461c      	mov	r4, r3
 800c484:	bb44      	cbnz	r4, 800c4d8 <_malloc_r+0x88>
 800c486:	4629      	mov	r1, r5
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ffbf 	bl	800c40c <sbrk_aligned>
 800c48e:	1c43      	adds	r3, r0, #1
 800c490:	4604      	mov	r4, r0
 800c492:	d158      	bne.n	800c546 <_malloc_r+0xf6>
 800c494:	f8d8 4000 	ldr.w	r4, [r8]
 800c498:	4627      	mov	r7, r4
 800c49a:	2f00      	cmp	r7, #0
 800c49c:	d143      	bne.n	800c526 <_malloc_r+0xd6>
 800c49e:	2c00      	cmp	r4, #0
 800c4a0:	d04b      	beq.n	800c53a <_malloc_r+0xea>
 800c4a2:	6823      	ldr	r3, [r4, #0]
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	eb04 0903 	add.w	r9, r4, r3
 800c4ac:	f000 fb5e 	bl	800cb6c <_sbrk_r>
 800c4b0:	4581      	cmp	r9, r0
 800c4b2:	d142      	bne.n	800c53a <_malloc_r+0xea>
 800c4b4:	6821      	ldr	r1, [r4, #0]
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	1a6d      	subs	r5, r5, r1
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7ff ffa6 	bl	800c40c <sbrk_aligned>
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	d03a      	beq.n	800c53a <_malloc_r+0xea>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	442b      	add	r3, r5
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	bb62      	cbnz	r2, 800c52c <_malloc_r+0xdc>
 800c4d2:	f8c8 7000 	str.w	r7, [r8]
 800c4d6:	e00f      	b.n	800c4f8 <_malloc_r+0xa8>
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	1b52      	subs	r2, r2, r5
 800c4dc:	d420      	bmi.n	800c520 <_malloc_r+0xd0>
 800c4de:	2a0b      	cmp	r2, #11
 800c4e0:	d917      	bls.n	800c512 <_malloc_r+0xc2>
 800c4e2:	1961      	adds	r1, r4, r5
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	6025      	str	r5, [r4, #0]
 800c4e8:	bf18      	it	ne
 800c4ea:	6059      	strne	r1, [r3, #4]
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	bf08      	it	eq
 800c4f0:	f8c8 1000 	streq.w	r1, [r8]
 800c4f4:	5162      	str	r2, [r4, r5]
 800c4f6:	604b      	str	r3, [r1, #4]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f82f 	bl	800c55c <__malloc_unlock>
 800c4fe:	f104 000b 	add.w	r0, r4, #11
 800c502:	1d23      	adds	r3, r4, #4
 800c504:	f020 0007 	bic.w	r0, r0, #7
 800c508:	1ac2      	subs	r2, r0, r3
 800c50a:	bf1c      	itt	ne
 800c50c:	1a1b      	subne	r3, r3, r0
 800c50e:	50a3      	strne	r3, [r4, r2]
 800c510:	e7af      	b.n	800c472 <_malloc_r+0x22>
 800c512:	6862      	ldr	r2, [r4, #4]
 800c514:	42a3      	cmp	r3, r4
 800c516:	bf0c      	ite	eq
 800c518:	f8c8 2000 	streq.w	r2, [r8]
 800c51c:	605a      	strne	r2, [r3, #4]
 800c51e:	e7eb      	b.n	800c4f8 <_malloc_r+0xa8>
 800c520:	4623      	mov	r3, r4
 800c522:	6864      	ldr	r4, [r4, #4]
 800c524:	e7ae      	b.n	800c484 <_malloc_r+0x34>
 800c526:	463c      	mov	r4, r7
 800c528:	687f      	ldr	r7, [r7, #4]
 800c52a:	e7b6      	b.n	800c49a <_malloc_r+0x4a>
 800c52c:	461a      	mov	r2, r3
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	42a3      	cmp	r3, r4
 800c532:	d1fb      	bne.n	800c52c <_malloc_r+0xdc>
 800c534:	2300      	movs	r3, #0
 800c536:	6053      	str	r3, [r2, #4]
 800c538:	e7de      	b.n	800c4f8 <_malloc_r+0xa8>
 800c53a:	230c      	movs	r3, #12
 800c53c:	4630      	mov	r0, r6
 800c53e:	6033      	str	r3, [r6, #0]
 800c540:	f000 f80c 	bl	800c55c <__malloc_unlock>
 800c544:	e794      	b.n	800c470 <_malloc_r+0x20>
 800c546:	6005      	str	r5, [r0, #0]
 800c548:	e7d6      	b.n	800c4f8 <_malloc_r+0xa8>
 800c54a:	bf00      	nop
 800c54c:	20001d58 	.word	0x20001d58

0800c550 <__malloc_lock>:
 800c550:	4801      	ldr	r0, [pc, #4]	@ (800c558 <__malloc_lock+0x8>)
 800c552:	f7ff bf03 	b.w	800c35c <__retarget_lock_acquire_recursive>
 800c556:	bf00      	nop
 800c558:	20001d50 	.word	0x20001d50

0800c55c <__malloc_unlock>:
 800c55c:	4801      	ldr	r0, [pc, #4]	@ (800c564 <__malloc_unlock+0x8>)
 800c55e:	f7ff befe 	b.w	800c35e <__retarget_lock_release_recursive>
 800c562:	bf00      	nop
 800c564:	20001d50 	.word	0x20001d50

0800c568 <__ssputs_r>:
 800c568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56c:	461f      	mov	r7, r3
 800c56e:	688e      	ldr	r6, [r1, #8]
 800c570:	4682      	mov	sl, r0
 800c572:	42be      	cmp	r6, r7
 800c574:	460c      	mov	r4, r1
 800c576:	4690      	mov	r8, r2
 800c578:	680b      	ldr	r3, [r1, #0]
 800c57a:	d82d      	bhi.n	800c5d8 <__ssputs_r+0x70>
 800c57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c580:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c584:	d026      	beq.n	800c5d4 <__ssputs_r+0x6c>
 800c586:	6965      	ldr	r5, [r4, #20]
 800c588:	6909      	ldr	r1, [r1, #16]
 800c58a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c58e:	eba3 0901 	sub.w	r9, r3, r1
 800c592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c596:	1c7b      	adds	r3, r7, #1
 800c598:	444b      	add	r3, r9
 800c59a:	106d      	asrs	r5, r5, #1
 800c59c:	429d      	cmp	r5, r3
 800c59e:	bf38      	it	cc
 800c5a0:	461d      	movcc	r5, r3
 800c5a2:	0553      	lsls	r3, r2, #21
 800c5a4:	d527      	bpl.n	800c5f6 <__ssputs_r+0x8e>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f7ff ff52 	bl	800c450 <_malloc_r>
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	b360      	cbz	r0, 800c60a <__ssputs_r+0xa2>
 800c5b0:	464a      	mov	r2, r9
 800c5b2:	6921      	ldr	r1, [r4, #16]
 800c5b4:	f7ff fed4 	bl	800c360 <memcpy>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	6126      	str	r6, [r4, #16]
 800c5c6:	444e      	add	r6, r9
 800c5c8:	6026      	str	r6, [r4, #0]
 800c5ca:	463e      	mov	r6, r7
 800c5cc:	6165      	str	r5, [r4, #20]
 800c5ce:	eba5 0509 	sub.w	r5, r5, r9
 800c5d2:	60a5      	str	r5, [r4, #8]
 800c5d4:	42be      	cmp	r6, r7
 800c5d6:	d900      	bls.n	800c5da <__ssputs_r+0x72>
 800c5d8:	463e      	mov	r6, r7
 800c5da:	4632      	mov	r2, r6
 800c5dc:	4641      	mov	r1, r8
 800c5de:	6820      	ldr	r0, [r4, #0]
 800c5e0:	f000 faaa 	bl	800cb38 <memmove>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	1b9b      	subs	r3, r3, r6
 800c5ea:	60a3      	str	r3, [r4, #8]
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	4433      	add	r3, r6
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	f000 fad6 	bl	800cba8 <_realloc_r>
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d1e0      	bne.n	800c5c4 <__ssputs_r+0x5c>
 800c602:	4650      	mov	r0, sl
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	f7ff feb9 	bl	800c37c <_free_r>
 800c60a:	230c      	movs	r3, #12
 800c60c:	f8ca 3000 	str.w	r3, [sl]
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	f04f 30ff 	mov.w	r0, #4294967295
 800c616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	e7e9      	b.n	800c5f2 <__ssputs_r+0x8a>
	...

0800c620 <_svfiprintf_r>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	4698      	mov	r8, r3
 800c626:	898b      	ldrh	r3, [r1, #12]
 800c628:	4607      	mov	r7, r0
 800c62a:	061b      	lsls	r3, r3, #24
 800c62c:	460d      	mov	r5, r1
 800c62e:	4614      	mov	r4, r2
 800c630:	b09d      	sub	sp, #116	@ 0x74
 800c632:	d510      	bpl.n	800c656 <_svfiprintf_r+0x36>
 800c634:	690b      	ldr	r3, [r1, #16]
 800c636:	b973      	cbnz	r3, 800c656 <_svfiprintf_r+0x36>
 800c638:	2140      	movs	r1, #64	@ 0x40
 800c63a:	f7ff ff09 	bl	800c450 <_malloc_r>
 800c63e:	6028      	str	r0, [r5, #0]
 800c640:	6128      	str	r0, [r5, #16]
 800c642:	b930      	cbnz	r0, 800c652 <_svfiprintf_r+0x32>
 800c644:	230c      	movs	r3, #12
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	b01d      	add	sp, #116	@ 0x74
 800c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c652:	2340      	movs	r3, #64	@ 0x40
 800c654:	616b      	str	r3, [r5, #20]
 800c656:	2300      	movs	r3, #0
 800c658:	9309      	str	r3, [sp, #36]	@ 0x24
 800c65a:	2320      	movs	r3, #32
 800c65c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c660:	2330      	movs	r3, #48	@ 0x30
 800c662:	f04f 0901 	mov.w	r9, #1
 800c666:	f8cd 800c 	str.w	r8, [sp, #12]
 800c66a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c804 <_svfiprintf_r+0x1e4>
 800c66e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c672:	4623      	mov	r3, r4
 800c674:	469a      	mov	sl, r3
 800c676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c67a:	b10a      	cbz	r2, 800c680 <_svfiprintf_r+0x60>
 800c67c:	2a25      	cmp	r2, #37	@ 0x25
 800c67e:	d1f9      	bne.n	800c674 <_svfiprintf_r+0x54>
 800c680:	ebba 0b04 	subs.w	fp, sl, r4
 800c684:	d00b      	beq.n	800c69e <_svfiprintf_r+0x7e>
 800c686:	465b      	mov	r3, fp
 800c688:	4622      	mov	r2, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7ff ff6b 	bl	800c568 <__ssputs_r>
 800c692:	3001      	adds	r0, #1
 800c694:	f000 80a7 	beq.w	800c7e6 <_svfiprintf_r+0x1c6>
 800c698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c69a:	445a      	add	r2, fp
 800c69c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c69e:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 809f 	beq.w	800c7e6 <_svfiprintf_r+0x1c6>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6b2:	f10a 0a01 	add.w	sl, sl, #1
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	9307      	str	r3, [sp, #28]
 800c6ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6be:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6c0:	4654      	mov	r4, sl
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c8:	484e      	ldr	r0, [pc, #312]	@ (800c804 <_svfiprintf_r+0x1e4>)
 800c6ca:	f000 fa5f 	bl	800cb8c <memchr>
 800c6ce:	9a04      	ldr	r2, [sp, #16]
 800c6d0:	b9d8      	cbnz	r0, 800c70a <_svfiprintf_r+0xea>
 800c6d2:	06d0      	lsls	r0, r2, #27
 800c6d4:	bf44      	itt	mi
 800c6d6:	2320      	movmi	r3, #32
 800c6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6dc:	0711      	lsls	r1, r2, #28
 800c6de:	bf44      	itt	mi
 800c6e0:	232b      	movmi	r3, #43	@ 0x2b
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ec:	d015      	beq.n	800c71a <_svfiprintf_r+0xfa>
 800c6ee:	4654      	mov	r4, sl
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	f04f 0c0a 	mov.w	ip, #10
 800c6f6:	9a07      	ldr	r2, [sp, #28]
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fe:	3b30      	subs	r3, #48	@ 0x30
 800c700:	2b09      	cmp	r3, #9
 800c702:	d94b      	bls.n	800c79c <_svfiprintf_r+0x17c>
 800c704:	b1b0      	cbz	r0, 800c734 <_svfiprintf_r+0x114>
 800c706:	9207      	str	r2, [sp, #28]
 800c708:	e014      	b.n	800c734 <_svfiprintf_r+0x114>
 800c70a:	eba0 0308 	sub.w	r3, r0, r8
 800c70e:	fa09 f303 	lsl.w	r3, r9, r3
 800c712:	4313      	orrs	r3, r2
 800c714:	46a2      	mov	sl, r4
 800c716:	9304      	str	r3, [sp, #16]
 800c718:	e7d2      	b.n	800c6c0 <_svfiprintf_r+0xa0>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d19      	adds	r1, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9103      	str	r1, [sp, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfbb      	ittet	lt
 800c726:	425b      	neglt	r3, r3
 800c728:	f042 0202 	orrlt.w	r2, r2, #2
 800c72c:	9307      	strge	r3, [sp, #28]
 800c72e:	9307      	strlt	r3, [sp, #28]
 800c730:	bfb8      	it	lt
 800c732:	9204      	strlt	r2, [sp, #16]
 800c734:	7823      	ldrb	r3, [r4, #0]
 800c736:	2b2e      	cmp	r3, #46	@ 0x2e
 800c738:	d10a      	bne.n	800c750 <_svfiprintf_r+0x130>
 800c73a:	7863      	ldrb	r3, [r4, #1]
 800c73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c73e:	d132      	bne.n	800c7a6 <_svfiprintf_r+0x186>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	3402      	adds	r4, #2
 800c744:	1d1a      	adds	r2, r3, #4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	9203      	str	r2, [sp, #12]
 800c74a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c74e:	9305      	str	r3, [sp, #20]
 800c750:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c808 <_svfiprintf_r+0x1e8>
 800c754:	2203      	movs	r2, #3
 800c756:	4650      	mov	r0, sl
 800c758:	7821      	ldrb	r1, [r4, #0]
 800c75a:	f000 fa17 	bl	800cb8c <memchr>
 800c75e:	b138      	cbz	r0, 800c770 <_svfiprintf_r+0x150>
 800c760:	2240      	movs	r2, #64	@ 0x40
 800c762:	9b04      	ldr	r3, [sp, #16]
 800c764:	eba0 000a 	sub.w	r0, r0, sl
 800c768:	4082      	lsls	r2, r0
 800c76a:	4313      	orrs	r3, r2
 800c76c:	3401      	adds	r4, #1
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c774:	2206      	movs	r2, #6
 800c776:	4825      	ldr	r0, [pc, #148]	@ (800c80c <_svfiprintf_r+0x1ec>)
 800c778:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c77c:	f000 fa06 	bl	800cb8c <memchr>
 800c780:	2800      	cmp	r0, #0
 800c782:	d036      	beq.n	800c7f2 <_svfiprintf_r+0x1d2>
 800c784:	4b22      	ldr	r3, [pc, #136]	@ (800c810 <_svfiprintf_r+0x1f0>)
 800c786:	bb1b      	cbnz	r3, 800c7d0 <_svfiprintf_r+0x1b0>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	3307      	adds	r3, #7
 800c78c:	f023 0307 	bic.w	r3, r3, #7
 800c790:	3308      	adds	r3, #8
 800c792:	9303      	str	r3, [sp, #12]
 800c794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c796:	4433      	add	r3, r6
 800c798:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79a:	e76a      	b.n	800c672 <_svfiprintf_r+0x52>
 800c79c:	460c      	mov	r4, r1
 800c79e:	2001      	movs	r0, #1
 800c7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7a4:	e7a8      	b.n	800c6f8 <_svfiprintf_r+0xd8>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b8:	3a30      	subs	r2, #48	@ 0x30
 800c7ba:	2a09      	cmp	r2, #9
 800c7bc:	d903      	bls.n	800c7c6 <_svfiprintf_r+0x1a6>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0c6      	beq.n	800c750 <_svfiprintf_r+0x130>
 800c7c2:	9105      	str	r1, [sp, #20]
 800c7c4:	e7c4      	b.n	800c750 <_svfiprintf_r+0x130>
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ce:	e7f0      	b.n	800c7b2 <_svfiprintf_r+0x192>
 800c7d0:	ab03      	add	r3, sp, #12
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c814 <_svfiprintf_r+0x1f4>)
 800c7da:	a904      	add	r1, sp, #16
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	1c42      	adds	r2, r0, #1
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	d1d6      	bne.n	800c794 <_svfiprintf_r+0x174>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	065b      	lsls	r3, r3, #25
 800c7ea:	f53f af2d 	bmi.w	800c648 <_svfiprintf_r+0x28>
 800c7ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7f0:	e72c      	b.n	800c64c <_svfiprintf_r+0x2c>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	4b06      	ldr	r3, [pc, #24]	@ (800c814 <_svfiprintf_r+0x1f4>)
 800c7fc:	a904      	add	r1, sp, #16
 800c7fe:	f000 f87d 	bl	800c8fc <_printf_i>
 800c802:	e7ed      	b.n	800c7e0 <_svfiprintf_r+0x1c0>
 800c804:	0800d792 	.word	0x0800d792
 800c808:	0800d798 	.word	0x0800d798
 800c80c:	0800d79c 	.word	0x0800d79c
 800c810:	00000000 	.word	0x00000000
 800c814:	0800c569 	.word	0x0800c569

0800c818 <_printf_common>:
 800c818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c81c:	4616      	mov	r6, r2
 800c81e:	4698      	mov	r8, r3
 800c820:	688a      	ldr	r2, [r1, #8]
 800c822:	690b      	ldr	r3, [r1, #16]
 800c824:	4607      	mov	r7, r0
 800c826:	4293      	cmp	r3, r2
 800c828:	bfb8      	it	lt
 800c82a:	4613      	movlt	r3, r2
 800c82c:	6033      	str	r3, [r6, #0]
 800c82e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c832:	460c      	mov	r4, r1
 800c834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c838:	b10a      	cbz	r2, 800c83e <_printf_common+0x26>
 800c83a:	3301      	adds	r3, #1
 800c83c:	6033      	str	r3, [r6, #0]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	0699      	lsls	r1, r3, #26
 800c842:	bf42      	ittt	mi
 800c844:	6833      	ldrmi	r3, [r6, #0]
 800c846:	3302      	addmi	r3, #2
 800c848:	6033      	strmi	r3, [r6, #0]
 800c84a:	6825      	ldr	r5, [r4, #0]
 800c84c:	f015 0506 	ands.w	r5, r5, #6
 800c850:	d106      	bne.n	800c860 <_printf_common+0x48>
 800c852:	f104 0a19 	add.w	sl, r4, #25
 800c856:	68e3      	ldr	r3, [r4, #12]
 800c858:	6832      	ldr	r2, [r6, #0]
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	dc2b      	bgt.n	800c8b8 <_printf_common+0xa0>
 800c860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	3b00      	subs	r3, #0
 800c868:	bf18      	it	ne
 800c86a:	2301      	movne	r3, #1
 800c86c:	0692      	lsls	r2, r2, #26
 800c86e:	d430      	bmi.n	800c8d2 <_printf_common+0xba>
 800c870:	4641      	mov	r1, r8
 800c872:	4638      	mov	r0, r7
 800c874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c878:	47c8      	blx	r9
 800c87a:	3001      	adds	r0, #1
 800c87c:	d023      	beq.n	800c8c6 <_printf_common+0xae>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	6922      	ldr	r2, [r4, #16]
 800c882:	f003 0306 	and.w	r3, r3, #6
 800c886:	2b04      	cmp	r3, #4
 800c888:	bf14      	ite	ne
 800c88a:	2500      	movne	r5, #0
 800c88c:	6833      	ldreq	r3, [r6, #0]
 800c88e:	f04f 0600 	mov.w	r6, #0
 800c892:	bf08      	it	eq
 800c894:	68e5      	ldreq	r5, [r4, #12]
 800c896:	f104 041a 	add.w	r4, r4, #26
 800c89a:	bf08      	it	eq
 800c89c:	1aed      	subeq	r5, r5, r3
 800c89e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c8a2:	bf08      	it	eq
 800c8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	bfc4      	itt	gt
 800c8ac:	1a9b      	subgt	r3, r3, r2
 800c8ae:	18ed      	addgt	r5, r5, r3
 800c8b0:	42b5      	cmp	r5, r6
 800c8b2:	d11a      	bne.n	800c8ea <_printf_common+0xd2>
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e008      	b.n	800c8ca <_printf_common+0xb2>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	4652      	mov	r2, sl
 800c8bc:	4641      	mov	r1, r8
 800c8be:	4638      	mov	r0, r7
 800c8c0:	47c8      	blx	r9
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d103      	bne.n	800c8ce <_printf_common+0xb6>
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ce:	3501      	adds	r5, #1
 800c8d0:	e7c1      	b.n	800c856 <_printf_common+0x3e>
 800c8d2:	2030      	movs	r0, #48	@ 0x30
 800c8d4:	18e1      	adds	r1, r4, r3
 800c8d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8e0:	4422      	add	r2, r4
 800c8e2:	3302      	adds	r3, #2
 800c8e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8e8:	e7c2      	b.n	800c870 <_printf_common+0x58>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	4641      	mov	r1, r8
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	47c8      	blx	r9
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d0e6      	beq.n	800c8c6 <_printf_common+0xae>
 800c8f8:	3601      	adds	r6, #1
 800c8fa:	e7d9      	b.n	800c8b0 <_printf_common+0x98>

0800c8fc <_printf_i>:
 800c8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c900:	7e0f      	ldrb	r7, [r1, #24]
 800c902:	4691      	mov	r9, r2
 800c904:	2f78      	cmp	r7, #120	@ 0x78
 800c906:	4680      	mov	r8, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	469a      	mov	sl, r3
 800c90c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c90e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c912:	d807      	bhi.n	800c924 <_printf_i+0x28>
 800c914:	2f62      	cmp	r7, #98	@ 0x62
 800c916:	d80a      	bhi.n	800c92e <_printf_i+0x32>
 800c918:	2f00      	cmp	r7, #0
 800c91a:	f000 80d1 	beq.w	800cac0 <_printf_i+0x1c4>
 800c91e:	2f58      	cmp	r7, #88	@ 0x58
 800c920:	f000 80b8 	beq.w	800ca94 <_printf_i+0x198>
 800c924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c92c:	e03a      	b.n	800c9a4 <_printf_i+0xa8>
 800c92e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c932:	2b15      	cmp	r3, #21
 800c934:	d8f6      	bhi.n	800c924 <_printf_i+0x28>
 800c936:	a101      	add	r1, pc, #4	@ (adr r1, 800c93c <_printf_i+0x40>)
 800c938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c93c:	0800c995 	.word	0x0800c995
 800c940:	0800c9a9 	.word	0x0800c9a9
 800c944:	0800c925 	.word	0x0800c925
 800c948:	0800c925 	.word	0x0800c925
 800c94c:	0800c925 	.word	0x0800c925
 800c950:	0800c925 	.word	0x0800c925
 800c954:	0800c9a9 	.word	0x0800c9a9
 800c958:	0800c925 	.word	0x0800c925
 800c95c:	0800c925 	.word	0x0800c925
 800c960:	0800c925 	.word	0x0800c925
 800c964:	0800c925 	.word	0x0800c925
 800c968:	0800caa7 	.word	0x0800caa7
 800c96c:	0800c9d3 	.word	0x0800c9d3
 800c970:	0800ca61 	.word	0x0800ca61
 800c974:	0800c925 	.word	0x0800c925
 800c978:	0800c925 	.word	0x0800c925
 800c97c:	0800cac9 	.word	0x0800cac9
 800c980:	0800c925 	.word	0x0800c925
 800c984:	0800c9d3 	.word	0x0800c9d3
 800c988:	0800c925 	.word	0x0800c925
 800c98c:	0800c925 	.word	0x0800c925
 800c990:	0800ca69 	.word	0x0800ca69
 800c994:	6833      	ldr	r3, [r6, #0]
 800c996:	1d1a      	adds	r2, r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6032      	str	r2, [r6, #0]
 800c99c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e09c      	b.n	800cae2 <_printf_i+0x1e6>
 800c9a8:	6833      	ldr	r3, [r6, #0]
 800c9aa:	6820      	ldr	r0, [r4, #0]
 800c9ac:	1d19      	adds	r1, r3, #4
 800c9ae:	6031      	str	r1, [r6, #0]
 800c9b0:	0606      	lsls	r6, r0, #24
 800c9b2:	d501      	bpl.n	800c9b8 <_printf_i+0xbc>
 800c9b4:	681d      	ldr	r5, [r3, #0]
 800c9b6:	e003      	b.n	800c9c0 <_printf_i+0xc4>
 800c9b8:	0645      	lsls	r5, r0, #25
 800c9ba:	d5fb      	bpl.n	800c9b4 <_printf_i+0xb8>
 800c9bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	da03      	bge.n	800c9cc <_printf_i+0xd0>
 800c9c4:	232d      	movs	r3, #45	@ 0x2d
 800c9c6:	426d      	negs	r5, r5
 800c9c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9cc:	230a      	movs	r3, #10
 800c9ce:	4858      	ldr	r0, [pc, #352]	@ (800cb30 <_printf_i+0x234>)
 800c9d0:	e011      	b.n	800c9f6 <_printf_i+0xfa>
 800c9d2:	6821      	ldr	r1, [r4, #0]
 800c9d4:	6833      	ldr	r3, [r6, #0]
 800c9d6:	0608      	lsls	r0, r1, #24
 800c9d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9dc:	d402      	bmi.n	800c9e4 <_printf_i+0xe8>
 800c9de:	0649      	lsls	r1, r1, #25
 800c9e0:	bf48      	it	mi
 800c9e2:	b2ad      	uxthmi	r5, r5
 800c9e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9e6:	6033      	str	r3, [r6, #0]
 800c9e8:	bf14      	ite	ne
 800c9ea:	230a      	movne	r3, #10
 800c9ec:	2308      	moveq	r3, #8
 800c9ee:	4850      	ldr	r0, [pc, #320]	@ (800cb30 <_printf_i+0x234>)
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9f6:	6866      	ldr	r6, [r4, #4]
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	60a6      	str	r6, [r4, #8]
 800c9fc:	db05      	blt.n	800ca0a <_printf_i+0x10e>
 800c9fe:	6821      	ldr	r1, [r4, #0]
 800ca00:	432e      	orrs	r6, r5
 800ca02:	f021 0104 	bic.w	r1, r1, #4
 800ca06:	6021      	str	r1, [r4, #0]
 800ca08:	d04b      	beq.n	800caa2 <_printf_i+0x1a6>
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca10:	fb03 5711 	mls	r7, r3, r1, r5
 800ca14:	5dc7      	ldrb	r7, [r0, r7]
 800ca16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca1a:	462f      	mov	r7, r5
 800ca1c:	42bb      	cmp	r3, r7
 800ca1e:	460d      	mov	r5, r1
 800ca20:	d9f4      	bls.n	800ca0c <_printf_i+0x110>
 800ca22:	2b08      	cmp	r3, #8
 800ca24:	d10b      	bne.n	800ca3e <_printf_i+0x142>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	07df      	lsls	r7, r3, #31
 800ca2a:	d508      	bpl.n	800ca3e <_printf_i+0x142>
 800ca2c:	6923      	ldr	r3, [r4, #16]
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	4299      	cmp	r1, r3
 800ca32:	bfde      	ittt	le
 800ca34:	2330      	movle	r3, #48	@ 0x30
 800ca36:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca3e:	1b92      	subs	r2, r2, r6
 800ca40:	6122      	str	r2, [r4, #16]
 800ca42:	464b      	mov	r3, r9
 800ca44:	4621      	mov	r1, r4
 800ca46:	4640      	mov	r0, r8
 800ca48:	f8cd a000 	str.w	sl, [sp]
 800ca4c:	aa03      	add	r2, sp, #12
 800ca4e:	f7ff fee3 	bl	800c818 <_printf_common>
 800ca52:	3001      	adds	r0, #1
 800ca54:	d14a      	bne.n	800caec <_printf_i+0x1f0>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	b004      	add	sp, #16
 800ca5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	f043 0320 	orr.w	r3, r3, #32
 800ca66:	6023      	str	r3, [r4, #0]
 800ca68:	2778      	movs	r7, #120	@ 0x78
 800ca6a:	4832      	ldr	r0, [pc, #200]	@ (800cb34 <_printf_i+0x238>)
 800ca6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	6831      	ldr	r1, [r6, #0]
 800ca74:	061f      	lsls	r7, r3, #24
 800ca76:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca7a:	d402      	bmi.n	800ca82 <_printf_i+0x186>
 800ca7c:	065f      	lsls	r7, r3, #25
 800ca7e:	bf48      	it	mi
 800ca80:	b2ad      	uxthmi	r5, r5
 800ca82:	6031      	str	r1, [r6, #0]
 800ca84:	07d9      	lsls	r1, r3, #31
 800ca86:	bf44      	itt	mi
 800ca88:	f043 0320 	orrmi.w	r3, r3, #32
 800ca8c:	6023      	strmi	r3, [r4, #0]
 800ca8e:	b11d      	cbz	r5, 800ca98 <_printf_i+0x19c>
 800ca90:	2310      	movs	r3, #16
 800ca92:	e7ad      	b.n	800c9f0 <_printf_i+0xf4>
 800ca94:	4826      	ldr	r0, [pc, #152]	@ (800cb30 <_printf_i+0x234>)
 800ca96:	e7e9      	b.n	800ca6c <_printf_i+0x170>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	f023 0320 	bic.w	r3, r3, #32
 800ca9e:	6023      	str	r3, [r4, #0]
 800caa0:	e7f6      	b.n	800ca90 <_printf_i+0x194>
 800caa2:	4616      	mov	r6, r2
 800caa4:	e7bd      	b.n	800ca22 <_printf_i+0x126>
 800caa6:	6833      	ldr	r3, [r6, #0]
 800caa8:	6825      	ldr	r5, [r4, #0]
 800caaa:	1d18      	adds	r0, r3, #4
 800caac:	6961      	ldr	r1, [r4, #20]
 800caae:	6030      	str	r0, [r6, #0]
 800cab0:	062e      	lsls	r6, r5, #24
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	d501      	bpl.n	800caba <_printf_i+0x1be>
 800cab6:	6019      	str	r1, [r3, #0]
 800cab8:	e002      	b.n	800cac0 <_printf_i+0x1c4>
 800caba:	0668      	lsls	r0, r5, #25
 800cabc:	d5fb      	bpl.n	800cab6 <_printf_i+0x1ba>
 800cabe:	8019      	strh	r1, [r3, #0]
 800cac0:	2300      	movs	r3, #0
 800cac2:	4616      	mov	r6, r2
 800cac4:	6123      	str	r3, [r4, #16]
 800cac6:	e7bc      	b.n	800ca42 <_printf_i+0x146>
 800cac8:	6833      	ldr	r3, [r6, #0]
 800caca:	2100      	movs	r1, #0
 800cacc:	1d1a      	adds	r2, r3, #4
 800cace:	6032      	str	r2, [r6, #0]
 800cad0:	681e      	ldr	r6, [r3, #0]
 800cad2:	6862      	ldr	r2, [r4, #4]
 800cad4:	4630      	mov	r0, r6
 800cad6:	f000 f859 	bl	800cb8c <memchr>
 800cada:	b108      	cbz	r0, 800cae0 <_printf_i+0x1e4>
 800cadc:	1b80      	subs	r0, r0, r6
 800cade:	6060      	str	r0, [r4, #4]
 800cae0:	6863      	ldr	r3, [r4, #4]
 800cae2:	6123      	str	r3, [r4, #16]
 800cae4:	2300      	movs	r3, #0
 800cae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caea:	e7aa      	b.n	800ca42 <_printf_i+0x146>
 800caec:	4632      	mov	r2, r6
 800caee:	4649      	mov	r1, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	47d0      	blx	sl
 800caf6:	3001      	adds	r0, #1
 800caf8:	d0ad      	beq.n	800ca56 <_printf_i+0x15a>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	079b      	lsls	r3, r3, #30
 800cafe:	d413      	bmi.n	800cb28 <_printf_i+0x22c>
 800cb00:	68e0      	ldr	r0, [r4, #12]
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	4298      	cmp	r0, r3
 800cb06:	bfb8      	it	lt
 800cb08:	4618      	movlt	r0, r3
 800cb0a:	e7a6      	b.n	800ca5a <_printf_i+0x15e>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	4632      	mov	r2, r6
 800cb10:	4649      	mov	r1, r9
 800cb12:	4640      	mov	r0, r8
 800cb14:	47d0      	blx	sl
 800cb16:	3001      	adds	r0, #1
 800cb18:	d09d      	beq.n	800ca56 <_printf_i+0x15a>
 800cb1a:	3501      	adds	r5, #1
 800cb1c:	68e3      	ldr	r3, [r4, #12]
 800cb1e:	9903      	ldr	r1, [sp, #12]
 800cb20:	1a5b      	subs	r3, r3, r1
 800cb22:	42ab      	cmp	r3, r5
 800cb24:	dcf2      	bgt.n	800cb0c <_printf_i+0x210>
 800cb26:	e7eb      	b.n	800cb00 <_printf_i+0x204>
 800cb28:	2500      	movs	r5, #0
 800cb2a:	f104 0619 	add.w	r6, r4, #25
 800cb2e:	e7f5      	b.n	800cb1c <_printf_i+0x220>
 800cb30:	0800d7a3 	.word	0x0800d7a3
 800cb34:	0800d7b4 	.word	0x0800d7b4

0800cb38 <memmove>:
 800cb38:	4288      	cmp	r0, r1
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	eb01 0402 	add.w	r4, r1, r2
 800cb40:	d902      	bls.n	800cb48 <memmove+0x10>
 800cb42:	4284      	cmp	r4, r0
 800cb44:	4623      	mov	r3, r4
 800cb46:	d807      	bhi.n	800cb58 <memmove+0x20>
 800cb48:	1e43      	subs	r3, r0, #1
 800cb4a:	42a1      	cmp	r1, r4
 800cb4c:	d008      	beq.n	800cb60 <memmove+0x28>
 800cb4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb56:	e7f8      	b.n	800cb4a <memmove+0x12>
 800cb58:	4601      	mov	r1, r0
 800cb5a:	4402      	add	r2, r0
 800cb5c:	428a      	cmp	r2, r1
 800cb5e:	d100      	bne.n	800cb62 <memmove+0x2a>
 800cb60:	bd10      	pop	{r4, pc}
 800cb62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb6a:	e7f7      	b.n	800cb5c <memmove+0x24>

0800cb6c <_sbrk_r>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	2300      	movs	r3, #0
 800cb70:	4d05      	ldr	r5, [pc, #20]	@ (800cb88 <_sbrk_r+0x1c>)
 800cb72:	4604      	mov	r4, r0
 800cb74:	4608      	mov	r0, r1
 800cb76:	602b      	str	r3, [r5, #0]
 800cb78:	f7f4 fd8a 	bl	8001690 <_sbrk>
 800cb7c:	1c43      	adds	r3, r0, #1
 800cb7e:	d102      	bne.n	800cb86 <_sbrk_r+0x1a>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	b103      	cbz	r3, 800cb86 <_sbrk_r+0x1a>
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	bd38      	pop	{r3, r4, r5, pc}
 800cb88:	20001d4c 	.word	0x20001d4c

0800cb8c <memchr>:
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	b2c9      	uxtb	r1, r1
 800cb92:	4402      	add	r2, r0
 800cb94:	4293      	cmp	r3, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	d101      	bne.n	800cb9e <memchr+0x12>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e003      	b.n	800cba6 <memchr+0x1a>
 800cb9e:	7804      	ldrb	r4, [r0, #0]
 800cba0:	3301      	adds	r3, #1
 800cba2:	428c      	cmp	r4, r1
 800cba4:	d1f6      	bne.n	800cb94 <memchr+0x8>
 800cba6:	bd10      	pop	{r4, pc}

0800cba8 <_realloc_r>:
 800cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbac:	4607      	mov	r7, r0
 800cbae:	4614      	mov	r4, r2
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	b921      	cbnz	r1, 800cbbe <_realloc_r+0x16>
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbba:	f7ff bc49 	b.w	800c450 <_malloc_r>
 800cbbe:	b92a      	cbnz	r2, 800cbcc <_realloc_r+0x24>
 800cbc0:	f7ff fbdc 	bl	800c37c <_free_r>
 800cbc4:	4625      	mov	r5, r4
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbcc:	f000 f81a 	bl	800cc04 <_malloc_usable_size_r>
 800cbd0:	4284      	cmp	r4, r0
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	d802      	bhi.n	800cbdc <_realloc_r+0x34>
 800cbd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbda:	d8f4      	bhi.n	800cbc6 <_realloc_r+0x1e>
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4638      	mov	r0, r7
 800cbe0:	f7ff fc36 	bl	800c450 <_malloc_r>
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	b908      	cbnz	r0, 800cbec <_realloc_r+0x44>
 800cbe8:	4645      	mov	r5, r8
 800cbea:	e7ec      	b.n	800cbc6 <_realloc_r+0x1e>
 800cbec:	42b4      	cmp	r4, r6
 800cbee:	4622      	mov	r2, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	bf28      	it	cs
 800cbf4:	4632      	movcs	r2, r6
 800cbf6:	f7ff fbb3 	bl	800c360 <memcpy>
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7ff fbbd 	bl	800c37c <_free_r>
 800cc02:	e7f1      	b.n	800cbe8 <_realloc_r+0x40>

0800cc04 <_malloc_usable_size_r>:
 800cc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc08:	1f18      	subs	r0, r3, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfbc      	itt	lt
 800cc0e:	580b      	ldrlt	r3, [r1, r0]
 800cc10:	18c0      	addlt	r0, r0, r3
 800cc12:	4770      	bx	lr

0800cc14 <_init>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_fini>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr
