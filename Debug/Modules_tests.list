
Modules_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  0800bc5c  0800bc5c  0000cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f8  0800c7f8  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c7f8  0800c7f8  0000e1d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c7f8  0800c7f8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f8  0800c7f8  0000d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7fc  0800c7fc  0000d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c800  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  200001d8  0800c9d8  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  0800c9d8  0000eccc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001214b  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003874  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00023bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  00024b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2fc  00000000  00000000  00025757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159a1  00000000  00000000  0003fa53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880f5  00000000  00000000  000553f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  000dd52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bc44 	.word	0x0800bc44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800bc44 	.word	0x0800bc44

0800014c <UNER_SetTxFunction>:

/**
 * @brief Asigna la función de transmisión para el protocolo.
 */
void UNER_SetTxFunction(txFunct_t func)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    sendFunction = func;
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <UNER_SetTxFunction+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200001f4 	.word	0x200001f4

08000168 <UNER_Init>:

/**
 * @brief Inicializa las estructuras de transmisión y recepción.
 */
void UNER_Init(_sTx *tx, uint8_t *txBuf, _sRx *rx, uint8_t *rxBuf)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
 8000174:	603b      	str	r3, [r7, #0]
    tx->buf = txBuf;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
    tx->iw = 0;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	711a      	strb	r2, [r3, #4]
    tx->ir = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	715a      	strb	r2, [r3, #5]
    tx->length = SIZEBUFTX - 1;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	22ff      	movs	r2, #255	@ 0xff
 800018c:	719a      	strb	r2, [r3, #6]
    tx->chks = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	71da      	strb	r2, [r3, #7]

    rx->buf = rxBuf;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	601a      	str	r2, [r3, #0]
    rx->iw = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
    rx->ir = 0;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
    rx->header = HEADER_U;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
    rx->length = SIZEBUFRX - 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	71da      	strb	r2, [r3, #7]
    rx->size = 0;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	721a      	strb	r2, [r3, #8]
    rx->data = 0;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2200      	movs	r2, #0
 80001bc:	725a      	strb	r2, [r3, #9]
    rx->chks = 0;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2200      	movs	r2, #0
 80001c2:	729a      	strb	r2, [r3, #10]

    protocolState = HEADER_U;
 80001c4:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <UNER_Init+0x74>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
    CMDID = UNKNOWN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <UNER_Init+0x78>)
 80001cc:	22ff      	movs	r2, #255	@ 0xff
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200001f9 	.word	0x200001f9
 80001e0:	200001f8 	.word	0x200001f8

080001e4 <UNER_SerialTask>:

/**
 * @brief Lógica periódica de recepción y transmisión de datos.
 */
void UNER_SerialTask(_sTx *tx, _sRx *rx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (rx->iw != rx->ir) {
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	791a      	ldrb	r2, [r3, #4]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	795b      	ldrb	r3, [r3, #5]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d003      	beq.n	8000202 <UNER_SerialTask+0x1e>
        UNER_DecodeHeader(rx, tx);
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f000 f841 	bl	8000284 <UNER_DecodeHeader>
    }

    if (tx->ir != tx->iw) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	795a      	ldrb	r2, [r3, #5]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d016      	beq.n	800023c <UNER_SerialTask+0x58>
        sendFunction(&tx->buf[tx->ir]);
 800020e:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <UNER_SerialTask+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	7949      	ldrb	r1, [r1, #5]
 800021a:	440a      	add	r2, r1
 800021c:	4610      	mov	r0, r2
 800021e:	4798      	blx	r3
        tx->ir++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	715a      	strb	r2, [r3, #5]
        tx->ir &= tx->length;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	4013      	ands	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	715a      	strb	r2, [r3, #5]
    }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001f4 	.word	0x200001f4

08000248 <UNER_OnRxByte>:

/**
 * @brief Almacena cada byte recibido en el buffer.
 */
void UNER_OnRxByte(_sRx *rx, uint8_t data)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    rx->buf[rx->iw++] = data;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	b2c8      	uxtb	r0, r1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	7108      	strb	r0, [r1, #4]
 8000264:	4413      	add	r3, r2
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	701a      	strb	r2, [r3, #0]
    rx->iw &= rx->length;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	791a      	ldrb	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	4013      	ands	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	711a      	strb	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <UNER_DecodeHeader>:
 * @brief Decodifica el encabezado del protocolo UNER.
 * @param rx Buffer de recepción.
 * @param tx Buffer de transmisión.
 */
void UNER_DecodeHeader(_sRx *rx, _sTx *tx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint8_t i = rx->iw;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	73fb      	strb	r3, [r7, #15]
    while(rx->ir != i){
 8000294:	e0de      	b.n	8000454 <UNER_DecodeHeader+0x1d0>
        switch(rx->header){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	2b06      	cmp	r3, #6
 800029c:	f200 80c7 	bhi.w	800042e <UNER_DecodeHeader+0x1aa>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <UNER_DecodeHeader+0x24>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002c5 	.word	0x080002c5
 80002ac:	080002df 	.word	0x080002df
 80002b0:	0800030b 	.word	0x0800030b
 80002b4:	08000337 	.word	0x08000337
 80002b8:	08000363 	.word	0x08000363
 80002bc:	0800037b 	.word	0x0800037b
 80002c0:	080003d1 	.word	0x080003d1
            case HEADER_U:
                if(rx->buf[rx->ir] == 'U'){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b55      	cmp	r3, #85	@ 0x55
 80002d2:	f040 80b0 	bne.w	8000436 <UNER_DecodeHeader+0x1b2>
                    rx->header = HEADER_N;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	719a      	strb	r2, [r3, #6]
                }
            break;
 80002dc:	e0ab      	b.n	8000436 <UNER_DecodeHeader+0x1b2>
            case HEADER_N:
                if(rx->buf[rx->ir] == 'N'){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7952      	ldrb	r2, [r2, #5]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80002ec:	d103      	bne.n	80002f6 <UNER_DecodeHeader+0x72>
                    rx->header = HEADER_E;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2202      	movs	r2, #2
 80002f2:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80002f4:	e0a0      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
            break;
 8000308:	e096      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_E:
                if(rx->buf[rx->ir] == 'E'){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7952      	ldrb	r2, [r2, #5]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b45      	cmp	r3, #69	@ 0x45
 8000318:	d103      	bne.n	8000322 <UNER_DecodeHeader+0x9e>
                    rx->header = HEADER_R;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2203      	movs	r2, #3
 800031e:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 8000320:	e08a      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	715a      	strb	r2, [r3, #5]
            break;
 8000334:	e080      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_R:
                if(rx->buf[rx->ir] == 'R'){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7952      	ldrb	r2, [r2, #5]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	@ 0x52
 8000344:	d103      	bne.n	800034e <UNER_DecodeHeader+0xca>
                    rx->header = NBYTES;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 800034c:	e074      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	715a      	strb	r2, [r3, #5]
            break;
 8000360:	e06a      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case NBYTES:
                rx->header = TOKEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2205      	movs	r2, #5
 8000366:	719a      	strb	r2, [r3, #6]
                rx->size = rx->buf[rx->ir];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7952      	ldrb	r2, [r2, #5]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	721a      	strb	r2, [r3, #8]
            break;
 8000378:	e05e      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case TOKEN:
                if(rx->buf[rx->ir] == ':'){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7952      	ldrb	r2, [r2, #5]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b3a      	cmp	r3, #58	@ 0x3a
 8000388:	d118      	bne.n	80003bc <UNER_DecodeHeader+0x138>
                    rx->chks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ rx->size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	729a      	strb	r2, [r3, #10]
                    rx->header = PAYLOAD;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2206      	movs	r2, #6
 800039c:	719a      	strb	r2, [r3, #6]
                    rx->data = rx->ir + 1;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	725a      	strb	r2, [r3, #9]
                    rx->data &= rx->length;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5a      	ldrb	r2, [r3, #9]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	725a      	strb	r2, [r3, #9]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80003ba:	e03d      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_U;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	715a      	strb	r2, [r3, #5]
            break;
 80003ce:	e033      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case PAYLOAD:
                rx->size--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	721a      	strb	r2, [r3, #8]
                if(rx->size > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <UNER_DecodeHeader+0x17a>
                    rx->chks ^= rx->buf[rx->ir];
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a9a      	ldrb	r2, [r3, #10]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	7949      	ldrb	r1, [r1, #5]
 80003f0:	440b      	add	r3, r1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	729a      	strb	r2, [r3, #10]
                    if(rx->buf[rx->ir] == rx->chks){
                        UNER_DecodePayload(rx->buf[rx->data], tx);
                    }
                    rx->header = HEADER_U;
                }
            break;
 80003fc:	e01c      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
                    if(rx->buf[rx->ir] == rx->chks){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7952      	ldrb	r2, [r2, #5]
 8000406:	4413      	add	r3, r2
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7a9b      	ldrb	r3, [r3, #10]
 800040e:	429a      	cmp	r2, r3
 8000410:	d109      	bne.n	8000426 <UNER_DecodeHeader+0x1a2>
                        UNER_DecodePayload(rx->buf[rx->data], tx);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7a52      	ldrb	r2, [r2, #9]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	6839      	ldr	r1, [r7, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f823 	bl	800046c <UNER_DecodePayload>
                    rx->header = HEADER_U;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	719a      	strb	r2, [r3, #6]
            break;
 800042c:	e004      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            default:
                rx->header = HEADER_U;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2200      	movs	r2, #0
 8000432:	719a      	strb	r2, [r3, #6]
            break;
 8000434:	e000      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            break;
 8000436:	bf00      	nop
        }
        rx->ir++;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	3301      	adds	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	715a      	strb	r2, [r3, #5]
        rx->ir &= rx->length;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795a      	ldrb	r2, [r3, #5]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	79db      	ldrb	r3, [r3, #7]
 800044c:	4013      	ands	r3, r2
 800044e:	b2da      	uxtb	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	715a      	strb	r2, [r3, #5]
    while(rx->ir != i){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	7bfa      	ldrb	r2, [r7, #15]
 800045a:	429a      	cmp	r2, r3
 800045c:	f47f af1b 	bne.w	8000296 <UNER_DecodeHeader+0x12>
    }
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop

0800046c <UNER_DecodePayload>:

void UNER_DecodePayload(uint8_t bufRx,_sTx *tx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	6039      	str	r1, [r7, #0]
 8000476:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2bf0      	cmp	r3, #240	@ 0xf0
 800047c:	d105      	bne.n	800048a <UNER_DecodePayload+0x1e>
        case ALIVE:
            UNER_WriteContentTx(bufRx, tx);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	6839      	ldr	r1, [r7, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f80b 	bl	800049e <UNER_WriteContentTx>
        break;
 8000488:	e005      	b.n	8000496 <UNER_DecodePayload+0x2a>
        default:
            UNER_WriteContentTx(bufRx, tx);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	6839      	ldr	r1, [r7, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f805 	bl	800049e <UNER_WriteContentTx>
        break;
 8000494:	bf00      	nop
    }
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <UNER_WriteContentTx>:

void UNER_WriteContentTx(uint8_t bufRx,_sTx *tx)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	6039      	str	r1, [r7, #0]
 80004a8:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80004ae:	d10f      	bne.n	80004d0 <UNER_WriteContentTx+0x32>
        case ALIVE:
            UNER_PutHeaderOnTx(tx, ALIVE, 2);
 80004b0:	2202      	movs	r2, #2
 80004b2:	21f0      	movs	r1, #240	@ 0xf0
 80004b4:	6838      	ldr	r0, [r7, #0]
 80004b6:	f000 f825 	bl	8000504 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, ACK);
 80004ba:	210d      	movs	r1, #13
 80004bc:	6838      	ldr	r0, [r7, #0]
 80004be:	f000 f8d0 	bl	8000662 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	79db      	ldrb	r3, [r3, #7]
 80004c6:	4619      	mov	r1, r3
 80004c8:	6838      	ldr	r0, [r7, #0]
 80004ca:	f000 f8ca 	bl	8000662 <UNER_PutByteOnTx>
        break;
 80004ce:	e015      	b.n	80004fc <UNER_WriteContentTx+0x5e>
        default:
            UNER_PutHeaderOnTx(tx, (_eCmd)tx->buf[tx->iw], 2);
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2202      	movs	r2, #2
 80004de:	4619      	mov	r1, r3
 80004e0:	6838      	ldr	r0, [r7, #0]
 80004e2:	f000 f80f 	bl	8000504 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, UNKNOWN);
 80004e6:	21ff      	movs	r1, #255	@ 0xff
 80004e8:	6838      	ldr	r0, [r7, #0]
 80004ea:	f000 f8ba 	bl	8000662 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	79db      	ldrb	r3, [r3, #7]
 80004f2:	4619      	mov	r1, r3
 80004f4:	6838      	ldr	r0, [r7, #0]
 80004f6:	f000 f8b4 	bl	8000662 <UNER_PutByteOnTx>
        break;
 80004fa:	bf00      	nop
    }
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <UNER_PutHeaderOnTx>:

uint8_t UNER_PutHeaderOnTx(_sTx *tx, _eCmd ID, uint8_t N)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]
    tx->chks = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	71da      	strb	r2, [r3, #7]
    tx->buf[tx->iw++] = 'U';
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	1c59      	adds	r1, r3, #1
 8000524:	b2c8      	uxtb	r0, r1
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	7108      	strb	r0, [r1, #4]
 800052a:	4413      	add	r3, r2
 800052c:	2255      	movs	r2, #85	@ 0x55
 800052e:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791a      	ldrb	r2, [r3, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	799b      	ldrb	r3, [r3, #6]
 8000538:	4013      	ands	r3, r2
 800053a:	b2da      	uxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'N';
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	b2c8      	uxtb	r0, r1
 800054c:	6879      	ldr	r1, [r7, #4]
 800054e:	7108      	strb	r0, [r1, #4]
 8000550:	4413      	add	r3, r2
 8000552:	224e      	movs	r2, #78	@ 0x4e
 8000554:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791a      	ldrb	r2, [r3, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	799b      	ldrb	r3, [r3, #6]
 800055e:	4013      	ands	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'E';
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	1c59      	adds	r1, r3, #1
 8000570:	b2c8      	uxtb	r0, r1
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	7108      	strb	r0, [r1, #4]
 8000576:	4413      	add	r3, r2
 8000578:	2245      	movs	r2, #69	@ 0x45
 800057a:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791a      	ldrb	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	799b      	ldrb	r3, [r3, #6]
 8000584:	4013      	ands	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'R';
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	1c59      	adds	r1, r3, #1
 8000596:	b2c8      	uxtb	r0, r1
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	7108      	strb	r0, [r1, #4]
 800059c:	4413      	add	r3, r2
 800059e:	2252      	movs	r2, #82	@ 0x52
 80005a0:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791a      	ldrb	r2, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	799b      	ldrb	r3, [r3, #6]
 80005aa:	4013      	ands	r3, r2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = N + 1;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	b2c8      	uxtb	r0, r1
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	7108      	strb	r0, [r1, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	78ba      	ldrb	r2, [r7, #2]
 80005c6:	3201      	adds	r2, #1
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791a      	ldrb	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	799b      	ldrb	r3, [r3, #6]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ':';
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	1c59      	adds	r1, r3, #1
 80005e6:	b2c8      	uxtb	r0, r1
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	7108      	strb	r0, [r1, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	223a      	movs	r2, #58	@ 0x3a
 80005f0:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791a      	ldrb	r2, [r3, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	799b      	ldrb	r3, [r3, #6]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ID;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	1c59      	adds	r1, r3, #1
 800060c:	b2c8      	uxtb	r0, r1
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	7108      	strb	r0, [r1, #4]
 8000612:	4413      	add	r3, r2
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791a      	ldrb	r2, [r3, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	799b      	ldrb	r3, [r3, #6]
 8000620:	4013      	ands	r3, r2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	711a      	strb	r2, [r3, #4]
    tx->chks ^= (N + 1);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	b25a      	sxtb	r2, r3
 800062e:	78bb      	ldrb	r3, [r7, #2]
 8000630:	3301      	adds	r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4053      	eors	r3, r2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	71da      	strb	r2, [r3, #7]
    tx->chks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ID ^ ':');
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	79da      	ldrb	r2, [r3, #7]
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	4053      	eors	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800064e:	b2da      	uxtb	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	79db      	ldrb	r3, [r3, #7]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <UNER_PutByteOnTx>:

uint8_t UNER_PutByteOnTx(_sTx *tx, uint8_t byte)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	70fb      	strb	r3, [r7, #3]
    tx->buf[tx->iw++] = byte;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	1c59      	adds	r1, r3, #1
 8000678:	b2c8      	uxtb	r0, r1
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	7108      	strb	r0, [r1, #4]
 800067e:	4413      	add	r3, r2
 8000680:	78fa      	ldrb	r2, [r7, #3]
 8000682:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791a      	ldrb	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	4013      	ands	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	711a      	strb	r2, [r3, #4]
    tx->chks ^= byte;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	79da      	ldrb	r2, [r3, #7]
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	4053      	eors	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	79db      	ldrb	r3, [r3, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <sendByteOverUSB>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendByteOverUSB(uint8_t *byte)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    // CDC_Transmit_FS envía un buffer, acá mandamos 1 byte
    while(CDC_Transmit_FS(byte, 1) == USBD_BUSY){
 80006b8:	bf00      	nop
 80006ba:	2101      	movs	r1, #1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f00a fa0b 	bl	800aad8 <CDC_Transmit_FS>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d0f8      	beq.n	80006ba <sendByteOverUSB+0xa>
        // Esperar o hacer algo mientras el USB está ocupado
    }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fe88 	bl	80013ec <HAL_Init>

  /* USER CODE BEGIN Init */
  UNER_Init(&tx, bufTx, &rx, bufRx);
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <main+0x80>)
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <main+0x84>)
 80006e0:	491e      	ldr	r1, [pc, #120]	@ (800075c <main+0x88>)
 80006e2:	481f      	ldr	r0, [pc, #124]	@ (8000760 <main+0x8c>)
 80006e4:	f7ff fd40 	bl	8000168 <UNER_Init>

  UNER_SetTxFunction(sendByteOverUSB);
 80006e8:	481e      	ldr	r0, [pc, #120]	@ (8000764 <main+0x90>)
 80006ea:	f7ff fd2f 	bl	800014c <UNER_SetTxFunction>

  CDC_Attach_RX_Funct(&UNER_OnRxByte);
 80006ee:	481e      	ldr	r0, [pc, #120]	@ (8000768 <main+0x94>)
 80006f0:	f00a fa18 	bl	800ab24 <CDC_Attach_RX_Funct>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f842 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 f8e6 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 f8c6 	bl	800088c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000700:	f00a f910 	bl	800a924 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000704:	f000 f894 	bl	8000830 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar display
  // Inicialización del OLED
      if (!SSD1306_Init()) {
 8000708:	f000 f976 	bl	80009f8 <SSD1306_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d107      	bne.n	8000722 <main+0x4e>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // LED ON si falla
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000718:	4814      	ldr	r0, [pc, #80]	@ (800076c <main+0x98>)
 800071a:	f001 fbf1 	bl	8001f00 <HAL_GPIO_WritePin>
          while (1);
 800071e:	bf00      	nop
 8000720:	e7fd      	b.n	800071e <main+0x4a>
      }

      // Dibujamos algo (texto, figuras, etc.)
      SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fb5c 	bl	8000de0 <SSD1306_Fill>
      SSD1306_GotoXY(0, 0);
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fbce 	bl	8000ecc <SSD1306_GotoXY>
      SSD1306_Puts("AAAAA", &Font_7x10, SSD1306_COLOR_WHITE);
 8000730:	2201      	movs	r2, #1
 8000732:	490f      	ldr	r1, [pc, #60]	@ (8000770 <main+0x9c>)
 8000734:	480f      	ldr	r0, [pc, #60]	@ (8000774 <main+0xa0>)
 8000736:	f000 fc5d 	bl	8000ff4 <SSD1306_Puts>

      // Iniciamos refresco no bloqueante
      ssd_update_done = 1;  // importante para que inicie desde 0
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <main+0xa4>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
      SSD1306_UpdateScreen();
 8000740:	f000 fab0 	bl	8000ca4 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UNER_SerialTask(&tx,&rx);
 8000744:	4904      	ldr	r1, [pc, #16]	@ (8000758 <main+0x84>)
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <main+0x8c>)
 8000748:	f7ff fd4c 	bl	80001e4 <UNER_SerialTask>

	  SSD1306_Task();
 800074c:	f000 f8fc 	bl	8000948 <SSD1306_Task>
	  UNER_SerialTask(&tx,&rx);
 8000750:	bf00      	nop
 8000752:	e7f7      	b.n	8000744 <main+0x70>
 8000754:	20000294 	.word	0x20000294
 8000758:	20000494 	.word	0x20000494
 800075c:	20000394 	.word	0x20000394
 8000760:	200004a0 	.word	0x200004a0
 8000764:	080006b1 	.word	0x080006b1
 8000768:	08000249 	.word	0x08000249
 800076c:	40011000 	.word	0x40011000
 8000770:	20000004 	.word	0x20000004
 8000774:	0800bc5c 	.word	0x0800bc5c
 8000778:	20000000 	.word	0x20000000

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000786:	2228      	movs	r2, #40	@ 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00a fdcc 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fcf2 	bl	80061bc <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007de:	f000 f8ad 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2102      	movs	r1, #2
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 ff5e 	bl	80066c0 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800080a:	f000 f897 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800080e:	2310      	movs	r3, #16
 8000810:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f006 f8cb 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000824:	f000 f88a 	bl	800093c <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	@ 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f001 fb5f 	bl	8001f30 <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f860 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001fc 	.word	0x200001fc
 8000884:	40005400 	.word	0x40005400
 8000888:	00061a80 	.word	0x00061a80

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_DMA_Init+0x38>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a0b      	ldr	r2, [pc, #44]	@ (80008c4 <MX_DMA_Init+0x38>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_DMA_Init+0x38>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2010      	movs	r0, #16
 80008b0:	f000 fef9 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008b4:	2010      	movs	r0, #16
 80008b6:	f000 ff12 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a13      	ldr	r2, [pc, #76]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_GPIO_Init+0x70>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_GPIO_Init+0x70>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <MX_GPIO_Init+0x70>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_GPIO_Init+0x70>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_GPIO_Init+0x70>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <MX_GPIO_Init+0x70>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <MX_GPIO_Init+0x70>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <SSD1306_Task>:

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_Task(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	if (ssd_update_done) {
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <SSD1306_Task+0x18>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SSD1306_Task+0x12>
		SSD1306_UpdateScreen(); // lanza siguiente refresco
 8000956:	f000 f9a5 	bl	8000ca4 <SSD1306_UpdateScreen>
	}
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000

08000964 <USB_Debug>:


/**
 * @brief  Envía un mensaje formateado por USB CDC (VCP), en trozos de 64 bytes.
 */
static void USB_Debug(const char *fmt, ...) {
 8000964:	b40f      	push	{r0, r1, r2, r3}
 8000966:	b580      	push	{r7, lr}
 8000968:	b0a4      	sub	sp, #144	@ 0x90
 800096a:	af00      	add	r7, sp, #0
    char buf[128];
    va_list ap;
    va_start(ap, fmt);
 800096c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000970:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, ap);
 8000972:	1d38      	adds	r0, r7, #4
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	f00a fcc6 	bl	800b30c <vsniprintf>
 8000980:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    va_end(ap);

    if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) {
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <USB_Debug+0x90>)
 8000986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800098a:	2b03      	cmp	r3, #3
 800098c:	d12b      	bne.n	80009e6 <USB_Debug+0x82>
        return;  // No enviar si no estamos enumerados
    }

    uint8_t *p = (uint8_t*)buf;
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (len > 0) {
 8000994:	e022      	b.n	80009dc <USB_Debug+0x78>
        uint16_t chunk = (len > 64) ? 64 : len;
 8000996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800099a:	2b40      	cmp	r3, #64	@ 0x40
 800099c:	bfa8      	it	ge
 800099e:	2340      	movge	r3, #64	@ 0x40
 80009a0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
        while (CDC_Transmit_FS(p, chunk) == USBD_BUSY) {
 80009a4:	e002      	b.n	80009ac <USB_Debug+0x48>
            HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fd82 	bl	80014b0 <HAL_Delay>
        while (CDC_Transmit_FS(p, chunk) == USBD_BUSY) {
 80009ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80009b0:	4619      	mov	r1, r3
 80009b2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80009b6:	f00a f88f 	bl	800aad8 <CDC_Transmit_FS>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d0f2      	beq.n	80009a6 <USB_Debug+0x42>
        }
        p   += chunk;
 80009c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80009c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80009c8:	4413      	add	r3, r2
 80009ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        len -= chunk;
 80009ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80009d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (len > 0) {
 80009dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dcd8      	bgt.n	8000996 <USB_Debug+0x32>
 80009e4:	e000      	b.n	80009e8 <USB_Debug+0x84>
        return;  // No enviar si no estamos enumerados
 80009e6:	bf00      	nop
    }
}
 80009e8:	3790      	adds	r7, #144	@ 0x90
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr
 80009f4:	200009c4 	.word	0x200009c4

080009f8 <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
    USB_Debug("SSD1306_Init: Inicializando I2C...\r\n");
 80009fe:	486d      	ldr	r0, [pc, #436]	@ (8000bb4 <SSD1306_Init+0x1bc>)
 8000a00:	f7ff ffb0 	bl	8000964 <USB_Debug>
    SSD1306_I2C_Init();
 8000a04:	f000 fb1c 	bl	8001040 <SSD1306_I2C_Init>

    USB_Debug("SSD1306_Init: Comprobando I2C addr=0x%02X...\r\n", SSD1306_I2C_ADDR);
 8000a08:	2178      	movs	r1, #120	@ 0x78
 8000a0a:	486b      	ldr	r0, [pc, #428]	@ (8000bb8 <SSD1306_Init+0x1c0>)
 8000a0c:	f7ff ffaa 	bl	8000964 <USB_Debug>
    if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 2000) != HAL_OK) {
 8000a10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a14:	2201      	movs	r2, #1
 8000a16:	2178      	movs	r1, #120	@ 0x78
 8000a18:	4868      	ldr	r0, [pc, #416]	@ (8000bbc <SSD1306_Init+0x1c4>)
 8000a1a:	f001 fe03 	bl	8002624 <HAL_I2C_IsDeviceReady>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d004      	beq.n	8000a2e <SSD1306_Init+0x36>
        USB_Debug("SSD1306_Init: ERROR, no responde I2C\r\n");
 8000a24:	4866      	ldr	r0, [pc, #408]	@ (8000bc0 <SSD1306_Init+0x1c8>)
 8000a26:	f7ff ff9d 	bl	8000964 <USB_Debug>
        return 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e0be      	b.n	8000bac <SSD1306_Init+0x1b4>
    }
    USB_Debug("SSD1306_Init: I2C OK\r\n");
 8000a2e:	4865      	ldr	r0, [pc, #404]	@ (8000bc4 <SSD1306_Init+0x1cc>)
 8000a30:	f7ff ff98 	bl	8000964 <USB_Debug>

    USB_Debug("SSD1306_Init: Retardo inicial...\r\n");
 8000a34:	4864      	ldr	r0, [pc, #400]	@ (8000bc8 <SSD1306_Init+0x1d0>)
 8000a36:	f7ff ff95 	bl	8000964 <USB_Debug>
    for (volatile uint32_t p = 250000; p; --p) { __NOP(); }
 8000a3a:	4b64      	ldr	r3, [pc, #400]	@ (8000bcc <SSD1306_Init+0x1d4>)
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e003      	b.n	8000a48 <SSD1306_Init+0x50>
 8000a40:	bf00      	nop
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f8      	bne.n	8000a40 <SSD1306_Init+0x48>

    USB_Debug("SSD1306_Init: Enviando comandos de init...\r\n");
 8000a4e:	4860      	ldr	r0, [pc, #384]	@ (8000bd0 <SSD1306_Init+0x1d8>)
 8000a50:	f7ff ff88 	bl	8000964 <USB_Debug>
    SSD1306_WRITECOMMAND(0xAE);
 8000a54:	22ae      	movs	r2, #174	@ 0xae
 8000a56:	2100      	movs	r1, #0
 8000a58:	2078      	movs	r0, #120	@ 0x78
 8000a5a:	f000 fb05 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	@ 0x78
 8000a64:	f000 fb00 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000a68:	2210      	movs	r2, #16
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	@ 0x78
 8000a6e:	f000 fafb 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xB0);
 8000a72:	22b0      	movs	r2, #176	@ 0xb0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	@ 0x78
 8000a78:	f000 faf6 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xC8);
 8000a7c:	22c8      	movs	r2, #200	@ 0xc8
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	@ 0x78
 8000a82:	f000 faf1 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	@ 0x78
 8000a8c:	f000 faec 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000a90:	2210      	movs	r2, #16
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	@ 0x78
 8000a96:	f000 fae7 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40);
 8000a9a:	2240      	movs	r2, #64	@ 0x40
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	@ 0x78
 8000aa0:	f000 fae2 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x81);
 8000aa4:	2281      	movs	r2, #129	@ 0x81
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	@ 0x78
 8000aaa:	f000 fadd 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);
 8000aae:	22ff      	movs	r2, #255	@ 0xff
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	@ 0x78
 8000ab4:	f000 fad8 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA1);
 8000ab8:	22a1      	movs	r2, #161	@ 0xa1
 8000aba:	2100      	movs	r1, #0
 8000abc:	2078      	movs	r0, #120	@ 0x78
 8000abe:	f000 fad3 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA6);
 8000ac2:	22a6      	movs	r2, #166	@ 0xa6
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	@ 0x78
 8000ac8:	f000 face 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA8);
 8000acc:	22a8      	movs	r2, #168	@ 0xa8
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2078      	movs	r0, #120	@ 0x78
 8000ad2:	f000 fac9 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x3F);
 8000ad6:	223f      	movs	r2, #63	@ 0x3f
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2078      	movs	r0, #120	@ 0x78
 8000adc:	f000 fac4 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA4);
 8000ae0:	22a4      	movs	r2, #164	@ 0xa4
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2078      	movs	r0, #120	@ 0x78
 8000ae6:	f000 fabf 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD3);
 8000aea:	22d3      	movs	r2, #211	@ 0xd3
 8000aec:	2100      	movs	r1, #0
 8000aee:	2078      	movs	r0, #120	@ 0x78
 8000af0:	f000 faba 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2078      	movs	r0, #120	@ 0x78
 8000afa:	f000 fab5 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD5);
 8000afe:	22d5      	movs	r2, #213	@ 0xd5
 8000b00:	2100      	movs	r1, #0
 8000b02:	2078      	movs	r0, #120	@ 0x78
 8000b04:	f000 fab0 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xF0);
 8000b08:	22f0      	movs	r2, #240	@ 0xf0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2078      	movs	r0, #120	@ 0x78
 8000b0e:	f000 faab 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD9);
 8000b12:	22d9      	movs	r2, #217	@ 0xd9
 8000b14:	2100      	movs	r1, #0
 8000b16:	2078      	movs	r0, #120	@ 0x78
 8000b18:	f000 faa6 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 8000b1c:	2222      	movs	r2, #34	@ 0x22
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2078      	movs	r0, #120	@ 0x78
 8000b22:	f000 faa1 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDA);
 8000b26:	22da      	movs	r2, #218	@ 0xda
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2078      	movs	r0, #120	@ 0x78
 8000b2c:	f000 fa9c 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x12);
 8000b30:	2212      	movs	r2, #18
 8000b32:	2100      	movs	r1, #0
 8000b34:	2078      	movs	r0, #120	@ 0x78
 8000b36:	f000 fa97 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDB);
 8000b3a:	22db      	movs	r2, #219	@ 0xdb
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2078      	movs	r0, #120	@ 0x78
 8000b40:	f000 fa92 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	2078      	movs	r0, #120	@ 0x78
 8000b4a:	f000 fa8d 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x8D);
 8000b4e:	228d      	movs	r2, #141	@ 0x8d
 8000b50:	2100      	movs	r1, #0
 8000b52:	2078      	movs	r0, #120	@ 0x78
 8000b54:	f000 fa88 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14);
 8000b58:	2214      	movs	r2, #20
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2078      	movs	r0, #120	@ 0x78
 8000b5e:	f000 fa83 	bl	8001068 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xAF);
 8000b62:	22af      	movs	r2, #175	@ 0xaf
 8000b64:	2100      	movs	r1, #0
 8000b66:	2078      	movs	r0, #120	@ 0x78
 8000b68:	f000 fa7e 	bl	8001068 <SSD1306_I2C_Write>

    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b6c:	222e      	movs	r2, #46	@ 0x2e
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2078      	movs	r0, #120	@ 0x78
 8000b72:	f000 fa79 	bl	8001068 <SSD1306_I2C_Write>
    USB_Debug("SSD1306_Init: Comandos init enviados\r\n");
 8000b76:	4817      	ldr	r0, [pc, #92]	@ (8000bd4 <SSD1306_Init+0x1dc>)
 8000b78:	f7ff fef4 	bl	8000964 <USB_Debug>

    USB_Debug("SSD1306_Init: Limpiando pantalla...\r\n");
 8000b7c:	4816      	ldr	r0, [pc, #88]	@ (8000bd8 <SSD1306_Init+0x1e0>)
 8000b7e:	f7ff fef1 	bl	8000964 <USB_Debug>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f92c 	bl	8000de0 <SSD1306_Fill>

    USB_Debug("SSD1306_Init: Actualizando pantalla...\r\n");
 8000b88:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <SSD1306_Init+0x1e4>)
 8000b8a:	f7ff feeb 	bl	8000964 <USB_Debug>
    SSD1306_UpdateScreen_Blocking();
 8000b8e:	f000 f82b 	bl	8000be8 <SSD1306_UpdateScreen_Blocking>

    SSD1306.CurrentX = 0;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <SSD1306_Init+0x1e8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <SSD1306_Init+0x1e8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <SSD1306_Init+0x1e8>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	715a      	strb	r2, [r3, #5]

    USB_Debug("SSD1306_Init: COMPLETADO\r\n");
 8000ba4:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <SSD1306_Init+0x1ec>)
 8000ba6:	f7ff fedd 	bl	8000964 <USB_Debug>
    return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	0800bc64 	.word	0x0800bc64
 8000bb8:	0800bc8c 	.word	0x0800bc8c
 8000bbc:	200001fc 	.word	0x200001fc
 8000bc0:	0800bcbc 	.word	0x0800bcbc
 8000bc4:	0800bce4 	.word	0x0800bce4
 8000bc8:	0800bcfc 	.word	0x0800bcfc
 8000bcc:	0003d090 	.word	0x0003d090
 8000bd0:	0800bd20 	.word	0x0800bd20
 8000bd4:	0800bd50 	.word	0x0800bd50
 8000bd8:	0800bd78 	.word	0x0800bd78
 8000bdc:	0800bda0 	.word	0x0800bda0
 8000be0:	200008ac 	.word	0x200008ac
 8000be4:	0800bdcc 	.word	0x0800bdcc

08000be8 <SSD1306_UpdateScreen_Blocking>:

void SSD1306_UpdateScreen_Blocking(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a4      	sub	sp, #144	@ 0x90
 8000bec:	af02      	add	r7, sp, #8
    USB_Debug("SSD1306_UpdateScreen_Blocking: Comenzando actualizacion (blocking)\r\n");
 8000bee:	4827      	ldr	r0, [pc, #156]	@ (8000c8c <SSD1306_UpdateScreen_Blocking+0xa4>)
 8000bf0:	f7ff feb8 	bl	8000964 <USB_Debug>

    // buffer temporal: 1 byte de control + 128 bytes de datos
    uint8_t buf[1 + SSD1306_WIDTH];

    for (uint8_t m = 0; m < 8; m++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000bfa:	e03c      	b.n	8000c76 <SSD1306_UpdateScreen_Blocking+0x8e>
        USB_Debug("SSD1306_UpdateScreen_Blocking: Pagina %u\r\n", m);
 8000bfc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c00:	4619      	mov	r1, r3
 8000c02:	4823      	ldr	r0, [pc, #140]	@ (8000c90 <SSD1306_UpdateScreen_Blocking+0xa8>)
 8000c04:	f7ff feae 	bl	8000964 <USB_Debug>

        // 1) envía comandos de posicionamiento
        SSD1306_WRITECOMMAND(0xB0 + m);
 8000c08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c0c:	3b50      	subs	r3, #80	@ 0x50
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	@ 0x78
 8000c16:	f000 fa27 	bl	8001068 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	@ 0x78
 8000c20:	f000 fa22 	bl	8001068 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 8000c24:	2210      	movs	r2, #16
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	@ 0x78
 8000c2a:	f000 fa1d 	bl	8001068 <SSD1306_I2C_Write>

        // 2) monta el paquete de datos: control=0x40 + página de 128 bytes
        buf[0] = 0x40;
 8000c2e:	2340      	movs	r3, #64	@ 0x40
 8000c30:	713b      	strb	r3, [r7, #4]
        memcpy(&buf[1],
               &SSD1306_Buffer[SSD1306_WIDTH * m],
 8000c32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c36:	01db      	lsls	r3, r3, #7
 8000c38:	4a16      	ldr	r2, [pc, #88]	@ (8000c94 <SSD1306_UpdateScreen_Blocking+0xac>)
 8000c3a:	1899      	adds	r1, r3, r2
        memcpy(&buf[1],
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	3301      	adds	r3, #1
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00a fba4 	bl	800b390 <memcpy>
               SSD1306_WIDTH);

        // 3) envía todo con HAL_I2C_Master_Transmit (bloqueante)
        if (HAL_I2C_Master_Transmit(
 8000c48:	1d3a      	adds	r2, r7, #4
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2381      	movs	r3, #129	@ 0x81
 8000c52:	2178      	movs	r1, #120	@ 0x78
 8000c54:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <SSD1306_UpdateScreen_Blocking+0xb0>)
 8000c56:	f001 fac3 	bl	80021e0 <HAL_I2C_Master_Transmit>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <SSD1306_UpdateScreen_Blocking+0x84>
                SSD1306_I2C_ADDR,
                buf,
                sizeof(buf),
                HAL_MAX_DELAY) != HAL_OK)
        {
            USB_Debug("ERROR: I2C transmit pagina %u\r\n", m);
 8000c60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <SSD1306_UpdateScreen_Blocking+0xb4>)
 8000c68:	f7ff fe7c 	bl	8000964 <USB_Debug>
    for (uint8_t m = 0; m < 8; m++) {
 8000c6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c70:	3301      	adds	r3, #1
 8000c72:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000c76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d9be      	bls.n	8000bfc <SSD1306_UpdateScreen_Blocking+0x14>
        }
    }

    USB_Debug("SSD1306_UpdateScreen_Blocking: Pantalla actualizada (blocking)\r\n");
 8000c7e:	4808      	ldr	r0, [pc, #32]	@ (8000ca0 <SSD1306_UpdateScreen_Blocking+0xb8>)
 8000c80:	f7ff fe70 	bl	8000964 <USB_Debug>
}
 8000c84:	bf00      	nop
 8000c86:	3788      	adds	r7, #136	@ 0x88
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	0800bde8 	.word	0x0800bde8
 8000c90:	0800be30 	.word	0x0800be30
 8000c94:	200004ac 	.word	0x200004ac
 8000c98:	200001fc 	.word	0x200001fc
 8000c9c:	0800be5c 	.word	0x0800be5c
 8000ca0:	0800be7c 	.word	0x0800be7c

08000ca4 <SSD1306_UpdateScreen>:



void SSD1306_UpdateScreen(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    static uint8_t page  = 0;
    static uint8_t state = 0; // 0=idle,1=prep,2=waiting DMA
    uint8_t counter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]

    switch (state) {
 8000cae:	4b41      	ldr	r3, [pc, #260]	@ (8000db4 <SSD1306_UpdateScreen+0x110>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d046      	beq.n	8000d44 <SSD1306_UpdateScreen+0xa0>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	dc78      	bgt.n	8000dac <SSD1306_UpdateScreen+0x108>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <SSD1306_UpdateScreen+0x20>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d00c      	beq.n	8000cdc <SSD1306_UpdateScreen+0x38>
            		USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
            	}
            }
            break;
    }
}
 8000cc2:	e073      	b.n	8000dac <SSD1306_UpdateScreen+0x108>
            USB_Debug("SSD1306_Update: iniciando refresco NB\r\n");
 8000cc4:	483c      	ldr	r0, [pc, #240]	@ (8000db8 <SSD1306_UpdateScreen+0x114>)
 8000cc6:	f7ff fe4d 	bl	8000964 <USB_Debug>
            page             = 0;
 8000cca:	4b3c      	ldr	r3, [pc, #240]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
            ssd_update_done  = 0;  // marca que el refresco está en curso
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc0 <SSD1306_UpdateScreen+0x11c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
            state            = 1;
 8000cd6:	4b37      	ldr	r3, [pc, #220]	@ (8000db4 <SSD1306_UpdateScreen+0x110>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
            if (!i2c1_tx_busy) {
 8000cdc:	4b39      	ldr	r3, [pc, #228]	@ (8000dc4 <SSD1306_UpdateScreen+0x120>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d15f      	bne.n	8000da6 <SSD1306_UpdateScreen+0x102>
                USB_Debug("SSD1306_Update: enviando pagina %u\r\n", page);
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4836      	ldr	r0, [pc, #216]	@ (8000dc8 <SSD1306_UpdateScreen+0x124>)
 8000cee:	f7ff fe39 	bl	8000964 <USB_Debug>
                SSD1306_WRITECOMMAND(0xB0 + page);
 8000cf2:	4b32      	ldr	r3, [pc, #200]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	3b50      	subs	r3, #80	@ 0x50
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2078      	movs	r0, #120	@ 0x78
 8000d00:	f000 f9b2 	bl	8001068 <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x00);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2078      	movs	r0, #120	@ 0x78
 8000d0a:	f000 f9ad 	bl	8001068 <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x10);
 8000d0e:	2210      	movs	r2, #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	@ 0x78
 8000d14:	f000 f9a8 	bl	8001068 <SSD1306_I2C_Write>
                uint8_t *buf = &SSD1306_Buffer[SSD1306_WIDTH * page];
 8000d18:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	01db      	lsls	r3, r3, #7
 8000d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dcc <SSD1306_UpdateScreen+0x128>)
 8000d20:	4413      	add	r3, r2
 8000d22:	603b      	str	r3, [r7, #0]
                SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, buf, SSD1306_WIDTH);
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	2140      	movs	r1, #64	@ 0x40
 8000d2a:	2078      	movs	r0, #120	@ 0x78
 8000d2c:	f000 f9ba 	bl	80010a4 <SSD1306_I2C_WriteMulti>
                USB_Debug("SSD1306_Update: pagina enviada\r\n", page);
 8000d30:	4b22      	ldr	r3, [pc, #136]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4826      	ldr	r0, [pc, #152]	@ (8000dd0 <SSD1306_UpdateScreen+0x12c>)
 8000d38:	f7ff fe14 	bl	8000964 <USB_Debug>
                state = 2;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <SSD1306_UpdateScreen+0x110>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	701a      	strb	r2, [r3, #0]
            break;
 8000d42:	e030      	b.n	8000da6 <SSD1306_UpdateScreen+0x102>
            if (!i2c1_tx_busy) {
 8000d44:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <SSD1306_UpdateScreen+0x120>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d11d      	bne.n	8000d8a <SSD1306_UpdateScreen+0xe6>
                USB_Debug("SSD1306_Update: página %u completada\r\n", page);
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	481f      	ldr	r0, [pc, #124]	@ (8000dd4 <SSD1306_UpdateScreen+0x130>)
 8000d56:	f7ff fe05 	bl	8000964 <USB_Debug>
                page++;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d64:	701a      	strb	r2, [r3, #0]
                if (page < 8) {
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <SSD1306_UpdateScreen+0x118>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	d803      	bhi.n	8000d76 <SSD1306_UpdateScreen+0xd2>
                    state = 1;  // preparamos la siguiente página
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <SSD1306_UpdateScreen+0x110>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
            break;
 8000d74:	e019      	b.n	8000daa <SSD1306_UpdateScreen+0x106>
                    USB_Debug("SSD1306_Update: refresco NB completo\r\n");
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <SSD1306_UpdateScreen+0x134>)
 8000d78:	f7ff fdf4 	bl	8000964 <USB_Debug>
                    ssd_update_done = 1;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <SSD1306_UpdateScreen+0x11c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
                    state           = 0;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <SSD1306_UpdateScreen+0x110>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
            break;
 8000d88:	e00f      	b.n	8000daa <SSD1306_UpdateScreen+0x106>
            	if (counter <= 10) {
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b0a      	cmp	r3, #10
 8000d8e:	d80c      	bhi.n	8000daa <SSD1306_UpdateScreen+0x106>
            		counter++;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	3301      	adds	r3, #1
 8000d94:	71fb      	strb	r3, [r7, #7]
            		USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SSD1306_UpdateScreen+0x120>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480f      	ldr	r0, [pc, #60]	@ (8000ddc <SSD1306_UpdateScreen+0x138>)
 8000da0:	f7ff fde0 	bl	8000964 <USB_Debug>
            break;
 8000da4:	e001      	b.n	8000daa <SSD1306_UpdateScreen+0x106>
            break;
 8000da6:	bf00      	nop
 8000da8:	e000      	b.n	8000dac <SSD1306_UpdateScreen+0x108>
            break;
 8000daa:	bf00      	nop
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200009b4 	.word	0x200009b4
 8000db8:	0800bec0 	.word	0x0800bec0
 8000dbc:	200009b5 	.word	0x200009b5
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	200004a8 	.word	0x200004a8
 8000dc8:	0800bee8 	.word	0x0800bee8
 8000dcc:	200004ac 	.word	0x200004ac
 8000dd0:	0800bf10 	.word	0x0800bf10
 8000dd4:	0800bf34 	.word	0x0800bf34
 8000dd8:	0800bf5c 	.word	0x0800bf5c
 8000ddc:	0800bf84 	.word	0x0800bf84

08000de0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <SSD1306_Fill+0x14>
 8000df0:	2300      	movs	r3, #0
 8000df2:	e000      	b.n	8000df6 <SSD1306_Fill+0x16>
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <SSD1306_Fill+0x2c>)
 8000dfe:	f00a fa93 	bl	800b328 <memset>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200004ac 	.word	0x200004ac

08000e10 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	70fb      	strb	r3, [r7, #3]
	if (
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e26:	d848      	bhi.n	8000eba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e28:	88bb      	ldrh	r3, [r7, #4]
 8000e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e2c:	d845      	bhi.n	8000eba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <SSD1306_DrawPixel+0xb4>)
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d11a      	bne.n	8000e80 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	b298      	uxth	r0, r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	01db      	lsls	r3, r3, #7
 8000e56:	4413      	add	r3, r2
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <SSD1306_DrawPixel+0xb8>)
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b259      	sxtb	r1, r3
 8000e70:	88fa      	ldrh	r2, [r7, #6]
 8000e72:	4603      	mov	r3, r0
 8000e74:	01db      	lsls	r3, r3, #7
 8000e76:	4413      	add	r3, r2
 8000e78:	b2c9      	uxtb	r1, r1
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <SSD1306_DrawPixel+0xb8>)
 8000e7c:	54d1      	strb	r1, [r2, r3]
 8000e7e:	e01d      	b.n	8000ebc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e80:	88fa      	ldrh	r2, [r7, #6]
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	b298      	uxth	r0, r3
 8000e88:	4603      	mov	r3, r0
 8000e8a:	01db      	lsls	r3, r3, #7
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <SSD1306_DrawPixel+0xb8>)
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	b25a      	sxtb	r2, r3
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	b259      	sxtb	r1, r3
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4603      	mov	r3, r0
 8000eae:	01db      	lsls	r3, r3, #7
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b2c9      	uxtb	r1, r1
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <SSD1306_DrawPixel+0xb8>)
 8000eb6:	54d1      	strb	r1, [r2, r3]
 8000eb8:	e000      	b.n	8000ebc <SSD1306_DrawPixel+0xac>
		return;
 8000eba:	bf00      	nop
	}
}
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	200008ac 	.word	0x200008ac
 8000ec8:	200004ac 	.word	0x200004ac

08000ecc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	80fb      	strh	r3, [r7, #6]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000edc:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SSD1306_GotoXY+0x28>)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <SSD1306_GotoXY+0x28>)
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	8053      	strh	r3, [r2, #2]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200008ac 	.word	0x200008ac

08000ef8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f08:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
	if (
 8000f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f16:	dc07      	bgt.n	8000f28 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f18:	4b35      	ldr	r3, [pc, #212]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f1a:	885b      	ldrh	r3, [r3, #2]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f26:	dd01      	ble.n	8000f2c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e05d      	b.n	8000fe8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e04b      	b.n	8000fca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	3b20      	subs	r3, #32
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	7849      	ldrb	r1, [r1, #1]
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4619      	mov	r1, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	440b      	add	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e030      	b.n	8000fb8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d010      	beq.n	8000f88 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f66:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	b298      	uxth	r0, r3
 8000f72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f74:	885a      	ldrh	r2, [r3, #2]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff ff45 	bl	8000e10 <SSD1306_DrawPixel>
 8000f86:	e014      	b.n	8000fb2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b298      	uxth	r0, r3
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000f96:	885a      	ldrh	r2, [r3, #2]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f7ff ff2f 	bl	8000e10 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d3c8      	bcc.n	8000f56 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d3ad      	bcc.n	8000f32 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <SSD1306_Putc+0xf8>)
 8000fe4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200008ac 	.word	0x200008ac

08000ff4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001002:	e012      	b.n	800102a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff73 	bl	8000ef8 <SSD1306_Putc>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d002      	beq.n	8001024 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	e008      	b.n	8001036 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1e8      	bne.n	8001004 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	781b      	ldrb	r3, [r3, #0]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <SSD1306_I2C_Init+0x24>)
 8001048:	607b      	str	r3, [r7, #4]
	while(p>0)
 800104a:	e002      	b.n	8001052 <SSD1306_I2C_Init+0x12>
		p--;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f9      	bne.n	800104c <SSD1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	0003d090 	.word	0x0003d090

08001068 <SSD1306_I2C_Write>:



void SSD1306_I2C_Write(uint8_t address, uint8_t control, uint8_t databyte) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2] = { control, databyte };
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	797b      	ldrb	r3, [r7, #5]
 8001080:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	b299      	uxth	r1, r3
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <SSD1306_I2C_Write+0x38>)
 8001094:	f001 f8a4 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001fc 	.word	0x200001fc

080010a4 <SSD1306_I2C_WriteMulti>:



void SSD1306_I2C_WriteMulti(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	603a      	str	r2, [r7, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	460b      	mov	r3, r1
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80bb      	strh	r3, [r7, #4]
    dma_tx_buffer[0] = ctrl;
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <SSD1306_I2C_WriteMulti+0x6c>)
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	7013      	strb	r3, [r2, #0]
    memcpy(&dma_tx_buffer[1], data, len);
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	461a      	mov	r2, r3
 80010c4:	6839      	ldr	r1, [r7, #0]
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <SSD1306_I2C_WriteMulti+0x70>)
 80010c8:	f00a f962 	bl	800b390 <memcpy>

    // **Sólo** datos: espera si un envío anterior sigue vivo
    while (i2c1_tx_busy) {
 80010cc:	e000      	b.n	80010d0 <SSD1306_I2C_WriteMulti+0x2c>
        __WFI();
 80010ce:	bf30      	wfi
    while (i2c1_tx_busy) {
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <SSD1306_I2C_WriteMulti+0x74>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <SSD1306_I2C_WriteMulti+0x2a>
    }

    // 1) DEBUG: parámetros de la transmisión
    //USB_Debug("WriteMulti: addr=0x%02X ctrl=0x%02X len=%u\r\n", addr, ctrl, len);

    i2c1_tx_busy = 1;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <SSD1306_I2C_WriteMulti+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, addr, dma_tx_buffer, len + 1);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b299      	uxth	r1, r3
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <SSD1306_I2C_WriteMulti+0x6c>)
 80010ec:	480b      	ldr	r0, [pc, #44]	@ (800111c <SSD1306_I2C_WriteMulti+0x78>)
 80010ee:	f001 f975 	bl	80023dc <HAL_I2C_Master_Transmit_DMA>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
    /*USB_Debug("Transmit_DMA returned %d, CCR=0x%08lX, CNDTR=%u\r\n",
              ret,
              DMA1_Channel6->CCR,
              DMA1_Channel6->CNDTR);*/

    if (ret != HAL_OK) {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <SSD1306_I2C_WriteMulti+0x64>
        // Error de DMA: libéralo para no colgarte
        i2c1_tx_busy = 0;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <SSD1306_I2C_WriteMulti+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
        USB_Debug("WriteMulti: ¡ERROR en Transmit_DMA!\r\n");
 8001102:	4807      	ldr	r0, [pc, #28]	@ (8001120 <SSD1306_I2C_WriteMulti+0x7c>)
 8001104:	f7ff fc2e 	bl	8000964 <USB_Debug>
    }
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200008b4 	.word	0x200008b4
 8001114:	200008b5 	.word	0x200008b5
 8001118:	200004a8 	.word	0x200004a8
 800111c:	200001fc 	.word	0x200001fc
 8001120:	0800bfbc 	.word	0x0800bfbc

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001254 <HAL_I2C_MspInit+0xcc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d151      	bne.n	800124c <HAL_I2C_MspInit+0xc4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c0:	23c0      	movs	r3, #192	@ 0xc0
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4822      	ldr	r0, [pc, #136]	@ (800125c <HAL_I2C_MspInit+0xd4>)
 80011d4:	f000 fd10 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e2:	61d3      	str	r3, [r2, #28]
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_I2C_MspInit+0xd0>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001264 <HAL_I2C_MspInit+0xdc>)
 80011f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 80011f8:	2210      	movs	r2, #16
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001220:	480f      	ldr	r0, [pc, #60]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001222:	f000 fa77 	bl	8001714 <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800122c:	f7ff fb86 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_I2C_MspInit+0xd8>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	201f      	movs	r0, #31
 8001242:	f000 fa30 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001246:	201f      	movs	r0, #31
 8001248:	f000 fa49 	bl	80016de <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00
 8001260:	20000250 	.word	0x20000250
 8001264:	4002006c 	.word	0x4002006c

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8de 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Channel6_IRQHandler+0x10>)
 80012c6:	f000 fb57 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000250 	.word	0x20000250

080012d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012da:	f003 fb2b 	bl	8004934 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000168c 	.word	0x2000168c

080012e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <I2C1_EV_IRQHandler+0x10>)
 80012ee:	f001 fac7 	bl	8002880 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001fc 	.word	0x200001fc

080012fc <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d102      	bne.n	8001314 <HAL_I2C_MasterTxCpltCallback+0x18>
        i2c1_tx_busy = 0;
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    }
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40005400 	.word	0x40005400
 8001324:	200004a8 	.word	0x200004a8

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	@ (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f009 ffee 	bl	800b338 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20005000 	.word	0x20005000
 8001388:	00000400 	.word	0x00000400
 800138c:	200009b8 	.word	0x200009b8
 8001390:	20001cd0 	.word	0x20001cd0

08001394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff fff8 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013a6:	490c      	ldr	r1, [pc, #48]	@ (80013d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013bc:	4c09      	ldr	r4, [pc, #36]	@ (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f009 ffbb 	bl	800b344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff f981 	bl	80006d4 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80013dc:	0800c800 	.word	0x0800c800
  ldr r2, =_sbss
 80013e0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80013e4:	20001ccc 	.word	0x20001ccc

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f947 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fe8c 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f95f 	bl	80016fa <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f927 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000014 	.word	0x20000014
 8001474:	20000010 	.word	0x20000010

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_IncTick+0x1c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_IncTick+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a03      	ldr	r2, [pc, #12]	@ (8001498 <HAL_IncTick+0x20>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000014 	.word	0x20000014
 8001498:	200009bc 	.word	0x200009bc

0800149c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b02      	ldr	r3, [pc, #8]	@ (80014ac <HAL_GetTick+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	200009bc 	.word	0x200009bc

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff fff0 	bl	800149c <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffe0 	bl	800149c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000014 	.word	0x20000014

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4906      	ldr	r1, [pc, #24]	@ (8001590 <__NVIC_EnableIRQ+0x34>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff90 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff2d 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff42 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff35 	bl	800155c <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e043      	b.n	80017b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_DMA_Init+0xa8>)
 8001732:	4413      	add	r3, r2
 8001734:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <HAL_DMA_Init+0xac>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	009a      	lsls	r2, r3, #2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <HAL_DMA_Init+0xb0>)
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800175e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001762:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800176c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	bffdfff8 	.word	0xbffdfff8
 80017c0:	cccccccd 	.word	0xcccccccd
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_DMA_Start_IT+0x20>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e04b      	b.n	8001880 <HAL_DMA_Start_IT+0xb8>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d13a      	bne.n	8001872 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f9bc 	bl	8001b9e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 020e 	orr.w	r2, r2, #14
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00f      	b.n	8001860 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0204 	bic.w	r2, r2, #4
 800184e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 020a 	orr.w	r2, r2, #10
 800185e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e005      	b.n	800187e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800187e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d005      	beq.n	80018ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2204      	movs	r2, #4
 80018a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e051      	b.n	8001950 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020e 	bic.w	r2, r2, #14
 80018ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a22      	ldr	r2, [pc, #136]	@ (800195c <HAL_DMA_Abort_IT+0xd4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d029      	beq.n	800192a <HAL_DMA_Abort_IT+0xa2>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_DMA_Abort_IT+0xd8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <HAL_DMA_Abort_IT+0x9e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <HAL_DMA_Abort_IT+0xdc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01a      	beq.n	8001920 <HAL_DMA_Abort_IT+0x98>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001968 <HAL_DMA_Abort_IT+0xe0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d012      	beq.n	800191a <HAL_DMA_Abort_IT+0x92>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <HAL_DMA_Abort_IT+0xe4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00a      	beq.n	8001914 <HAL_DMA_Abort_IT+0x8c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1b      	ldr	r2, [pc, #108]	@ (8001970 <HAL_DMA_Abort_IT+0xe8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d102      	bne.n	800190e <HAL_DMA_Abort_IT+0x86>
 8001908:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800190c:	e00e      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 800190e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001912:	e00b      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 8001914:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001918:	e008      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 800191a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191e:	e005      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 8001920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001924:	e002      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 8001926:	2310      	movs	r3, #16
 8001928:	e000      	b.n	800192c <HAL_DMA_Abort_IT+0xa4>
 800192a:	2301      	movs	r3, #1
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_DMA_Abort_IT+0xec>)
 800192e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
    } 
  }
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020008 	.word	0x40020008
 8001960:	4002001c 	.word	0x4002001c
 8001964:	40020030 	.word	0x40020030
 8001968:	40020044 	.word	0x40020044
 800196c:	40020058 	.word	0x40020058
 8001970:	4002006c 	.word	0x4002006c
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	2204      	movs	r2, #4
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d04f      	beq.n	8001a40 <HAL_DMA_IRQHandler+0xc8>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a66      	ldr	r2, [pc, #408]	@ (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d029      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xae>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a65      	ldr	r2, [pc, #404]	@ (8001b6c <HAL_DMA_IRQHandler+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_IRQHandler+0xaa>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a63      	ldr	r2, [pc, #396]	@ (8001b70 <HAL_DMA_IRQHandler+0x1f8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01a      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xa4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a62      	ldr	r2, [pc, #392]	@ (8001b74 <HAL_DMA_IRQHandler+0x1fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x9e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a60      	ldr	r2, [pc, #384]	@ (8001b78 <HAL_DMA_IRQHandler+0x200>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00a      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x98>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5f      	ldr	r2, [pc, #380]	@ (8001b7c <HAL_DMA_IRQHandler+0x204>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <HAL_DMA_IRQHandler+0x92>
 8001a04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a08:	e00e      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a0e:	e00b      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a14:	e008      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a20:	e002      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a26:	2304      	movs	r3, #4
 8001a28:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_DMA_IRQHandler+0x208>)
 8001a2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8094 	beq.w	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a3e:	e08e      	b.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	2202      	movs	r2, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d056      	beq.n	8001afe <HAL_DMA_IRQHandler+0x186>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d051      	beq.n	8001afe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020a 	bic.w	r2, r2, #10
 8001a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a38      	ldr	r2, [pc, #224]	@ (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d029      	beq.n	8001ade <HAL_DMA_IRQHandler+0x166>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a37      	ldr	r2, [pc, #220]	@ (8001b6c <HAL_DMA_IRQHandler+0x1f4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d022      	beq.n	8001ada <HAL_DMA_IRQHandler+0x162>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a35      	ldr	r2, [pc, #212]	@ (8001b70 <HAL_DMA_IRQHandler+0x1f8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x15c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a34      	ldr	r2, [pc, #208]	@ (8001b74 <HAL_DMA_IRQHandler+0x1fc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d012      	beq.n	8001ace <HAL_DMA_IRQHandler+0x156>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <HAL_DMA_IRQHandler+0x200>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x150>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a31      	ldr	r2, [pc, #196]	@ (8001b7c <HAL_DMA_IRQHandler+0x204>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d102      	bne.n	8001ac2 <HAL_DMA_IRQHandler+0x14a>
 8001abc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ac0:	e00e      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ac6:	e00b      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ac8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001acc:	e008      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad2:	e005      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad8:	e002      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ada:	2320      	movs	r3, #32
 8001adc:	e000      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	4a27      	ldr	r2, [pc, #156]	@ (8001b80 <HAL_DMA_IRQHandler+0x208>)
 8001ae2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d034      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001afc:	e02f      	b.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	2208      	movs	r2, #8
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
    }
  }
  return;
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
}
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40020008 	.word	0x40020008
 8001b6c:	4002001c 	.word	0x4002001c
 8001b70:	40020030 	.word	0x40020030
 8001b74:	40020044 	.word	0x40020044
 8001b78:	40020058 	.word	0x40020058
 8001b7c:	4002006c 	.word	0x4002006c
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b92:	b2db      	uxtb	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d108      	bne.n	8001bde <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bdc:	e007      	b.n	8001bee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	60da      	str	r2, [r3, #12]
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b08b      	sub	sp, #44	@ 0x2c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e169      	b.n	8001ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8158 	bne.w	8001eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a9a      	ldr	r2, [pc, #616]	@ (8001e98 <HAL_GPIO_Init+0x2a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d05e      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a98      	ldr	r2, [pc, #608]	@ (8001e98 <HAL_GPIO_Init+0x2a0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d875      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a98      	ldr	r2, [pc, #608]	@ (8001e9c <HAL_GPIO_Init+0x2a4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d058      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c40:	4a96      	ldr	r2, [pc, #600]	@ (8001e9c <HAL_GPIO_Init+0x2a4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d86f      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c46:	4a96      	ldr	r2, [pc, #600]	@ (8001ea0 <HAL_GPIO_Init+0x2a8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d052      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a94      	ldr	r2, [pc, #592]	@ (8001ea0 <HAL_GPIO_Init+0x2a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d869      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c52:	4a94      	ldr	r2, [pc, #592]	@ (8001ea4 <HAL_GPIO_Init+0x2ac>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04c      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c58:	4a92      	ldr	r2, [pc, #584]	@ (8001ea4 <HAL_GPIO_Init+0x2ac>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d863      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c5e:	4a92      	ldr	r2, [pc, #584]	@ (8001ea8 <HAL_GPIO_Init+0x2b0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d046      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c64:	4a90      	ldr	r2, [pc, #576]	@ (8001ea8 <HAL_GPIO_Init+0x2b0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d85d      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d82a      	bhi.n	8001cc4 <HAL_GPIO_Init+0xcc>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d859      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c72:	a201      	add	r2, pc, #4	@ (adr r2, 8001c78 <HAL_GPIO_Init+0x80>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001cf3 	.word	0x08001cf3
 8001c7c:	08001ccd 	.word	0x08001ccd
 8001c80:	08001cdf 	.word	0x08001cdf
 8001c84:	08001d21 	.word	0x08001d21
 8001c88:	08001d27 	.word	0x08001d27
 8001c8c:	08001d27 	.word	0x08001d27
 8001c90:	08001d27 	.word	0x08001d27
 8001c94:	08001d27 	.word	0x08001d27
 8001c98:	08001d27 	.word	0x08001d27
 8001c9c:	08001d27 	.word	0x08001d27
 8001ca0:	08001d27 	.word	0x08001d27
 8001ca4:	08001d27 	.word	0x08001d27
 8001ca8:	08001d27 	.word	0x08001d27
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d27 	.word	0x08001d27
 8001cb4:	08001d27 	.word	0x08001d27
 8001cb8:	08001d27 	.word	0x08001d27
 8001cbc:	08001cd5 	.word	0x08001cd5
 8001cc0:	08001ce9 	.word	0x08001ce9
 8001cc4:	4a79      	ldr	r2, [pc, #484]	@ (8001eac <HAL_GPIO_Init+0x2b4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cca:	e02c      	b.n	8001d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e029      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e024      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e01f      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	330c      	adds	r3, #12
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e01a      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e013      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	611a      	str	r2, [r3, #16]
          break;
 8001d12:	e009      	b.n	8001d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d14:	2308      	movs	r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	615a      	str	r2, [r3, #20]
          break;
 8001d1e:	e003      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          break;
 8001d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	@ 0xff
 8001d2c:	d801      	bhi.n	8001d32 <HAL_GPIO_Init+0x13a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	e001      	b.n	8001d36 <HAL_GPIO_Init+0x13e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2bff      	cmp	r3, #255	@ 0xff
 8001d3c:	d802      	bhi.n	8001d44 <HAL_GPIO_Init+0x14c>
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x152>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	3b08      	subs	r3, #8
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	210f      	movs	r1, #15
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	6a39      	ldr	r1, [r7, #32]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80b1 	beq.w	8001eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d78:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d90:	4a48      	ldr	r2, [pc, #288]	@ (8001eb4 <HAL_GPIO_Init+0x2bc>)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a40      	ldr	r2, [pc, #256]	@ (8001eb8 <HAL_GPIO_Init+0x2c0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_GPIO_Init+0x1ec>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ebc <HAL_GPIO_Init+0x2c4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1e8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ec0 <HAL_GPIO_Init+0x2c8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1e4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec4 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1e0>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e004      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001de4:	2300      	movs	r3, #0
 8001de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001df6:	492f      	ldr	r1, [pc, #188]	@ (8001eb4 <HAL_GPIO_Init+0x2bc>)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	492c      	ldr	r1, [pc, #176]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4928      	ldr	r1, [pc, #160]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e38:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4922      	ldr	r1, [pc, #136]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	491e      	ldr	r1, [pc, #120]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4918      	ldr	r1, [pc, #96]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4914      	ldr	r1, [pc, #80]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d021      	beq.n	8001ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	490e      	ldr	r1, [pc, #56]	@ (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e021      	b.n	8001eda <HAL_GPIO_Init+0x2e2>
 8001e96:	bf00      	nop
 8001e98:	10320000 	.word	0x10320000
 8001e9c:	10310000 	.word	0x10310000
 8001ea0:	10220000 	.word	0x10220000
 8001ea4:	10210000 	.word	0x10210000
 8001ea8:	10120000 	.word	0x10120000
 8001eac:	10110000 	.word	0x10110000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	40010c00 	.word	0x40010c00
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40011400 	.word	0x40011400
 8001ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_GPIO_Init+0x304>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4909      	ldr	r1, [pc, #36]	@ (8001efc <HAL_GPIO_Init+0x304>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	3301      	adds	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f ae8e 	bne.w	8001c0c <HAL_GPIO_Init+0x14>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	372c      	adds	r7, #44	@ 0x2c
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e12b      	b.n	800219a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff f916 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f94:	f004 fcdc 	bl	8006950 <HAL_RCC_GetPCLK1Freq>
 8001f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a81      	ldr	r2, [pc, #516]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d807      	bhi.n	8001fb4 <HAL_I2C_Init+0x84>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a80      	ldr	r2, [pc, #512]	@ (80021a8 <HAL_I2C_Init+0x278>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e006      	b.n	8001fc2 <HAL_I2C_Init+0x92>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80021ac <HAL_I2C_Init+0x27c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0e7      	b.n	800219a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a78      	ldr	r2, [pc, #480]	@ (80021b0 <HAL_I2C_Init+0x280>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d802      	bhi.n	8002004 <HAL_I2C_Init+0xd4>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	e009      	b.n	8002018 <HAL_I2C_Init+0xe8>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	4a69      	ldr	r2, [pc, #420]	@ (80021b4 <HAL_I2C_Init+0x284>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	3301      	adds	r3, #1
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	430b      	orrs	r3, r1
 800201e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800202a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	495c      	ldr	r1, [pc, #368]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8002034:	428b      	cmp	r3, r1
 8002036:	d819      	bhi.n	800206c <HAL_I2C_Init+0x13c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e59      	subs	r1, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fbb1 f3f3 	udiv	r3, r1, r3
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_I2C_Init+0x138>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e59      	subs	r1, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	e051      	b.n	800210c <HAL_I2C_Init+0x1dc>
 8002068:	2304      	movs	r3, #4
 800206a:	e04f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <HAL_I2C_Init+0x168>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e012      	b.n	80020be <HAL_I2C_Init+0x18e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Init+0x196>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e022      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10e      	bne.n	80020ec <HAL_I2C_Init+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e58      	subs	r0, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ea:	e00f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6809      	ldr	r1, [r1, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800213a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6911      	ldr	r1, [r2, #16]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68d2      	ldr	r2, [r2, #12]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	000186a0 	.word	0x000186a0
 80021a8:	001e847f 	.word	0x001e847f
 80021ac:	003d08ff 	.word	0x003d08ff
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	10624dd3 	.word	0x10624dd3

080021b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ca:	2b80      	cmp	r3, #128	@ 0x80
 80021cc:	d103      	bne.n	80021d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff f952 	bl	800149c <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 80e0 	bne.w	80023c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	4970      	ldr	r1, [pc, #448]	@ (80023d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f002 f84e 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e0d3      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	@ 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a50      	ldr	r2, [pc, #320]	@ (80023d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f001 fdc8 	bl	8003e34 <I2C_MasterRequestWrite>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08d      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c4:	e066      	b.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f002 f90c 	bl	80044e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x188>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f002 f903 	bl	8004578 <I2C_WaitOnBTFFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01a      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d194      	bne.n	80022c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	461a      	mov	r2, r3
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
 80023ec:	4613      	mov	r3, r2
 80023ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	f040 8101 	bne.w	8002604 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002402:	4b83      	ldr	r3, [pc, #524]	@ (8002610 <HAL_I2C_Master_Transmit_DMA+0x234>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	4a82      	ldr	r2, [pc, #520]	@ (8002614 <HAL_I2C_Master_Transmit_DMA+0x238>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a1a      	lsrs	r2, r3, #8
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3b01      	subs	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d112      	bne.n	800244e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	e0db      	b.n	8002606 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d0df      	beq.n	800241c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002466:	2302      	movs	r3, #2
 8002468:	e0cd      	b.n	8002606 <HAL_I2C_Master_Transmit_DMA+0x22a>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d007      	beq.n	8002490 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2221      	movs	r2, #33	@ 0x21
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2210      	movs	r2, #16
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	893a      	ldrh	r2, [r7, #8]
 80024c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80024d2:	897a      	ldrh	r2, [r7, #10]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d073      	beq.n	80025c8 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d022      	beq.n	800252e <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ec:	4a4b      	ldr	r2, [pc, #300]	@ (800261c <HAL_I2C_Master_Transmit_DMA+0x240>)
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002620 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fc:	2200      	movs	r2, #0
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3310      	adds	r3, #16
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	f7ff f953 	bl	80017c8 <HAL_DMA_Start_IT>
 8002522:	4603      	mov	r3, r0
 8002524:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d139      	bne.n	80025a0 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 800252c:	e013      	b.n	8002556 <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e057      	b.n	8002606 <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800256c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800257c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800258c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e02f      	b.n	8002600 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01e      	b.n	8002606 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80025fe:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000000c 	.word	0x2000000c
 8002614:	14f8b589 	.word	0x14f8b589
 8002618:	ffff0000 	.word	0xffff0000
 800261c:	08003f39 	.word	0x08003f39
 8002620:	080040f7 	.word	0x080040f7

08002624 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	460b      	mov	r3, r1
 8002632:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7fe ff32 	bl	800149c <HAL_GetTick>
 8002638:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	f040 8111 	bne.w	800286e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2319      	movs	r3, #25
 8002652:	2201      	movs	r2, #1
 8002654:	4988      	ldr	r1, [pc, #544]	@ (8002878 <HAL_I2C_IsDeviceReady+0x254>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f001 fe2c 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	e104      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_IsDeviceReady+0x50>
 8002670:	2302      	movs	r3, #2
 8002672:	e0fd      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d007      	beq.n	800269a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2224      	movs	r2, #36	@ 0x24
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a70      	ldr	r2, [pc, #448]	@ (800287c <HAL_I2C_IsDeviceReady+0x258>)
 80026bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 fdea 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026f4:	d103      	bne.n	80026fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0b6      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002710:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002712:	f7fe fec3 	bl	800149c <HAL_GetTick>
 8002716:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002746:	e025      	b.n	8002794 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002748:	f7fe fea8 	bl	800149c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d302      	bcc.n	800275e <HAL_I2C_IsDeviceReady+0x13a>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	22a0      	movs	r2, #160	@ 0xa0
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2ba0      	cmp	r3, #160	@ 0xa0
 800279e:	d005      	beq.n	80027ac <HAL_I2C_IsDeviceReady+0x188>
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_I2C_IsDeviceReady+0x188>
 80027a6:	7dbb      	ldrb	r3, [r7, #22]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0cd      	beq.n	8002748 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d129      	bne.n	8002816 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	4921      	ldr	r1, [pc, #132]	@ (8002878 <HAL_I2C_IsDeviceReady+0x254>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f001 fd5e 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e036      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e02c      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002824:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800282e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2319      	movs	r3, #25
 8002836:	2201      	movs	r2, #1
 8002838:	490f      	ldr	r1, [pc, #60]	@ (8002878 <HAL_I2C_IsDeviceReady+0x254>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f001 fd3a 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e012      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	3301      	adds	r3, #1
 800284e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	f4ff af32 	bcc.w	80026be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00100002 	.word	0x00100002
 800287c:	ffff0000 	.word	0xffff0000

08002880 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d003      	beq.n	80028b8 <HAL_I2C_EV_IRQHandler+0x38>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	f040 80c1 	bne.w	8002a3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10d      	bne.n	80028ee <HAL_I2C_EV_IRQHandler+0x6e>
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80028d8:	d003      	beq.n	80028e2 <HAL_I2C_EV_IRQHandler+0x62>
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_EV_IRQHandler+0x66>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_I2C_EV_IRQHandler+0x68>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f000 8132 	beq.w	8002b52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00c      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x92>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	0a5b      	lsrs	r3, r3, #9
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f001 fedf 	bl	80046c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fce1 	bl	80032d2 <I2C_Master_SB>
 8002910:	e092      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_I2C_EV_IRQHandler+0xb2>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	0a5b      	lsrs	r3, r3, #9
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fd56 	bl	80033dc <I2C_Master_ADD10>
 8002930:	e082      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_I2C_EV_IRQHandler+0xd2>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	0a5b      	lsrs	r3, r3, #9
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fd6f 	bl	800342e <I2C_Master_ADDR>
 8002950:	e072      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03b      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800296c:	f000 80f3 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	09db      	lsrs	r3, r3, #7
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00f      	beq.n	800299c <HAL_I2C_EV_IRQHandler+0x11c>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	0a9b      	lsrs	r3, r3, #10
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_I2C_EV_IRQHandler+0x11c>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f939 	bl	8002c0c <I2C_MasterTransmit_TXE>
 800299a:	e04d      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80d6 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	0a5b      	lsrs	r3, r3, #9
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80cf 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	2b21      	cmp	r3, #33	@ 0x21
 80029bc:	d103      	bne.n	80029c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9c0 	bl	8002d44 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c4:	e0c7      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	f040 80c4 	bne.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa2e 	bl	8002e30 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d4:	e0bf      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e4:	f000 80b7 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x194>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x194>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 faa7 	bl	8002f60 <I2C_MasterReceive_RXNE>
 8002a12:	e011      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 809a 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	0a5b      	lsrs	r3, r3, #9
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8093 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb5d 	bl	80030f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a36:	e08e      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a38:	e08d      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e007      	b.n	8002a5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0x20e>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	0a5b      	lsrs	r3, r3, #9
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ff28 	bl	80038dc <I2C_Slave_ADDR>
 8002a8c:	e066      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x22e>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	0a5b      	lsrs	r3, r3, #9
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 ff62 	bl	8003970 <I2C_Slave_STOPF>
 8002aac:	e056      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	2b21      	cmp	r3, #33	@ 0x21
 8002ab2:	d002      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x23a>
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	2b29      	cmp	r3, #41	@ 0x29
 8002ab8:	d125      	bne.n	8002b06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	09db      	lsrs	r3, r3, #7
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00f      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x266>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	0a9b      	lsrs	r3, r3, #10
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x266>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fe40 	bl	8003764 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae4:	e039      	b.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d033      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2da>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a5b      	lsrs	r3, r3, #9
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02d      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fe6d 	bl	80037de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b04:	e029      	b.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00f      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	0a9b      	lsrs	r3, r3, #10
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe77 	bl	800381e <I2C_SlaveReceive_RXNE>
 8002b30:	e014      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fea5 	bl	800389a <I2C_SlaveReceive_BTF>
 8002b50:	e004      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d150      	bne.n	8002cd4 <I2C_MasterTransmit_TXE+0xc8>
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b21      	cmp	r3, #33	@ 0x21
 8002c36:	d14d      	bne.n	8002cd4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d01d      	beq.n	8002c7a <I2C_MasterTransmit_TXE+0x6e>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d01a      	beq.n	8002c7a <I2C_MasterTransmit_TXE+0x6e>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c4a:	d016      	beq.n	8002c7a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2211      	movs	r2, #17
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fb42 	bl	80012fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c78:	e060      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c88:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c98:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d107      	bne.n	8002cc4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff81 	bl	8002bc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cc2:	e03b      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fe fb15 	bl	80012fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cd2:	e033      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b21      	cmp	r3, #33	@ 0x21
 8002cd8:	d005      	beq.n	8002ce6 <I2C_MasterTransmit_TXE+0xda>
 8002cda:	7bbb      	ldrb	r3, [r7, #14]
 8002cdc:	2b40      	cmp	r3, #64	@ 0x40
 8002cde:	d12d      	bne.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b22      	cmp	r3, #34	@ 0x22
 8002ce4:	d12a      	bne.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cfe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d00:	e01c      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b40      	cmp	r3, #64	@ 0x40
 8002d0c:	d103      	bne.n	8002d16 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f88e 	bl	8002e30 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d14:	e012      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d3a:	e7ff      	b.n	8002d3c <I2C_MasterTransmit_TXE+0x130>
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b21      	cmp	r3, #33	@ 0x21
 8002d5c:	d164      	bne.n	8002e28 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d8c:	e04c      	b.n	8002e28 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d01d      	beq.n	8002dd0 <I2C_MasterTransmit_BTF+0x8c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d01a      	beq.n	8002dd0 <I2C_MasterTransmit_BTF+0x8c>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002da0:	d016      	beq.n	8002dd0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002db0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2211      	movs	r2, #17
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fa97 	bl	80012fc <HAL_I2C_MasterTxCpltCallback>
}
 8002dce:	e02b      	b.n	8002e28 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dde:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b40      	cmp	r3, #64	@ 0x40
 8002e08:	d107      	bne.n	8002e1a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fed6 	bl	8002bc4 <HAL_I2C_MemTxCpltCallback>
}
 8002e18:	e006      	b.n	8002e28 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fa6a 	bl	80012fc <HAL_I2C_MasterTxCpltCallback>
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11d      	bne.n	8002e84 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10b      	bne.n	8002e68 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e60:	1c9a      	adds	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002e66:	e077      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	121b      	asrs	r3, r3, #8
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e82:	e069      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10b      	bne.n	8002ea4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ea2:	e059      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d152      	bne.n	8002f52 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b22      	cmp	r3, #34	@ 0x22
 8002eb0:	d10d      	bne.n	8002ece <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ecc:	e044      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b21      	cmp	r3, #33	@ 0x21
 8002edc:	d112      	bne.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f02:	e029      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d124      	bne.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b21      	cmp	r3, #33	@ 0x21
 8002f12:	d121      	bne.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f22:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fe3a 	bl	8002bc4 <HAL_I2C_MemTxCpltCallback>
}
 8002f50:	e002      	b.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff f930 	bl	80021b8 <I2C_Flush_DR>
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b22      	cmp	r3, #34	@ 0x22
 8002f72:	f040 80b9 	bne.w	80030e8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d921      	bls.n	8002fce <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f040 8096 	bne.w	80030e8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002fcc:	e08c      	b.n	80030e8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d07f      	beq.n	80030d6 <I2C_MasterReceive_RXNE+0x176>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <I2C_MasterReceive_RXNE+0x82>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d179      	bne.n	80030d6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f001 fb10 	bl	8004608 <I2C_WaitOnSTOPRequestThroughIT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d14c      	bne.n	8003088 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800300c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d10a      	bne.n	800305e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fdbd 	bl	8002bd6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800305c:	e044      	b.n	80030e8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d002      	beq.n	8003072 <I2C_MasterReceive_RXNE+0x112>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b20      	cmp	r3, #32
 8003070:	d103      	bne.n	800307a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
 8003078:	e002      	b.n	8003080 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2212      	movs	r2, #18
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fd6e 	bl	8002b62 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003086:	e02f      	b.n	80030e8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003096:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fd8a 	bl	8002be8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030d4:	e008      	b.n	80030e8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e4:	605a      	str	r2, [r3, #4]
}
 80030e6:	e7ff      	b.n	80030e8 <I2C_MasterReceive_RXNE+0x188>
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b04      	cmp	r3, #4
 8003106:	d11b      	bne.n	8003140 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800313e:	e0c4      	b.n	80032ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b03      	cmp	r3, #3
 8003148:	d129      	bne.n	800319e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003158:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00a      	beq.n	8003176 <I2C_MasterReceive_BTF+0x86>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d007      	beq.n	8003176 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003174:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800319c:	e095      	b.n	80032ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d17d      	bne.n	80032a4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d002      	beq.n	80031b4 <I2C_MasterReceive_BTF+0xc4>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d108      	bne.n	80031c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e016      	b.n	80031f4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d002      	beq.n	80031d2 <I2C_MasterReceive_BTF+0xe2>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d108      	bne.n	80031e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e007      	b.n	80031f4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800324e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d10a      	bne.n	800327a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fcaf 	bl	8002bd6 <HAL_I2C_MemRxCpltCallback>
}
 8003278:	e027      	b.n	80032ca <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d002      	beq.n	800328e <I2C_MasterReceive_BTF+0x19e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d103      	bne.n	8003296 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
 8003294:	e002      	b.n	800329c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2212      	movs	r2, #18
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fc60 	bl	8002b62 <HAL_I2C_MasterRxCpltCallback>
}
 80032a2:	e012      	b.n	80032ca <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d117      	bne.n	8003316 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003300:	e067      	b.n	80033d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
}
 8003314:	e05d      	b.n	80033d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800331e:	d133      	bne.n	8003388 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b21      	cmp	r3, #33	@ 0x21
 800332a:	d109      	bne.n	8003340 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	e008      	b.n	8003352 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	b2da      	uxtb	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <I2C_Master_SB+0x92>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d032      	beq.n	80033d2 <I2C_Master_SB+0x100>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02d      	beq.n	80033d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003384:	605a      	str	r2, [r3, #4]
}
 8003386:	e024      	b.n	80033d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10e      	bne.n	80033ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	b29b      	uxth	r3, r3
 8003396:	11db      	asrs	r3, r3, #7
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f063 030f 	orn	r3, r3, #15
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
}
 80033ac:	e011      	b.n	80033d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10d      	bne.n	80033d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	11db      	asrs	r3, r3, #7
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 0306 	and.w	r3, r3, #6
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f063 030e 	orn	r3, r3, #14
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <I2C_Master_ADD10+0x26>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <I2C_Master_ADD10+0x48>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003422:	605a      	str	r2, [r3, #4]
  }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800342e:	b480      	push	{r7}
 8003430:	b091      	sub	sp, #68	@ 0x44
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800343c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b22      	cmp	r3, #34	@ 0x22
 8003456:	f040 8174 	bne.w	8003742 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <I2C_Master_ADDR+0x54>
 8003462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003466:	2b40      	cmp	r3, #64	@ 0x40
 8003468:	d10b      	bne.n	8003482 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	e16b      	b.n	800375a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <I2C_Master_ADDR+0x98>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003492:	d118      	bne.n	80034c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003494:	2300      	movs	r3, #0
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80034c4:	e149      	b.n	800375a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d0:	2300      	movs	r3, #0
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e120      	b.n	800373a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	f040 808a 	bne.w	8003618 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003506:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800350a:	d137      	bne.n	800357c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352a:	d113      	bne.n	8003554 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	e0f2      	b.n	800373a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e0de      	b.n	800373a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800357c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357e:	2b08      	cmp	r3, #8
 8003580:	d02e      	beq.n	80035e0 <I2C_Master_ADDR+0x1b2>
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	2b20      	cmp	r3, #32
 8003586:	d02b      	beq.n	80035e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	2b12      	cmp	r3, #18
 800358c:	d102      	bne.n	8003594 <I2C_Master_ADDR+0x166>
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	2b01      	cmp	r3, #1
 8003592:	d125      	bne.n	80035e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00e      	beq.n	80035b8 <I2C_Master_ADDR+0x18a>
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	2b02      	cmp	r3, #2
 800359e:	d00b      	beq.n	80035b8 <I2C_Master_ADDR+0x18a>
 80035a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d008      	beq.n	80035b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	e0ac      	b.n	800373a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e090      	b.n	800373a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d158      	bne.n	80036d4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	2b04      	cmp	r3, #4
 8003626:	d021      	beq.n	800366c <I2C_Master_ADDR+0x23e>
 8003628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362a:	2b02      	cmp	r3, #2
 800362c:	d01e      	beq.n	800366c <I2C_Master_ADDR+0x23e>
 800362e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003630:	2b10      	cmp	r3, #16
 8003632:	d01b      	beq.n	800366c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003642:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e012      	b.n	8003692 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800367a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a0:	d14b      	bne.n	800373a <I2C_Master_ADDR+0x30c>
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036a8:	d00b      	beq.n	80036c2 <I2C_Master_ADDR+0x294>
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d008      	beq.n	80036c2 <I2C_Master_ADDR+0x294>
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d005      	beq.n	80036c2 <I2C_Master_ADDR+0x294>
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d002      	beq.n	80036c2 <I2C_Master_ADDR+0x294>
 80036bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d13b      	bne.n	800373a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e032      	b.n	800373a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f2:	d117      	bne.n	8003724 <I2C_Master_ADDR+0x2f6>
 80036f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036fa:	d00b      	beq.n	8003714 <I2C_Master_ADDR+0x2e6>
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d008      	beq.n	8003714 <I2C_Master_ADDR+0x2e6>
 8003702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003704:	2b08      	cmp	r3, #8
 8003706:	d005      	beq.n	8003714 <I2C_Master_ADDR+0x2e6>
 8003708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370a:	2b10      	cmp	r3, #16
 800370c:	d002      	beq.n	8003714 <I2C_Master_ADDR+0x2e6>
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b20      	cmp	r3, #32
 8003712:	d107      	bne.n	8003724 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003722:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003740:	e00b      	b.n	800375a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
}
 8003758:	e7ff      	b.n	800375a <I2C_Master_ADDR+0x32c>
 800375a:	bf00      	nop
 800375c:	3744      	adds	r7, #68	@ 0x44
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003772:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02b      	beq.n	80037d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d114      	bne.n	80037d6 <I2C_SlaveTransmit_TXE+0x72>
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b29      	cmp	r3, #41	@ 0x29
 80037b0:	d111      	bne.n	80037d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2221      	movs	r2, #33	@ 0x21
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2228      	movs	r2, #40	@ 0x28
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff f9cf 	bl	8002b74 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02c      	beq.n	8003892 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d114      	bne.n	8003892 <I2C_SlaveReceive_RXNE+0x74>
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b2a      	cmp	r3, #42	@ 0x2a
 800386c:	d111      	bne.n	8003892 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2222      	movs	r2, #34	@ 0x22
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2228      	movs	r2, #40	@ 0x28
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff f97a 	bl	8002b86 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d012      	beq.n	80038d2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038f6:	2b28      	cmp	r3, #40	@ 0x28
 80038f8:	d127      	bne.n	800394a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	09db      	lsrs	r3, r3, #7
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	81bb      	strh	r3, [r7, #12]
 800392c:	e002      	b.n	8003934 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800393c:	89ba      	ldrh	r2, [r7, #12]
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f928 	bl	8002b98 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003948:	e00e      	b.n	8003968 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800398e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039cc:	d172      	bne.n	8003ab4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b22      	cmp	r3, #34	@ 0x22
 80039d2:	d002      	beq.n	80039da <I2C_Slave_STOPF+0x6a>
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80039d8:	d135      	bne.n	8003a46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe f8b6 	bl	8001b84 <HAL_DMA_GetState>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d049      	beq.n	8003ab2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	4a69      	ldr	r2, [pc, #420]	@ (8003bc8 <I2C_Slave_STOPF+0x258>)
 8003a24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd ff2c 	bl	8001888 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03d      	beq.n	8003ab2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a44:	e035      	b.n	8003ab2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f880 	bl	8001b84 <HAL_DMA_GetState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d014      	beq.n	8003ab4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc8 <I2C_Slave_STOPF+0x258>)
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fef6 	bl	8001888 <HAL_DMA_Abort_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003aac:	4610      	mov	r0, r2
 8003aae:	4798      	blx	r3
 8003ab0:	e000      	b.n	8003ab4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03e      	beq.n	8003b3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d112      	bne.n	8003af2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d112      	bne.n	8003b26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f843 	bl	8003bd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b4a:	e039      	b.n	8003bc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b50:	d109      	bne.n	8003b66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2228      	movs	r2, #40	@ 0x28
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff f810 	bl	8002b86 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b28      	cmp	r3, #40	@ 0x28
 8003b70:	d111      	bne.n	8003b96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <I2C_Slave_STOPF+0x25c>)
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff f80f 	bl	8002bb2 <HAL_I2C_ListenCpltCallback>
}
 8003b94:	e014      	b.n	8003bc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	2b22      	cmp	r3, #34	@ 0x22
 8003b9c:	d002      	beq.n	8003ba4 <I2C_Slave_STOPF+0x234>
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b22      	cmp	r3, #34	@ 0x22
 8003ba2:	d10d      	bne.n	8003bc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe ffe3 	bl	8002b86 <HAL_I2C_SlaveRxCpltCallback>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	08004165 	.word	0x08004165
 8003bcc:	ffff0000 	.word	0xffff0000

08003bd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003be8:	7bbb      	ldrb	r3, [r7, #14]
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d002      	beq.n	8003bf4 <I2C_ITError+0x24>
 8003bee:	7bbb      	ldrb	r3, [r7, #14]
 8003bf0:	2b40      	cmp	r3, #64	@ 0x40
 8003bf2:	d10a      	bne.n	8003c0a <I2C_ITError+0x3a>
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b22      	cmp	r3, #34	@ 0x22
 8003bf8:	d107      	bne.n	8003c0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c10:	2b28      	cmp	r3, #40	@ 0x28
 8003c12:	d107      	bne.n	8003c24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2228      	movs	r2, #40	@ 0x28
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003c22:	e015      	b.n	8003c50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c32:	d00a      	beq.n	8003c4a <I2C_ITError+0x7a>
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b60      	cmp	r3, #96	@ 0x60
 8003c38:	d007      	beq.n	8003c4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d162      	bne.n	8003d26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d020      	beq.n	8003cc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c82:	4a6a      	ldr	r2, [pc, #424]	@ (8003e2c <I2C_ITError+0x25c>)
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fdfc 	bl	8001888 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8089 	beq.w	8003daa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4798      	blx	r3
 8003cbe:	e074      	b.n	8003daa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc4:	4a59      	ldr	r2, [pc, #356]	@ (8003e2c <I2C_ITError+0x25c>)
 8003cc6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fddb 	bl	8001888 <HAL_DMA_Abort_IT>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d068      	beq.n	8003daa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d10b      	bne.n	8003cfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
 8003d24:	e041      	b.n	8003daa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b60      	cmp	r3, #96	@ 0x60
 8003d30:	d125      	bne.n	8003d7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d10b      	bne.n	8003d66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe ff3f 	bl	8002bfa <HAL_I2C_AbortCpltCallback>
 8003d7c:	e015      	b.n	8003daa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d10b      	bne.n	8003da4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fe ff1f 	bl	8002be8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d113      	bne.n	8003e24 <I2C_ITError+0x254>
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b28      	cmp	r3, #40	@ 0x28
 8003e00:	d110      	bne.n	8003e24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <I2C_ITError+0x260>)
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe fec7 	bl	8002bb2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08004165 	.word	0x08004165
 8003e30:	ffff0000 	.word	0xffff0000

08003e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d006      	beq.n	8003e5e <I2C_MasterRequestWrite+0x2a>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d003      	beq.n	8003e5e <I2C_MasterRequestWrite+0x2a>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e5c:	d108      	bne.n	8003e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e00b      	b.n	8003e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	2b12      	cmp	r3, #18
 8003e76:	d107      	bne.n	8003e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa0d 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eae:	d103      	bne.n	8003eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e035      	b.n	8003f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec4:	d108      	bne.n	8003ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	e01b      	b.n	8003f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ed8:	897b      	ldrh	r3, [r7, #10]
 8003eda:	11db      	asrs	r3, r3, #7
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f063 030f 	orn	r3, r3, #15
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	490e      	ldr	r1, [pc, #56]	@ (8003f30 <I2C_MasterRequestWrite+0xfc>)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fa56 	bl	80043a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e010      	b.n	8003f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4907      	ldr	r1, [pc, #28]	@ (8003f34 <I2C_MasterRequestWrite+0x100>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fa46 	bl	80043a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00010008 	.word	0x00010008
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f54:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	2200      	movs	r2, #0
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003f92:	2b21      	cmp	r3, #33	@ 0x21
 8003f94:	d007      	beq.n	8003fa6 <I2C_DMAXferCplt+0x6e>
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003f9c:	2b22      	cmp	r3, #34	@ 0x22
 8003f9e:	d131      	bne.n	8004004 <I2C_DMAXferCplt+0xcc>
 8003fa0:	7cbb      	ldrb	r3, [r7, #18]
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d12e      	bne.n	8004004 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b29      	cmp	r3, #41	@ 0x29
 8003fc0:	d10a      	bne.n	8003fd8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2221      	movs	r2, #33	@ 0x21
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2228      	movs	r2, #40	@ 0x28
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fd0:	6978      	ldr	r0, [r7, #20]
 8003fd2:	f7fe fdcf 	bl	8002b74 <HAL_I2C_SlaveTxCpltCallback>
 8003fd6:	e00c      	b.n	8003ff2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fdc:	d109      	bne.n	8003ff2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2222      	movs	r2, #34	@ 0x22
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2228      	movs	r2, #40	@ 0x28
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7fe fdca 	bl	8002b86 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004000:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004002:	e074      	b.n	80040ee <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d06e      	beq.n	80040ee <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004028:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004038:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004040:	d009      	beq.n	8004056 <I2C_DMAXferCplt+0x11e>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d006      	beq.n	8004056 <I2C_DMAXferCplt+0x11e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800404e:	d002      	beq.n	8004056 <I2C_DMAXferCplt+0x11e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b20      	cmp	r3, #32
 8004054:	d107      	bne.n	8004066 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004064:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004074:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004084:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004094:	6978      	ldr	r0, [r7, #20]
 8004096:	f7fe fda7 	bl	8002be8 <HAL_I2C_ErrorCallback>
}
 800409a:	e028      	b.n	80040ee <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d10a      	bne.n	80040c6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f7fe fd89 	bl	8002bd6 <HAL_I2C_MemRxCpltCallback>
}
 80040c4:	e013      	b.n	80040ee <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d002      	beq.n	80040da <I2C_DMAXferCplt+0x1a2>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d103      	bne.n	80040e2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
 80040e0:	e002      	b.n	80040e8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2212      	movs	r2, #18
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f7fe fd3a 	bl	8002b62 <HAL_I2C_MasterRxCpltCallback>
}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	2200      	movs	r2, #0
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f043 0210 	orr.w	r2, r3, #16
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7fe fd46 	bl	8002be8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800417e:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <I2C_DMAAbort+0x148>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	08db      	lsrs	r3, r3, #3
 8004184:	4a4a      	ldr	r2, [pc, #296]	@ (80042b0 <I2C_DMAAbort+0x14c>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0a1a      	lsrs	r2, r3, #8
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	00da      	lsls	r2, r3, #3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80041aa:	e00a      	b.n	80041c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c0:	d0ea      	beq.n	8004198 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	2200      	movs	r2, #0
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	2200      	movs	r2, #0
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	2200      	movs	r2, #0
 8004216:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b60      	cmp	r3, #96	@ 0x60
 8004232:	d10e      	bne.n	8004252 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f7fe fcd5 	bl	8002bfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004250:	e027      	b.n	80042a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004258:	2b28      	cmp	r3, #40	@ 0x28
 800425a:	d117      	bne.n	800428c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800427a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2228      	movs	r2, #40	@ 0x28
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800428a:	e007      	b.n	800429c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800429c:	6978      	ldr	r0, [r7, #20]
 800429e:	f7fe fca3 	bl	8002be8 <HAL_I2C_ErrorCallback>
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000000c 	.word	0x2000000c
 80042b0:	14f8b589 	.word	0x14f8b589

080042b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	e048      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d044      	beq.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fd f8e5 	bl	800149c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d139      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10d      	bne.n	800430a <I2C_WaitOnFlagUntilTimeout+0x56>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	e00c      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0x70>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	429a      	cmp	r2, r3
 8004328:	d116      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e023      	b.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10d      	bne.n	800437e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	43da      	mvns	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	e00c      	b.n	8004398 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	d093      	beq.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b6:	e071      	b.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d123      	bne.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e067      	b.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d041      	beq.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004418:	f7fd f840 	bl	800149c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d136      	bne.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10c      	bne.n	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e00b      	b.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	43da      	mvns	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	f043 0220 	orr.w	r2, r3, #32
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e021      	b.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10c      	bne.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	43da      	mvns	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e00b      	b.n	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f af6d 	bne.w	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f4:	e034      	b.n	8004560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f8b8 	bl	800466c <I2C_IsAcknowledgeFailed>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e034      	b.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d028      	beq.n	8004560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fc ffc5 	bl	800149c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11d      	bne.n	8004560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b80      	cmp	r3, #128	@ 0x80
 8004530:	d016      	beq.n	8004560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456a:	2b80      	cmp	r3, #128	@ 0x80
 800456c:	d1c3      	bne.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004584:	e034      	b.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f870 	bl	800466c <I2C_IsAcknowledgeFailed>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e034      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d028      	beq.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fc ff7d 	bl	800149c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11d      	bne.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d016      	beq.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d1c3      	bne.n	8004586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0a1a      	lsrs	r2, r3, #8
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e008      	b.n	8004658 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004654:	d0e9      	beq.n	800462a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000000c 	.word	0x2000000c
 8004668:	14f8b589 	.word	0x14f8b589

0800466c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004682:	d11b      	bne.n	80046bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800468c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046d8:	d103      	bne.n	80046e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046e0:	e007      	b.n	80046f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046ea:	d102      	bne.n	80046f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2208      	movs	r2, #8
 80046f0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0e8      	b.n	80048e0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f006 fb1a 	bl	800ad5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2203      	movs	r2, #3
 800472c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f002 fa13 	bl	8006b66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474a:	f002 f9e9 	bl	8006b20 <USB_CoreInit>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0bf      	b.n	80048e0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f002 fa17 	bl	8006b9a <USB_SetCurrentMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0b0      	b.n	80048e0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e03e      	b.n	8004802 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	440b      	add	r3, r1
 8004792:	3311      	adds	r3, #17
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	440b      	add	r3, r1
 80047a6:	3310      	adds	r3, #16
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	3313      	adds	r3, #19
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	3320      	adds	r3, #32
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	440b      	add	r3, r1
 80047e2:	3324      	adds	r3, #36	@ 0x24
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	3301      	adds	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	791b      	ldrb	r3, [r3, #4]
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3bb      	bcc.n	8004784 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e044      	b.n	800489c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	440b      	add	r3, r1
 800484c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3301      	adds	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	791b      	ldrb	r3, [r3, #4]
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3b5      	bcc.n	8004812 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b0:	f002 f97f 	bl	8006bb2 <USB_DevInit>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e00c      	b.n	80048e0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f004 fbfe 	bl	80090da <USB_DevDisconnect>

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_PCD_Start+0x16>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e016      	b.n	800492c <HAL_PCD_Start+0x44>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f915 	bl	8006b3a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004910:	2101      	movs	r1, #1
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f006 fc95 	bl	800b242 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f004 fbd2 	bl	80090c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f004 fbd4 	bl	80090ee <USB_ReadInterrupts>
 8004946:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fb1a 	bl	8004f8c <PCD_EP_ISR_Handler>

    return;
 8004958:	e119      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004976:	b292      	uxth	r2, r2
 8004978:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f006 fa68 	bl	800ae52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004982:	2100      	movs	r1, #0
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f905 	bl	8004b94 <HAL_PCD_SetAddress>

    return;
 800498a:	e100      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049a8:	b292      	uxth	r2, r2
 80049aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80049ae:	e0ee      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049cc:	b292      	uxth	r2, r2
 80049ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80049d2:	e0dc      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d027      	beq.n	8004a2e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0204 	bic.w	r2, r2, #4
 80049f0:	b292      	uxth	r2, r2
 80049f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0208 	bic.w	r2, r2, #8
 8004a08:	b292      	uxth	r2, r2
 8004a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f006 fa58 	bl	800aec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a26:	b292      	uxth	r2, r2
 8004a28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004a2c:	e0af      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8083 	beq.w	8004b40 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e010      	b.n	8004a62 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	b292      	uxth	r2, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	3320      	adds	r3, #32
 8004a56:	443b      	add	r3, r7
 8004a58:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b07      	cmp	r3, #7
 8004a66:	d9eb      	bls.n	8004a40 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	b292      	uxth	r2, r2
 8004a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	b292      	uxth	r2, r2
 8004a94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004a98:	bf00      	nop
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f6      	beq.n	8004a9a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e00f      	b.n	8004aea <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004aca:	7ffb      	ldrb	r3, [r7, #31]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	7ffa      	ldrb	r2, [r7, #31]
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	440a      	add	r2, r1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	3320      	adds	r3, #32
 8004adc:	443b      	add	r3, r7
 8004ade:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004ae2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004ae4:	7ffb      	ldrb	r3, [r7, #31]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	7ffb      	ldrb	r3, [r7, #31]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	d9ec      	bls.n	8004aca <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	b292      	uxth	r2, r2
 8004b04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0204 	orr.w	r2, r2, #4
 8004b32:	b292      	uxth	r2, r2
 8004b34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f006 f9a9 	bl	800ae90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b3e:	e026      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00f      	beq.n	8004b6a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f006 f967 	bl	800ae36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b68:	e011      	b.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b86:	b292      	uxth	r2, r2
 8004b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b8c:	bf00      	nop
  }
}
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_PCD_SetAddress+0x1a>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e012      	b.n	8004bd4 <HAL_PCD_SetAddress+0x40>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f004 fa6b 	bl	80090a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	70fb      	strb	r3, [r7, #3]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	803b      	strh	r3, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0e      	bge.n	8004c20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 0207 	and.w	r2, r3, #7
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3310      	adds	r3, #16
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	705a      	strb	r2, [r3, #1]
 8004c1e:	e00e      	b.n	8004c3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 0207 	and.w	r2, r3, #7
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c4a:	883a      	ldrh	r2, [r7, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	78ba      	ldrb	r2, [r7, #2]
 8004c54:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c56:	78bb      	ldrb	r3, [r7, #2]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d102      	bne.n	8004c62 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_PCD_EP_Open+0x94>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e00e      	b.n	8004c8e <HAL_PCD_EP_Open+0xb2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68f9      	ldr	r1, [r7, #12]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 ffb4 	bl	8006bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da0e      	bge.n	8004cc8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 0207 	and.w	r2, r3, #7
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	3310      	adds	r3, #16
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	705a      	strb	r2, [r3, #1]
 8004cc6:	e00e      	b.n	8004ce6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 0207 	and.w	r2, r3, #7
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_PCD_EP_Close+0x6a>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e00e      	b.n	8004d1e <HAL_PCD_EP_Close+0x88>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68f9      	ldr	r1, [r7, #12]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f002 fb2c 	bl	800736c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	460b      	mov	r3, r1
 8004d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	f003 0207 	and.w	r2, r3, #7
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f002 fce3 	bl	8007744 <USB_EPStartXfer>

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f003 0207 	and.w	r2, r3, #7
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e02:	7afb      	ldrb	r3, [r7, #11]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fc95 	bl	8007744 <USB_EPStartXfer>

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	7912      	ldrb	r2, [r2, #4]
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e04c      	b.n	8004edc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da0e      	bge.n	8004e68 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 0207 	and.w	r2, r3, #7
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3310      	adds	r3, #16
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	705a      	strb	r2, [r3, #1]
 8004e66:	e00c      	b.n	8004e82 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_PCD_EP_SetStall+0x7e>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e01c      	b.n	8004edc <HAL_PCD_EP_SetStall+0xb8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fff8 	bl	8008ea6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d108      	bne.n	8004ed2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f004 f91d 	bl	800910c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	7912      	ldrb	r2, [r2, #4]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e040      	b.n	8004f84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da0e      	bge.n	8004f28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 0207 	and.w	r2, r3, #7
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	3310      	adds	r3, #16
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	705a      	strb	r2, [r3, #1]
 8004f26:	e00e      	b.n	8004f46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_PCD_EP_ClrStall+0x82>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e00e      	b.n	8004f84 <HAL_PCD_EP_ClrStall+0xa0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 ffe6 	bl	8008f46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b096      	sub	sp, #88	@ 0x58
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f94:	e3bb      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8175 	bne.w	80052a4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d14e      	bne.n	8005064 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	81fb      	strh	r3, [r7, #14]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	89fb      	ldrh	r3, [r7, #14]
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3310      	adds	r3, #16
 8004fee:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	3302      	adds	r3, #2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800501c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	441a      	add	r2, r3
 8005026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005028:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800502a:	2100      	movs	r1, #0
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f005 fee8 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	7b5b      	ldrb	r3, [r3, #13]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8368 	beq.w	800570e <PCD_EP_ISR_Handler+0x782>
 800503e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 8363 	bne.w	800570e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7b5b      	ldrb	r3, [r3, #13]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005052:	b2da      	uxtb	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	735a      	strb	r2, [r3, #13]
 8005062:	e354      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800506a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005076:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800507a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800507e:	2b00      	cmp	r3, #0
 8005080:	d034      	beq.n	80050ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	3306      	adds	r3, #6
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80050b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80050bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f004 f874 	bl	80091ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80050d2:	4013      	ands	r3, r2
 80050d4:	823b      	strh	r3, [r7, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	8a3a      	ldrh	r2, [r7, #16]
 80050dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050e0:	b292      	uxth	r2, r2
 80050e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f005 fe5f 	bl	800ada8 <HAL_PCD_SetupStageCallback>
 80050ea:	e310      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f280 830c 	bge.w	800570e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005102:	4013      	ands	r3, r2
 8005104:	83fb      	strh	r3, [r7, #30]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	8bfa      	ldrh	r2, [r7, #30]
 800510c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005110:	b292      	uxth	r2, r2
 8005112:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	3306      	adds	r3, #6
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d019      	beq.n	800517c <PCD_EP_ISR_Handler+0x1f0>
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800515c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005160:	b29b      	uxth	r3, r3
 8005162:	f004 f824 	bl	80091ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	441a      	add	r2, r3
 8005170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005172:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005174:	2100      	movs	r1, #0
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f005 fe28 	bl	800adcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800518a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 82bd 	bne.w	800570e <PCD_EP_ISR_Handler+0x782>
 8005194:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005198:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800519c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051a0:	f000 82b5 	beq.w	800570e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80051da:	d91d      	bls.n	8005218 <PCD_EP_ISR_Handler+0x28c>
 80051dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <PCD_EP_ISR_Handler+0x26a>
 80051f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f2:	3b01      	subs	r3, #1
 80051f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fe:	b29b      	uxth	r3, r3
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	b29b      	uxth	r3, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29a      	uxth	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e026      	b.n	8005266 <PCD_EP_ISR_Handler+0x2da>
 8005218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <PCD_EP_ISR_Handler+0x2aa>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522e:	b29a      	uxth	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e017      	b.n	8005266 <PCD_EP_ISR_Handler+0x2da>
 8005236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	647b      	str	r3, [r7, #68]	@ 0x44
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <PCD_EP_ISR_Handler+0x2c4>
 800524a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524c:	3301      	adds	r3, #1
 800524e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29a      	uxth	r2, r3
 8005256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005258:	b29b      	uxth	r3, r3
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	b29b      	uxth	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b29a      	uxth	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	827b      	strh	r3, [r7, #18]
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800527e:	827b      	strh	r3, [r7, #18]
 8005280:	8a7b      	ldrh	r3, [r7, #18]
 8005282:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005286:	827b      	strh	r3, [r7, #18]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	8a7b      	ldrh	r3, [r7, #18]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800529a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e234      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f280 80fc 	bge.w	80054ba <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80052d8:	4013      	ands	r3, r2
 80052da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80052f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052f4:	b292      	uxth	r2, r2
 80052f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	4413      	add	r3, r2
 800530c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800530e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005310:	7b1b      	ldrb	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d125      	bne.n	8005362 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	3306      	adds	r3, #6
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005342:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8092 	beq.w	8005470 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005352:	6959      	ldr	r1, [r3, #20]
 8005354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005356:	88da      	ldrh	r2, [r3, #6]
 8005358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800535c:	f003 ff27 	bl	80091ae <USB_ReadPMA>
 8005360:	e086      	b.n	8005470 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d10a      	bne.n	8005380 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800536a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800536e:	461a      	mov	r2, r3
 8005370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9d9 	bl	800572a <HAL_PCD_EP_DB_Receive>
 8005378:	4603      	mov	r3, r0
 800537a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800537e:	e077      	b.n	8005470 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d024      	beq.n	8005428 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	3302      	adds	r3, #2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005406:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800540a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02e      	beq.n	8005470 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	6959      	ldr	r1, [r3, #20]
 800541a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541c:	891a      	ldrh	r2, [r3, #8]
 800541e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005422:	f003 fec4 	bl	80091ae <USB_ReadPMA>
 8005426:	e023      	b.n	8005470 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005430:	b29b      	uxth	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	3306      	adds	r3, #6
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005450:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005454:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005466:	895a      	ldrh	r2, [r3, #10]
 8005468:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800546c:	f003 fe9f 	bl	80091ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005478:	441a      	add	r2, r3
 800547a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800547e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005486:	441a      	add	r2, r3
 8005488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <PCD_EP_ISR_Handler+0x514>
 8005494:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d206      	bcs.n	80054ae <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80054a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f005 fc90 	bl	800adcc <HAL_PCD_DataOutStageCallback>
 80054ac:	e005      	b.n	80054ba <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054b4:	4618      	mov	r0, r3
 80054b6:	f002 f945 	bl	8007744 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80054ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8123 	beq.w	800570e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80054c8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3310      	adds	r3, #16
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551a:	78db      	ldrb	r3, [r3, #3]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 80a2 	bne.w	8005666 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552a:	7b1b      	ldrb	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8093 	beq.w	8005658 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d046      	beq.n	80055cc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d126      	bne.n	8005594 <PCD_EP_ISR_Handler+0x608>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	4413      	add	r3, r2
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
 800555e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	011a      	lsls	r2, r3, #4
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	4413      	add	r3, r2
 8005568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005578:	b29a      	uxth	r2, r3
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e061      	b.n	8005658 <PCD_EP_ISR_Handler+0x6cc>
 8005594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d15d      	bne.n	8005658 <PCD_EP_ISR_Handler+0x6cc>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	4413      	add	r3, r2
 80055b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e045      	b.n	8005658 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d126      	bne.n	8005628 <PCD_EP_ISR_Handler+0x69c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ee:	4413      	add	r3, r2
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011a      	lsls	r2, r3, #4
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560c:	b29a      	uxth	r2, r3
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29a      	uxth	r2, r3
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	e017      	b.n	8005658 <PCD_EP_ISR_Handler+0x6cc>
 8005628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d113      	bne.n	8005658 <PCD_EP_ISR_Handler+0x6cc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	4413      	add	r3, r2
 8005640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	011a      	lsls	r2, r3, #4
 8005648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564a:	4413      	add	r3, r2
 800564c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	2200      	movs	r2, #0
 8005656:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f005 fbcf 	bl	800ae02 <HAL_PCD_DataInStageCallback>
 8005664:	e053      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005666:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800566a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d146      	bne.n	8005700 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567a:	b29b      	uxth	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	3302      	adds	r3, #2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800569a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800569e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d907      	bls.n	80056ba <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b6:	619a      	str	r2, [r3, #24]
 80056b8:	e002      	b.n	80056c0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80056ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80056c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f005 fb97 	bl	800ae02 <HAL_PCD_DataInStageCallback>
 80056d4:	e01b      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80056d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056de:	441a      	add	r2, r3
 80056e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80056e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056ec:	441a      	add	r2, r3
 80056ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056f8:	4618      	mov	r0, r3
 80056fa:	f002 f823 	bl	8007744 <USB_EPStartXfer>
 80056fe:	e006      	b.n	800570e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005700:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005704:	461a      	mov	r2, r3
 8005706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f91b 	bl	8005944 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005716:	b29b      	uxth	r3, r3
 8005718:	b21b      	sxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	f6ff ac3b 	blt.w	8004f96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3758      	adds	r7, #88	@ 0x58
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d07e      	beq.n	8005840 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574a:	b29b      	uxth	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	3302      	adds	r3, #2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	8b7b      	ldrh	r3, [r7, #26]
 8005772:	429a      	cmp	r2, r3
 8005774:	d306      	bcc.n	8005784 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	8b7b      	ldrh	r3, [r7, #26]
 800577c:	1ad2      	subs	r2, r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	619a      	str	r2, [r3, #24]
 8005782:	e002      	b.n	800578a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d123      	bne.n	80057da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ac:	833b      	strh	r3, [r7, #24]
 80057ae:	8b3b      	ldrh	r3, [r7, #24]
 80057b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057b4:	833b      	strh	r3, [r7, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	8b3b      	ldrh	r3, [r7, #24]
 80057c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01f      	beq.n	8005824 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	82fb      	strh	r3, [r7, #22]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	441a      	add	r2, r3
 800580e:	8afb      	ldrh	r3, [r7, #22]
 8005810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005820:	b29b      	uxth	r3, r3
 8005822:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005824:	8b7b      	ldrh	r3, [r7, #26]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8087 	beq.w	800593a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	891a      	ldrh	r2, [r3, #8]
 8005838:	8b7b      	ldrh	r3, [r7, #26]
 800583a:	f003 fcb8 	bl	80091ae <USB_ReadPMA>
 800583e:	e07c      	b.n	800593a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	3306      	adds	r3, #6
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005868:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	8b7b      	ldrh	r3, [r7, #26]
 8005870:	429a      	cmp	r2, r3
 8005872:	d306      	bcc.n	8005882 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	8b7b      	ldrh	r3, [r7, #26]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	619a      	str	r2, [r3, #24]
 8005880:	e002      	b.n	8005888 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d123      	bne.n	80058d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	83fb      	strh	r3, [r7, #30]
 80058ac:	8bfb      	ldrh	r3, [r7, #30]
 80058ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058b2:	83fb      	strh	r3, [r7, #30]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11f      	bne.n	8005922 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fc:	83bb      	strh	r3, [r7, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	8bbb      	ldrh	r3, [r7, #28]
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005922:	8b7b      	ldrh	r3, [r7, #26]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6959      	ldr	r1, [r3, #20]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	895a      	ldrh	r2, [r3, #10]
 8005934:	8b7b      	ldrh	r3, [r7, #26]
 8005936:	f003 fc3a 	bl	80091ae <USB_ReadPMA>
    }
  }

  return count;
 800593a:	8b7b      	ldrh	r3, [r7, #26]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b0a4      	sub	sp, #144	@ 0x90
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 81dd 	beq.w	8005d18 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4413      	add	r3, r2
 8005972:	3302      	adds	r3, #2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005986:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005992:	429a      	cmp	r2, r3
 8005994:	d907      	bls.n	80059a6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	e002      	b.n	80059ac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80b9 	bne.w	8005b28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d126      	bne.n	8005a0c <HAL_PCD_EP_DB_Transmit+0xc8>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	4413      	add	r3, r2
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	011a      	lsls	r2, r3, #4
 80059dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059de:	4413      	add	r3, r2
 80059e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	e01a      	b.n	8005a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d116      	bne.n	8005a42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	4413      	add	r3, r2
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	011a      	lsls	r2, r3, #4
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d126      	bne.n	8005a9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e017      	b.n	8005ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d113      	bne.n	8005ace <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	4413      	add	r3, r2
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	011a      	lsls	r2, r3, #4
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2200      	movs	r2, #0
 8005acc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f005 f994 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 82fc 	beq.w	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b00:	82fb      	strh	r3, [r7, #22]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	8afb      	ldrh	r3, [r7, #22]
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
 8005b26:	e2da      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d021      	beq.n	8005b76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	441a      	add	r2, r3
 8005b5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 82ae 	bne.w	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b98:	441a      	add	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6a1a      	ldr	r2, [r3, #32]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d30b      	bcc.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	621a      	str	r2, [r3, #32]
 8005bc0:	e017      	b.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005bda:	e00a      	b.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d165      	bne.n	8005cc6 <HAL_PCD_EP_DB_Transmit+0x382>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0e:	4413      	add	r3, r2
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c38:	d91d      	bls.n	8005c76 <HAL_PCD_EP_DB_Transmit+0x332>
 8005c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x310>
 8005c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c50:	3b01      	subs	r3, #1
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e044      	b.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_PCD_EP_DB_Transmit+0x350>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e035      	b.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_PCD_EP_DB_Transmit+0x36a>
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005caa:	3301      	adds	r3, #1
 8005cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	029b      	lsls	r3, r3, #10
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e01c      	b.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d118      	bne.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce2:	4413      	add	r3, r2
 8005ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6959      	ldr	r1, [r3, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	891a      	ldrh	r2, [r3, #8]
 8005d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f003 fa06 	bl	8009122 <USB_WritePMA>
 8005d16:	e1e2      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3306      	adds	r3, #6
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d307      	bcc.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	619a      	str	r2, [r3, #24]
 8005d5e:	e002      	b.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 80c0 	bne.w	8005ef0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d126      	bne.n	8005dc6 <HAL_PCD_EP_DB_Transmit+0x482>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d8c:	4413      	add	r3, r2
 8005d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	011a      	lsls	r2, r3, #4
 8005d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d98:	4413      	add	r3, r2
 8005d9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e01a      	b.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d116      	bne.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005de2:	4413      	add	r3, r2
 8005de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	011a      	lsls	r2, r3, #4
 8005dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dee:	4413      	add	r3, r2
 8005df0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df8:	2200      	movs	r2, #0
 8005dfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d12b      	bne.n	8005e62 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e1e:	4413      	add	r3, r2
 8005e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e017      	b.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d113      	bne.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e78:	4413      	add	r3, r2
 8005e7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	011a      	lsls	r2, r3, #4
 8005e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e8e:	2200      	movs	r2, #0
 8005e90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f004 ffb2 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 811a 	bne.w	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
 8005eee:	e0f6      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d121      	bne.n	8005f3e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 80ca 	bne.w	80060de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f52:	441a      	add	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f60:	441a      	add	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d30b      	bcc.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6a1a      	ldr	r2, [r3, #32]
 8005f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	621a      	str	r2, [r3, #32]
 8005f88:	e017      	b.n	8005fba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d108      	bne.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005f92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005fa2:	e00a      	b.n	8005fba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d165      	bne.n	8006094 <HAL_PCD_EP_DB_Transmit+0x750>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fdc:	4413      	add	r3, r2
 8005fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	011a      	lsls	r2, r3, #4
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006004:	2b3e      	cmp	r3, #62	@ 0x3e
 8006006:	d91d      	bls.n	8006044 <HAL_PCD_EP_DB_Transmit+0x700>
 8006008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_PCD_EP_DB_Transmit+0x6de>
 800601c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800601e:	3b01      	subs	r3, #1
 8006020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29a      	uxth	r2, r3
 8006028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	4313      	orrs	r3, r2
 8006032:	b29b      	uxth	r3, r3
 8006034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603c:	b29a      	uxth	r2, r3
 800603e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e041      	b.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <HAL_PCD_EP_DB_Transmit+0x71e>
 800604c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e032      	b.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800606a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_PCD_EP_DB_Transmit+0x738>
 8006076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006078:	3301      	adds	r3, #1
 800607a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800607c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29a      	uxth	r2, r3
 8006082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006084:	b29b      	uxth	r3, r3
 8006086:	029b      	lsls	r3, r3, #10
 8006088:	b29b      	uxth	r3, r3
 800608a:	4313      	orrs	r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e019      	b.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d115      	bne.n	80060c8 <HAL_PCD_EP_DB_Transmit+0x784>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060aa:	4413      	add	r3, r2
 80060ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	011a      	lsls	r2, r3, #4
 80060b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b6:	4413      	add	r3, r2
 80060b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80060be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6959      	ldr	r1, [r3, #20]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	895a      	ldrh	r2, [r3, #10]
 80060d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 f822 	bl	8009122 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f8:	82bb      	strh	r3, [r7, #20]
 80060fa:	8abb      	ldrh	r3, [r7, #20]
 80060fc:	f083 0310 	eor.w	r3, r3, #16
 8006100:	82bb      	strh	r3, [r7, #20]
 8006102:	8abb      	ldrh	r3, [r7, #20]
 8006104:	f083 0320 	eor.w	r3, r3, #32
 8006108:	82bb      	strh	r3, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8abb      	ldrh	r3, [r7, #20]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3790      	adds	r7, #144	@ 0x90
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	4613      	mov	r3, r2
 8006148:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006156:	897b      	ldrh	r3, [r7, #10]
 8006158:	f003 0207 	and.w	r2, r3, #7
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	3310      	adds	r3, #16
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e009      	b.n	8006182 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800616e:	897a      	ldrh	r2, [r7, #10]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	b29a      	uxth	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	80da      	strh	r2, [r3, #6]
 8006196:	e00b      	b.n	80061b0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2201      	movs	r2, #1
 800619c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e272      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8087 	beq.w	80062ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061dc:	4b92      	ldr	r3, [pc, #584]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f003 030c 	and.w	r3, r3, #12
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d00c      	beq.n	8006202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 030c 	and.w	r3, r3, #12
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d112      	bne.n	800621a <HAL_RCC_OscConfig+0x5e>
 80061f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006200:	d10b      	bne.n	800621a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006202:	4b89      	ldr	r3, [pc, #548]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d06c      	beq.n	80062e8 <HAL_RCC_OscConfig+0x12c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d168      	bne.n	80062e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e24c      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x76>
 8006224:	4b80      	ldr	r3, [pc, #512]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a7f      	ldr	r2, [pc, #508]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800622a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e02e      	b.n	8006290 <HAL_RCC_OscConfig+0xd4>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x98>
 800623a:	4b7b      	ldr	r3, [pc, #492]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a7a      	ldr	r2, [pc, #488]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4b78      	ldr	r3, [pc, #480]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a77      	ldr	r2, [pc, #476]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800624c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e01d      	b.n	8006290 <HAL_RCC_OscConfig+0xd4>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800625c:	d10c      	bne.n	8006278 <HAL_RCC_OscConfig+0xbc>
 800625e:	4b72      	ldr	r3, [pc, #456]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a71      	ldr	r2, [pc, #452]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	4b6f      	ldr	r3, [pc, #444]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6e      	ldr	r2, [pc, #440]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e00b      	b.n	8006290 <HAL_RCC_OscConfig+0xd4>
 8006278:	4b6b      	ldr	r3, [pc, #428]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a6a      	ldr	r2, [pc, #424]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800627e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	4b68      	ldr	r3, [pc, #416]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a67      	ldr	r2, [pc, #412]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800628a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800628e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d013      	beq.n	80062c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fb f900 	bl	800149c <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a0:	f7fb f8fc 	bl	800149c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	@ 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e200      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0xe4>
 80062be:	e014      	b.n	80062ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fb f8ec 	bl	800149c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fb f8e8 	bl	800149c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1ec      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	4b53      	ldr	r3, [pc, #332]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x10c>
 80062e6:	e000      	b.n	80062ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d063      	beq.n	80063be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006302:	4b49      	ldr	r3, [pc, #292]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b08      	cmp	r3, #8
 800630c:	d11c      	bne.n	8006348 <HAL_RCC_OscConfig+0x18c>
 800630e:	4b46      	ldr	r3, [pc, #280]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d116      	bne.n	8006348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631a:	4b43      	ldr	r3, [pc, #268]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <HAL_RCC_OscConfig+0x176>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d001      	beq.n	8006332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e1c0      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006332:	4b3d      	ldr	r3, [pc, #244]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4939      	ldr	r1, [pc, #228]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006346:	e03a      	b.n	80063be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d020      	beq.n	8006392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006350:	4b36      	ldr	r3, [pc, #216]	@ (800642c <HAL_RCC_OscConfig+0x270>)
 8006352:	2201      	movs	r2, #1
 8006354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006356:	f7fb f8a1 	bl	800149c <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635e:	f7fb f89d 	bl	800149c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e1a1      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	4b2d      	ldr	r3, [pc, #180]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0f0      	beq.n	800635e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637c:	4b2a      	ldr	r3, [pc, #168]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4927      	ldr	r1, [pc, #156]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]
 8006390:	e015      	b.n	80063be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006392:	4b26      	ldr	r3, [pc, #152]	@ (800642c <HAL_RCC_OscConfig+0x270>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fb f880 	bl	800149c <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a0:	f7fb f87c 	bl	800149c <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e180      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d03a      	beq.n	8006440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d019      	beq.n	8006406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d2:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <HAL_RCC_OscConfig+0x274>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d8:	f7fb f860 	bl	800149c <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e0:	f7fb f85c 	bl	800149c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e160      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <HAL_RCC_OscConfig+0x26c>)
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063fe:	2001      	movs	r0, #1
 8006400:	f000 faba 	bl	8006978 <RCC_Delay>
 8006404:	e01c      	b.n	8006440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006406:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <HAL_RCC_OscConfig+0x274>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800640c:	f7fb f846 	bl	800149c <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006412:	e00f      	b.n	8006434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006414:	f7fb f842 	bl	800149c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d908      	bls.n	8006434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e146      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000
 800642c:	42420000 	.word	0x42420000
 8006430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006434:	4b92      	ldr	r3, [pc, #584]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e9      	bne.n	8006414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a6 	beq.w	800659a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006452:	4b8b      	ldr	r3, [pc, #556]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10d      	bne.n	800647a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800645e:	4b88      	ldr	r3, [pc, #544]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4a87      	ldr	r2, [pc, #540]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006468:	61d3      	str	r3, [r2, #28]
 800646a:	4b85      	ldr	r3, [pc, #532]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647a:	4b82      	ldr	r3, [pc, #520]	@ (8006684 <HAL_RCC_OscConfig+0x4c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d118      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006486:	4b7f      	ldr	r3, [pc, #508]	@ (8006684 <HAL_RCC_OscConfig+0x4c8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a7e      	ldr	r2, [pc, #504]	@ (8006684 <HAL_RCC_OscConfig+0x4c8>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006492:	f7fb f803 	bl	800149c <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649a:	f7fa ffff 	bl	800149c <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b64      	cmp	r3, #100	@ 0x64
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e103      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	4b75      	ldr	r3, [pc, #468]	@ (8006684 <HAL_RCC_OscConfig+0x4c8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d106      	bne.n	80064ce <HAL_RCC_OscConfig+0x312>
 80064c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	6213      	str	r3, [r2, #32]
 80064cc:	e02d      	b.n	800652a <HAL_RCC_OscConfig+0x36e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x334>
 80064d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	4a69      	ldr	r2, [pc, #420]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	6213      	str	r3, [r2, #32]
 80064e2:	4b67      	ldr	r3, [pc, #412]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4a66      	ldr	r2, [pc, #408]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	6213      	str	r3, [r2, #32]
 80064ee:	e01c      	b.n	800652a <HAL_RCC_OscConfig+0x36e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b05      	cmp	r3, #5
 80064f6:	d10c      	bne.n	8006512 <HAL_RCC_OscConfig+0x356>
 80064f8:	4b61      	ldr	r3, [pc, #388]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	4a60      	ldr	r2, [pc, #384]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80064fe:	f043 0304 	orr.w	r3, r3, #4
 8006502:	6213      	str	r3, [r2, #32]
 8006504:	4b5e      	ldr	r3, [pc, #376]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4a5d      	ldr	r2, [pc, #372]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	6213      	str	r3, [r2, #32]
 8006510:	e00b      	b.n	800652a <HAL_RCC_OscConfig+0x36e>
 8006512:	4b5b      	ldr	r3, [pc, #364]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4a5a      	ldr	r2, [pc, #360]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	6213      	str	r3, [r2, #32]
 800651e:	4b58      	ldr	r3, [pc, #352]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	4a57      	ldr	r2, [pc, #348]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006524:	f023 0304 	bic.w	r3, r3, #4
 8006528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d015      	beq.n	800655e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006532:	f7fa ffb3 	bl	800149c <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006538:	e00a      	b.n	8006550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653a:	f7fa ffaf 	bl	800149c <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e0b1      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006550:	4b4b      	ldr	r3, [pc, #300]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0ee      	beq.n	800653a <HAL_RCC_OscConfig+0x37e>
 800655c:	e014      	b.n	8006588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655e:	f7fa ff9d 	bl	800149c <HAL_GetTick>
 8006562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006564:	e00a      	b.n	800657c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006566:	f7fa ff99 	bl	800149c <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006574:	4293      	cmp	r3, r2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e09b      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657c:	4b40      	ldr	r3, [pc, #256]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1ee      	bne.n	8006566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658e:	4b3c      	ldr	r3, [pc, #240]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	4a3b      	ldr	r2, [pc, #236]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8087 	beq.w	80066b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a4:	4b36      	ldr	r3, [pc, #216]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 030c 	and.w	r3, r3, #12
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d061      	beq.n	8006674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d146      	bne.n	8006646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b8:	4b33      	ldr	r3, [pc, #204]	@ (8006688 <HAL_RCC_OscConfig+0x4cc>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065be:	f7fa ff6d 	bl	800149c <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c6:	f7fa ff69 	bl	800149c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e06d      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d8:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ec:	d108      	bne.n	8006600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ee:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	4921      	ldr	r1, [pc, #132]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006600:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a19      	ldr	r1, [r3, #32]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	430b      	orrs	r3, r1
 8006612:	491b      	ldr	r1, [pc, #108]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006614:	4313      	orrs	r3, r2
 8006616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006618:	4b1b      	ldr	r3, [pc, #108]	@ (8006688 <HAL_RCC_OscConfig+0x4cc>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661e:	f7fa ff3d 	bl	800149c <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006626:	f7fa ff39 	bl	800149c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e03d      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006638:	4b11      	ldr	r3, [pc, #68]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x46a>
 8006644:	e035      	b.n	80066b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006646:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <HAL_RCC_OscConfig+0x4cc>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fa ff26 	bl	800149c <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006654:	f7fa ff22 	bl	800149c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e026      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006666:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <HAL_RCC_OscConfig+0x4c4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x498>
 8006672:	e01e      	b.n	80066b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e019      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
 8006680:	40021000 	.word	0x40021000
 8006684:	40007000 	.word	0x40007000
 8006688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_OscConfig+0x500>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	429a      	cmp	r2, r3
 800669e:	d106      	bne.n	80066ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d001      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40021000 	.word	0x40021000

080066c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0d0      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d910      	bls.n	8006704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b67      	ldr	r3, [pc, #412]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 0207 	bic.w	r2, r3, #7
 80066ea:	4965      	ldr	r1, [pc, #404]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b63      	ldr	r3, [pc, #396]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0b8      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800671c:	4b59      	ldr	r3, [pc, #356]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a58      	ldr	r2, [pc, #352]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006734:	4b53      	ldr	r3, [pc, #332]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a52      	ldr	r2, [pc, #328]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800673e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006740:	4b50      	ldr	r3, [pc, #320]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	494d      	ldr	r1, [pc, #308]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d040      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b47      	ldr	r3, [pc, #284]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d115      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e07f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	4b41      	ldr	r3, [pc, #260]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e073      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678e:	4b3d      	ldr	r3, [pc, #244]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e06b      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679e:	4b39      	ldr	r3, [pc, #228]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f023 0203 	bic.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4936      	ldr	r1, [pc, #216]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b0:	f7fa fe74 	bl	800149c <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fa fe70 	bl	800149c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e053      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 020c 	and.w	r2, r3, #12
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1eb      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b27      	ldr	r3, [pc, #156]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d210      	bcs.n	8006810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b24      	ldr	r3, [pc, #144]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	4922      	ldr	r1, [pc, #136]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b20      	ldr	r3, [pc, #128]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d001      	beq.n	8006810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e032      	b.n	8006876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800681c:	4b19      	ldr	r3, [pc, #100]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4916      	ldr	r1, [pc, #88]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	490e      	ldr	r1, [pc, #56]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800684e:	f000 f821 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 8006852:	4602      	mov	r2, r0
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	490a      	ldr	r1, [pc, #40]	@ (8006888 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	5ccb      	ldrb	r3, [r1, r3]
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	4a09      	ldr	r2, [pc, #36]	@ (800688c <HAL_RCC_ClockConfig+0x1cc>)
 8006868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800686a:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <HAL_RCC_ClockConfig+0x1d0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7fa fdd2 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40022000 	.word	0x40022000
 8006884:	40021000 	.word	0x40021000
 8006888:	0800c798 	.word	0x0800c798
 800688c:	2000000c 	.word	0x2000000c
 8006890:	20000010 	.word	0x20000010

08006894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006928 <HAL_RCC_GetSysClockFreq+0x94>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d002      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x30>
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d003      	beq.n	80068ca <HAL_RCC_GetSysClockFreq+0x36>
 80068c2:	e027      	b.n	8006914 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068c4:	4b19      	ldr	r3, [pc, #100]	@ (800692c <HAL_RCC_GetSysClockFreq+0x98>)
 80068c6:	613b      	str	r3, [r7, #16]
      break;
 80068c8:	e027      	b.n	800691a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	0c9b      	lsrs	r3, r3, #18
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	4a17      	ldr	r2, [pc, #92]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068d4:	5cd3      	ldrb	r3, [r2, r3]
 80068d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d010      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <HAL_RCC_GetSysClockFreq+0x94>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	0c5b      	lsrs	r3, r3, #17
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	4a11      	ldr	r2, [pc, #68]	@ (8006934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a0d      	ldr	r2, [pc, #52]	@ (800692c <HAL_RCC_GetSysClockFreq+0x98>)
 80068f6:	fb03 f202 	mul.w	r2, r3, r2
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e004      	b.n	800690e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0c      	ldr	r2, [pc, #48]	@ (8006938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	613b      	str	r3, [r7, #16]
      break;
 8006912:	e002      	b.n	800691a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <HAL_RCC_GetSysClockFreq+0x98>)
 8006916:	613b      	str	r3, [r7, #16]
      break;
 8006918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800691a:	693b      	ldr	r3, [r7, #16]
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
 800692c:	007a1200 	.word	0x007a1200
 8006930:	0800c7b0 	.word	0x0800c7b0
 8006934:	0800c7c0 	.word	0x0800c7c0
 8006938:	003d0900 	.word	0x003d0900

0800693c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006940:	4b02      	ldr	r3, [pc, #8]	@ (800694c <HAL_RCC_GetHCLKFreq+0x10>)
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	2000000c 	.word	0x2000000c

08006950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006954:	f7ff fff2 	bl	800693c <HAL_RCC_GetHCLKFreq>
 8006958:	4602      	mov	r2, r0
 800695a:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	4903      	ldr	r1, [pc, #12]	@ (8006974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006966:	5ccb      	ldrb	r3, [r1, r3]
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000
 8006974:	0800c7a8 	.word	0x0800c7a8

08006978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006980:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <RCC_Delay+0x34>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0a      	ldr	r2, [pc, #40]	@ (80069b0 <RCC_Delay+0x38>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	0a5b      	lsrs	r3, r3, #9
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006994:	bf00      	nop
  }
  while (Delay --);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1e5a      	subs	r2, r3, #1
 800699a:	60fa      	str	r2, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f9      	bne.n	8006994 <RCC_Delay+0x1c>
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	2000000c 	.word	0x2000000c
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d07d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10d      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4a4b      	ldr	r2, [pc, #300]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	61d3      	str	r3, [r2, #28]
 80069ec:	4b49      	ldr	r3, [pc, #292]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069fc:	4b46      	ldr	r3, [pc, #280]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d118      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a08:	4b43      	ldr	r3, [pc, #268]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a42      	ldr	r2, [pc, #264]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a14:	f7fa fd42 	bl	800149c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1a:	e008      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a1c:	f7fa fd3e 	bl	800149c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	@ 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e06d      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a3a:	4b36      	ldr	r3, [pc, #216]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02e      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d027      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a58:	4b2e      	ldr	r3, [pc, #184]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a62:	4b2e      	ldr	r3, [pc, #184]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a68:	4b2c      	ldr	r3, [pc, #176]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a6e:	4a29      	ldr	r2, [pc, #164]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d014      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7e:	f7fa fd0d 	bl	800149c <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a84:	e00a      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fa fd09 	bl	800149c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e036      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ee      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4917      	ldr	r1, [pc, #92]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d105      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac0:	4b14      	ldr	r3, [pc, #80]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4a13      	ldr	r2, [pc, #76]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	490b      	ldr	r1, [pc, #44]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d008      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006af6:	4b07      	ldr	r3, [pc, #28]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4904      	ldr	r1, [pc, #16]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	42420440 	.word	0x42420440

08006b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	4638      	mov	r0, r7
 8006b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b4a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr

08006b66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b6e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4013      	ands	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	4638      	mov	r0, r7
 8006bbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b09d      	sub	sp, #116	@ 0x74
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	78db      	ldrb	r3, [r3, #3]
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d81f      	bhi.n	8006c5e <USB_ActivateEndpoint+0x72>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <USB_ActivateEndpoint+0x38>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c67 	.word	0x08006c67
 8006c30:	08006c43 	.word	0x08006c43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c40:	e012      	b.n	8006c68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c46:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006c4a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c4e:	e00b      	b.n	8006c68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006c5c:	e004      	b.n	8006c68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006c64:	e000      	b.n	8006c68 <USB_ActivateEndpoint+0x7c>
      break;
 8006c66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	7b1b      	ldrb	r3, [r3, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 8178 	bne.w	8006fc8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8084 	beq.w	8006dea <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	011a      	lsls	r2, r3, #4
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	827b      	strh	r3, [r7, #18]
 8006d24:	8a7b      	ldrh	r3, [r7, #18]
 8006d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01b      	beq.n	8006d66 <USB_ActivateEndpoint+0x17a>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d44:	823b      	strh	r3, [r7, #16]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	8a3b      	ldrh	r3, [r7, #16]
 8006d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	78db      	ldrb	r3, [r3, #3]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d020      	beq.n	8006db0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d84:	81bb      	strh	r3, [r7, #12]
 8006d86:	89bb      	ldrh	r3, [r7, #12]
 8006d88:	f083 0320 	eor.w	r3, r3, #32
 8006d8c:	81bb      	strh	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	89bb      	ldrh	r3, [r7, #12]
 8006d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8013      	strh	r3, [r2, #0]
 8006dae:	e2d5      	b.n	800735c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc6:	81fb      	strh	r3, [r7, #14]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]
 8006de8:	e2b8      	b.n	800735c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	4413      	add	r3, r2
 8006dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	011a      	lsls	r2, r3, #4
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	085b      	lsrs	r3, r3, #1
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	4413      	add	r3, r2
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e58:	d91d      	bls.n	8006e96 <USB_ActivateEndpoint+0x2aa>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <USB_ActivateEndpoint+0x288>
 8006e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e70:	3b01      	subs	r3, #1
 8006e72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	e026      	b.n	8006ee4 <USB_ActivateEndpoint+0x2f8>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <USB_ActivateEndpoint+0x2c8>
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e017      	b.n	8006ee4 <USB_ActivateEndpoint+0x2f8>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <USB_ActivateEndpoint+0x2e2>
 8006ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eca:	3301      	adds	r3, #1
 8006ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006ef2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01b      	beq.n	8006f34 <USB_ActivateEndpoint+0x348>
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f12:	843b      	strh	r3, [r7, #32]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	441a      	add	r2, r3
 8006f1e:	8c3b      	ldrh	r3, [r7, #32]
 8006f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d124      	bne.n	8006f86 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	83bb      	strh	r3, [r7, #28]
 8006f54:	8bbb      	ldrh	r3, [r7, #28]
 8006f56:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f5a:	83bb      	strh	r3, [r7, #28]
 8006f5c:	8bbb      	ldrh	r3, [r7, #28]
 8006f5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f62:	83bb      	strh	r3, [r7, #28]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8bbb      	ldrh	r3, [r7, #28]
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
 8006f84:	e1ea      	b.n	800735c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	83fb      	strh	r3, [r7, #30]
 8006f9e:	8bfb      	ldrh	r3, [r7, #30]
 8006fa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fa4:	83fb      	strh	r3, [r7, #30]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8bfb      	ldrh	r3, [r7, #30]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
 8006fc6:	e1c9      	b.n	800735c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	78db      	ldrb	r3, [r3, #3]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d11e      	bne.n	800700e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007000:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]
 800700c:	e01d      	b.n	800704a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007024:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007054:	b29b      	uxth	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800705a:	4413      	add	r3, r2
 800705c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011a      	lsls	r2, r3, #4
 8007064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007066:	4413      	add	r3, r2
 8007068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800706c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	891b      	ldrh	r3, [r3, #8]
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	657b      	str	r3, [r7, #84]	@ 0x54
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708e:	4413      	add	r3, r2
 8007090:	657b      	str	r3, [r7, #84]	@ 0x54
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709a:	4413      	add	r3, r2
 800709c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80070a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	895b      	ldrh	r3, [r3, #10]
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 8093 	bne.w	80071e2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80070cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80070d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <USB_ActivateEndpoint+0x524>
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800711e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <USB_ActivateEndpoint+0x574>
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007176:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007178:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800717a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800717e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007180:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007182:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007186:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800719c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]
 80071e0:	e0bc      	b.n	800735c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80071f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80071f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01d      	beq.n	800723a <USB_ActivateEndpoint+0x64e>
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007214:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800722a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800722e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007236:	b29b      	uxth	r3, r3
 8007238:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800724a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01d      	beq.n	8007292 <USB_ActivateEndpoint+0x6a6>
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800727e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800728a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800728e:	b29b      	uxth	r3, r3
 8007290:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d024      	beq.n	80072e4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80072b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072b8:	f083 0320 	eor.w	r3, r3, #32
 80072bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072de:	b29b      	uxth	r3, r3
 80072e0:	8013      	strh	r3, [r2, #0]
 80072e2:	e01d      	b.n	8007320 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007336:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800735c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007360:	4618      	mov	r0, r3
 8007362:	3774      	adds	r7, #116	@ 0x74
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop

0800736c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800736c:	b480      	push	{r7}
 800736e:	b08d      	sub	sp, #52	@ 0x34
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	7b1b      	ldrb	r3, [r3, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 808e 	bne.w	800749c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d044      	beq.n	8007412 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	81bb      	strh	r3, [r7, #12]
 8007396:	89bb      	ldrh	r3, [r7, #12]
 8007398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01b      	beq.n	80073d8 <USB_DeactivateEndpoint+0x6c>
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b6:	817b      	strh	r3, [r7, #10]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ee:	813b      	strh	r3, [r7, #8]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	441a      	add	r2, r3
 80073fa:	893b      	ldrh	r3, [r7, #8]
 80073fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800740c:	b29b      	uxth	r3, r3
 800740e:	8013      	strh	r3, [r2, #0]
 8007410:	e192      	b.n	8007738 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	827b      	strh	r3, [r7, #18]
 8007420:	8a7b      	ldrh	r3, [r7, #18]
 8007422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <USB_DeactivateEndpoint+0xf6>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007440:	823b      	strh	r3, [r7, #16]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8a3b      	ldrh	r3, [r7, #16]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800745a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007478:	81fb      	strh	r3, [r7, #14]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	441a      	add	r2, r3
 8007484:	89fb      	ldrh	r3, [r7, #14]
 8007486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800748e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007496:	b29b      	uxth	r3, r3
 8007498:	8013      	strh	r3, [r2, #0]
 800749a:	e14d      	b.n	8007738 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 80a5 	bne.w	80075f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	843b      	strh	r3, [r7, #32]
 80074b4:	8c3b      	ldrh	r3, [r7, #32]
 80074b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01b      	beq.n	80074f6 <USB_DeactivateEndpoint+0x18a>
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d4:	83fb      	strh	r3, [r7, #30]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	441a      	add	r2, r3
 80074e0:	8bfb      	ldrh	r3, [r7, #30]
 80074e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	83bb      	strh	r3, [r7, #28]
 8007504:	8bbb      	ldrh	r3, [r7, #28]
 8007506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01b      	beq.n	8007546 <USB_DeactivateEndpoint+0x1da>
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007524:	837b      	strh	r3, [r7, #26]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	441a      	add	r2, r3
 8007530:	8b7b      	ldrh	r3, [r7, #26]
 8007532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800753e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007542:	b29b      	uxth	r3, r3
 8007544:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	833b      	strh	r3, [r7, #24]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	8b3b      	ldrh	r3, [r7, #24]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007576:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007594:	82fb      	strh	r3, [r7, #22]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	8afb      	ldrh	r3, [r7, #22]
 80075a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075cc:	82bb      	strh	r3, [r7, #20]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	441a      	add	r2, r3
 80075d8:	8abb      	ldrh	r3, [r7, #20]
 80075da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8013      	strh	r3, [r2, #0]
 80075ee:	e0a3      	b.n	8007738 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80075fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01b      	beq.n	8007640 <USB_DeactivateEndpoint+0x2d4>
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800762c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	b29b      	uxth	r3, r3
 800763e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800764e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01b      	beq.n	8007690 <USB_DeactivateEndpoint+0x324>
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	441a      	add	r2, r3
 80076b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	441a      	add	r2, r3
 80076ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007716:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800772c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007734:	b29b      	uxth	r3, r3
 8007736:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3734      	adds	r7, #52	@ 0x34
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b0c2      	sub	sp, #264	@ 0x108
 8007748:	af00      	add	r7, sp, #0
 800774a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007752:	6018      	str	r0, [r3, #0]
 8007754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800775e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b01      	cmp	r3, #1
 800776c:	f040 86b7 	bne.w	80084de <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	699a      	ldr	r2, [r3, #24]
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	429a      	cmp	r2, r3
 800778a:	d908      	bls.n	800779e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800779c:	e007      	b.n	80077ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800779e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	7b1b      	ldrb	r3, [r3, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d13a      	bne.n	8007834 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6959      	ldr	r1, [r3, #20]
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	88da      	ldrh	r2, [r3, #6]
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f001 fc9c 	bl	8009122 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007804:	b29b      	uxth	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	011a      	lsls	r2, r3, #4
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	f000 be1f 	b.w	8008472 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	78db      	ldrb	r3, [r3, #3]
 8007840:	2b02      	cmp	r3, #2
 8007842:	f040 8462 	bne.w	800810a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	f240 83df 	bls.w	8008022 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800788e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078b4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078bc:	b29b      	uxth	r3, r3
 80078be:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 81c7 	beq.w	8007c94 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	633b      	str	r3, [r7, #48]	@ 0x30
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d177      	bne.n	8007a12 <USB_EPStartXfer+0x2ce>
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800793c:	b29b      	uxth	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	4413      	add	r3, r2
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	011a      	lsls	r2, r3, #4
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	4413      	add	r3, r2
 8007958:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007968:	b29a      	uxth	r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007972:	2b3e      	cmp	r3, #62	@ 0x3e
 8007974:	d921      	bls.n	80079ba <USB_EPStartXfer+0x276>
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <USB_EPStartXfer+0x252>
 800798c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007990:	3b01      	subs	r3, #1
 8007992:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29a      	uxth	r2, r3
 800799c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	029b      	lsls	r3, r3, #10
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	4313      	orrs	r3, r2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e050      	b.n	8007a5c <USB_EPStartXfer+0x318>
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <USB_EPStartXfer+0x294>
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	e041      	b.n	8007a5c <USB_EPStartXfer+0x318>
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	085b      	lsrs	r3, r3, #1
 80079de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <USB_EPStartXfer+0x2b4>
 80079ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80079f2:	3301      	adds	r3, #1
 80079f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	029b      	lsls	r3, r3, #10
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e024      	b.n	8007a5c <USB_EPStartXfer+0x318>
 8007a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	785b      	ldrb	r3, [r3, #1]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d11c      	bne.n	8007a5c <USB_EPStartXfer+0x318>
 8007a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	4413      	add	r3, r2
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	011a      	lsls	r2, r3, #4
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	895b      	ldrh	r3, [r3, #10]
 8007a68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6959      	ldr	r1, [r3, #20]
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	f001 fb49 	bl	8009122 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa0:	441a      	add	r2, r3
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d90f      	bls.n	8007aea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	621a      	str	r2, [r3, #32]
 8007ae8:	e00e      	b.n	8007b08 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2200      	movs	r2, #0
 8007b06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d177      	bne.n	8007c08 <USB_EPStartXfer+0x4c4>
 8007b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	4413      	add	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	011a      	lsls	r2, r3, #4
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b6a:	d921      	bls.n	8007bb0 <USB_EPStartXfer+0x46c>
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d104      	bne.n	8007b8c <USB_EPStartXfer+0x448>
 8007b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	029b      	lsls	r3, r3, #10
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e056      	b.n	8007c5e <USB_EPStartXfer+0x51a>
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <USB_EPStartXfer+0x48a>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e047      	b.n	8007c5e <USB_EPStartXfer+0x51a>
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <USB_EPStartXfer+0x4aa>
 8007be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be8:	3301      	adds	r3, #1
 8007bea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	e02a      	b.n	8007c5e <USB_EPStartXfer+0x51a>
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d122      	bne.n	8007c5e <USB_EPStartXfer+0x51a>
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	623b      	str	r3, [r7, #32]
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	4413      	add	r3, r2
 8007c3a:	623b      	str	r3, [r7, #32]
 8007c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	011a      	lsls	r2, r3, #4
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	891b      	ldrh	r3, [r3, #8]
 8007c6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6959      	ldr	r1, [r3, #20]
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f001 fa48 	bl	8009122 <USB_WritePMA>
 8007c92:	e3ee      	b.n	8008472 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d177      	bne.n	8007d94 <USB_EPStartXfer+0x650>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc4:	4413      	add	r3, r2
 8007cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	011a      	lsls	r2, r3, #4
 8007cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd8:	4413      	add	r3, r2
 8007cda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cf6:	d921      	bls.n	8007d3c <USB_EPStartXfer+0x5f8>
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <USB_EPStartXfer+0x5d4>
 8007d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d12:	3b01      	subs	r3, #1
 8007d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	e056      	b.n	8007dea <USB_EPStartXfer+0x6a6>
 8007d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <USB_EPStartXfer+0x616>
 8007d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e047      	b.n	8007dea <USB_EPStartXfer+0x6a6>
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <USB_EPStartXfer+0x636>
 8007d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d74:	3301      	adds	r3, #1
 8007d76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	029b      	lsls	r3, r3, #10
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	e02a      	b.n	8007dea <USB_EPStartXfer+0x6a6>
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d122      	bne.n	8007dea <USB_EPStartXfer+0x6a6>
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc4:	4413      	add	r3, r2
 8007dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	011a      	lsls	r2, r3, #4
 8007dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd8:	4413      	add	r3, r2
 8007dda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	891b      	ldrh	r3, [r3, #8]
 8007df6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6959      	ldr	r1, [r3, #20]
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e18:	6800      	ldr	r0, [r0, #0]
 8007e1a:	f001 f982 	bl	8009122 <USB_WritePMA>
            ep->xfer_buff += len;
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2e:	441a      	add	r2, r3
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d90f      	bls.n	8007e78 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	621a      	str	r2, [r3, #32]
 8007e76:	e00e      	b.n	8007e96 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d177      	bne.n	8007fa2 <USB_EPStartXfer+0x85e>
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	4413      	add	r3, r2
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	011a      	lsls	r2, r3, #4
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f02:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f04:	d921      	bls.n	8007f4a <USB_EPStartXfer+0x806>
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <USB_EPStartXfer+0x7e2>
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f20:	3b01      	subs	r3, #1
 8007f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	029b      	lsls	r3, r3, #10
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	e050      	b.n	8007fec <USB_EPStartXfer+0x8a8>
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <USB_EPStartXfer+0x824>
 8007f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e041      	b.n	8007fec <USB_EPStartXfer+0x8a8>
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <USB_EPStartXfer+0x844>
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	3301      	adds	r3, #1
 8007f84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e024      	b.n	8007fec <USB_EPStartXfer+0x8a8>
 8007fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d11c      	bne.n	8007fec <USB_EPStartXfer+0x8a8>
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc6:	4413      	add	r3, r2
 8007fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	011a      	lsls	r2, r3, #4
 8007fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fda:	4413      	add	r3, r2
 8007fdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	895b      	ldrh	r3, [r3, #10]
 8007ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6959      	ldr	r1, [r3, #20]
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800c:	b29b      	uxth	r3, r3
 800800e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008012:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008016:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	f001 f881 	bl	8009122 <USB_WritePMA>
 8008020:	e227      	b.n	8008472 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008058:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800805c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	441a      	add	r2, r3
 8008076:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800808e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800809a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	461a      	mov	r2, r3
 80080ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ae:	4413      	add	r3, r2
 80080b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	011a      	lsls	r2, r3, #4
 80080c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080c2:	4413      	add	r3, r2
 80080c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	891b      	ldrh	r3, [r3, #8]
 80080e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6959      	ldr	r1, [r3, #20]
 80080f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	f001 f80d 	bl	8009122 <USB_WritePMA>
 8008108:	e1b3      	b.n	8008472 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6a1a      	ldr	r2, [r3, #32]
 8008116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811a:	1ad2      	subs	r2, r2, r3
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80c6 	beq.w	80082dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	673b      	str	r3, [r7, #112]	@ 0x70
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d177      	bne.n	800825c <USB_EPStartXfer+0xb18>
 800816c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008186:	b29b      	uxth	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800818c:	4413      	add	r3, r2
 800818e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	011a      	lsls	r2, r3, #4
 800819e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081a0:	4413      	add	r3, r2
 80081a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80081a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80081be:	d921      	bls.n	8008204 <USB_EPStartXfer+0xac0>
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <USB_EPStartXfer+0xa9c>
 80081d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081da:	3b01      	subs	r3, #1
 80081dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e050      	b.n	80082a6 <USB_EPStartXfer+0xb62>
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <USB_EPStartXfer+0xade>
 800820c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821a:	b29a      	uxth	r2, r3
 800821c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e041      	b.n	80082a6 <USB_EPStartXfer+0xb62>
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d004      	beq.n	8008242 <USB_EPStartXfer+0xafe>
 8008238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800823c:	3301      	adds	r3, #1
 800823e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29a      	uxth	r2, r3
 8008248:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800824c:	b29b      	uxth	r3, r3
 800824e:	029b      	lsls	r3, r3, #10
 8008250:	b29b      	uxth	r3, r3
 8008252:	4313      	orrs	r3, r2
 8008254:	b29a      	uxth	r2, r3
 8008256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e024      	b.n	80082a6 <USB_EPStartXfer+0xb62>
 800825c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d11c      	bne.n	80082a6 <USB_EPStartXfer+0xb62>
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008280:	4413      	add	r3, r2
 8008282:	673b      	str	r3, [r7, #112]	@ 0x70
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	011a      	lsls	r2, r3, #4
 8008292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008294:	4413      	add	r3, r2
 8008296:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800829a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80082a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	895b      	ldrh	r3, [r3, #10]
 80082b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6959      	ldr	r1, [r3, #20]
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80082d4:	6800      	ldr	r0, [r0, #0]
 80082d6:	f000 ff24 	bl	8009122 <USB_WritePMA>
 80082da:	e0ca      	b.n	8008472 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d177      	bne.n	80083dc <USB_EPStartXfer+0xc98>
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008306:	b29b      	uxth	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800830c:	4413      	add	r3, r2
 800830e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	011a      	lsls	r2, r3, #4
 800831e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008320:	4413      	add	r3, r2
 8008322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008326:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008332:	b29a      	uxth	r2, r3
 8008334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833c:	2b3e      	cmp	r3, #62	@ 0x3e
 800833e:	d921      	bls.n	8008384 <USB_EPStartXfer+0xc40>
 8008340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008344:	095b      	lsrs	r3, r3, #5
 8008346:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <USB_EPStartXfer+0xc1c>
 8008356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800835a:	3b01      	subs	r3, #1
 800835c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800836a:	b29b      	uxth	r3, r3
 800836c:	029b      	lsls	r3, r3, #10
 800836e:	b29b      	uxth	r3, r3
 8008370:	4313      	orrs	r3, r2
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837c:	b29a      	uxth	r2, r3
 800837e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	e05c      	b.n	800843e <USB_EPStartXfer+0xcfa>
 8008384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <USB_EPStartXfer+0xc5e>
 800838c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839a:	b29a      	uxth	r2, r3
 800839c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e04d      	b.n	800843e <USB_EPStartXfer+0xcfa>
 80083a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <USB_EPStartXfer+0xc7e>
 80083b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083bc:	3301      	adds	r3, #1
 80083be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	029b      	lsls	r3, r3, #10
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4313      	orrs	r3, r2
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	e030      	b.n	800843e <USB_EPStartXfer+0xcfa>
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d128      	bne.n	800843e <USB_EPStartXfer+0xcfa>
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008408:	b29b      	uxth	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008410:	4413      	add	r3, r2
 8008412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	011a      	lsls	r2, r3, #4
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008428:	4413      	add	r3, r2
 800842a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800842e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008436:	b29a      	uxth	r2, r3
 8008438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800843c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800843e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	891b      	ldrh	r3, [r3, #8]
 800844a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6959      	ldr	r1, [r3, #20]
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845e:	b29b      	uxth	r3, r3
 8008460:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008464:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008468:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f000 fe58 	bl	8009122 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008498:	817b      	strh	r3, [r7, #10]
 800849a:	897b      	ldrh	r3, [r7, #10]
 800849c:	f083 0310 	eor.w	r3, r3, #16
 80084a0:	817b      	strh	r3, [r7, #10]
 80084a2:	897b      	ldrh	r3, [r7, #10]
 80084a4:	f083 0320 	eor.w	r3, r3, #32
 80084a8:	817b      	strh	r3, [r7, #10]
 80084aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	441a      	add	r2, r3
 80084c4:	897b      	ldrh	r3, [r7, #10]
 80084c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	8013      	strh	r3, [r2, #0]
 80084da:	f000 bcde 	b.w	8008e9a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	7b1b      	ldrb	r3, [r3, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 80bb 	bne.w	8008666 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80084f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d917      	bls.n	800853c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800850c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852c:	1ad2      	subs	r2, r2, r3
 800852e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	619a      	str	r2, [r3, #24]
 800853a:	e00e      	b.n	800855a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800854c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2200      	movs	r2, #0
 8008558:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008576:	b29b      	uxth	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800857e:	4413      	add	r3, r2
 8008580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	011a      	lsls	r2, r3, #4
 8008592:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008596:	4413      	add	r3, r2
 8008598:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800859c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80085ba:	d924      	bls.n	8008606 <USB_EPStartXfer+0xec2>
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <USB_EPStartXfer+0xe98>
 80085d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085d6:	3b01      	subs	r3, #1
 80085d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	f000 bc10 	b.w	8008e26 <USB_EPStartXfer+0x16e2>
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <USB_EPStartXfer+0xee4>
 800860e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861e:	b29a      	uxth	r2, r3
 8008620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008624:	801a      	strh	r2, [r3, #0]
 8008626:	e3fe      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862c:	085b      	lsrs	r3, r3, #1
 800862e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <USB_EPStartXfer+0xf04>
 800863e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008642:	3301      	adds	r3, #1
 8008644:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008654:	b29b      	uxth	r3, r3
 8008656:	029b      	lsls	r3, r3, #10
 8008658:	b29b      	uxth	r3, r3
 800865a:	4313      	orrs	r3, r2
 800865c:	b29a      	uxth	r2, r3
 800865e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	e3df      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	78db      	ldrb	r3, [r3, #3]
 8008672:	2b02      	cmp	r3, #2
 8008674:	f040 8218 	bne.w	8008aa8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 809d 	bne.w	80087c4 <USB_EPStartXfer+0x1080>
 800868a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ae:	4413      	add	r3, r2
 80086b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	011a      	lsls	r2, r3, #4
 80086c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086c6:	4413      	add	r3, r2
 80086c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086dc:	b29a      	uxth	r2, r3
 80086de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80086f2:	d92b      	bls.n	800874c <USB_EPStartXfer+0x1008>
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	095b      	lsrs	r3, r3, #5
 8008702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <USB_EPStartXfer+0xfe0>
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871e:	3b01      	subs	r3, #1
 8008720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29a      	uxth	r2, r3
 800872c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008730:	b29b      	uxth	r3, r3
 8008732:	029b      	lsls	r3, r3, #10
 8008734:	b29b      	uxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b29b      	uxth	r3, r3
 800873a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008742:	b29a      	uxth	r2, r3
 8008744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e070      	b.n	800882e <USB_EPStartXfer+0x10ea>
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10c      	bne.n	8008776 <USB_EPStartXfer+0x1032>
 800875c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	e05b      	b.n	800882e <USB_EPStartXfer+0x10ea>
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <USB_EPStartXfer+0x1062>
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	3301      	adds	r3, #1
 80087a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	029b      	lsls	r3, r3, #10
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	e034      	b.n	800882e <USB_EPStartXfer+0x10ea>
 80087c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d12c      	bne.n	800882e <USB_EPStartXfer+0x10ea>
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	461a      	mov	r2, r3
 80087f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087f8:	4413      	add	r3, r2
 80087fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	011a      	lsls	r2, r3, #4
 800880c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008810:	4413      	add	r3, r2
 8008812:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800881a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	b29a      	uxth	r2, r3
 8008828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800883c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 809d 	bne.w	8008988 <USB_EPStartXfer+0x1244>
 800884e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800885c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800886a:	b29b      	uxth	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008872:	4413      	add	r3, r2
 8008874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	011a      	lsls	r2, r3, #4
 8008886:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800888a:	4413      	add	r3, r2
 800888c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	b29b      	uxth	r3, r3
 800889c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b6:	d92b      	bls.n	8008910 <USB_EPStartXfer+0x11cc>
 80088b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <USB_EPStartXfer+0x11a4>
 80088de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e2:	3b01      	subs	r3, #1
 80088e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	029b      	lsls	r3, r3, #10
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008906:	b29a      	uxth	r2, r3
 8008908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	e069      	b.n	80089e4 <USB_EPStartXfer+0x12a0>
 8008910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10c      	bne.n	800893a <USB_EPStartXfer+0x11f6>
 8008920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008930:	b29a      	uxth	r2, r3
 8008932:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	e054      	b.n	80089e4 <USB_EPStartXfer+0x12a0>
 800893a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <USB_EPStartXfer+0x1226>
 8008960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800896a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29a      	uxth	r2, r3
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008976:	b29b      	uxth	r3, r3
 8008978:	029b      	lsls	r3, r3, #10
 800897a:	b29b      	uxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008984:	801a      	strh	r2, [r3, #0]
 8008986:	e02d      	b.n	80089e4 <USB_EPStartXfer+0x12a0>
 8008988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d125      	bne.n	80089e4 <USB_EPStartXfer+0x12a0>
 8008998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089ae:	4413      	add	r3, r2
 80089b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	011a      	lsls	r2, r3, #4
 80089c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089c6:	4413      	add	r3, r2
 80089c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	b29a      	uxth	r2, r3
 80089de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8218 	beq.w	8008e26 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <USB_EPStartXfer+0x12ea>
 8008a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 81f5 	bne.w	8008e26 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 81ee 	bne.w	8008e26 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	8013      	strh	r3, [r2, #0]
 8008aa6:	e1be      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	78db      	ldrb	r3, [r3, #3]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	f040 81b4 	bne.w	8008e22 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d917      	bls.n	8008b06 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	619a      	str	r2, [r3, #24]
 8008b04:	e00e      	b.n	8008b24 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f040 8085 	bne.w	8008c40 <USB_EPStartXfer+0x14fc>
 8008b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	011a      	lsls	r2, r3, #4
 8008b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b72:	4413      	add	r3, r2
 8008b74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b94:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b96:	d923      	bls.n	8008be0 <USB_EPStartXfer+0x149c>
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b9c:	095b      	lsrs	r3, r3, #5
 8008b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d104      	bne.n	8008bb8 <USB_EPStartXfer+0x1474>
 8008bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	029b      	lsls	r3, r3, #10
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	e060      	b.n	8008ca2 <USB_EPStartXfer+0x155e>
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <USB_EPStartXfer+0x14be>
 8008be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e04f      	b.n	8008ca2 <USB_EPStartXfer+0x155e>
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <USB_EPStartXfer+0x14de>
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	029b      	lsls	r3, r3, #10
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e030      	b.n	8008ca2 <USB_EPStartXfer+0x155e>
 8008c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d128      	bne.n	8008ca2 <USB_EPStartXfer+0x155e>
 8008c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c74:	4413      	add	r3, r2
 8008c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	011a      	lsls	r2, r3, #4
 8008c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 8085 	bne.w	8008dcc <USB_EPStartXfer+0x1688>
 8008cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	011a      	lsls	r2, r3, #4
 8008cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008cfe:	4413      	add	r3, r2
 8008d00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d22:	d923      	bls.n	8008d6c <USB_EPStartXfer+0x1628>
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <USB_EPStartXfer+0x1600>
 8008d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	029b      	lsls	r3, r3, #10
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d68:	801a      	strh	r2, [r3, #0]
 8008d6a:	e05c      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10c      	bne.n	8008d8e <USB_EPStartXfer+0x164a>
 8008d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d8a:	801a      	strh	r2, [r3, #0]
 8008d8c:	e04b      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <USB_EPStartXfer+0x166a>
 8008da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008da8:	3301      	adds	r3, #1
 8008daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	029b      	lsls	r3, r3, #10
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e02c      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
 8008dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d124      	bne.n	8008e26 <USB_EPStartXfer+0x16e2>
 8008ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008df2:	4413      	add	r3, r2
 8008df4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	011a      	lsls	r2, r3, #4
 8008e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	e001      	b.n	8008e26 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e03a      	b.n	8008e9c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	441a      	add	r2, r3
 8008e82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d020      	beq.n	8008efa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ece:	81bb      	strh	r3, [r7, #12]
 8008ed0:	89bb      	ldrh	r3, [r7, #12]
 8008ed2:	f083 0310 	eor.w	r3, r3, #16
 8008ed6:	81bb      	strh	r3, [r7, #12]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	89bb      	ldrh	r3, [r7, #12]
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
 8008ef8:	e01f      	b.n	8008f3a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f10:	81fb      	strh	r3, [r7, #14]
 8008f12:	89fb      	ldrh	r3, [r7, #14]
 8008f14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f18:	81fb      	strh	r3, [r7, #14]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	441a      	add	r2, r3
 8008f24:	89fb      	ldrh	r3, [r7, #14]
 8008f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr

08008f46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b087      	sub	sp, #28
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	7b1b      	ldrb	r3, [r3, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 809d 	bne.w	8009094 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d04c      	beq.n	8008ffc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	823b      	strh	r3, [r7, #16]
 8008f70:	8a3b      	ldrh	r3, [r7, #16]
 8008f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01b      	beq.n	8008fb2 <USB_EPClearStall+0x6c>
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f90:	81fb      	strh	r3, [r7, #14]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	441a      	add	r2, r3
 8008f9c:	89fb      	ldrh	r3, [r7, #14]
 8008f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008faa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	78db      	ldrb	r3, [r3, #3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d06c      	beq.n	8009094 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fd0:	81bb      	strh	r3, [r7, #12]
 8008fd2:	89bb      	ldrh	r3, [r7, #12]
 8008fd4:	f083 0320 	eor.w	r3, r3, #32
 8008fd8:	81bb      	strh	r3, [r7, #12]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	441a      	add	r2, r3
 8008fe4:	89bb      	ldrh	r3, [r7, #12]
 8008fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	8013      	strh	r3, [r2, #0]
 8008ffa:	e04b      	b.n	8009094 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	82fb      	strh	r3, [r7, #22]
 800900a:	8afb      	ldrh	r3, [r7, #22]
 800900c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01b      	beq.n	800904c <USB_EPClearStall+0x106>
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800902a:	82bb      	strh	r3, [r7, #20]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	441a      	add	r2, r3
 8009036:	8abb      	ldrh	r3, [r7, #20]
 8009038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800903c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009048:	b29b      	uxth	r3, r3
 800904a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800905e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009062:	827b      	strh	r3, [r7, #18]
 8009064:	8a7b      	ldrh	r3, [r7, #18]
 8009066:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800906a:	827b      	strh	r3, [r7, #18]
 800906c:	8a7b      	ldrh	r3, [r7, #18]
 800906e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009072:	827b      	strh	r3, [r7, #18]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	441a      	add	r2, r3
 800907e:	8a7b      	ldrh	r3, [r7, #18]
 8009080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800908c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009090:	b29b      	uxth	r3, r3
 8009092:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	bc80      	pop	{r7}
 800909e:	4770      	bx	lr

080090a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2280      	movs	r2, #128	@ 0x80
 80090b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr

080090da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bc80      	pop	{r7}
 80090ec:	4770      	bx	lr

080090ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b085      	sub	sp, #20
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009100:	68fb      	ldr	r3, [r7, #12]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr

0800910c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr

08009122 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009122:	b480      	push	{r7}
 8009124:	b08b      	sub	sp, #44	@ 0x2c
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	4611      	mov	r1, r2
 800912e:	461a      	mov	r2, r3
 8009130:	460b      	mov	r3, r1
 8009132:	80fb      	strh	r3, [r7, #6]
 8009134:	4613      	mov	r3, r2
 8009136:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009138:	88bb      	ldrh	r3, [r7, #4]
 800913a:	3301      	adds	r3, #1
 800913c:	085b      	lsrs	r3, r3, #1
 800913e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	005a      	lsls	r2, r3, #1
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009154:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
 800915a:	e01f      	b.n	800919c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	3301      	adds	r3, #1
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b21b      	sxth	r3, r3
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	b21a      	sxth	r2, r3
 800916e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009172:	4313      	orrs	r3, r2
 8009174:	b21b      	sxth	r3, r3
 8009176:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	8a7a      	ldrh	r2, [r7, #18]
 800917c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	3302      	adds	r3, #2
 8009182:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	3302      	adds	r3, #2
 8009188:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	3301      	adds	r3, #1
 800918e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	3301      	adds	r3, #1
 8009194:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	3b01      	subs	r3, #1
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1dc      	bne.n	800915c <USB_WritePMA+0x3a>
  }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	372c      	adds	r7, #44	@ 0x2c
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr

080091ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b08b      	sub	sp, #44	@ 0x2c
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	4611      	mov	r1, r2
 80091ba:	461a      	mov	r2, r3
 80091bc:	460b      	mov	r3, r1
 80091be:	80fb      	strh	r3, [r7, #6]
 80091c0:	4613      	mov	r3, r2
 80091c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091c4:	88bb      	ldrh	r3, [r7, #4]
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	005a      	lsls	r2, r3, #1
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e6:	e01b      	b.n	8009220 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	3302      	adds	r3, #2
 80091f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	3301      	adds	r3, #1
 8009202:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	0a1b      	lsrs	r3, r3, #8
 8009208:	b2da      	uxtb	r2, r3
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	3301      	adds	r3, #1
 8009212:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	3302      	adds	r3, #2
 8009218:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	3b01      	subs	r3, #1
 800921e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e0      	bne.n	80091e8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009226:	88bb      	ldrh	r3, [r7, #4]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d007      	beq.n	8009242 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	b2da      	uxtb	r2, r3
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	701a      	strb	r2, [r3, #0]
  }
}
 8009242:	bf00      	nop
 8009244:	372c      	adds	r7, #44	@ 0x2c
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr

0800924c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d115      	bne.n	8009290 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009268:	2202      	movs	r2, #2
 800926a:	2181      	movs	r1, #129	@ 0x81
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 feac 	bl	800afca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800927c:	2202      	movs	r2, #2
 800927e:	2101      	movs	r1, #1
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fea2 	bl	800afca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800928e:	e012      	b.n	80092b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009290:	2340      	movs	r3, #64	@ 0x40
 8009292:	2202      	movs	r2, #2
 8009294:	2181      	movs	r1, #129	@ 0x81
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fe97 	bl	800afca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092a2:	2340      	movs	r3, #64	@ 0x40
 80092a4:	2202      	movs	r2, #2
 80092a6:	2101      	movs	r1, #1
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 fe8e 	bl	800afca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092b6:	2308      	movs	r3, #8
 80092b8:	2203      	movs	r2, #3
 80092ba:	2182      	movs	r1, #130	@ 0x82
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fe84 	bl	800afca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80092cc:	f001 ffa4 	bl	800b218 <USBD_static_malloc>
 80092d0:	4602      	mov	r2, r0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80092e2:	2301      	movs	r3, #1
 80092e4:	73fb      	strb	r3, [r7, #15]
 80092e6:	e026      	b.n	8009336 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7c1b      	ldrb	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800931c:	2101      	movs	r1, #1
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 ff43 	bl	800b1aa <USBD_LL_PrepareReceive>
 8009324:	e007      	b.n	8009336 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800932c:	2340      	movs	r3, #64	@ 0x40
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 ff3a 	bl	800b1aa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009350:	2181      	movs	r1, #129	@ 0x81
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fe5f 	bl	800b016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800935e:	2101      	movs	r1, #1
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fe58 	bl	800b016 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800936e:	2182      	movs	r1, #130	@ 0x82
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fe50 	bl	800b016 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00e      	beq.n	80093a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009396:	4618      	mov	r0, r3
 8009398:	f001 ff4a 	bl	800b230 <USBD_static_free>
    pdev->pClassData = NULL;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d039      	beq.n	800944c <USBD_CDC_Setup+0x9e>
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d17f      	bne.n	80094dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	88db      	ldrh	r3, [r3, #6]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d029      	beq.n	8009438 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b25b      	sxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da11      	bge.n	8009412 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80093fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	88d2      	ldrh	r2, [r2, #6]
 8009400:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009402:	6939      	ldr	r1, [r7, #16]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	88db      	ldrh	r3, [r3, #6]
 8009408:	461a      	mov	r2, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fa06 	bl	800a81c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009410:	e06b      	b.n	80094ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785a      	ldrb	r2, [r3, #1]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	88db      	ldrh	r3, [r3, #6]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009428:	6939      	ldr	r1, [r7, #16]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	88db      	ldrh	r3, [r3, #6]
 800942e:	461a      	mov	r2, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fa21 	bl	800a878 <USBD_CtlPrepareRx>
      break;
 8009436:	e058      	b.n	80094ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	7850      	ldrb	r0, [r2, #1]
 8009444:	2200      	movs	r2, #0
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	4798      	blx	r3
      break;
 800944a:	e04e      	b.n	80094ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b0b      	cmp	r3, #11
 8009452:	d02e      	beq.n	80094b2 <USBD_CDC_Setup+0x104>
 8009454:	2b0b      	cmp	r3, #11
 8009456:	dc38      	bgt.n	80094ca <USBD_CDC_Setup+0x11c>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <USBD_CDC_Setup+0xb4>
 800945c:	2b0a      	cmp	r3, #10
 800945e:	d014      	beq.n	800948a <USBD_CDC_Setup+0xdc>
 8009460:	e033      	b.n	80094ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009468:	2b03      	cmp	r3, #3
 800946a:	d107      	bne.n	800947c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800946c:	f107 030c 	add.w	r3, r7, #12
 8009470:	2202      	movs	r2, #2
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f9d1 	bl	800a81c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800947a:	e02e      	b.n	80094da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 f962 	bl	800a748 <USBD_CtlError>
            ret = USBD_FAIL;
 8009484:	2302      	movs	r3, #2
 8009486:	75fb      	strb	r3, [r7, #23]
          break;
 8009488:	e027      	b.n	80094da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009490:	2b03      	cmp	r3, #3
 8009492:	d107      	bne.n	80094a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009494:	f107 030f 	add.w	r3, r7, #15
 8009498:	2201      	movs	r2, #1
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f9bd 	bl	800a81c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094a2:	e01a      	b.n	80094da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f94e 	bl	800a748 <USBD_CtlError>
            ret = USBD_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	75fb      	strb	r3, [r7, #23]
          break;
 80094b0:	e013      	b.n	80094da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d00d      	beq.n	80094d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 f942 	bl	800a748 <USBD_CtlError>
            ret = USBD_FAIL;
 80094c4:	2302      	movs	r3, #2
 80094c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094c8:	e006      	b.n	80094d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 f93b 	bl	800a748 <USBD_CtlError>
          ret = USBD_FAIL;
 80094d2:	2302      	movs	r3, #2
 80094d4:	75fb      	strb	r3, [r7, #23]
          break;
 80094d6:	e000      	b.n	80094da <USBD_CDC_Setup+0x12c>
          break;
 80094d8:	bf00      	nop
      }
      break;
 80094da:	e006      	b.n	80094ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 f932 	bl	800a748 <USBD_CtlError>
      ret = USBD_FAIL;
 80094e4:	2302      	movs	r3, #2
 80094e6:	75fb      	strb	r3, [r7, #23]
      break;
 80094e8:	bf00      	nop
  }

  return ret;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009506:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800950e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d03a      	beq.n	8009590 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	331c      	adds	r3, #28
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d029      	beq.n	8009584 <USBD_CDC_DataIn+0x90>
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	331c      	adds	r3, #28
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	78f9      	ldrb	r1, [r7, #3]
 8009544:	68b8      	ldr	r0, [r7, #8]
 8009546:	460b      	mov	r3, r1
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4403      	add	r3, r0
 8009550:	3320      	adds	r3, #32
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	fbb2 f1f3 	udiv	r1, r2, r3
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d110      	bne.n	8009584 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	331c      	adds	r3, #28
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009576:	78f9      	ldrb	r1, [r7, #3]
 8009578:	2300      	movs	r3, #0
 800957a:	2200      	movs	r2, #0
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 fdf1 	bl	800b164 <USBD_LL_Transmit>
 8009582:	e003      	b.n	800958c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fe1c 	bl	800b1f0 <USBD_LL_GetRxDataSize>
 80095b8:	4602      	mov	r2, r0
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00d      	beq.n	80095e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80095de:	4611      	mov	r1, r2
 80095e0:	4798      	blx	r3

    return USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e000      	b.n	80095e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80095e6:	2302      	movs	r3, #2
  }
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <USBD_CDC_EP0_RxReady+0x44>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009610:	2bff      	cmp	r3, #255	@ 0xff
 8009612:	d00f      	beq.n	8009634 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009622:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800962a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	22ff      	movs	r2, #255	@ 0xff
 8009630:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2243      	movs	r2, #67	@ 0x43
 800964c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800964e:	4b03      	ldr	r3, [pc, #12]	@ (800965c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	200000a0 	.word	0x200000a0

08009660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2243      	movs	r2, #67	@ 0x43
 800966c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800966e:	4b03      	ldr	r3, [pc, #12]	@ (800967c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	2000005c 	.word	0x2000005c

08009680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2243      	movs	r2, #67	@ 0x43
 800968c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800968e:	4b03      	ldr	r3, [pc, #12]	@ (800969c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	200000e4 	.word	0x200000e4

080096a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	220a      	movs	r2, #10
 80096ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80096ae:	4b03      	ldr	r3, [pc, #12]	@ (80096bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20000018 	.word	0x20000018

080096c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80096ca:	2302      	movs	r3, #2
 80096cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009700:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800970a:	88fa      	ldrh	r2, [r7, #6]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr

0800971e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800972e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr

08009744 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01c      	beq.n	8009798 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009764:	2b00      	cmp	r3, #0
 8009766:	d115      	bne.n	8009794 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009786:	b29b      	uxth	r3, r3
 8009788:	2181      	movs	r1, #129	@ 0x81
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fcea 	bl	800b164 <USBD_LL_Transmit>

      return USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e002      	b.n	800979a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009798:	2302      	movs	r3, #2
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d017      	beq.n	80097ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7c1b      	ldrb	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097ce:	2101      	movs	r1, #1
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 fcea 	bl	800b1aa <USBD_LL_PrepareReceive>
 80097d6:	e007      	b.n	80097e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097de:	2340      	movs	r3, #64	@ 0x40
 80097e0:	2101      	movs	r1, #1
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 fce1 	bl	800b1aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e000      	b.n	80097ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80097ec:	2302      	movs	r3, #2
  }
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	4613      	mov	r3, r2
 8009802:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	e01a      	b.n	8009844 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	79fa      	ldrb	r2, [r7, #7]
 800983a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f001 fb4f 	bl	800aee0 <USBD_LL_Init>

  return USBD_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]
 800986c:	e001      	b.n	8009872 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr

0800987e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fb84 	bl	800af94 <USBD_LL_Start>

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bc80      	pop	{r7}
 80098a8:	4770      	bx	lr

080098aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80098b6:	2302      	movs	r3, #2
 80098b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	4611      	mov	r1, r2
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4798      	blx	r3

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fed8 	bl	800a6d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009934:	461a      	mov	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009942:	f003 031f 	and.w	r3, r3, #31
 8009946:	2b02      	cmp	r3, #2
 8009948:	d016      	beq.n	8009978 <USBD_LL_SetupStage+0x6a>
 800994a:	2b02      	cmp	r3, #2
 800994c:	d81c      	bhi.n	8009988 <USBD_LL_SetupStage+0x7a>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <USBD_LL_SetupStage+0x4a>
 8009952:	2b01      	cmp	r3, #1
 8009954:	d008      	beq.n	8009968 <USBD_LL_SetupStage+0x5a>
 8009956:	e017      	b.n	8009988 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f9cb 	bl	8009cfc <USBD_StdDevReq>
      break;
 8009966:	e01a      	b.n	800999e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fa2d 	bl	8009dd0 <USBD_StdItfReq>
      break;
 8009976:	e012      	b.n	800999e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fa6d 	bl	8009e60 <USBD_StdEPReq>
      break;
 8009986:	e00a      	b.n	800999e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800998e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009992:	b2db      	uxtb	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fb5c 	bl	800b054 <USBD_LL_StallEP>
      break;
 800999c:	bf00      	nop
  }

  return USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	460b      	mov	r3, r1
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d14b      	bne.n	8009a54 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80099c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d134      	bne.n	8009a38 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d919      	bls.n	8009a0e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	1ad2      	subs	r2, r2, r3
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d203      	bcs.n	80099fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	e002      	b.n	8009a02 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 ff54 	bl	800a8b4 <USBD_CtlContinueRx>
 8009a0c:	e038      	b.n	8009a80 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d105      	bne.n	8009a30 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 ff51 	bl	800a8d8 <USBD_CtlSendStatus>
 8009a36:	e023      	b.n	8009a80 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d11e      	bne.n	8009a80 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f001 fb01 	bl	800b054 <USBD_LL_StallEP>
 8009a52:	e015      	b.n	8009a80 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00d      	beq.n	8009a7c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d108      	bne.n	8009a7c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	7afa      	ldrb	r2, [r7, #11]
 8009a74:	4611      	mov	r1, r2
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	4798      	blx	r3
 8009a7a:	e001      	b.n	8009a80 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e000      	b.n	8009a82 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	60f8      	str	r0, [r7, #12]
 8009a92:	460b      	mov	r3, r1
 8009a94:	607a      	str	r2, [r7, #4]
 8009a96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d17f      	bne.n	8009b9e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3314      	adds	r3, #20
 8009aa2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d15c      	bne.n	8009b68 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d915      	bls.n	8009ae6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	1ad2      	subs	r2, r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 febe 	bl	800a854 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2200      	movs	r2, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f001 fb63 	bl	800b1aa <USBD_LL_PrepareReceive>
 8009ae4:	e04e      	b.n	8009b84 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	6912      	ldr	r2, [r2, #16]
 8009aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8009af2:	fb01 f202 	mul.w	r2, r1, r2
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d11c      	bne.n	8009b36 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d316      	bcc.n	8009b36 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d20f      	bcs.n	8009b36 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b16:	2200      	movs	r2, #0
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fe9a 	bl	800a854 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b28:	2300      	movs	r3, #0
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f001 fb3b 	bl	800b1aa <USBD_LL_PrepareReceive>
 8009b34:	e026      	b.n	8009b84 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d105      	bne.n	8009b58 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009b58:	2180      	movs	r1, #128	@ 0x80
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f001 fa7a 	bl	800b054 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fecc 	bl	800a8fe <USBD_CtlReceiveStatus>
 8009b66:	e00d      	b.n	8009b84 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d004      	beq.n	8009b7c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009b7c:	2180      	movs	r1, #128	@ 0x80
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f001 fa68 	bl	800b054 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d11d      	bne.n	8009bca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fe81 	bl	8009896 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009b9c:	e015      	b.n	8009bca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00d      	beq.n	8009bc6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d108      	bne.n	8009bc6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	7afa      	ldrb	r2, [r7, #11]
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	4798      	blx	r3
 8009bc4:	e001      	b.n	8009bca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e000      	b.n	8009bcc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bdc:	2340      	movs	r3, #64	@ 0x40
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 f9f1 	bl	800afca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2240      	movs	r2, #64	@ 0x40
 8009bf4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bf8:	2340      	movs	r3, #64	@ 0x40
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2180      	movs	r1, #128	@ 0x80
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 f9e3 	bl	800afca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2240      	movs	r2, #64	@ 0x40
 8009c0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6852      	ldr	r2, [r2, #4]
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	4611      	mov	r1, r2
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	4798      	blx	r3
  }

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	78fa      	ldrb	r2, [r7, #3]
 8009c66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bc80      	pop	{r7}
 8009c72:	4770      	bx	lr

08009c74 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bc80      	pop	{r7}
 8009c9a:	4770      	bx	lr

08009c9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d105      	bne.n	8009cba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bc80      	pop	{r7}
 8009cc4:	4770      	bx	lr

08009cc6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d10b      	bne.n	8009cf0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d12:	2b40      	cmp	r3, #64	@ 0x40
 8009d14:	d005      	beq.n	8009d22 <USBD_StdDevReq+0x26>
 8009d16:	2b40      	cmp	r3, #64	@ 0x40
 8009d18:	d84f      	bhi.n	8009dba <USBD_StdDevReq+0xbe>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <USBD_StdDevReq+0x36>
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d14b      	bne.n	8009dba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	4798      	blx	r3
      break;
 8009d30:	e048      	b.n	8009dc4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	d839      	bhi.n	8009dae <USBD_StdDevReq+0xb2>
 8009d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <USBD_StdDevReq+0x44>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	08009da5 	.word	0x08009da5
 8009d48:	08009daf 	.word	0x08009daf
 8009d4c:	08009d9b 	.word	0x08009d9b
 8009d50:	08009daf 	.word	0x08009daf
 8009d54:	08009d73 	.word	0x08009d73
 8009d58:	08009d69 	.word	0x08009d69
 8009d5c:	08009daf 	.word	0x08009daf
 8009d60:	08009d87 	.word	0x08009d87
 8009d64:	08009d7d 	.word	0x08009d7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f9dc 	bl	800a128 <USBD_GetDescriptor>
          break;
 8009d70:	e022      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fb3f 	bl	800a3f8 <USBD_SetAddress>
          break;
 8009d7a:	e01d      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb7e 	bl	800a480 <USBD_SetConfig>
          break;
 8009d84:	e018      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc07 	bl	800a59c <USBD_GetConfig>
          break;
 8009d8e:	e013      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fc37 	bl	800a606 <USBD_GetStatus>
          break;
 8009d98:	e00e      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fc65 	bl	800a66c <USBD_SetFeature>
          break;
 8009da2:	e009      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fc74 	bl	800a694 <USBD_ClrFeature>
          break;
 8009dac:	e004      	b.n	8009db8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fcc9 	bl	800a748 <USBD_CtlError>
          break;
 8009db6:	bf00      	nop
      }
      break;
 8009db8:	e004      	b.n	8009dc4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fcc3 	bl	800a748 <USBD_CtlError>
      break;
 8009dc2:	bf00      	nop
  }

  return ret;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop

08009dd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009de6:	2b40      	cmp	r3, #64	@ 0x40
 8009de8:	d005      	beq.n	8009df6 <USBD_StdItfReq+0x26>
 8009dea:	2b40      	cmp	r3, #64	@ 0x40
 8009dec:	d82e      	bhi.n	8009e4c <USBD_StdItfReq+0x7c>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <USBD_StdItfReq+0x26>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d12a      	bne.n	8009e4c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d81d      	bhi.n	8009e3e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	889b      	ldrh	r3, [r3, #4]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d813      	bhi.n	8009e34 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d110      	bne.n	8009e48 <USBD_StdItfReq+0x78>
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10d      	bne.n	8009e48 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fd53 	bl	800a8d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e32:	e009      	b.n	8009e48 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fc86 	bl	800a748 <USBD_CtlError>
          break;
 8009e3c:	e004      	b.n	8009e48 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fc81 	bl	800a748 <USBD_CtlError>
          break;
 8009e46:	e000      	b.n	8009e4a <USBD_StdItfReq+0x7a>
          break;
 8009e48:	bf00      	nop
      }
      break;
 8009e4a:	e004      	b.n	8009e56 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fc7a 	bl	800a748 <USBD_CtlError>
      break;
 8009e54:	bf00      	nop
  }

  return USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	889b      	ldrh	r3, [r3, #4]
 8009e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e7c:	2b40      	cmp	r3, #64	@ 0x40
 8009e7e:	d007      	beq.n	8009e90 <USBD_StdEPReq+0x30>
 8009e80:	2b40      	cmp	r3, #64	@ 0x40
 8009e82:	f200 8146 	bhi.w	800a112 <USBD_StdEPReq+0x2b2>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <USBD_StdEPReq+0x40>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	f040 8141 	bne.w	800a112 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
      break;
 8009e9e:	e13d      	b.n	800a11c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d10a      	bne.n	8009ec2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	e12d      	b.n	800a11e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d007      	beq.n	8009eda <USBD_StdEPReq+0x7a>
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	f300 811b 	bgt.w	800a106 <USBD_StdEPReq+0x2a6>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d072      	beq.n	8009fba <USBD_StdEPReq+0x15a>
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d03a      	beq.n	8009f4e <USBD_StdEPReq+0xee>
 8009ed8:	e115      	b.n	800a106 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d002      	beq.n	8009eea <USBD_StdEPReq+0x8a>
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d015      	beq.n	8009f14 <USBD_StdEPReq+0xb4>
 8009ee8:	e02b      	b.n	8009f42 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00c      	beq.n	8009f0a <USBD_StdEPReq+0xaa>
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b80      	cmp	r3, #128	@ 0x80
 8009ef4:	d009      	beq.n	8009f0a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 f8aa 	bl	800b054 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f00:	2180      	movs	r1, #128	@ 0x80
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f8a6 	bl	800b054 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f08:	e020      	b.n	8009f4c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc1b 	bl	800a748 <USBD_CtlError>
              break;
 8009f12:	e01b      	b.n	8009f4c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	885b      	ldrh	r3, [r3, #2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10e      	bne.n	8009f3a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <USBD_StdEPReq+0xda>
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b80      	cmp	r3, #128	@ 0x80
 8009f26:	d008      	beq.n	8009f3a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	88db      	ldrh	r3, [r3, #6]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f88d 	bl	800b054 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fccc 	bl	800a8d8 <USBD_CtlSendStatus>

              break;
 8009f40:	e004      	b.n	8009f4c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fbff 	bl	800a748 <USBD_CtlError>
              break;
 8009f4a:	bf00      	nop
          }
          break;
 8009f4c:	e0e0      	b.n	800a110 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d002      	beq.n	8009f5e <USBD_StdEPReq+0xfe>
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d015      	beq.n	8009f88 <USBD_StdEPReq+0x128>
 8009f5c:	e026      	b.n	8009fac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00c      	beq.n	8009f7e <USBD_StdEPReq+0x11e>
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d009      	beq.n	8009f7e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f870 	bl	800b054 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f74:	2180      	movs	r1, #128	@ 0x80
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f001 f86c 	bl	800b054 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f7c:	e01c      	b.n	8009fb8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fbe1 	bl	800a748 <USBD_CtlError>
              break;
 8009f86:	e017      	b.n	8009fb8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d112      	bne.n	8009fb6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 f877 	bl	800b092 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fc97 	bl	800a8d8 <USBD_CtlSendStatus>
              }
              break;
 8009faa:	e004      	b.n	8009fb6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fbca 	bl	800a748 <USBD_CtlError>
              break;
 8009fb4:	e000      	b.n	8009fb8 <USBD_StdEPReq+0x158>
              break;
 8009fb6:	bf00      	nop
          }
          break;
 8009fb8:	e0aa      	b.n	800a110 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d002      	beq.n	8009fca <USBD_StdEPReq+0x16a>
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d032      	beq.n	800a02e <USBD_StdEPReq+0x1ce>
 8009fc8:	e097      	b.n	800a0fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <USBD_StdEPReq+0x180>
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b80      	cmp	r3, #128	@ 0x80
 8009fd4:	d004      	beq.n	8009fe0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fbb5 	bl	800a748 <USBD_CtlError>
                break;
 8009fde:	e091      	b.n	800a104 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da0b      	bge.n	800a000 <USBD_StdEPReq+0x1a0>
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	3310      	adds	r3, #16
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	e00b      	b.n	800a018 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	3304      	adds	r3, #4
 800a018:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2202      	movs	r2, #2
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fbf8 	bl	800a81c <USBD_CtlSendData>
              break;
 800a02c:	e06a      	b.n	800a104 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da11      	bge.n	800a05a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	f003 020f 	and.w	r2, r3, #15
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	3318      	adds	r3, #24
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d117      	bne.n	800a080 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fb78 	bl	800a748 <USBD_CtlError>
                  break;
 800a058:	e054      	b.n	800a104 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d104      	bne.n	800a080 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fb65 	bl	800a748 <USBD_CtlError>
                  break;
 800a07e:	e041      	b.n	800a104 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a084:	2b00      	cmp	r3, #0
 800a086:	da0b      	bge.n	800a0a0 <USBD_StdEPReq+0x240>
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	3310      	adds	r3, #16
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	3304      	adds	r3, #4
 800a09e:	e00b      	b.n	800a0b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <USBD_StdEPReq+0x266>
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b80      	cmp	r3, #128	@ 0x80
 800a0c4:	d103      	bne.n	800a0ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e00e      	b.n	800a0ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fffc 	bl	800b0d0 <USBD_LL_IsStallEP>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e002      	b.n	800a0ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fb92 	bl	800a81c <USBD_CtlSendData>
              break;
 800a0f8:	e004      	b.n	800a104 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fb23 	bl	800a748 <USBD_CtlError>
              break;
 800a102:	bf00      	nop
          }
          break;
 800a104:	e004      	b.n	800a110 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fb1d 	bl	800a748 <USBD_CtlError>
          break;
 800a10e:	bf00      	nop
      }
      break;
 800a110:	e004      	b.n	800a11c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb17 	bl	800a748 <USBD_CtlError>
      break;
 800a11a:	bf00      	nop
  }

  return ret;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	2b06      	cmp	r3, #6
 800a14a:	f200 8128 	bhi.w	800a39e <USBD_GetDescriptor+0x276>
 800a14e:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <USBD_GetDescriptor+0x2c>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a171 	.word	0x0800a171
 800a158:	0800a189 	.word	0x0800a189
 800a15c:	0800a1c9 	.word	0x0800a1c9
 800a160:	0800a39f 	.word	0x0800a39f
 800a164:	0800a39f 	.word	0x0800a39f
 800a168:	0800a33f 	.word	0x0800a33f
 800a16c:	0800a36b 	.word	0x0800a36b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	7c12      	ldrb	r2, [r2, #16]
 800a17c:	f107 0108 	add.w	r1, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
      break;
 800a186:	e112      	b.n	800a3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	7c1b      	ldrb	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10d      	bne.n	800a1ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a198:	f107 0208 	add.w	r2, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1aa:	e100      	b.n	800a3ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b4:	f107 0208 	add.w	r2, r7, #8
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
 800a1bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	701a      	strb	r2, [r3, #0]
      break;
 800a1c6:	e0f2      	b.n	800a3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	885b      	ldrh	r3, [r3, #2]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	f200 80ac 	bhi.w	800a32c <USBD_GetDescriptor+0x204>
 800a1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1dc <USBD_GetDescriptor+0xb4>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a1f5 	.word	0x0800a1f5
 800a1e0:	0800a229 	.word	0x0800a229
 800a1e4:	0800a25d 	.word	0x0800a25d
 800a1e8:	0800a291 	.word	0x0800a291
 800a1ec:	0800a2c5 	.word	0x0800a2c5
 800a1f0:	0800a2f9 	.word	0x0800a2f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e091      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa94 	bl	800a748 <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e089      	b.n	800a33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7c12      	ldrb	r2, [r2, #16]
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24a:	e077      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa7a 	bl	800a748 <USBD_CtlError>
            err++;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	3301      	adds	r3, #1
 800a258:	72fb      	strb	r3, [r7, #11]
          break;
 800a25a:	e06f      	b.n	800a33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	7c12      	ldrb	r2, [r2, #16]
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27e:	e05d      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa60 	bl	800a748 <USBD_CtlError>
            err++;
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	3301      	adds	r3, #1
 800a28c:	72fb      	strb	r3, [r7, #11]
          break;
 800a28e:	e055      	b.n	800a33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b2:	e043      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa46 	bl	800a748 <USBD_CtlError>
            err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c2:	e03b      	b.n	800a33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	7c12      	ldrb	r2, [r2, #16]
 800a2dc:	f107 0108 	add.w	r1, r7, #8
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	4798      	blx	r3
 800a2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e6:	e029      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa2c 	bl	800a748 <USBD_CtlError>
            err++;
 800a2f0:	7afb      	ldrb	r3, [r7, #11]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f6:	e021      	b.n	800a33c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	7c12      	ldrb	r2, [r2, #16]
 800a310:	f107 0108 	add.w	r1, r7, #8
 800a314:	4610      	mov	r0, r2
 800a316:	4798      	blx	r3
 800a318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31a:	e00f      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa12 	bl	800a748 <USBD_CtlError>
            err++;
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	3301      	adds	r3, #1
 800a328:	72fb      	strb	r3, [r7, #11]
          break;
 800a32a:	e007      	b.n	800a33c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa0a 	bl	800a748 <USBD_CtlError>
          err++;
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	3301      	adds	r3, #1
 800a338:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a33a:	e038      	b.n	800a3ae <USBD_GetDescriptor+0x286>
 800a33c:	e037      	b.n	800a3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7c1b      	ldrb	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a34e:	f107 0208 	add.w	r2, r7, #8
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
 800a356:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a358:	e029      	b.n	800a3ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f9f3 	bl	800a748 <USBD_CtlError>
        err++;
 800a362:	7afb      	ldrb	r3, [r7, #11]
 800a364:	3301      	adds	r3, #1
 800a366:	72fb      	strb	r3, [r7, #11]
      break;
 800a368:	e021      	b.n	800a3ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7c1b      	ldrb	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10d      	bne.n	800a38e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	f107 0208 	add.w	r2, r7, #8
 800a37e:	4610      	mov	r0, r2
 800a380:	4798      	blx	r3
 800a382:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3301      	adds	r3, #1
 800a388:	2207      	movs	r2, #7
 800a38a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a38c:	e00f      	b.n	800a3ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f9d9 	bl	800a748 <USBD_CtlError>
        err++;
 800a396:	7afb      	ldrb	r3, [r7, #11]
 800a398:	3301      	adds	r3, #1
 800a39a:	72fb      	strb	r3, [r7, #11]
      break;
 800a39c:	e007      	b.n	800a3ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9d1 	bl	800a748 <USBD_CtlError>
      err++;
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ac:	bf00      	nop
  }

  if (err != 0U)
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d11c      	bne.n	800a3ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a3b4:	893b      	ldrh	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d011      	beq.n	800a3de <USBD_GetDescriptor+0x2b6>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	88db      	ldrh	r3, [r3, #6]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	88da      	ldrh	r2, [r3, #6]
 800a3c6:	893b      	ldrh	r3, [r7, #8]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	bf28      	it	cs
 800a3cc:	4613      	movcs	r3, r2
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3d2:	893b      	ldrh	r3, [r7, #8]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa1f 	bl	800a81c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	88db      	ldrh	r3, [r3, #6]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d104      	bne.n	800a3f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fa76 	bl	800a8d8 <USBD_CtlSendStatus>
 800a3ec:	e000      	b.n	800a3f0 <USBD_GetDescriptor+0x2c8>
    return;
 800a3ee:	bf00      	nop
    }
  }
}
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop

0800a3f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	889b      	ldrh	r3, [r3, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d130      	bne.n	800a46c <USBD_SetAddress+0x74>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	88db      	ldrh	r3, [r3, #6]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d12c      	bne.n	800a46c <USBD_SetAddress+0x74>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	885b      	ldrh	r3, [r3, #2]
 800a416:	2b7f      	cmp	r3, #127	@ 0x7f
 800a418:	d828      	bhi.n	800a46c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a424:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d104      	bne.n	800a43a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f988 	bl	800a748 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a438:	e01d      	b.n	800a476 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7bfa      	ldrb	r2, [r7, #15]
 800a43e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fe6d 	bl	800b126 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa43 	bl	800a8d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d004      	beq.n	800a462 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a460:	e009      	b.n	800a476 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46a:	e004      	b.n	800a476 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f96a 	bl	800a748 <USBD_CtlError>
  }
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	4b41      	ldr	r3, [pc, #260]	@ (800a598 <USBD_SetConfig+0x118>)
 800a492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a494:	4b40      	ldr	r3, [pc, #256]	@ (800a598 <USBD_SetConfig+0x118>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d904      	bls.n	800a4a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f952 	bl	800a748 <USBD_CtlError>
 800a4a4:	e075      	b.n	800a592 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d002      	beq.n	800a4b6 <USBD_SetConfig+0x36>
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d023      	beq.n	800a4fc <USBD_SetConfig+0x7c>
 800a4b4:	e062      	b.n	800a57c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a4b6:	4b38      	ldr	r3, [pc, #224]	@ (800a598 <USBD_SetConfig+0x118>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01a      	beq.n	800a4f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a4be:	4b36      	ldr	r3, [pc, #216]	@ (800a598 <USBD_SetConfig+0x118>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a4d0:	4b31      	ldr	r3, [pc, #196]	@ (800a598 <USBD_SetConfig+0x118>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff f9e7 	bl	80098aa <USBD_SetClassConfig>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d104      	bne.n	800a4ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f92f 	bl	800a748 <USBD_CtlError>
            return;
 800a4ea:	e052      	b.n	800a592 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f9f3 	bl	800a8d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a4f2:	e04e      	b.n	800a592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f9ef 	bl	800a8d8 <USBD_CtlSendStatus>
        break;
 800a4fa:	e04a      	b.n	800a592 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a4fc:	4b26      	ldr	r3, [pc, #152]	@ (800a598 <USBD_SetConfig+0x118>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d112      	bne.n	800a52a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a50c:	4b22      	ldr	r3, [pc, #136]	@ (800a598 <USBD_SetConfig+0x118>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	461a      	mov	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a516:	4b20      	ldr	r3, [pc, #128]	@ (800a598 <USBD_SetConfig+0x118>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff f9e3 	bl	80098e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f9d8 	bl	800a8d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a528:	e033      	b.n	800a592 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a52a:	4b1b      	ldr	r3, [pc, #108]	@ (800a598 <USBD_SetConfig+0x118>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	429a      	cmp	r2, r3
 800a536:	d01d      	beq.n	800a574 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff f9d1 	bl	80098e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a546:	4b14      	ldr	r3, [pc, #80]	@ (800a598 <USBD_SetConfig+0x118>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a550:	4b11      	ldr	r3, [pc, #68]	@ (800a598 <USBD_SetConfig+0x118>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7ff f9a7 	bl	80098aa <USBD_SetClassConfig>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d104      	bne.n	800a56c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f8ef 	bl	800a748 <USBD_CtlError>
            return;
 800a56a:	e012      	b.n	800a592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f9b3 	bl	800a8d8 <USBD_CtlSendStatus>
        break;
 800a572:	e00e      	b.n	800a592 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9af 	bl	800a8d8 <USBD_CtlSendStatus>
        break;
 800a57a:	e00a      	b.n	800a592 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f8e2 	bl	800a748 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a584:	4b04      	ldr	r3, [pc, #16]	@ (800a598 <USBD_SetConfig+0x118>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff f9ac 	bl	80098e8 <USBD_ClrClassConfig>
        break;
 800a590:	bf00      	nop
    }
  }
}
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	200009c0 	.word	0x200009c0

0800a59c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	88db      	ldrh	r3, [r3, #6]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d004      	beq.n	800a5b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f8c9 	bl	800a748 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5b6:	e022      	b.n	800a5fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	dc02      	bgt.n	800a5c8 <USBD_GetConfig+0x2c>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	dc03      	bgt.n	800a5ce <USBD_GetConfig+0x32>
 800a5c6:	e015      	b.n	800a5f4 <USBD_GetConfig+0x58>
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d00b      	beq.n	800a5e4 <USBD_GetConfig+0x48>
 800a5cc:	e012      	b.n	800a5f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	2201      	movs	r2, #1
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f91d 	bl	800a81c <USBD_CtlSendData>
        break;
 800a5e2:	e00c      	b.n	800a5fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f915 	bl	800a81c <USBD_CtlSendData>
        break;
 800a5f2:	e004      	b.n	800a5fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f8a6 	bl	800a748 <USBD_CtlError>
        break;
 800a5fc:	bf00      	nop
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a616:	3b01      	subs	r3, #1
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d81e      	bhi.n	800a65a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	88db      	ldrh	r3, [r3, #6]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d004      	beq.n	800a62e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f88e 	bl	800a748 <USBD_CtlError>
        break;
 800a62c:	e01a      	b.n	800a664 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	330c      	adds	r3, #12
 800a64e:	2202      	movs	r2, #2
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f8e2 	bl	800a81c <USBD_CtlSendData>
      break;
 800a658:	e004      	b.n	800a664 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f873 	bl	800a748 <USBD_CtlError>
      break;
 800a662:	bf00      	nop
  }
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d106      	bne.n	800a68c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f926 	bl	800a8d8 <USBD_CtlSendStatus>
  }
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d80b      	bhi.n	800a6c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	885b      	ldrh	r3, [r3, #2]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d10c      	bne.n	800a6cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f90c 	bl	800a8d8 <USBD_CtlSendStatus>
      }
      break;
 800a6c0:	e004      	b.n	800a6cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f83f 	bl	800a748 <USBD_CtlError>
      break;
 800a6ca:	e000      	b.n	800a6ce <USBD_ClrFeature+0x3a>
      break;
 800a6cc:	bf00      	nop
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	781a      	ldrb	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	785a      	ldrb	r2, [r3, #1]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	3303      	adds	r3, #3
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	021b      	lsls	r3, r3, #8
 800a700:	b29b      	uxth	r3, r3
 800a702:	4413      	add	r3, r2
 800a704:	b29a      	uxth	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	3304      	adds	r3, #4
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	3305      	adds	r3, #5
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	021b      	lsls	r3, r3, #8
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	4413      	add	r3, r2
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	3306      	adds	r3, #6
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	3307      	adds	r3, #7
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	b29b      	uxth	r3, r3
 800a736:	4413      	add	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	80da      	strh	r2, [r3, #6]

}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	bc80      	pop	{r7}
 800a746:	4770      	bx	lr

0800a748 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a752:	2180      	movs	r1, #128	@ 0x80
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fc7d 	bl	800b054 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a75a:	2100      	movs	r1, #0
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fc79 	bl	800b054 <USBD_LL_StallEP>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	60f8      	str	r0, [r7, #12]
 800a772:	60b9      	str	r1, [r7, #8]
 800a774:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d032      	beq.n	800a7e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f834 	bl	800a7ee <USBD_GetLen>
 800a786:	4603      	mov	r3, r0
 800a788:	3301      	adds	r3, #1
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	75fa      	strb	r2, [r7, #23]
 800a79a:	461a      	mov	r2, r3
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4413      	add	r3, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	75fa      	strb	r2, [r7, #23]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a7b6:	e012      	b.n	800a7de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	60fa      	str	r2, [r7, #12]
 800a7be:	7dfa      	ldrb	r2, [r7, #23]
 800a7c0:	1c51      	adds	r1, r2, #1
 800a7c2:	75f9      	strb	r1, [r7, #23]
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	440a      	add	r2, r1
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	75fa      	strb	r2, [r7, #23]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e8      	bne.n	800a7b8 <USBD_GetString+0x4e>
    }
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a7fa:	e005      	b.n	800a808 <USBD_GetLen+0x1a>
  {
    len++;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	3301      	adds	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3301      	adds	r3, #1
 800a806:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1f5      	bne.n	800a7fc <USBD_GetLen+0xe>
  }

  return len;
 800a810:	7bfb      	ldrb	r3, [r7, #15]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr

0800a81c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	4613      	mov	r3, r2
 800a828:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2202      	movs	r2, #2
 800a82e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a832:	88fa      	ldrh	r2, [r7, #6]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a838:	88fa      	ldrh	r2, [r7, #6]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a83e:	88fb      	ldrh	r3, [r7, #6]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fc8d 	bl	800b164 <USBD_LL_Transmit>

  return USBD_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a862:	88fb      	ldrh	r3, [r7, #6]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	2100      	movs	r1, #0
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fc7b 	bl	800b164 <USBD_LL_Transmit>

  return USBD_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2203      	movs	r2, #3
 800a88a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a896:	88fa      	ldrh	r2, [r7, #6]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a89e:	88fb      	ldrh	r3, [r7, #6]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fc80 	bl	800b1aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8c2:	88fb      	ldrh	r3, [r7, #6]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fc6e 	bl	800b1aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fc38 	bl	800b164 <USBD_LL_Transmit>

  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2205      	movs	r2, #5
 800a90a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a90e:	2300      	movs	r3, #0
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fc48 	bl	800b1aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a928:	2200      	movs	r2, #0
 800a92a:	4912      	ldr	r1, [pc, #72]	@ (800a974 <MX_USB_DEVICE_Init+0x50>)
 800a92c:	4812      	ldr	r0, [pc, #72]	@ (800a978 <MX_USB_DEVICE_Init+0x54>)
 800a92e:	f7fe ff62 	bl	80097f6 <USBD_Init>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a938:	f7f6 f800 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a93c:	490f      	ldr	r1, [pc, #60]	@ (800a97c <MX_USB_DEVICE_Init+0x58>)
 800a93e:	480e      	ldr	r0, [pc, #56]	@ (800a978 <MX_USB_DEVICE_Init+0x54>)
 800a940:	f7fe ff84 	bl	800984c <USBD_RegisterClass>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a94a:	f7f5 fff7 	bl	800093c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a94e:	490c      	ldr	r1, [pc, #48]	@ (800a980 <MX_USB_DEVICE_Init+0x5c>)
 800a950:	4809      	ldr	r0, [pc, #36]	@ (800a978 <MX_USB_DEVICE_Init+0x54>)
 800a952:	f7fe feb5 	bl	80096c0 <USBD_CDC_RegisterInterface>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a95c:	f7f5 ffee 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a960:	4805      	ldr	r0, [pc, #20]	@ (800a978 <MX_USB_DEVICE_Init+0x54>)
 800a962:	f7fe ff8c 	bl	800987e <USBD_Start>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a96c:	f7f5 ffe6 	bl	800093c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a970:	bf00      	nop
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000138 	.word	0x20000138
 800a978:	200009c4 	.word	0x200009c4
 800a97c:	20000024 	.word	0x20000024
 800a980:	20000128 	.word	0x20000128

0800a984 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a988:	2200      	movs	r2, #0
 800a98a:	4905      	ldr	r1, [pc, #20]	@ (800a9a0 <CDC_Init_FS+0x1c>)
 800a98c:	4805      	ldr	r0, [pc, #20]	@ (800a9a4 <CDC_Init_FS+0x20>)
 800a98e:	f7fe fead 	bl	80096ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a992:	4905      	ldr	r1, [pc, #20]	@ (800a9a8 <CDC_Init_FS+0x24>)
 800a994:	4803      	ldr	r0, [pc, #12]	@ (800a9a4 <CDC_Init_FS+0x20>)
 800a996:	f7fe fec2 	bl	800971e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a99a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20001088 	.word	0x20001088
 800a9a4:	200009c4 	.word	0x200009c4
 800a9a8:	20000c88 	.word	0x20000c88

0800a9ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bc80      	pop	{r7}
 800a9b8:	4770      	bx	lr
	...

0800a9bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	6039      	str	r1, [r7, #0]
 800a9c6:	71fb      	strb	r3, [r7, #7]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b23      	cmp	r3, #35	@ 0x23
 800a9d0:	d84a      	bhi.n	800aa68 <CDC_Control_FS+0xac>
 800a9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d8 <CDC_Control_FS+0x1c>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa69 	.word	0x0800aa69
 800a9dc:	0800aa69 	.word	0x0800aa69
 800a9e0:	0800aa69 	.word	0x0800aa69
 800a9e4:	0800aa69 	.word	0x0800aa69
 800a9e8:	0800aa69 	.word	0x0800aa69
 800a9ec:	0800aa69 	.word	0x0800aa69
 800a9f0:	0800aa69 	.word	0x0800aa69
 800a9f4:	0800aa69 	.word	0x0800aa69
 800a9f8:	0800aa69 	.word	0x0800aa69
 800a9fc:	0800aa69 	.word	0x0800aa69
 800aa00:	0800aa69 	.word	0x0800aa69
 800aa04:	0800aa69 	.word	0x0800aa69
 800aa08:	0800aa69 	.word	0x0800aa69
 800aa0c:	0800aa69 	.word	0x0800aa69
 800aa10:	0800aa69 	.word	0x0800aa69
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800aa69 	.word	0x0800aa69
 800aa1c:	0800aa69 	.word	0x0800aa69
 800aa20:	0800aa69 	.word	0x0800aa69
 800aa24:	0800aa69 	.word	0x0800aa69
 800aa28:	0800aa69 	.word	0x0800aa69
 800aa2c:	0800aa69 	.word	0x0800aa69
 800aa30:	0800aa69 	.word	0x0800aa69
 800aa34:	0800aa69 	.word	0x0800aa69
 800aa38:	0800aa69 	.word	0x0800aa69
 800aa3c:	0800aa69 	.word	0x0800aa69
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	0800aa69 	.word	0x0800aa69
 800aa54:	0800aa69 	.word	0x0800aa69
 800aa58:	0800aa69 	.word	0x0800aa69
 800aa5c:	0800aa69 	.word	0x0800aa69
 800aa60:	0800aa69 	.word	0x0800aa69
 800aa64:	0800aa69 	.word	0x0800aa69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa68:	bf00      	nop
  }

  return (USBD_OK);
 800aa6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bc80      	pop	{r7}
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop

0800aa78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  if (Buf[0] == 'a') {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Por ejemplo, toggle de un LED
//  }
	for(short i = 0;i < *Len;i++){
 800aa82:	2300      	movs	r3, #0
 800aa84:	81fb      	strh	r3, [r7, #14]
 800aa86:	e00f      	b.n	800aaa8 <CDC_Receive_FS+0x30>
		On_Data_RX(&rx,Buf[i]);
 800aa88:	4b10      	ldr	r3, [pc, #64]	@ (800aacc <CDC_Receive_FS+0x54>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	440a      	add	r2, r1
 800aa94:	7812      	ldrb	r2, [r2, #0]
 800aa96:	4611      	mov	r1, r2
 800aa98:	480d      	ldr	r0, [pc, #52]	@ (800aad0 <CDC_Receive_FS+0x58>)
 800aa9a:	4798      	blx	r3
	for(short i = 0;i < *Len;i++){
 800aa9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	81fb      	strh	r3, [r7, #14]
 800aaa8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d3e9      	bcc.n	800aa88 <CDC_Receive_FS+0x10>
	}
//  char msg[] = "Dato recibido\r\n";
//  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));

  // Reestablecer recepción USB
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4807      	ldr	r0, [pc, #28]	@ (800aad4 <CDC_Receive_FS+0x5c>)
 800aab8:	f7fe fe31 	bl	800971e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aabc:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <CDC_Receive_FS+0x5c>)
 800aabe:	f7fe fe70 	bl	80097a2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aac2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20001488 	.word	0x20001488
 800aad0:	20000494 	.word	0x20000494
 800aad4:	200009c4 	.word	0x200009c4

0800aad8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aae8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800aaea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e00b      	b.n	800ab16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aafe:	887b      	ldrh	r3, [r7, #2]
 800ab00:	461a      	mov	r2, r3
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	4806      	ldr	r0, [pc, #24]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800ab06:	f7fe fdf1 	bl	80096ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab0a:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <CDC_Transmit_FS+0x48>)
 800ab0c:	f7fe fe1a 	bl	8009744 <USBD_CDC_TransmitPacket>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	200009c4 	.word	0x200009c4

0800ab24 <CDC_Attach_RX_Funct>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_RX_Funct(void(*rxFunction)(_sRx *rx, uint8_t data)){
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	On_Data_RX = rxFunction;
 800ab2c:	4a03      	ldr	r2, [pc, #12]	@ (800ab3c <CDC_Attach_RX_Funct+0x18>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6013      	str	r3, [r2, #0]
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr
 800ab3c:	20001488 	.word	0x20001488

0800ab40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2212      	movs	r2, #18
 800ab50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab52:	4b03      	ldr	r3, [pc, #12]	@ (800ab60 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bc80      	pop	{r7}
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20000154 	.word	0x20000154

0800ab64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2204      	movs	r2, #4
 800ab74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	@ (800ab84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	20000168 	.word	0x20000168

0800ab88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4907      	ldr	r1, [pc, #28]	@ (800abbc <USBD_FS_ProductStrDescriptor+0x34>)
 800ab9e:	4808      	ldr	r0, [pc, #32]	@ (800abc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aba0:	f7ff fde3 	bl	800a76a <USBD_GetString>
 800aba4:	e004      	b.n	800abb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	4904      	ldr	r1, [pc, #16]	@ (800abbc <USBD_FS_ProductStrDescriptor+0x34>)
 800abaa:	4805      	ldr	r0, [pc, #20]	@ (800abc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800abac:	f7ff fddd 	bl	800a76a <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb0:	4b02      	ldr	r3, [pc, #8]	@ (800abbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	2000148c 	.word	0x2000148c
 800abc0:	0800bfe4 	.word	0x0800bfe4

0800abc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	6039      	str	r1, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	4904      	ldr	r1, [pc, #16]	@ (800abe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800abd4:	4804      	ldr	r0, [pc, #16]	@ (800abe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800abd6:	f7ff fdc8 	bl	800a76a <USBD_GetString>
  return USBD_StrDesc;
 800abda:	4b02      	ldr	r3, [pc, #8]	@ (800abe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	2000148c 	.word	0x2000148c
 800abe8:	0800bffc 	.word	0x0800bffc

0800abec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	221a      	movs	r2, #26
 800abfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abfe:	f000 f843 	bl	800ac88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac02:	4b02      	ldr	r3, [pc, #8]	@ (800ac0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	2000016c 	.word	0x2000016c

0800ac10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4907      	ldr	r1, [pc, #28]	@ (800ac44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac26:	4808      	ldr	r0, [pc, #32]	@ (800ac48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac28:	f7ff fd9f 	bl	800a76a <USBD_GetString>
 800ac2c:	e004      	b.n	800ac38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	4904      	ldr	r1, [pc, #16]	@ (800ac44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac32:	4805      	ldr	r0, [pc, #20]	@ (800ac48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac34:	f7ff fd99 	bl	800a76a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac38:	4b02      	ldr	r3, [pc, #8]	@ (800ac44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	2000148c 	.word	0x2000148c
 800ac48:	0800c010 	.word	0x0800c010

0800ac4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4907      	ldr	r1, [pc, #28]	@ (800ac80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac62:	4808      	ldr	r0, [pc, #32]	@ (800ac84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac64:	f7ff fd81 	bl	800a76a <USBD_GetString>
 800ac68:	e004      	b.n	800ac74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4904      	ldr	r1, [pc, #16]	@ (800ac80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac6e:	4805      	ldr	r0, [pc, #20]	@ (800ac84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac70:	f7ff fd7b 	bl	800a76a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac74:	4b02      	ldr	r3, [pc, #8]	@ (800ac80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000148c 	.word	0x2000148c
 800ac84:	0800c01c 	.word	0x0800c01c

0800ac88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	@ (800accc <Get_SerialNum+0x44>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac94:	4b0e      	ldr	r3, [pc, #56]	@ (800acd0 <Get_SerialNum+0x48>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	@ (800acd4 <Get_SerialNum+0x4c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4413      	add	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d009      	beq.n	800acc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acae:	2208      	movs	r2, #8
 800acb0:	4909      	ldr	r1, [pc, #36]	@ (800acd8 <Get_SerialNum+0x50>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f814 	bl	800ace0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acb8:	2204      	movs	r2, #4
 800acba:	4908      	ldr	r1, [pc, #32]	@ (800acdc <Get_SerialNum+0x54>)
 800acbc:	68b8      	ldr	r0, [r7, #8]
 800acbe:	f000 f80f 	bl	800ace0 <IntToUnicode>
  }
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	1ffff7e8 	.word	0x1ffff7e8
 800acd0:	1ffff7ec 	.word	0x1ffff7ec
 800acd4:	1ffff7f0 	.word	0x1ffff7f0
 800acd8:	2000016e 	.word	0x2000016e
 800acdc:	2000017e 	.word	0x2000017e

0800ace0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	4613      	mov	r3, r2
 800acec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	75fb      	strb	r3, [r7, #23]
 800acf6:	e027      	b.n	800ad48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	0f1b      	lsrs	r3, r3, #28
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d80b      	bhi.n	800ad18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	0f1b      	lsrs	r3, r3, #28
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	440b      	add	r3, r1
 800ad10:	3230      	adds	r2, #48	@ 0x30
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e00a      	b.n	800ad2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	0f1b      	lsrs	r3, r3, #28
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4619      	mov	r1, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	440b      	add	r3, r1
 800ad28:	3237      	adds	r2, #55	@ 0x37
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	011b      	lsls	r3, r3, #4
 800ad32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	3301      	adds	r3, #1
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	3301      	adds	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	7dfa      	ldrb	r2, [r7, #23]
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d3d3      	bcc.n	800acf8 <IntToUnicode+0x18>
  }
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a0d      	ldr	r2, [pc, #52]	@ (800ada0 <HAL_PCD_MspInit+0x44>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d113      	bne.n	800ad96 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	4a0c      	ldr	r2, [pc, #48]	@ (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad78:	61d3      	str	r3, [r2, #28]
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	2014      	movs	r0, #20
 800ad8c:	f7f6 fc8b 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ad90:	2014      	movs	r0, #20
 800ad92:	f7f6 fca4 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40005c00 	.word	0x40005c00
 800ada4:	40021000 	.word	0x40021000

0800ada8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fe fda5 	bl	800990e <USBD_LL_SetupStage>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800adde:	78fa      	ldrb	r2, [r7, #3]
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	440b      	add	r3, r1
 800adec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	4619      	mov	r1, r3
 800adf6:	f7fe fdd7 	bl	80099a8 <USBD_LL_DataOutStage>
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	440b      	add	r3, r1
 800ae22:	3324      	adds	r3, #36	@ 0x24
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f7fe fe2e 	bl	8009a8a <USBD_LL_DataInStage>
}
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe ff3e 	bl	8009cc6 <USBD_LL_SOF>
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	799b      	ldrb	r3, [r3, #6]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d001      	beq.n	800ae6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae66:	f7f5 fd69 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe feee 	bl	8009c56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fea7 	bl	8009bd4 <USBD_LL_Reset>
}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fee8 	bl	8009c74 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7a9b      	ldrb	r3, [r3, #10]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeac:	4b04      	ldr	r3, [pc, #16]	@ (800aec0 <HAL_PCD_SuspendCallback+0x30>)
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	4a03      	ldr	r2, [pc, #12]	@ (800aec0 <HAL_PCD_SuspendCallback+0x30>)
 800aeb2:	f043 0306 	orr.w	r3, r3, #6
 800aeb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	e000ed00 	.word	0xe000ed00

0800aec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fee2 	bl	8009c9c <USBD_LL_Resume>
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aee8:	4a28      	ldr	r2, [pc, #160]	@ (800af8c <USBD_LL_Init+0xac>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a26      	ldr	r2, [pc, #152]	@ (800af8c <USBD_LL_Init+0xac>)
 800aef4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aef8:	4b24      	ldr	r3, [pc, #144]	@ (800af8c <USBD_LL_Init+0xac>)
 800aefa:	4a25      	ldr	r2, [pc, #148]	@ (800af90 <USBD_LL_Init+0xb0>)
 800aefc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aefe:	4b23      	ldr	r3, [pc, #140]	@ (800af8c <USBD_LL_Init+0xac>)
 800af00:	2208      	movs	r2, #8
 800af02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af04:	4b21      	ldr	r3, [pc, #132]	@ (800af8c <USBD_LL_Init+0xac>)
 800af06:	2202      	movs	r2, #2
 800af08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af0a:	4b20      	ldr	r3, [pc, #128]	@ (800af8c <USBD_LL_Init+0xac>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af10:	4b1e      	ldr	r3, [pc, #120]	@ (800af8c <USBD_LL_Init+0xac>)
 800af12:	2200      	movs	r2, #0
 800af14:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af16:	4b1d      	ldr	r3, [pc, #116]	@ (800af8c <USBD_LL_Init+0xac>)
 800af18:	2200      	movs	r2, #0
 800af1a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af1c:	481b      	ldr	r0, [pc, #108]	@ (800af8c <USBD_LL_Init+0xac>)
 800af1e:	f7f9 fbed 	bl	80046fc <HAL_PCD_Init>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800af28:	f7f5 fd08 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af32:	2318      	movs	r3, #24
 800af34:	2200      	movs	r2, #0
 800af36:	2100      	movs	r1, #0
 800af38:	f7fb f8fe 	bl	8006138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af42:	2358      	movs	r3, #88	@ 0x58
 800af44:	2200      	movs	r2, #0
 800af46:	2180      	movs	r1, #128	@ 0x80
 800af48:	f7fb f8f6 	bl	8006138 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af52:	23c0      	movs	r3, #192	@ 0xc0
 800af54:	2200      	movs	r2, #0
 800af56:	2181      	movs	r1, #129	@ 0x81
 800af58:	f7fb f8ee 	bl	8006138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af62:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800af66:	2200      	movs	r2, #0
 800af68:	2101      	movs	r1, #1
 800af6a:	f7fb f8e5 	bl	8006138 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af78:	2200      	movs	r2, #0
 800af7a:	2182      	movs	r1, #130	@ 0x82
 800af7c:	f7fb f8dc 	bl	8006138 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	2000168c 	.word	0x2000168c
 800af90:	40005c00 	.word	0x40005c00

0800af94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afaa:	4618      	mov	r0, r3
 800afac:	f7f9 fc9c 	bl	80048e8 <HAL_PCD_Start>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 f94e 	bl	800b258 <USBD_Get_USB_Status>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	4608      	mov	r0, r1
 800afd4:	4611      	mov	r1, r2
 800afd6:	461a      	mov	r2, r3
 800afd8:	4603      	mov	r3, r0
 800afda:	70fb      	strb	r3, [r7, #3]
 800afdc:	460b      	mov	r3, r1
 800afde:	70bb      	strb	r3, [r7, #2]
 800afe0:	4613      	mov	r3, r2
 800afe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aff2:	78bb      	ldrb	r3, [r7, #2]
 800aff4:	883a      	ldrh	r2, [r7, #0]
 800aff6:	78f9      	ldrb	r1, [r7, #3]
 800aff8:	f7f9 fdf0 	bl	8004bdc <HAL_PCD_EP_Open>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f928 	bl	800b258 <USBD_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	460b      	mov	r3, r1
 800b020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b030:	78fa      	ldrb	r2, [r7, #3]
 800b032:	4611      	mov	r1, r2
 800b034:	4618      	mov	r0, r3
 800b036:	f7f9 fe2e 	bl	8004c96 <HAL_PCD_EP_Close>
 800b03a:	4603      	mov	r3, r0
 800b03c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	4618      	mov	r0, r3
 800b042:	f000 f909 	bl	800b258 <USBD_Get_USB_Status>
 800b046:	4603      	mov	r3, r0
 800b048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	4611      	mov	r1, r2
 800b072:	4618      	mov	r0, r3
 800b074:	f7f9 fed6 	bl	8004e24 <HAL_PCD_EP_SetStall>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f8ea 	bl	800b258 <USBD_Get_USB_Status>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b088:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0ac:	78fa      	ldrb	r2, [r7, #3]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f9 ff17 	bl	8004ee4 <HAL_PCD_EP_ClrStall>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f8cb 	bl	800b258 <USBD_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	da0b      	bge.n	800b104 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0f2:	68f9      	ldr	r1, [r7, #12]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	440b      	add	r3, r1
 800b0fe:	3312      	adds	r3, #18
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	e00b      	b.n	800b11c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	440b      	add	r3, r1
 800b116:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b11a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr

0800b126 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	4611      	mov	r1, r2
 800b144:	4618      	mov	r0, r3
 800b146:	f7f9 fd25 	bl	8004b94 <HAL_PCD_SetAddress>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 f881 	bl	800b258 <USBD_Get_USB_Status>
 800b156:	4603      	mov	r3, r0
 800b158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	461a      	mov	r2, r3
 800b170:	460b      	mov	r3, r1
 800b172:	72fb      	strb	r3, [r7, #11]
 800b174:	4613      	mov	r3, r2
 800b176:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b186:	893b      	ldrh	r3, [r7, #8]
 800b188:	7af9      	ldrb	r1, [r7, #11]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	f7f9 fe13 	bl	8004db6 <HAL_PCD_EP_Transmit>
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f85e 	bl	800b258 <USBD_Get_USB_Status>
 800b19c:	4603      	mov	r3, r0
 800b19e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b086      	sub	sp, #24
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	72fb      	strb	r3, [r7, #11]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b1cc:	893b      	ldrh	r3, [r7, #8]
 800b1ce:	7af9      	ldrb	r1, [r7, #11]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	f7f9 fda8 	bl	8004d26 <HAL_PCD_EP_Receive>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 f83b 	bl	800b258 <USBD_Get_USB_Status>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b202:	78fa      	ldrb	r2, [r7, #3]
 800b204:	4611      	mov	r1, r2
 800b206:	4618      	mov	r0, r3
 800b208:	f7f9 fdbe 	bl	8004d88 <HAL_PCD_EP_GetRxCount>
 800b20c:	4603      	mov	r3, r0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b220:	4b02      	ldr	r3, [pc, #8]	@ (800b22c <USBD_static_malloc+0x14>)
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	bc80      	pop	{r7}
 800b22a:	4770      	bx	lr
 800b22c:	20001964 	.word	0x20001964

0800b230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bc80      	pop	{r7}
 800b240:	4770      	bx	lr

0800b242 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b24e:	bf00      	nop
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	bc80      	pop	{r7}
 800b256:	4770      	bx	lr

0800b258 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d817      	bhi.n	800b29c <USBD_Get_USB_Status+0x44>
 800b26c:	a201      	add	r2, pc, #4	@ (adr r2, 800b274 <USBD_Get_USB_Status+0x1c>)
 800b26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b285 	.word	0x0800b285
 800b278:	0800b28b 	.word	0x0800b28b
 800b27c:	0800b291 	.word	0x0800b291
 800b280:	0800b297 	.word	0x0800b297
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
    break;
 800b288:	e00b      	b.n	800b2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b28a:	2302      	movs	r3, #2
 800b28c:	73fb      	strb	r3, [r7, #15]
    break;
 800b28e:	e008      	b.n	800b2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b290:	2301      	movs	r3, #1
 800b292:	73fb      	strb	r3, [r7, #15]
    break;
 800b294:	e005      	b.n	800b2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b296:	2302      	movs	r3, #2
 800b298:	73fb      	strb	r3, [r7, #15]
    break;
 800b29a:	e002      	b.n	800b2a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b29c:	2302      	movs	r3, #2
 800b29e:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a0:	bf00      	nop
  }
  return usb_status;
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bc80      	pop	{r7}
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop

0800b2b0 <_vsniprintf_r>:
 800b2b0:	b530      	push	{r4, r5, lr}
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	2c00      	cmp	r4, #0
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	b09b      	sub	sp, #108	@ 0x6c
 800b2bc:	da05      	bge.n	800b2ca <_vsniprintf_r+0x1a>
 800b2be:	238b      	movs	r3, #139	@ 0x8b
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c6:	b01b      	add	sp, #108	@ 0x6c
 800b2c8:	bd30      	pop	{r4, r5, pc}
 800b2ca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2d2:	f04f 0300 	mov.w	r3, #0
 800b2d6:	9319      	str	r3, [sp, #100]	@ 0x64
 800b2d8:	bf0c      	ite	eq
 800b2da:	4623      	moveq	r3, r4
 800b2dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2e0:	9302      	str	r3, [sp, #8]
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2e8:	9100      	str	r1, [sp, #0]
 800b2ea:	9104      	str	r1, [sp, #16]
 800b2ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2f0:	4669      	mov	r1, sp
 800b2f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b2f4:	f000 f9ac 	bl	800b650 <_svfiprintf_r>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	bfbc      	itt	lt
 800b2fc:	238b      	movlt	r3, #139	@ 0x8b
 800b2fe:	602b      	strlt	r3, [r5, #0]
 800b300:	2c00      	cmp	r4, #0
 800b302:	d0e0      	beq.n	800b2c6 <_vsniprintf_r+0x16>
 800b304:	2200      	movs	r2, #0
 800b306:	9b00      	ldr	r3, [sp, #0]
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	e7dc      	b.n	800b2c6 <_vsniprintf_r+0x16>

0800b30c <vsniprintf>:
 800b30c:	b507      	push	{r0, r1, r2, lr}
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	460a      	mov	r2, r1
 800b314:	4601      	mov	r1, r0
 800b316:	4803      	ldr	r0, [pc, #12]	@ (800b324 <vsniprintf+0x18>)
 800b318:	6800      	ldr	r0, [r0, #0]
 800b31a:	f7ff ffc9 	bl	800b2b0 <_vsniprintf_r>
 800b31e:	b003      	add	sp, #12
 800b320:	f85d fb04 	ldr.w	pc, [sp], #4
 800b324:	20000188 	.word	0x20000188

0800b328 <memset>:
 800b328:	4603      	mov	r3, r0
 800b32a:	4402      	add	r2, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <__errno>:
 800b338:	4b01      	ldr	r3, [pc, #4]	@ (800b340 <__errno+0x8>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20000188 	.word	0x20000188

0800b344 <__libc_init_array>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	2600      	movs	r6, #0
 800b348:	4d0c      	ldr	r5, [pc, #48]	@ (800b37c <__libc_init_array+0x38>)
 800b34a:	4c0d      	ldr	r4, [pc, #52]	@ (800b380 <__libc_init_array+0x3c>)
 800b34c:	1b64      	subs	r4, r4, r5
 800b34e:	10a4      	asrs	r4, r4, #2
 800b350:	42a6      	cmp	r6, r4
 800b352:	d109      	bne.n	800b368 <__libc_init_array+0x24>
 800b354:	f000 fc76 	bl	800bc44 <_init>
 800b358:	2600      	movs	r6, #0
 800b35a:	4d0a      	ldr	r5, [pc, #40]	@ (800b384 <__libc_init_array+0x40>)
 800b35c:	4c0a      	ldr	r4, [pc, #40]	@ (800b388 <__libc_init_array+0x44>)
 800b35e:	1b64      	subs	r4, r4, r5
 800b360:	10a4      	asrs	r4, r4, #2
 800b362:	42a6      	cmp	r6, r4
 800b364:	d105      	bne.n	800b372 <__libc_init_array+0x2e>
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	f855 3b04 	ldr.w	r3, [r5], #4
 800b36c:	4798      	blx	r3
 800b36e:	3601      	adds	r6, #1
 800b370:	e7ee      	b.n	800b350 <__libc_init_array+0xc>
 800b372:	f855 3b04 	ldr.w	r3, [r5], #4
 800b376:	4798      	blx	r3
 800b378:	3601      	adds	r6, #1
 800b37a:	e7f2      	b.n	800b362 <__libc_init_array+0x1e>
 800b37c:	0800c7f8 	.word	0x0800c7f8
 800b380:	0800c7f8 	.word	0x0800c7f8
 800b384:	0800c7f8 	.word	0x0800c7f8
 800b388:	0800c7fc 	.word	0x0800c7fc

0800b38c <__retarget_lock_acquire_recursive>:
 800b38c:	4770      	bx	lr

0800b38e <__retarget_lock_release_recursive>:
 800b38e:	4770      	bx	lr

0800b390 <memcpy>:
 800b390:	440a      	add	r2, r1
 800b392:	4291      	cmp	r1, r2
 800b394:	f100 33ff 	add.w	r3, r0, #4294967295
 800b398:	d100      	bne.n	800b39c <memcpy+0xc>
 800b39a:	4770      	bx	lr
 800b39c:	b510      	push	{r4, lr}
 800b39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a2:	4291      	cmp	r1, r2
 800b3a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3a8:	d1f9      	bne.n	800b39e <memcpy+0xe>
 800b3aa:	bd10      	pop	{r4, pc}

0800b3ac <_free_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	d040      	beq.n	800b436 <_free_r+0x8a>
 800b3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3b8:	1f0c      	subs	r4, r1, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	bfb8      	it	lt
 800b3be:	18e4      	addlt	r4, r4, r3
 800b3c0:	f000 f8de 	bl	800b580 <__malloc_lock>
 800b3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b438 <_free_r+0x8c>)
 800b3c6:	6813      	ldr	r3, [r2, #0]
 800b3c8:	b933      	cbnz	r3, 800b3d8 <_free_r+0x2c>
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	6014      	str	r4, [r2, #0]
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d4:	f000 b8da 	b.w	800b58c <__malloc_unlock>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d908      	bls.n	800b3ee <_free_r+0x42>
 800b3dc:	6820      	ldr	r0, [r4, #0]
 800b3de:	1821      	adds	r1, r4, r0
 800b3e0:	428b      	cmp	r3, r1
 800b3e2:	bf01      	itttt	eq
 800b3e4:	6819      	ldreq	r1, [r3, #0]
 800b3e6:	685b      	ldreq	r3, [r3, #4]
 800b3e8:	1809      	addeq	r1, r1, r0
 800b3ea:	6021      	streq	r1, [r4, #0]
 800b3ec:	e7ed      	b.n	800b3ca <_free_r+0x1e>
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	b10b      	cbz	r3, 800b3f8 <_free_r+0x4c>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d9fa      	bls.n	800b3ee <_free_r+0x42>
 800b3f8:	6811      	ldr	r1, [r2, #0]
 800b3fa:	1850      	adds	r0, r2, r1
 800b3fc:	42a0      	cmp	r0, r4
 800b3fe:	d10b      	bne.n	800b418 <_free_r+0x6c>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	4401      	add	r1, r0
 800b404:	1850      	adds	r0, r2, r1
 800b406:	4283      	cmp	r3, r0
 800b408:	6011      	str	r1, [r2, #0]
 800b40a:	d1e0      	bne.n	800b3ce <_free_r+0x22>
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4408      	add	r0, r1
 800b412:	6010      	str	r0, [r2, #0]
 800b414:	6053      	str	r3, [r2, #4]
 800b416:	e7da      	b.n	800b3ce <_free_r+0x22>
 800b418:	d902      	bls.n	800b420 <_free_r+0x74>
 800b41a:	230c      	movs	r3, #12
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	e7d6      	b.n	800b3ce <_free_r+0x22>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	1821      	adds	r1, r4, r0
 800b424:	428b      	cmp	r3, r1
 800b426:	bf01      	itttt	eq
 800b428:	6819      	ldreq	r1, [r3, #0]
 800b42a:	685b      	ldreq	r3, [r3, #4]
 800b42c:	1809      	addeq	r1, r1, r0
 800b42e:	6021      	streq	r1, [r4, #0]
 800b430:	6063      	str	r3, [r4, #4]
 800b432:	6054      	str	r4, [r2, #4]
 800b434:	e7cb      	b.n	800b3ce <_free_r+0x22>
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20001cc8 	.word	0x20001cc8

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0f      	ldr	r6, [pc, #60]	@ (800b47c <sbrk_aligned+0x40>)
 800b440:	460c      	mov	r4, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	4605      	mov	r5, r0
 800b446:	b911      	cbnz	r1, 800b44e <sbrk_aligned+0x12>
 800b448:	f000 fba8 	bl	800bb9c <_sbrk_r>
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f000 fba3 	bl	800bb9c <_sbrk_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d103      	bne.n	800b462 <sbrk_aligned+0x26>
 800b45a:	f04f 34ff 	mov.w	r4, #4294967295
 800b45e:	4620      	mov	r0, r4
 800b460:	bd70      	pop	{r4, r5, r6, pc}
 800b462:	1cc4      	adds	r4, r0, #3
 800b464:	f024 0403 	bic.w	r4, r4, #3
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d0f8      	beq.n	800b45e <sbrk_aligned+0x22>
 800b46c:	1a21      	subs	r1, r4, r0
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 fb94 	bl	800bb9c <_sbrk_r>
 800b474:	3001      	adds	r0, #1
 800b476:	d1f2      	bne.n	800b45e <sbrk_aligned+0x22>
 800b478:	e7ef      	b.n	800b45a <sbrk_aligned+0x1e>
 800b47a:	bf00      	nop
 800b47c:	20001cc4 	.word	0x20001cc4

0800b480 <_malloc_r>:
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b484:	1ccd      	adds	r5, r1, #3
 800b486:	f025 0503 	bic.w	r5, r5, #3
 800b48a:	3508      	adds	r5, #8
 800b48c:	2d0c      	cmp	r5, #12
 800b48e:	bf38      	it	cc
 800b490:	250c      	movcc	r5, #12
 800b492:	2d00      	cmp	r5, #0
 800b494:	4606      	mov	r6, r0
 800b496:	db01      	blt.n	800b49c <_malloc_r+0x1c>
 800b498:	42a9      	cmp	r1, r5
 800b49a:	d904      	bls.n	800b4a6 <_malloc_r+0x26>
 800b49c:	230c      	movs	r3, #12
 800b49e:	6033      	str	r3, [r6, #0]
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b57c <_malloc_r+0xfc>
 800b4aa:	f000 f869 	bl	800b580 <__malloc_lock>
 800b4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b2:	461c      	mov	r4, r3
 800b4b4:	bb44      	cbnz	r4, 800b508 <_malloc_r+0x88>
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7ff ffbf 	bl	800b43c <sbrk_aligned>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	d158      	bne.n	800b576 <_malloc_r+0xf6>
 800b4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b4c8:	4627      	mov	r7, r4
 800b4ca:	2f00      	cmp	r7, #0
 800b4cc:	d143      	bne.n	800b556 <_malloc_r+0xd6>
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d04b      	beq.n	800b56a <_malloc_r+0xea>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	eb04 0903 	add.w	r9, r4, r3
 800b4dc:	f000 fb5e 	bl	800bb9c <_sbrk_r>
 800b4e0:	4581      	cmp	r9, r0
 800b4e2:	d142      	bne.n	800b56a <_malloc_r+0xea>
 800b4e4:	6821      	ldr	r1, [r4, #0]
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	1a6d      	subs	r5, r5, r1
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7ff ffa6 	bl	800b43c <sbrk_aligned>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d03a      	beq.n	800b56a <_malloc_r+0xea>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	442b      	add	r3, r5
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	bb62      	cbnz	r2, 800b55c <_malloc_r+0xdc>
 800b502:	f8c8 7000 	str.w	r7, [r8]
 800b506:	e00f      	b.n	800b528 <_malloc_r+0xa8>
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	1b52      	subs	r2, r2, r5
 800b50c:	d420      	bmi.n	800b550 <_malloc_r+0xd0>
 800b50e:	2a0b      	cmp	r2, #11
 800b510:	d917      	bls.n	800b542 <_malloc_r+0xc2>
 800b512:	1961      	adds	r1, r4, r5
 800b514:	42a3      	cmp	r3, r4
 800b516:	6025      	str	r5, [r4, #0]
 800b518:	bf18      	it	ne
 800b51a:	6059      	strne	r1, [r3, #4]
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	bf08      	it	eq
 800b520:	f8c8 1000 	streq.w	r1, [r8]
 800b524:	5162      	str	r2, [r4, r5]
 800b526:	604b      	str	r3, [r1, #4]
 800b528:	4630      	mov	r0, r6
 800b52a:	f000 f82f 	bl	800b58c <__malloc_unlock>
 800b52e:	f104 000b 	add.w	r0, r4, #11
 800b532:	1d23      	adds	r3, r4, #4
 800b534:	f020 0007 	bic.w	r0, r0, #7
 800b538:	1ac2      	subs	r2, r0, r3
 800b53a:	bf1c      	itt	ne
 800b53c:	1a1b      	subne	r3, r3, r0
 800b53e:	50a3      	strne	r3, [r4, r2]
 800b540:	e7af      	b.n	800b4a2 <_malloc_r+0x22>
 800b542:	6862      	ldr	r2, [r4, #4]
 800b544:	42a3      	cmp	r3, r4
 800b546:	bf0c      	ite	eq
 800b548:	f8c8 2000 	streq.w	r2, [r8]
 800b54c:	605a      	strne	r2, [r3, #4]
 800b54e:	e7eb      	b.n	800b528 <_malloc_r+0xa8>
 800b550:	4623      	mov	r3, r4
 800b552:	6864      	ldr	r4, [r4, #4]
 800b554:	e7ae      	b.n	800b4b4 <_malloc_r+0x34>
 800b556:	463c      	mov	r4, r7
 800b558:	687f      	ldr	r7, [r7, #4]
 800b55a:	e7b6      	b.n	800b4ca <_malloc_r+0x4a>
 800b55c:	461a      	mov	r2, r3
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	42a3      	cmp	r3, r4
 800b562:	d1fb      	bne.n	800b55c <_malloc_r+0xdc>
 800b564:	2300      	movs	r3, #0
 800b566:	6053      	str	r3, [r2, #4]
 800b568:	e7de      	b.n	800b528 <_malloc_r+0xa8>
 800b56a:	230c      	movs	r3, #12
 800b56c:	4630      	mov	r0, r6
 800b56e:	6033      	str	r3, [r6, #0]
 800b570:	f000 f80c 	bl	800b58c <__malloc_unlock>
 800b574:	e794      	b.n	800b4a0 <_malloc_r+0x20>
 800b576:	6005      	str	r5, [r0, #0]
 800b578:	e7d6      	b.n	800b528 <_malloc_r+0xa8>
 800b57a:	bf00      	nop
 800b57c:	20001cc8 	.word	0x20001cc8

0800b580 <__malloc_lock>:
 800b580:	4801      	ldr	r0, [pc, #4]	@ (800b588 <__malloc_lock+0x8>)
 800b582:	f7ff bf03 	b.w	800b38c <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	20001cc0 	.word	0x20001cc0

0800b58c <__malloc_unlock>:
 800b58c:	4801      	ldr	r0, [pc, #4]	@ (800b594 <__malloc_unlock+0x8>)
 800b58e:	f7ff befe 	b.w	800b38e <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	20001cc0 	.word	0x20001cc0

0800b598 <__ssputs_r>:
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	461f      	mov	r7, r3
 800b59e:	688e      	ldr	r6, [r1, #8]
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	42be      	cmp	r6, r7
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	4690      	mov	r8, r2
 800b5a8:	680b      	ldr	r3, [r1, #0]
 800b5aa:	d82d      	bhi.n	800b608 <__ssputs_r+0x70>
 800b5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5b4:	d026      	beq.n	800b604 <__ssputs_r+0x6c>
 800b5b6:	6965      	ldr	r5, [r4, #20]
 800b5b8:	6909      	ldr	r1, [r1, #16]
 800b5ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5be:	eba3 0901 	sub.w	r9, r3, r1
 800b5c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5c6:	1c7b      	adds	r3, r7, #1
 800b5c8:	444b      	add	r3, r9
 800b5ca:	106d      	asrs	r5, r5, #1
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	bf38      	it	cc
 800b5d0:	461d      	movcc	r5, r3
 800b5d2:	0553      	lsls	r3, r2, #21
 800b5d4:	d527      	bpl.n	800b626 <__ssputs_r+0x8e>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7ff ff52 	bl	800b480 <_malloc_r>
 800b5dc:	4606      	mov	r6, r0
 800b5de:	b360      	cbz	r0, 800b63a <__ssputs_r+0xa2>
 800b5e0:	464a      	mov	r2, r9
 800b5e2:	6921      	ldr	r1, [r4, #16]
 800b5e4:	f7ff fed4 	bl	800b390 <memcpy>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	6126      	str	r6, [r4, #16]
 800b5f6:	444e      	add	r6, r9
 800b5f8:	6026      	str	r6, [r4, #0]
 800b5fa:	463e      	mov	r6, r7
 800b5fc:	6165      	str	r5, [r4, #20]
 800b5fe:	eba5 0509 	sub.w	r5, r5, r9
 800b602:	60a5      	str	r5, [r4, #8]
 800b604:	42be      	cmp	r6, r7
 800b606:	d900      	bls.n	800b60a <__ssputs_r+0x72>
 800b608:	463e      	mov	r6, r7
 800b60a:	4632      	mov	r2, r6
 800b60c:	4641      	mov	r1, r8
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	f000 faaa 	bl	800bb68 <memmove>
 800b614:	2000      	movs	r0, #0
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	1b9b      	subs	r3, r3, r6
 800b61a:	60a3      	str	r3, [r4, #8]
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	4433      	add	r3, r6
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b626:	462a      	mov	r2, r5
 800b628:	f000 fad6 	bl	800bbd8 <_realloc_r>
 800b62c:	4606      	mov	r6, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	d1e0      	bne.n	800b5f4 <__ssputs_r+0x5c>
 800b632:	4650      	mov	r0, sl
 800b634:	6921      	ldr	r1, [r4, #16]
 800b636:	f7ff feb9 	bl	800b3ac <_free_r>
 800b63a:	230c      	movs	r3, #12
 800b63c:	f8ca 3000 	str.w	r3, [sl]
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f04f 30ff 	mov.w	r0, #4294967295
 800b646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	e7e9      	b.n	800b622 <__ssputs_r+0x8a>
	...

0800b650 <_svfiprintf_r>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	4698      	mov	r8, r3
 800b656:	898b      	ldrh	r3, [r1, #12]
 800b658:	4607      	mov	r7, r0
 800b65a:	061b      	lsls	r3, r3, #24
 800b65c:	460d      	mov	r5, r1
 800b65e:	4614      	mov	r4, r2
 800b660:	b09d      	sub	sp, #116	@ 0x74
 800b662:	d510      	bpl.n	800b686 <_svfiprintf_r+0x36>
 800b664:	690b      	ldr	r3, [r1, #16]
 800b666:	b973      	cbnz	r3, 800b686 <_svfiprintf_r+0x36>
 800b668:	2140      	movs	r1, #64	@ 0x40
 800b66a:	f7ff ff09 	bl	800b480 <_malloc_r>
 800b66e:	6028      	str	r0, [r5, #0]
 800b670:	6128      	str	r0, [r5, #16]
 800b672:	b930      	cbnz	r0, 800b682 <_svfiprintf_r+0x32>
 800b674:	230c      	movs	r3, #12
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	f04f 30ff 	mov.w	r0, #4294967295
 800b67c:	b01d      	add	sp, #116	@ 0x74
 800b67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b682:	2340      	movs	r3, #64	@ 0x40
 800b684:	616b      	str	r3, [r5, #20]
 800b686:	2300      	movs	r3, #0
 800b688:	9309      	str	r3, [sp, #36]	@ 0x24
 800b68a:	2320      	movs	r3, #32
 800b68c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b690:	2330      	movs	r3, #48	@ 0x30
 800b692:	f04f 0901 	mov.w	r9, #1
 800b696:	f8cd 800c 	str.w	r8, [sp, #12]
 800b69a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b834 <_svfiprintf_r+0x1e4>
 800b69e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6a2:	4623      	mov	r3, r4
 800b6a4:	469a      	mov	sl, r3
 800b6a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6aa:	b10a      	cbz	r2, 800b6b0 <_svfiprintf_r+0x60>
 800b6ac:	2a25      	cmp	r2, #37	@ 0x25
 800b6ae:	d1f9      	bne.n	800b6a4 <_svfiprintf_r+0x54>
 800b6b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6b4:	d00b      	beq.n	800b6ce <_svfiprintf_r+0x7e>
 800b6b6:	465b      	mov	r3, fp
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff ff6b 	bl	800b598 <__ssputs_r>
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	f000 80a7 	beq.w	800b816 <_svfiprintf_r+0x1c6>
 800b6c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ca:	445a      	add	r2, fp
 800b6cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 809f 	beq.w	800b816 <_svfiprintf_r+0x1c6>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295
 800b6de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6e2:	f10a 0a01 	add.w	sl, sl, #1
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	9307      	str	r3, [sp, #28]
 800b6ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6f0:	4654      	mov	r4, sl
 800b6f2:	2205      	movs	r2, #5
 800b6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f8:	484e      	ldr	r0, [pc, #312]	@ (800b834 <_svfiprintf_r+0x1e4>)
 800b6fa:	f000 fa5f 	bl	800bbbc <memchr>
 800b6fe:	9a04      	ldr	r2, [sp, #16]
 800b700:	b9d8      	cbnz	r0, 800b73a <_svfiprintf_r+0xea>
 800b702:	06d0      	lsls	r0, r2, #27
 800b704:	bf44      	itt	mi
 800b706:	2320      	movmi	r3, #32
 800b708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b70c:	0711      	lsls	r1, r2, #28
 800b70e:	bf44      	itt	mi
 800b710:	232b      	movmi	r3, #43	@ 0x2b
 800b712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b716:	f89a 3000 	ldrb.w	r3, [sl]
 800b71a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b71c:	d015      	beq.n	800b74a <_svfiprintf_r+0xfa>
 800b71e:	4654      	mov	r4, sl
 800b720:	2000      	movs	r0, #0
 800b722:	f04f 0c0a 	mov.w	ip, #10
 800b726:	9a07      	ldr	r2, [sp, #28]
 800b728:	4621      	mov	r1, r4
 800b72a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b72e:	3b30      	subs	r3, #48	@ 0x30
 800b730:	2b09      	cmp	r3, #9
 800b732:	d94b      	bls.n	800b7cc <_svfiprintf_r+0x17c>
 800b734:	b1b0      	cbz	r0, 800b764 <_svfiprintf_r+0x114>
 800b736:	9207      	str	r2, [sp, #28]
 800b738:	e014      	b.n	800b764 <_svfiprintf_r+0x114>
 800b73a:	eba0 0308 	sub.w	r3, r0, r8
 800b73e:	fa09 f303 	lsl.w	r3, r9, r3
 800b742:	4313      	orrs	r3, r2
 800b744:	46a2      	mov	sl, r4
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	e7d2      	b.n	800b6f0 <_svfiprintf_r+0xa0>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	1d19      	adds	r1, r3, #4
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	9103      	str	r1, [sp, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	bfbb      	ittet	lt
 800b756:	425b      	neglt	r3, r3
 800b758:	f042 0202 	orrlt.w	r2, r2, #2
 800b75c:	9307      	strge	r3, [sp, #28]
 800b75e:	9307      	strlt	r3, [sp, #28]
 800b760:	bfb8      	it	lt
 800b762:	9204      	strlt	r2, [sp, #16]
 800b764:	7823      	ldrb	r3, [r4, #0]
 800b766:	2b2e      	cmp	r3, #46	@ 0x2e
 800b768:	d10a      	bne.n	800b780 <_svfiprintf_r+0x130>
 800b76a:	7863      	ldrb	r3, [r4, #1]
 800b76c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b76e:	d132      	bne.n	800b7d6 <_svfiprintf_r+0x186>
 800b770:	9b03      	ldr	r3, [sp, #12]
 800b772:	3402      	adds	r4, #2
 800b774:	1d1a      	adds	r2, r3, #4
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	9203      	str	r2, [sp, #12]
 800b77a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b838 <_svfiprintf_r+0x1e8>
 800b784:	2203      	movs	r2, #3
 800b786:	4650      	mov	r0, sl
 800b788:	7821      	ldrb	r1, [r4, #0]
 800b78a:	f000 fa17 	bl	800bbbc <memchr>
 800b78e:	b138      	cbz	r0, 800b7a0 <_svfiprintf_r+0x150>
 800b790:	2240      	movs	r2, #64	@ 0x40
 800b792:	9b04      	ldr	r3, [sp, #16]
 800b794:	eba0 000a 	sub.w	r0, r0, sl
 800b798:	4082      	lsls	r2, r0
 800b79a:	4313      	orrs	r3, r2
 800b79c:	3401      	adds	r4, #1
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a4:	2206      	movs	r2, #6
 800b7a6:	4825      	ldr	r0, [pc, #148]	@ (800b83c <_svfiprintf_r+0x1ec>)
 800b7a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ac:	f000 fa06 	bl	800bbbc <memchr>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d036      	beq.n	800b822 <_svfiprintf_r+0x1d2>
 800b7b4:	4b22      	ldr	r3, [pc, #136]	@ (800b840 <_svfiprintf_r+0x1f0>)
 800b7b6:	bb1b      	cbnz	r3, 800b800 <_svfiprintf_r+0x1b0>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	9303      	str	r3, [sp, #12]
 800b7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7c6:	4433      	add	r3, r6
 800b7c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ca:	e76a      	b.n	800b6a2 <_svfiprintf_r+0x52>
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d4:	e7a8      	b.n	800b728 <_svfiprintf_r+0xd8>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f04f 0c0a 	mov.w	ip, #10
 800b7dc:	4619      	mov	r1, r3
 800b7de:	3401      	adds	r4, #1
 800b7e0:	9305      	str	r3, [sp, #20]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e8:	3a30      	subs	r2, #48	@ 0x30
 800b7ea:	2a09      	cmp	r2, #9
 800b7ec:	d903      	bls.n	800b7f6 <_svfiprintf_r+0x1a6>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0c6      	beq.n	800b780 <_svfiprintf_r+0x130>
 800b7f2:	9105      	str	r1, [sp, #20]
 800b7f4:	e7c4      	b.n	800b780 <_svfiprintf_r+0x130>
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7fe:	e7f0      	b.n	800b7e2 <_svfiprintf_r+0x192>
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	462a      	mov	r2, r5
 800b806:	4638      	mov	r0, r7
 800b808:	4b0e      	ldr	r3, [pc, #56]	@ (800b844 <_svfiprintf_r+0x1f4>)
 800b80a:	a904      	add	r1, sp, #16
 800b80c:	f3af 8000 	nop.w
 800b810:	1c42      	adds	r2, r0, #1
 800b812:	4606      	mov	r6, r0
 800b814:	d1d6      	bne.n	800b7c4 <_svfiprintf_r+0x174>
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	065b      	lsls	r3, r3, #25
 800b81a:	f53f af2d 	bmi.w	800b678 <_svfiprintf_r+0x28>
 800b81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b820:	e72c      	b.n	800b67c <_svfiprintf_r+0x2c>
 800b822:	ab03      	add	r3, sp, #12
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	462a      	mov	r2, r5
 800b828:	4638      	mov	r0, r7
 800b82a:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <_svfiprintf_r+0x1f4>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	f000 f87d 	bl	800b92c <_printf_i>
 800b832:	e7ed      	b.n	800b810 <_svfiprintf_r+0x1c0>
 800b834:	0800c7c2 	.word	0x0800c7c2
 800b838:	0800c7c8 	.word	0x0800c7c8
 800b83c:	0800c7cc 	.word	0x0800c7cc
 800b840:	00000000 	.word	0x00000000
 800b844:	0800b599 	.word	0x0800b599

0800b848 <_printf_common>:
 800b848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b84c:	4616      	mov	r6, r2
 800b84e:	4698      	mov	r8, r3
 800b850:	688a      	ldr	r2, [r1, #8]
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	4607      	mov	r7, r0
 800b856:	4293      	cmp	r3, r2
 800b858:	bfb8      	it	lt
 800b85a:	4613      	movlt	r3, r2
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b862:	460c      	mov	r4, r1
 800b864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b868:	b10a      	cbz	r2, 800b86e <_printf_common+0x26>
 800b86a:	3301      	adds	r3, #1
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	0699      	lsls	r1, r3, #26
 800b872:	bf42      	ittt	mi
 800b874:	6833      	ldrmi	r3, [r6, #0]
 800b876:	3302      	addmi	r3, #2
 800b878:	6033      	strmi	r3, [r6, #0]
 800b87a:	6825      	ldr	r5, [r4, #0]
 800b87c:	f015 0506 	ands.w	r5, r5, #6
 800b880:	d106      	bne.n	800b890 <_printf_common+0x48>
 800b882:	f104 0a19 	add.w	sl, r4, #25
 800b886:	68e3      	ldr	r3, [r4, #12]
 800b888:	6832      	ldr	r2, [r6, #0]
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	42ab      	cmp	r3, r5
 800b88e:	dc2b      	bgt.n	800b8e8 <_printf_common+0xa0>
 800b890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b894:	6822      	ldr	r2, [r4, #0]
 800b896:	3b00      	subs	r3, #0
 800b898:	bf18      	it	ne
 800b89a:	2301      	movne	r3, #1
 800b89c:	0692      	lsls	r2, r2, #26
 800b89e:	d430      	bmi.n	800b902 <_printf_common+0xba>
 800b8a0:	4641      	mov	r1, r8
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8a8:	47c8      	blx	r9
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d023      	beq.n	800b8f6 <_printf_common+0xae>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	6922      	ldr	r2, [r4, #16]
 800b8b2:	f003 0306 	and.w	r3, r3, #6
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	bf14      	ite	ne
 800b8ba:	2500      	movne	r5, #0
 800b8bc:	6833      	ldreq	r3, [r6, #0]
 800b8be:	f04f 0600 	mov.w	r6, #0
 800b8c2:	bf08      	it	eq
 800b8c4:	68e5      	ldreq	r5, [r4, #12]
 800b8c6:	f104 041a 	add.w	r4, r4, #26
 800b8ca:	bf08      	it	eq
 800b8cc:	1aed      	subeq	r5, r5, r3
 800b8ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b8d2:	bf08      	it	eq
 800b8d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	bfc4      	itt	gt
 800b8dc:	1a9b      	subgt	r3, r3, r2
 800b8de:	18ed      	addgt	r5, r5, r3
 800b8e0:	42b5      	cmp	r5, r6
 800b8e2:	d11a      	bne.n	800b91a <_printf_common+0xd2>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e008      	b.n	800b8fa <_printf_common+0xb2>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	4641      	mov	r1, r8
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	47c8      	blx	r9
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	d103      	bne.n	800b8fe <_printf_common+0xb6>
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fe:	3501      	adds	r5, #1
 800b900:	e7c1      	b.n	800b886 <_printf_common+0x3e>
 800b902:	2030      	movs	r0, #48	@ 0x30
 800b904:	18e1      	adds	r1, r4, r3
 800b906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b910:	4422      	add	r2, r4
 800b912:	3302      	adds	r3, #2
 800b914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b918:	e7c2      	b.n	800b8a0 <_printf_common+0x58>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4622      	mov	r2, r4
 800b91e:	4641      	mov	r1, r8
 800b920:	4638      	mov	r0, r7
 800b922:	47c8      	blx	r9
 800b924:	3001      	adds	r0, #1
 800b926:	d0e6      	beq.n	800b8f6 <_printf_common+0xae>
 800b928:	3601      	adds	r6, #1
 800b92a:	e7d9      	b.n	800b8e0 <_printf_common+0x98>

0800b92c <_printf_i>:
 800b92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	7e0f      	ldrb	r7, [r1, #24]
 800b932:	4691      	mov	r9, r2
 800b934:	2f78      	cmp	r7, #120	@ 0x78
 800b936:	4680      	mov	r8, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	469a      	mov	sl, r3
 800b93c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b93e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b942:	d807      	bhi.n	800b954 <_printf_i+0x28>
 800b944:	2f62      	cmp	r7, #98	@ 0x62
 800b946:	d80a      	bhi.n	800b95e <_printf_i+0x32>
 800b948:	2f00      	cmp	r7, #0
 800b94a:	f000 80d1 	beq.w	800baf0 <_printf_i+0x1c4>
 800b94e:	2f58      	cmp	r7, #88	@ 0x58
 800b950:	f000 80b8 	beq.w	800bac4 <_printf_i+0x198>
 800b954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b95c:	e03a      	b.n	800b9d4 <_printf_i+0xa8>
 800b95e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b962:	2b15      	cmp	r3, #21
 800b964:	d8f6      	bhi.n	800b954 <_printf_i+0x28>
 800b966:	a101      	add	r1, pc, #4	@ (adr r1, 800b96c <_printf_i+0x40>)
 800b968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b96c:	0800b9c5 	.word	0x0800b9c5
 800b970:	0800b9d9 	.word	0x0800b9d9
 800b974:	0800b955 	.word	0x0800b955
 800b978:	0800b955 	.word	0x0800b955
 800b97c:	0800b955 	.word	0x0800b955
 800b980:	0800b955 	.word	0x0800b955
 800b984:	0800b9d9 	.word	0x0800b9d9
 800b988:	0800b955 	.word	0x0800b955
 800b98c:	0800b955 	.word	0x0800b955
 800b990:	0800b955 	.word	0x0800b955
 800b994:	0800b955 	.word	0x0800b955
 800b998:	0800bad7 	.word	0x0800bad7
 800b99c:	0800ba03 	.word	0x0800ba03
 800b9a0:	0800ba91 	.word	0x0800ba91
 800b9a4:	0800b955 	.word	0x0800b955
 800b9a8:	0800b955 	.word	0x0800b955
 800b9ac:	0800baf9 	.word	0x0800baf9
 800b9b0:	0800b955 	.word	0x0800b955
 800b9b4:	0800ba03 	.word	0x0800ba03
 800b9b8:	0800b955 	.word	0x0800b955
 800b9bc:	0800b955 	.word	0x0800b955
 800b9c0:	0800ba99 	.word	0x0800ba99
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	1d1a      	adds	r2, r3, #4
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6032      	str	r2, [r6, #0]
 800b9cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e09c      	b.n	800bb12 <_printf_i+0x1e6>
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	6820      	ldr	r0, [r4, #0]
 800b9dc:	1d19      	adds	r1, r3, #4
 800b9de:	6031      	str	r1, [r6, #0]
 800b9e0:	0606      	lsls	r6, r0, #24
 800b9e2:	d501      	bpl.n	800b9e8 <_printf_i+0xbc>
 800b9e4:	681d      	ldr	r5, [r3, #0]
 800b9e6:	e003      	b.n	800b9f0 <_printf_i+0xc4>
 800b9e8:	0645      	lsls	r5, r0, #25
 800b9ea:	d5fb      	bpl.n	800b9e4 <_printf_i+0xb8>
 800b9ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	da03      	bge.n	800b9fc <_printf_i+0xd0>
 800b9f4:	232d      	movs	r3, #45	@ 0x2d
 800b9f6:	426d      	negs	r5, r5
 800b9f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9fc:	230a      	movs	r3, #10
 800b9fe:	4858      	ldr	r0, [pc, #352]	@ (800bb60 <_printf_i+0x234>)
 800ba00:	e011      	b.n	800ba26 <_printf_i+0xfa>
 800ba02:	6821      	ldr	r1, [r4, #0]
 800ba04:	6833      	ldr	r3, [r6, #0]
 800ba06:	0608      	lsls	r0, r1, #24
 800ba08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba0c:	d402      	bmi.n	800ba14 <_printf_i+0xe8>
 800ba0e:	0649      	lsls	r1, r1, #25
 800ba10:	bf48      	it	mi
 800ba12:	b2ad      	uxthmi	r5, r5
 800ba14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba16:	6033      	str	r3, [r6, #0]
 800ba18:	bf14      	ite	ne
 800ba1a:	230a      	movne	r3, #10
 800ba1c:	2308      	moveq	r3, #8
 800ba1e:	4850      	ldr	r0, [pc, #320]	@ (800bb60 <_printf_i+0x234>)
 800ba20:	2100      	movs	r1, #0
 800ba22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba26:	6866      	ldr	r6, [r4, #4]
 800ba28:	2e00      	cmp	r6, #0
 800ba2a:	60a6      	str	r6, [r4, #8]
 800ba2c:	db05      	blt.n	800ba3a <_printf_i+0x10e>
 800ba2e:	6821      	ldr	r1, [r4, #0]
 800ba30:	432e      	orrs	r6, r5
 800ba32:	f021 0104 	bic.w	r1, r1, #4
 800ba36:	6021      	str	r1, [r4, #0]
 800ba38:	d04b      	beq.n	800bad2 <_printf_i+0x1a6>
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba40:	fb03 5711 	mls	r7, r3, r1, r5
 800ba44:	5dc7      	ldrb	r7, [r0, r7]
 800ba46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba4a:	462f      	mov	r7, r5
 800ba4c:	42bb      	cmp	r3, r7
 800ba4e:	460d      	mov	r5, r1
 800ba50:	d9f4      	bls.n	800ba3c <_printf_i+0x110>
 800ba52:	2b08      	cmp	r3, #8
 800ba54:	d10b      	bne.n	800ba6e <_printf_i+0x142>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	07df      	lsls	r7, r3, #31
 800ba5a:	d508      	bpl.n	800ba6e <_printf_i+0x142>
 800ba5c:	6923      	ldr	r3, [r4, #16]
 800ba5e:	6861      	ldr	r1, [r4, #4]
 800ba60:	4299      	cmp	r1, r3
 800ba62:	bfde      	ittt	le
 800ba64:	2330      	movle	r3, #48	@ 0x30
 800ba66:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba6e:	1b92      	subs	r2, r2, r6
 800ba70:	6122      	str	r2, [r4, #16]
 800ba72:	464b      	mov	r3, r9
 800ba74:	4621      	mov	r1, r4
 800ba76:	4640      	mov	r0, r8
 800ba78:	f8cd a000 	str.w	sl, [sp]
 800ba7c:	aa03      	add	r2, sp, #12
 800ba7e:	f7ff fee3 	bl	800b848 <_printf_common>
 800ba82:	3001      	adds	r0, #1
 800ba84:	d14a      	bne.n	800bb1c <_printf_i+0x1f0>
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	b004      	add	sp, #16
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	f043 0320 	orr.w	r3, r3, #32
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	2778      	movs	r7, #120	@ 0x78
 800ba9a:	4832      	ldr	r0, [pc, #200]	@ (800bb64 <_printf_i+0x238>)
 800ba9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	6831      	ldr	r1, [r6, #0]
 800baa4:	061f      	lsls	r7, r3, #24
 800baa6:	f851 5b04 	ldr.w	r5, [r1], #4
 800baaa:	d402      	bmi.n	800bab2 <_printf_i+0x186>
 800baac:	065f      	lsls	r7, r3, #25
 800baae:	bf48      	it	mi
 800bab0:	b2ad      	uxthmi	r5, r5
 800bab2:	6031      	str	r1, [r6, #0]
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	bf44      	itt	mi
 800bab8:	f043 0320 	orrmi.w	r3, r3, #32
 800babc:	6023      	strmi	r3, [r4, #0]
 800babe:	b11d      	cbz	r5, 800bac8 <_printf_i+0x19c>
 800bac0:	2310      	movs	r3, #16
 800bac2:	e7ad      	b.n	800ba20 <_printf_i+0xf4>
 800bac4:	4826      	ldr	r0, [pc, #152]	@ (800bb60 <_printf_i+0x234>)
 800bac6:	e7e9      	b.n	800ba9c <_printf_i+0x170>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	f023 0320 	bic.w	r3, r3, #32
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	e7f6      	b.n	800bac0 <_printf_i+0x194>
 800bad2:	4616      	mov	r6, r2
 800bad4:	e7bd      	b.n	800ba52 <_printf_i+0x126>
 800bad6:	6833      	ldr	r3, [r6, #0]
 800bad8:	6825      	ldr	r5, [r4, #0]
 800bada:	1d18      	adds	r0, r3, #4
 800badc:	6961      	ldr	r1, [r4, #20]
 800bade:	6030      	str	r0, [r6, #0]
 800bae0:	062e      	lsls	r6, r5, #24
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	d501      	bpl.n	800baea <_printf_i+0x1be>
 800bae6:	6019      	str	r1, [r3, #0]
 800bae8:	e002      	b.n	800baf0 <_printf_i+0x1c4>
 800baea:	0668      	lsls	r0, r5, #25
 800baec:	d5fb      	bpl.n	800bae6 <_printf_i+0x1ba>
 800baee:	8019      	strh	r1, [r3, #0]
 800baf0:	2300      	movs	r3, #0
 800baf2:	4616      	mov	r6, r2
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	e7bc      	b.n	800ba72 <_printf_i+0x146>
 800baf8:	6833      	ldr	r3, [r6, #0]
 800bafa:	2100      	movs	r1, #0
 800bafc:	1d1a      	adds	r2, r3, #4
 800bafe:	6032      	str	r2, [r6, #0]
 800bb00:	681e      	ldr	r6, [r3, #0]
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	4630      	mov	r0, r6
 800bb06:	f000 f859 	bl	800bbbc <memchr>
 800bb0a:	b108      	cbz	r0, 800bb10 <_printf_i+0x1e4>
 800bb0c:	1b80      	subs	r0, r0, r6
 800bb0e:	6060      	str	r0, [r4, #4]
 800bb10:	6863      	ldr	r3, [r4, #4]
 800bb12:	6123      	str	r3, [r4, #16]
 800bb14:	2300      	movs	r3, #0
 800bb16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb1a:	e7aa      	b.n	800ba72 <_printf_i+0x146>
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4649      	mov	r1, r9
 800bb20:	4640      	mov	r0, r8
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	47d0      	blx	sl
 800bb26:	3001      	adds	r0, #1
 800bb28:	d0ad      	beq.n	800ba86 <_printf_i+0x15a>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	079b      	lsls	r3, r3, #30
 800bb2e:	d413      	bmi.n	800bb58 <_printf_i+0x22c>
 800bb30:	68e0      	ldr	r0, [r4, #12]
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	4298      	cmp	r0, r3
 800bb36:	bfb8      	it	lt
 800bb38:	4618      	movlt	r0, r3
 800bb3a:	e7a6      	b.n	800ba8a <_printf_i+0x15e>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	4632      	mov	r2, r6
 800bb40:	4649      	mov	r1, r9
 800bb42:	4640      	mov	r0, r8
 800bb44:	47d0      	blx	sl
 800bb46:	3001      	adds	r0, #1
 800bb48:	d09d      	beq.n	800ba86 <_printf_i+0x15a>
 800bb4a:	3501      	adds	r5, #1
 800bb4c:	68e3      	ldr	r3, [r4, #12]
 800bb4e:	9903      	ldr	r1, [sp, #12]
 800bb50:	1a5b      	subs	r3, r3, r1
 800bb52:	42ab      	cmp	r3, r5
 800bb54:	dcf2      	bgt.n	800bb3c <_printf_i+0x210>
 800bb56:	e7eb      	b.n	800bb30 <_printf_i+0x204>
 800bb58:	2500      	movs	r5, #0
 800bb5a:	f104 0619 	add.w	r6, r4, #25
 800bb5e:	e7f5      	b.n	800bb4c <_printf_i+0x220>
 800bb60:	0800c7d3 	.word	0x0800c7d3
 800bb64:	0800c7e4 	.word	0x0800c7e4

0800bb68 <memmove>:
 800bb68:	4288      	cmp	r0, r1
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	eb01 0402 	add.w	r4, r1, r2
 800bb70:	d902      	bls.n	800bb78 <memmove+0x10>
 800bb72:	4284      	cmp	r4, r0
 800bb74:	4623      	mov	r3, r4
 800bb76:	d807      	bhi.n	800bb88 <memmove+0x20>
 800bb78:	1e43      	subs	r3, r0, #1
 800bb7a:	42a1      	cmp	r1, r4
 800bb7c:	d008      	beq.n	800bb90 <memmove+0x28>
 800bb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb86:	e7f8      	b.n	800bb7a <memmove+0x12>
 800bb88:	4601      	mov	r1, r0
 800bb8a:	4402      	add	r2, r0
 800bb8c:	428a      	cmp	r2, r1
 800bb8e:	d100      	bne.n	800bb92 <memmove+0x2a>
 800bb90:	bd10      	pop	{r4, pc}
 800bb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb9a:	e7f7      	b.n	800bb8c <memmove+0x24>

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	2300      	movs	r3, #0
 800bba0:	4d05      	ldr	r5, [pc, #20]	@ (800bbb8 <_sbrk_r+0x1c>)
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f5 fbbe 	bl	8001328 <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	20001cbc 	.word	0x20001cbc

0800bbbc <memchr>:
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	b2c9      	uxtb	r1, r1
 800bbc2:	4402      	add	r2, r0
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	d101      	bne.n	800bbce <memchr+0x12>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e003      	b.n	800bbd6 <memchr+0x1a>
 800bbce:	7804      	ldrb	r4, [r0, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	428c      	cmp	r4, r1
 800bbd4:	d1f6      	bne.n	800bbc4 <memchr+0x8>
 800bbd6:	bd10      	pop	{r4, pc}

0800bbd8 <_realloc_r>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4607      	mov	r7, r0
 800bbde:	4614      	mov	r4, r2
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	b921      	cbnz	r1, 800bbee <_realloc_r+0x16>
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	f7ff bc49 	b.w	800b480 <_malloc_r>
 800bbee:	b92a      	cbnz	r2, 800bbfc <_realloc_r+0x24>
 800bbf0:	f7ff fbdc 	bl	800b3ac <_free_r>
 800bbf4:	4625      	mov	r5, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	f000 f81a 	bl	800bc34 <_malloc_usable_size_r>
 800bc00:	4284      	cmp	r4, r0
 800bc02:	4606      	mov	r6, r0
 800bc04:	d802      	bhi.n	800bc0c <_realloc_r+0x34>
 800bc06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc0a:	d8f4      	bhi.n	800bbf6 <_realloc_r+0x1e>
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7ff fc36 	bl	800b480 <_malloc_r>
 800bc14:	4680      	mov	r8, r0
 800bc16:	b908      	cbnz	r0, 800bc1c <_realloc_r+0x44>
 800bc18:	4645      	mov	r5, r8
 800bc1a:	e7ec      	b.n	800bbf6 <_realloc_r+0x1e>
 800bc1c:	42b4      	cmp	r4, r6
 800bc1e:	4622      	mov	r2, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	bf28      	it	cs
 800bc24:	4632      	movcs	r2, r6
 800bc26:	f7ff fbb3 	bl	800b390 <memcpy>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7ff fbbd 	bl	800b3ac <_free_r>
 800bc32:	e7f1      	b.n	800bc18 <_realloc_r+0x40>

0800bc34 <_malloc_usable_size_r>:
 800bc34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc38:	1f18      	subs	r0, r3, #4
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfbc      	itt	lt
 800bc3e:	580b      	ldrlt	r3, [r1, r0]
 800bc40:	18c0      	addlt	r0, r0, r3
 800bc42:	4770      	bx	lr

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
