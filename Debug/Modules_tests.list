
Modules_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d774  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  0800d880  0800d880  0000e880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0b8  0800e0b8  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e0b8  0800e0b8  000101d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e0b8  0800e0b8  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0b8  0800e0b8  0000f0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0bc  0800e0bc  0000f0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e0c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  200001d8  0800e298  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  0800e298  00010df0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d63  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a1  00000000  00000000  00027f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001125  00000000  00000000  0002d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb2a  00000000  00000000  0002e77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3a9  00000000  00000000  0004a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095402  00000000  00000000  00066650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fba52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f8  00000000  00000000  000fba98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00101c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d868 	.word	0x0800d868

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800d868 	.word	0x0800d868

0800014c <UNER_SetTxFunction>:

/**
 * @brief Asigna la función de transmisión para el protocolo.
 */
void UNER_SetTxFunction(txFunct_t func)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    sendFunction = func;
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <UNER_SetTxFunction+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200001f4 	.word	0x200001f4

08000168 <UNER_Init>:

/**
 * @brief Inicializa las estructuras de transmisión y recepción.
 */
void UNER_Init(_sTx *tx, uint8_t *txBuf, _sRx *rx, uint8_t *rxBuf)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
 8000174:	603b      	str	r3, [r7, #0]
    tx->buf = txBuf;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
    tx->iw = 0;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	711a      	strb	r2, [r3, #4]
    tx->ir = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	715a      	strb	r2, [r3, #5]
    tx->length = SIZEBUFTX - 1;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	22ff      	movs	r2, #255	@ 0xff
 800018c:	719a      	strb	r2, [r3, #6]
    tx->chks = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	71da      	strb	r2, [r3, #7]

    rx->buf = rxBuf;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	601a      	str	r2, [r3, #0]
    rx->iw = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
    rx->ir = 0;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
    rx->header = HEADER_U;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
    rx->length = SIZEBUFRX - 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	71da      	strb	r2, [r3, #7]
    rx->size = 0;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	721a      	strb	r2, [r3, #8]
    rx->data = 0;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2200      	movs	r2, #0
 80001bc:	725a      	strb	r2, [r3, #9]
    rx->chks = 0;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2200      	movs	r2, #0
 80001c2:	729a      	strb	r2, [r3, #10]

    protocolState = HEADER_U;
 80001c4:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <UNER_Init+0x74>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
    CMDID = UNKNOWN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <UNER_Init+0x78>)
 80001cc:	22ff      	movs	r2, #255	@ 0xff
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200001f9 	.word	0x200001f9
 80001e0:	200001f8 	.word	0x200001f8

080001e4 <UNER_SerialTask>:

/**
 * @brief Lógica periódica de recepción y transmisión de datos.
 */
void UNER_SerialTask(_sTx *tx, _sRx *rx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (rx->iw != rx->ir) {
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	791a      	ldrb	r2, [r3, #4]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	795b      	ldrb	r3, [r3, #5]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d003      	beq.n	8000202 <UNER_SerialTask+0x1e>
        UNER_DecodeHeader(rx, tx);
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f000 f841 	bl	8000284 <UNER_DecodeHeader>
    }

    if (tx->ir != tx->iw) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	795a      	ldrb	r2, [r3, #5]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d016      	beq.n	800023c <UNER_SerialTask+0x58>
        sendFunction(&tx->buf[tx->ir]);
 800020e:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <UNER_SerialTask+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	7949      	ldrb	r1, [r1, #5]
 800021a:	440a      	add	r2, r1
 800021c:	4610      	mov	r0, r2
 800021e:	4798      	blx	r3
        tx->ir++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	715a      	strb	r2, [r3, #5]
        tx->ir &= tx->length;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	4013      	ands	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	715a      	strb	r2, [r3, #5]
    }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001f4 	.word	0x200001f4

08000248 <UNER_OnRxByte>:

/**
 * @brief Almacena cada byte recibido en el buffer.
 */
void UNER_OnRxByte(_sRx *rx, uint8_t data)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    rx->buf[rx->iw++] = data;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	b2c8      	uxtb	r0, r1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	7108      	strb	r0, [r1, #4]
 8000264:	4413      	add	r3, r2
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	701a      	strb	r2, [r3, #0]
    rx->iw &= rx->length;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	791a      	ldrb	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	4013      	ands	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	711a      	strb	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <UNER_DecodeHeader>:
 * @brief Decodifica el encabezado del protocolo UNER.
 * @param rx Buffer de recepción.
 * @param tx Buffer de transmisión.
 */
void UNER_DecodeHeader(_sRx *rx, _sTx *tx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint8_t i = rx->iw;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	73fb      	strb	r3, [r7, #15]
    while(rx->ir != i){
 8000294:	e0df      	b.n	8000456 <UNER_DecodeHeader+0x1d2>
        switch(rx->header){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	2b06      	cmp	r3, #6
 800029c:	f200 80c8 	bhi.w	8000430 <UNER_DecodeHeader+0x1ac>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <UNER_DecodeHeader+0x24>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002c5 	.word	0x080002c5
 80002ac:	080002df 	.word	0x080002df
 80002b0:	0800030b 	.word	0x0800030b
 80002b4:	08000337 	.word	0x08000337
 80002b8:	08000363 	.word	0x08000363
 80002bc:	0800037b 	.word	0x0800037b
 80002c0:	080003d1 	.word	0x080003d1
            case HEADER_U:
                if(rx->buf[rx->ir] == 'U'){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b55      	cmp	r3, #85	@ 0x55
 80002d2:	f040 80b1 	bne.w	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_N;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	719a      	strb	r2, [r3, #6]
                }
            break;
 80002dc:	e0ac      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_N:
                if(rx->buf[rx->ir] == 'N'){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7952      	ldrb	r2, [r2, #5]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80002ec:	d103      	bne.n	80002f6 <UNER_DecodeHeader+0x72>
                    rx->header = HEADER_E;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2202      	movs	r2, #2
 80002f2:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80002f4:	e0a1      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
            break;
 8000308:	e097      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_E:
                if(rx->buf[rx->ir] == 'E'){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7952      	ldrb	r2, [r2, #5]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b45      	cmp	r3, #69	@ 0x45
 8000318:	d103      	bne.n	8000322 <UNER_DecodeHeader+0x9e>
                    rx->header = HEADER_R;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2203      	movs	r2, #3
 800031e:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 8000320:	e08b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	715a      	strb	r2, [r3, #5]
            break;
 8000334:	e081      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_R:
                if(rx->buf[rx->ir] == 'R'){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7952      	ldrb	r2, [r2, #5]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	@ 0x52
 8000344:	d103      	bne.n	800034e <UNER_DecodeHeader+0xca>
                    rx->header = NBYTES;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 800034c:	e075      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	715a      	strb	r2, [r3, #5]
            break;
 8000360:	e06b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case NBYTES:
                rx->header = TOKEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2205      	movs	r2, #5
 8000366:	719a      	strb	r2, [r3, #6]
                rx->size = rx->buf[rx->ir];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7952      	ldrb	r2, [r2, #5]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	721a      	strb	r2, [r3, #8]
            break;
 8000378:	e05f      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case TOKEN:
                if(rx->buf[rx->ir] == ':'){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7952      	ldrb	r2, [r2, #5]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b3a      	cmp	r3, #58	@ 0x3a
 8000388:	d118      	bne.n	80003bc <UNER_DecodeHeader+0x138>
                    rx->chks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ rx->size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	729a      	strb	r2, [r3, #10]
                    rx->header = PAYLOAD;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2206      	movs	r2, #6
 800039c:	719a      	strb	r2, [r3, #6]
                    rx->data = rx->ir + 1;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	725a      	strb	r2, [r3, #9]
                    rx->data &= rx->length;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5a      	ldrb	r2, [r3, #9]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	725a      	strb	r2, [r3, #9]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80003ba:	e03e      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	715a      	strb	r2, [r3, #5]
            break;
 80003ce:	e034      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case PAYLOAD:
                rx->size--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	721a      	strb	r2, [r3, #8]
                if(rx->size > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <UNER_DecodeHeader+0x17a>
                    rx->chks ^= rx->buf[rx->ir];
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a9a      	ldrb	r2, [r3, #10]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	7949      	ldrb	r1, [r1, #5]
 80003f0:	440b      	add	r3, r1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	729a      	strb	r2, [r3, #10]
                    if(rx->buf[rx->ir] == rx->chks){
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
                    }
                    rx->header = HEADER_U;
                }
            break;
 80003fc:	e01d      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    if(rx->buf[rx->ir] == rx->chks){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7952      	ldrb	r2, [r2, #5]
 8000406:	4413      	add	r3, r2
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7a9b      	ldrb	r3, [r3, #10]
 800040e:	429a      	cmp	r2, r3
 8000410:	d10a      	bne.n	8000428 <UNER_DecodeHeader+0x1a4>
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7a52      	ldrb	r2, [r2, #9]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6839      	ldr	r1, [r7, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f822 	bl	800046c <UNER_DecodePayload>
                    rx->header = HEADER_U;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	719a      	strb	r2, [r3, #6]
            break;
 800042e:	e004      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            default:
                rx->header = HEADER_U;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	719a      	strb	r2, [r3, #6]
            break;
 8000436:	e000      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            break;
 8000438:	bf00      	nop
        }
        rx->ir++;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	3301      	adds	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	715a      	strb	r2, [r3, #5]
        rx->ir &= rx->length;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795a      	ldrb	r2, [r3, #5]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	79db      	ldrb	r3, [r3, #7]
 800044e:	4013      	ands	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	715a      	strb	r2, [r3, #5]
    while(rx->ir != i){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	429a      	cmp	r2, r3
 800045e:	f47f af1a 	bne.w	8000296 <UNER_DecodeHeader+0x12>
    }
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <UNER_DecodePayload>:

void UNER_DecodePayload(uint8_t bufRx,_sTx *tx, _sRx *rx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	73fb      	strb	r3, [r7, #15]
    switch(bufRx){
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2bf1      	cmp	r3, #241	@ 0xf1
 800047e:	d010      	beq.n	80004a2 <UNER_DecodePayload+0x36>
 8000480:	2bf1      	cmp	r3, #241	@ 0xf1
 8000482:	dc39      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 8000484:	2bf0      	cmp	r3, #240	@ 0xf0
 8000486:	d006      	beq.n	8000496 <UNER_DecodePayload+0x2a>
 8000488:	2bf0      	cmp	r3, #240	@ 0xf0
 800048a:	dc35      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d00e      	beq.n	80004ae <UNER_DecodePayload+0x42>
 8000490:	2b02      	cmp	r3, #2
 8000492:	d02b      	beq.n	80004ec <UNER_DecodePayload+0x80>
 8000494:	e030      	b.n	80004f8 <UNER_DecodePayload+0x8c>
        case ALIVE:
            UNER_WriteContentTx(bufRx, tx);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f83a 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004a0:	e030      	b.n	8000504 <UNER_DecodePayload+0x98>
        case FIRMWARE:
        	UNER_WriteContentTx(bufRx, tx);
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	68b9      	ldr	r1, [r7, #8]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f834 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004ac:	e02a      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIMOTORS:
			w.i8[0] = rx->buf[rx->data + 1];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a5b      	ldrb	r3, [r3, #9]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004c0:	701a      	strb	r2, [r3, #0]
			w.i8[1] = rx->buf[rx->data + 2];
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a5b      	ldrb	r3, [r3, #9]
 80004ca:	3302      	adds	r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004d4:	705a      	strb	r2, [r3, #1]

		    appCallback(UIMOTORS, &w);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <UNER_DecodePayload+0xa4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	490c      	ldr	r1, [pc, #48]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004dc:	2001      	movs	r0, #1
 80004de:	4798      	blx	r3

			UNER_WriteContentTx(bufRx, tx);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	68b9      	ldr	r1, [r7, #8]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f815 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004ea:	e00b      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIDISPLAY:
			UNER_WriteContentTx(bufRx, tx);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f80f 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004f6:	e005      	b.n	8000504 <UNER_DecodePayload+0x98>
        default:
            UNER_WriteContentTx(bufRx, tx);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	68b9      	ldr	r1, [r7, #8]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f809 	bl	8000514 <UNER_WriteContentTx>
        break;
 8000502:	bf00      	nop
    }
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200001fc 	.word	0x200001fc
 8000510:	20000200 	.word	0x20000200

08000514 <UNER_WriteContentTx>:

void UNER_WriteContentTx(uint8_t bufRx,_sTx *tx)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2bf1      	cmp	r3, #241	@ 0xf1
 8000524:	d01a      	beq.n	800055c <UNER_WriteContentTx+0x48>
 8000526:	2bf1      	cmp	r3, #241	@ 0xf1
 8000528:	dc50      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d006      	beq.n	800053c <UNER_WriteContentTx+0x28>
 800052e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000530:	dc4c      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d02a      	beq.n	800058c <UNER_WriteContentTx+0x78>
 8000536:	2b02      	cmp	r3, #2
 8000538:	d038      	beq.n	80005ac <UNER_WriteContentTx+0x98>
 800053a:	e047      	b.n	80005cc <UNER_WriteContentTx+0xb8>
        case ALIVE:
            UNER_PutHeaderOnTx(tx, ALIVE, 2);
 800053c:	2202      	movs	r2, #2
 800053e:	21f0      	movs	r1, #240	@ 0xf0
 8000540:	6838      	ldr	r0, [r7, #0]
 8000542:	f000 f861 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, ACK);
 8000546:	210d      	movs	r1, #13
 8000548:	6838      	ldr	r0, [r7, #0]
 800054a:	f000 f90c 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	79db      	ldrb	r3, [r3, #7]
 8000552:	4619      	mov	r1, r3
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 f906 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800055a:	e04d      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case FIRMWARE:
        	UNER_PutHeaderOnTx(tx, FIRMWARE, 18);
 800055c:	2212      	movs	r2, #18
 800055e:	21f1      	movs	r1, #241	@ 0xf1
 8000560:	6838      	ldr	r0, [r7, #0]
 8000562:	f000 f851 	bl	8000608 <UNER_PutHeaderOnTx>
			UNER_PutStrOnTx(tx, "+&DBG");
 8000566:	4926      	ldr	r1, [pc, #152]	@ (8000600 <UNER_WriteContentTx+0xec>)
 8000568:	6838      	ldr	r0, [r7, #0]
 800056a:	f000 f923 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutStrOnTx(tx, firmware);
 800056e:	4925      	ldr	r1, [pc, #148]	@ (8000604 <UNER_WriteContentTx+0xf0>)
 8000570:	6838      	ldr	r0, [r7, #0]
 8000572:	f000 f91f 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutByteOnTx(tx, '\n');
 8000576:	210a      	movs	r1, #10
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f000 f8f4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	4619      	mov	r1, r3
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f000 f8ee 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800058a:	e035      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIMOTORS:
        	UNER_PutHeaderOnTx(tx, UIMOTORS, 2);
 800058c:	2202      	movs	r2, #2
 800058e:	2101      	movs	r1, #1
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f000 f839 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 1);
 8000596:	2101      	movs	r1, #1
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 f8e4 	bl	8000766 <UNER_PutByteOnTx>
        	UNER_PutByteOnTx(tx, tx->chks);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	4619      	mov	r1, r3
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f000 f8de 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005aa:	e025      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIDISPLAY:
        	UNER_PutHeaderOnTx(tx, UIDISPLAY, 2);
 80005ac:	2202      	movs	r2, #2
 80005ae:	2102      	movs	r1, #2
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 f829 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 2);
 80005b6:	2102      	movs	r1, #2
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f000 f8d4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	79db      	ldrb	r3, [r3, #7]
 80005c2:	4619      	mov	r1, r3
 80005c4:	6838      	ldr	r0, [r7, #0]
 80005c6:	f000 f8ce 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005ca:	e015      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        default:
            UNER_PutHeaderOnTx(tx, (_eCmd)tx->buf[tx->iw], 2);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2202      	movs	r2, #2
 80005da:	4619      	mov	r1, r3
 80005dc:	6838      	ldr	r0, [r7, #0]
 80005de:	f000 f813 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, UNKNOWN);
 80005e2:	21ff      	movs	r1, #255	@ 0xff
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f000 f8be 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f000 f8b8 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005f6:	bf00      	nop
    }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800d880 	.word	0x0800d880
 8000604:	0800d8e0 	.word	0x0800d8e0

08000608 <UNER_PutHeaderOnTx>:

uint8_t UNER_PutHeaderOnTx(_sTx *tx, _eCmd ID, uint8_t N)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	70bb      	strb	r3, [r7, #2]
    tx->chks = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	71da      	strb	r2, [r3, #7]
    tx->buf[tx->iw++] = 'U';
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	b2c8      	uxtb	r0, r1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	7108      	strb	r0, [r1, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2255      	movs	r2, #85	@ 0x55
 8000632:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791a      	ldrb	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	4013      	ands	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'N';
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	b2c8      	uxtb	r0, r1
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	7108      	strb	r0, [r1, #4]
 8000654:	4413      	add	r3, r2
 8000656:	224e      	movs	r2, #78	@ 0x4e
 8000658:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791a      	ldrb	r2, [r3, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	799b      	ldrb	r3, [r3, #6]
 8000662:	4013      	ands	r3, r2
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'E';
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	1c59      	adds	r1, r3, #1
 8000674:	b2c8      	uxtb	r0, r1
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	7108      	strb	r0, [r1, #4]
 800067a:	4413      	add	r3, r2
 800067c:	2245      	movs	r2, #69	@ 0x45
 800067e:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791a      	ldrb	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	4013      	ands	r3, r2
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'R';
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	1c59      	adds	r1, r3, #1
 800069a:	b2c8      	uxtb	r0, r1
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	7108      	strb	r0, [r1, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	2252      	movs	r2, #82	@ 0x52
 80006a4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791a      	ldrb	r2, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = N + 1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	1c59      	adds	r1, r3, #1
 80006c0:	b2c8      	uxtb	r0, r1
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	7108      	strb	r0, [r1, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	78ba      	ldrb	r2, [r7, #2]
 80006ca:	3201      	adds	r2, #1
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791a      	ldrb	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ':';
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	b2c8      	uxtb	r0, r1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	7108      	strb	r0, [r1, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	223a      	movs	r2, #58	@ 0x3a
 80006f4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791a      	ldrb	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	4013      	ands	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ID;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	1c59      	adds	r1, r3, #1
 8000710:	b2c8      	uxtb	r0, r1
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	7108      	strb	r0, [r1, #4]
 8000716:	4413      	add	r3, r2
 8000718:	78fa      	ldrb	r2, [r7, #3]
 800071a:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791a      	ldrb	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	4013      	ands	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	711a      	strb	r2, [r3, #4]
    tx->chks ^= (N + 1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	b25a      	sxtb	r2, r3
 8000732:	78bb      	ldrb	r3, [r7, #2]
 8000734:	3301      	adds	r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4053      	eors	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	71da      	strb	r2, [r3, #7]
    tx->chks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ID ^ ':');
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	79da      	ldrb	r2, [r3, #7]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	79db      	ldrb	r3, [r3, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <UNER_PutByteOnTx>:

uint8_t UNER_PutByteOnTx(_sTx *tx, uint8_t byte)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
    tx->buf[tx->iw++] = byte;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	1c59      	adds	r1, r3, #1
 800077c:	b2c8      	uxtb	r0, r1
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	7108      	strb	r0, [r1, #4]
 8000782:	4413      	add	r3, r2
 8000784:	78fa      	ldrb	r2, [r7, #3]
 8000786:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	799b      	ldrb	r3, [r3, #6]
 8000790:	4013      	ands	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	711a      	strb	r2, [r3, #4]
    tx->chks ^= byte;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	79da      	ldrb	r2, [r3, #7]
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4053      	eors	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	79db      	ldrb	r3, [r3, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <UNER_PutStrOnTx>:

uint8_t UNER_PutStrOnTx(_sTx *tx, const char *str)
{
 80007b4:	b490      	push	{r4, r7}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    uint16_t generalIndex = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	81fb      	strh	r3, [r7, #14]
    while (str[generalIndex]) {
 80007c2:	e022      	b.n	800080a <UNER_PutStrOnTx+0x56>
        tx->buf[tx->iw++] = str[generalIndex];
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	1c58      	adds	r0, r3, #1
 80007d4:	b2c4      	uxtb	r4, r0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	7104      	strb	r4, [r0, #4]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
        tx->iw &= tx->length;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791a      	ldrb	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	4013      	ands	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	711a      	strb	r2, [r3, #4]
        tx->chks ^= str[generalIndex++];
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	81fa      	strh	r2, [r7, #14]
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	4053      	eors	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	71da      	strb	r2, [r3, #7]
    while (str[generalIndex]) {
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1d6      	bne.n	80007c4 <UNER_PutStrOnTx+0x10>
    }
    return tx->chks;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	79db      	ldrb	r3, [r3, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr

08000824 <UNER_SetAppCallback>:


void UNER_SetAppCallback(UNER_ApplicationCallback_t callback) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    appCallback = callback;
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <UNER_SetAppCallback+0x18>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000200 	.word	0x20000200

08000840 <UNER_AppHandler>:
/* USER CODE BEGIN 0 */
#include "main.h"


void UNER_AppHandler(_eCmd cmd, _uWork *data)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
    switch (cmd) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d10a      	bne.n	8000868 <UNER_AppHandler+0x28>
        case UIMOTORS:
            leftMotorSpeed = data->i8[0];
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f993 2000 	ldrsb.w	r2, [r3]
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <UNER_AppHandler+0x34>)
 800085a:	701a      	strb	r2, [r3, #0]
            rightMotorSpeed = data->i8[1];
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000862:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <UNER_AppHandler+0x38>)
 8000864:	701a      	strb	r2, [r3, #0]

            //ssd_update_done = 1;
            break;
 8000866:	e000      	b.n	800086a <UNER_AppHandler+0x2a>
        default:
            break;
 8000868:	bf00      	nop
    }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200005b4 	.word	0x200005b4
 8000878:	200005b5 	.word	0x200005b5

0800087c <Motor_Set>:

void Motor_Set(int motor, int8_t speed)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
    // Saturar valor a -100..100
    if (speed> 100) speed= 100;
 8000888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800088c:	2b64      	cmp	r3, #100	@ 0x64
 800088e:	dd01      	ble.n	8000894 <Motor_Set+0x18>
 8000890:	2364      	movs	r3, #100	@ 0x64
 8000892:	70fb      	strb	r3, [r7, #3]
    if (speed< -100) speed = -100;
 8000894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000898:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800089c:	da01      	bge.n	80008a2 <Motor_Set+0x26>
 800089e:	239c      	movs	r3, #156	@ 0x9c
 80008a0:	70fb      	strb	r3, [r7, #3]


    switch (motor) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d003      	beq.n	80008b0 <Motor_Set+0x34>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00c      	beq.n	80008c8 <Motor_Set+0x4c>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
            break;

        default:
            // Motor inválido, podés agregar error handling
            break;
 80008ae:	e016      	b.n	80008de <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <Motor_Set+0x6c>)
 80008b8:	f002 fa38 	bl	8002d2c <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <Motor_Set+0x70>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80008c6:	e00a      	b.n	80008de <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Motor_Set+0x6c>)
 80008ce:	f002 fa2d 	bl	8002d2c <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <Motor_Set+0x74>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80008da:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80008dc:	bf00      	nop
    }
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010800 	.word	0x40010800
 80008ec:	20000310 	.word	0x20000310
 80008f0:	20000358 	.word	0x20000358

080008f4 <Oled_Init>:

void Oled_Init(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if (!SSD1306_Init()) {
 80008f8:	f000 fb48 	bl	8000f8c <SSD1306_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <Oled_Init+0x12>
		while (1);
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <Oled_Init+0xe>
	}
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}

0800090a <sendByteOverUSB>:


void sendByteOverUSB(uint8_t *byte)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
    // CDC_Transmit_FS envía un buffer, acá mandamos 1 byte
    while(CDC_Transmit_FS(byte, 1) == USBD_BUSY){
 8000912:	bf00      	nop
 8000914:	2101      	movs	r1, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f00b ff0a 	bl	800c730 <CDC_Transmit_FS>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d0f8      	beq.n	8000914 <sendByteOverUSB+0xa>
        // Esperar o hacer algo mientras el USB está ocupado
    }
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f001 f8d3 	bl	8001adc <HAL_Init>

  /* USER CODE BEGIN Init */
  UNER_Init(&tx, bufTx, &rx, bufRx);
 8000936:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <main+0xd0>)
 8000938:	4a31      	ldr	r2, [pc, #196]	@ (8000a00 <main+0xd4>)
 800093a:	4932      	ldr	r1, [pc, #200]	@ (8000a04 <main+0xd8>)
 800093c:	4832      	ldr	r0, [pc, #200]	@ (8000a08 <main+0xdc>)
 800093e:	f7ff fc13 	bl	8000168 <UNER_Init>

  UNER_SetTxFunction(sendByteOverUSB);
 8000942:	4832      	ldr	r0, [pc, #200]	@ (8000a0c <main+0xe0>)
 8000944:	f7ff fc02 	bl	800014c <UNER_SetTxFunction>

  CDC_Attach_RX_Funct(&UNER_OnRxByte);
 8000948:	4831      	ldr	r0, [pc, #196]	@ (8000a10 <main+0xe4>)
 800094a:	f00b ff17 	bl	800c77c <CDC_Attach_RX_Funct>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f875 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f000 facd 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000956:	f000 faa5 	bl	8000ea4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800095a:	f00b fe0f 	bl	800c57c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800095e:	f000 f95f 	bl	8000c20 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000962:	f000 f98b 	bl	8000c7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000966:	f000 fa29 	bl	8000dbc <MX_TIM2_Init>
  MX_ADC1_Init();
 800096a:	f000 f8c5 	bl	8000af8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  UNER_SetAppCallback(UNER_AppHandler);
 800096e:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <main+0xe8>)
 8000970:	f7ff ff58 	bl	8000824 <UNER_SetAppCallback>


  // Inicializacion PWM motores
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4828      	ldr	r0, [pc, #160]	@ (8000a18 <main+0xec>)
 8000978:	f007 f972 	bl	8007c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800097c:	2104      	movs	r1, #4
 800097e:	4827      	ldr	r0, [pc, #156]	@ (8000a1c <main+0xf0>)
 8000980:	f007 f96e 	bl	8007c60 <HAL_TIM_PWM_Start>

  leftMotorSpeed = 0;
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <main+0xf4>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]

  Motor_Set(0, 0);
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff75 	bl	800087c <Motor_Set>
  Motor_Set(1, 80);
 8000992:	2150      	movs	r1, #80	@ 0x50
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff ff71 	bl	800087c <Motor_Set>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_valores, NUM_SENSORES);
 800099a:	2208      	movs	r2, #8
 800099c:	4921      	ldr	r1, [pc, #132]	@ (8000a24 <main+0xf8>)
 800099e:	4822      	ldr	r0, [pc, #136]	@ (8000a28 <main+0xfc>)
 80009a0:	f001 f9d6 	bl	8001d50 <HAL_ADC_Start_DMA>

  Oled_Init();
 80009a4:	f7ff ffa6 	bl	80008f4 <Oled_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UNER_SerialTask(&tx,&rx);
 80009a8:	4915      	ldr	r1, [pc, #84]	@ (8000a00 <main+0xd4>)
 80009aa:	4817      	ldr	r0, [pc, #92]	@ (8000a08 <main+0xdc>)
 80009ac:	f7ff fc1a 	bl	80001e4 <UNER_SerialTask>
	  lastUpdateTick = HAL_GetTick();
 80009b0:	f001 f8ec 	bl	8001b8c <HAL_GetTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <main+0x100>)
 80009b8:	6013      	str	r3, [r2, #0]

	  char texto[20];
	  SSD1306_GotoXY(0, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 fcdd 	bl	800137c <SSD1306_GotoXY>
	  sprintf(texto, "LSPD: %4d", leftMotorSpeed);
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <main+0xf4>)
 80009c4:	f993 3000 	ldrsb.w	r3, [r3]
 80009c8:	461a      	mov	r2, r3
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4918      	ldr	r1, [pc, #96]	@ (8000a30 <main+0x104>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00c fa9a 	bl	800cf08 <siprintf>
	  SSD1306_Puts("  ", &Font_7x10, SSD1306_COLOR_BLACK); // limpiar línea
 80009d4:	2200      	movs	r2, #0
 80009d6:	4917      	ldr	r1, [pc, #92]	@ (8000a34 <main+0x108>)
 80009d8:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <main+0x10c>)
 80009da:	f000 fd63 	bl	80014a4 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 0);
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fccb 	bl	800137c <SSD1306_GotoXY>
	  SSD1306_Puts(texto, &Font_7x10, SSD1306_COLOR_WHITE);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2201      	movs	r2, #1
 80009ea:	4912      	ldr	r1, [pc, #72]	@ (8000a34 <main+0x108>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fd59 	bl	80014a4 <SSD1306_Puts>
//		  SSD1306_Puts("  ", &Font_7x10, SSD1306_COLOR_BLACK); // limpiar línea
//		  SSD1306_GotoXY(0, 0);
//		  SSD1306_Puts(texto, &Font_7x10, SSD1306_COLOR_WHITE);
//	  }

	  SSD1306_Task();
 80009f2:	f000 fabd 	bl	8000f70 <SSD1306_Task>
  {
 80009f6:	bf00      	nop
 80009f8:	e7d6      	b.n	80009a8 <main+0x7c>
 80009fa:	bf00      	nop
 80009fc:	200003a0 	.word	0x200003a0
 8000a00:	200005a0 	.word	0x200005a0
 8000a04:	200004a0 	.word	0x200004a0
 8000a08:	200005ac 	.word	0x200005ac
 8000a0c:	0800090b 	.word	0x0800090b
 8000a10:	08000249 	.word	0x08000249
 8000a14:	08000841 	.word	0x08000841
 8000a18:	20000310 	.word	0x20000310
 8000a1c:	20000358 	.word	0x20000358
 8000a20:	200005b4 	.word	0x200005b4
 8000a24:	200005bc 	.word	0x200005bc
 8000a28:	20000204 	.word	0x20000204
 8000a2c:	200005b8 	.word	0x200005b8
 8000a30:	0800d888 	.word	0x0800d888
 8000a34:	20000004 	.word	0x20000004
 8000a38:	0800d894 	.word	0x0800d894

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a46:	2228      	movs	r2, #40	@ 0x28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00c fa7e 	bl	800cf4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a88:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fb8a 	bl	80071ac <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a9e:	f000 fa61 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2102      	movs	r1, #2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fdf6 	bl	80076b0 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000aca:	f000 fa4b 	bl	8000f64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ad6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f006 ff60 	bl	80079a4 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000aea:	f000 fa3b 	bl	8000f64 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	@ 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b08:	4b43      	ldr	r3, [pc, #268]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b0a:	4a44      	ldr	r2, [pc, #272]	@ (8000c1c <MX_ADC1_Init+0x124>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0e:	4b42      	ldr	r3, [pc, #264]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b16:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b24:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b36:	4838      	ldr	r0, [pc, #224]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b38:	f001 f832 	bl	8001ba0 <HAL_ADC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b42:	f000 fa0f 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4830      	ldr	r0, [pc, #192]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b58:	f001 f9ea 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 f9ff 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	482a      	ldr	r0, [pc, #168]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b70:	f001 f9de 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000b7a:	f000 f9f3 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4824      	ldr	r0, [pc, #144]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000b88:	f001 f9d2 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b92:	f000 f9e7 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b96:	2304      	movs	r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481e      	ldr	r0, [pc, #120]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000ba0:	f001 f9c6 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000baa:	f000 f9db 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000bb8:	f001 f9ba 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000bc2:	f000 f9cf 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000bd0:	f001 f9ae 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000bda:	f000 f9c3 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000bde:	2307      	movs	r3, #7
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000be8:	f001 f9a2 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000bf2:	f000 f9b7 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_ADC1_Init+0x120>)
 8000c00:	f001 f996 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c0a:	f000 f9ab 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	40012400 	.word	0x40012400

08000c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c26:	4a13      	ldr	r2, [pc, #76]	@ (8000c74 <MX_I2C1_Init+0x54>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c2c:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <MX_I2C1_Init+0x58>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_I2C1_Init+0x50>)
 8000c5e:	f002 f897 	bl	8002d90 <HAL_I2C_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c68:	f000 f97c 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000278 	.word	0x20000278
 8000c74:	40005400 	.word	0x40005400
 8000c78:	00061a80 	.word	0x00061a80

08000c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b096      	sub	sp, #88	@ 0x58
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00c f949 	bl	800cf4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cba:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8000db8 <MX_TIM1_Init+0x13c>)
 8000cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cc2:	2247      	movs	r2, #71	@ 0x47
 8000cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000ccc:	4b39      	ldr	r3, [pc, #228]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cce:	2263      	movs	r2, #99	@ 0x63
 8000cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd8:	4b36      	ldr	r3, [pc, #216]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce4:	4833      	ldr	r0, [pc, #204]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000ce6:	f006 ff13 	bl	8007b10 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cf0:	f000 f938 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000d02:	f007 f911 	bl	8007f28 <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d0c:	f000 f92a 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d10:	4828      	ldr	r0, [pc, #160]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000d12:	f006 ff4c 	bl	8007bae <HAL_TIM_PWM_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d1c:	f000 f922 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4821      	ldr	r0, [pc, #132]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000d30:	f007 fc72 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 f913 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3e:	2360      	movs	r3, #96	@ 0x60
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000d64:	f007 f81e 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d6e:	f000 f8f9 	bl	8000f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4807      	ldr	r0, [pc, #28]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000d96:	f007 fc9d 	bl	80086d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000da0:	f000 f8e0 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <MX_TIM1_Init+0x138>)
 8000da6:	f000 fd4b 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8000daa:	bf00      	nop
 8000dac:	3758      	adds	r7, #88	@ 0x58
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000310 	.word	0x20000310
 8000db8:	40012c00 	.word	0x40012c00

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000df4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000df6:	2247      	movs	r2, #71	@ 0x47
 8000df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e02:	2263      	movs	r2, #99	@ 0x63
 8000e04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b26      	ldr	r3, [pc, #152]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e12:	4823      	ldr	r0, [pc, #140]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e14:	f006 fe7c 	bl	8007b10 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000e1e:	f000 f8a1 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481c      	ldr	r0, [pc, #112]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e30:	f007 f87a 	bl	8007f28 <HAL_TIM_ConfigClockSource>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000e3a:	f000 f893 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e3e:	4818      	ldr	r0, [pc, #96]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e40:	f006 feb5 	bl	8007bae <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000e4a:	f000 f88b 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e5e:	f007 fbdb 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e68:	f000 f87c 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	@ 0x60
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2204      	movs	r2, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e84:	f006 ff8e 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000e8e:	f000 f869 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <MX_TIM2_Init+0xe4>)
 8000e94:	f000 fcd4 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000358 	.word	0x20000358

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_DMA_Init+0x48>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <MX_DMA_Init+0x48>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <MX_DMA_Init+0x48>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	200b      	movs	r0, #11
 8000ec8:	f001 fb03 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ecc:	200b      	movs	r0, #11
 8000ece:	f001 fb1c 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f001 fafb 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000edc:	2010      	movs	r0, #16
 8000ede:	f001 fb14 	bl	800250a <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <MX_GPIO_Init+0x70>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <SSD1306_Task>:

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_Task(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	if (ssd_update_done) {
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <SSD1306_Task+0x18>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SSD1306_Task+0x12>
		SSD1306_UpdateScreen(); // lanza siguiente refresco
 8000f7e:	f000 f90d 	bl	800119c <SSD1306_UpdateScreen>
	}
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000

08000f8c <SSD1306_Init>:
        }
    }
}


uint8_t SSD1306_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
    //USB_Debug("SSD1306_Init: Inicializando I2C...\r\n");
    SSD1306_I2C_Init();
 8000f92:	f000 faad 	bl	80014f0 <SSD1306_I2C_Init>

    //USB_Debug("SSD1306_Init: Comprobando I2C addr=0x%02X...\r\n", SSD1306_I2C_ADDR);
    if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 2000) != HAL_OK) {
 8000f96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2178      	movs	r1, #120	@ 0x78
 8000f9e:	485b      	ldr	r0, [pc, #364]	@ (800110c <SSD1306_Init+0x180>)
 8000fa0:	f002 faa2 	bl	80034e8 <HAL_I2C_IsDeviceReady>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SSD1306_Init+0x22>
        //USB_Debug("SSD1306_Init: ERROR, no responde I2C\r\n");
        return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e0a9      	b.n	8001102 <SSD1306_Init+0x176>
    }
    //USB_Debug("SSD1306_Init: I2C OK\r\n");

    //USB_Debug("SSD1306_Init: Retardo inicial...\r\n");
    for (volatile uint32_t p = 250000; p; --p) { __NOP(); }
 8000fae:	4b58      	ldr	r3, [pc, #352]	@ (8001110 <SSD1306_Init+0x184>)
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e003      	b.n	8000fbc <SSD1306_Init+0x30>
 8000fb4:	bf00      	nop
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f8      	bne.n	8000fb4 <SSD1306_Init+0x28>

    //USB_Debug("SSD1306_Init: Enviando comandos de init...\r\n");
    SSD1306_WRITECOMMAND(0xAE);
 8000fc2:	22ae      	movs	r2, #174	@ 0xae
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2078      	movs	r0, #120	@ 0x78
 8000fc8:	f000 faa6 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8000fcc:	2220      	movs	r2, #32
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2078      	movs	r0, #120	@ 0x78
 8000fd2:	f000 faa1 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	@ 0x78
 8000fdc:	f000 fa9c 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xB0);
 8000fe0:	22b0      	movs	r2, #176	@ 0xb0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f000 fa97 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xC8);
 8000fea:	22c8      	movs	r2, #200	@ 0xc8
 8000fec:	2100      	movs	r1, #0
 8000fee:	2078      	movs	r0, #120	@ 0x78
 8000ff0:	f000 fa92 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2078      	movs	r0, #120	@ 0x78
 8000ffa:	f000 fa8d 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8000ffe:	2210      	movs	r2, #16
 8001000:	2100      	movs	r1, #0
 8001002:	2078      	movs	r0, #120	@ 0x78
 8001004:	f000 fa88 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40);
 8001008:	2240      	movs	r2, #64	@ 0x40
 800100a:	2100      	movs	r1, #0
 800100c:	2078      	movs	r0, #120	@ 0x78
 800100e:	f000 fa83 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x81);
 8001012:	2281      	movs	r2, #129	@ 0x81
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	@ 0x78
 8001018:	f000 fa7e 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);
 800101c:	22ff      	movs	r2, #255	@ 0xff
 800101e:	2100      	movs	r1, #0
 8001020:	2078      	movs	r0, #120	@ 0x78
 8001022:	f000 fa79 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA1);
 8001026:	22a1      	movs	r2, #161	@ 0xa1
 8001028:	2100      	movs	r1, #0
 800102a:	2078      	movs	r0, #120	@ 0x78
 800102c:	f000 fa74 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA6);
 8001030:	22a6      	movs	r2, #166	@ 0xa6
 8001032:	2100      	movs	r1, #0
 8001034:	2078      	movs	r0, #120	@ 0x78
 8001036:	f000 fa6f 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA8);
 800103a:	22a8      	movs	r2, #168	@ 0xa8
 800103c:	2100      	movs	r1, #0
 800103e:	2078      	movs	r0, #120	@ 0x78
 8001040:	f000 fa6a 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x3F);
 8001044:	223f      	movs	r2, #63	@ 0x3f
 8001046:	2100      	movs	r1, #0
 8001048:	2078      	movs	r0, #120	@ 0x78
 800104a:	f000 fa65 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA4);
 800104e:	22a4      	movs	r2, #164	@ 0xa4
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	@ 0x78
 8001054:	f000 fa60 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD3);
 8001058:	22d3      	movs	r2, #211	@ 0xd3
 800105a:	2100      	movs	r1, #0
 800105c:	2078      	movs	r0, #120	@ 0x78
 800105e:	f000 fa5b 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2078      	movs	r0, #120	@ 0x78
 8001068:	f000 fa56 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD5);
 800106c:	22d5      	movs	r2, #213	@ 0xd5
 800106e:	2100      	movs	r1, #0
 8001070:	2078      	movs	r0, #120	@ 0x78
 8001072:	f000 fa51 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xF0);
 8001076:	22f0      	movs	r2, #240	@ 0xf0
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	@ 0x78
 800107c:	f000 fa4c 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD9);
 8001080:	22d9      	movs	r2, #217	@ 0xd9
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	@ 0x78
 8001086:	f000 fa47 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 800108a:	2222      	movs	r2, #34	@ 0x22
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	@ 0x78
 8001090:	f000 fa42 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDA);
 8001094:	22da      	movs	r2, #218	@ 0xda
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	@ 0x78
 800109a:	f000 fa3d 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x12);
 800109e:	2212      	movs	r2, #18
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	@ 0x78
 80010a4:	f000 fa38 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDB);
 80010a8:	22db      	movs	r2, #219	@ 0xdb
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	@ 0x78
 80010ae:	f000 fa33 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 80010b2:	2220      	movs	r2, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 fa2e 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x8D);
 80010bc:	228d      	movs	r2, #141	@ 0x8d
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 fa29 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14);
 80010c6:	2214      	movs	r2, #20
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 fa24 	bl	8001518 <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xAF);
 80010d0:	22af      	movs	r2, #175	@ 0xaf
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	@ 0x78
 80010d6:	f000 fa1f 	bl	8001518 <SSD1306_I2C_Write>

    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010da:	222e      	movs	r2, #46	@ 0x2e
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 fa1a 	bl	8001518 <SSD1306_I2C_Write>
    //USB_Debug("SSD1306_Init: Comandos init enviados\r\n");

    //USB_Debug("SSD1306_Init: Limpiando pantalla...\r\n");
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f8d3 	bl	8001290 <SSD1306_Fill>

    //USB_Debug("SSD1306_Init: Actualizando pantalla...\r\n");
    SSD1306_UpdateScreen_Blocking();
 80010ea:	f000 f815 	bl	8001118 <SSD1306_UpdateScreen_Blocking>

    SSD1306.CurrentX = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <SSD1306_Init+0x188>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <SSD1306_Init+0x188>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <SSD1306_Init+0x188>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	715a      	strb	r2, [r3, #5]

    //USB_Debug("SSD1306_Init: COMPLETADO\r\n");
    return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000278 	.word	0x20000278
 8001110:	0003d090 	.word	0x0003d090
 8001114:	200009d0 	.word	0x200009d0

08001118 <SSD1306_UpdateScreen_Blocking>:

void SSD1306_UpdateScreen_Blocking(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b0a4      	sub	sp, #144	@ 0x90
 800111c:	af02      	add	r7, sp, #8
    //USB_Debug("SSD1306_UpdateScreen_Blocking: Comenzando actualizacion (blocking)\r\n");

    // buffer temporal: 1 byte de control + 128 bytes de datos
    uint8_t buf[1 + SSD1306_WIDTH];

    for (uint8_t m = 0; m < 8; m++) {
 800111e:	2300      	movs	r3, #0
 8001120:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001124:	e02d      	b.n	8001182 <SSD1306_UpdateScreen_Blocking+0x6a>
        //USB_Debug("SSD1306_UpdateScreen_Blocking: Pagina %u\r\n", m);

        // 1) envía comandos de posicionamiento
        SSD1306_WRITECOMMAND(0xB0 + m);
 8001126:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800112a:	3b50      	subs	r3, #80	@ 0x50
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 f9f0 	bl	8001518 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	@ 0x78
 800113e:	f000 f9eb 	bl	8001518 <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 8001142:	2210      	movs	r2, #16
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	@ 0x78
 8001148:	f000 f9e6 	bl	8001518 <SSD1306_I2C_Write>

        // 2) monta el paquete de datos: control=0x40 + página de 128 bytes
        buf[0] = 0x40;
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	713b      	strb	r3, [r7, #4]
        memcpy(&buf[1],
               &SSD1306_Buffer[SSD1306_WIDTH * m],
 8001150:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <SSD1306_UpdateScreen_Blocking+0x7c>)
 8001158:	1899      	adds	r1, r3, r2
        memcpy(&buf[1],
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	3301      	adds	r3, #1
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	4618      	mov	r0, r3
 8001162:	f00b ff27 	bl	800cfb4 <memcpy>
               SSD1306_WIDTH);

        // 3) envía todo con HAL_I2C_Master_Transmit (bloqueante)
        if (HAL_I2C_Master_Transmit(
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2381      	movs	r3, #129	@ 0x81
 8001170:	2178      	movs	r1, #120	@ 0x78
 8001172:	4809      	ldr	r0, [pc, #36]	@ (8001198 <SSD1306_UpdateScreen_Blocking+0x80>)
 8001174:	f001 ff64 	bl	8003040 <HAL_I2C_Master_Transmit>
    for (uint8_t m = 0; m < 8; m++) {
 8001178:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800117c:	3301      	adds	r3, #1
 800117e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001182:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001186:	2b07      	cmp	r3, #7
 8001188:	d9cd      	bls.n	8001126 <SSD1306_UpdateScreen_Blocking+0xe>
            //USB_Debug("ERROR: I2C transmit pagina %u\r\n", m);
        }
    }

    //USB_Debug("SSD1306_UpdateScreen_Blocking: Pantalla actualizada (blocking)\r\n");
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3788      	adds	r7, #136	@ 0x88
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200005d0 	.word	0x200005d0
 8001198:	20000278 	.word	0x20000278

0800119c <SSD1306_UpdateScreen>:



void SSD1306_UpdateScreen(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
    static uint8_t page  = 0;
    static uint8_t state = 0; // 0=idle,1=prep,2=waiting DMA
    uint8_t counter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]

    switch (state) {
 80011a6:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <SSD1306_UpdateScreen+0xdc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d03c      	beq.n	8001228 <SSD1306_UpdateScreen+0x8c>
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	dc5e      	bgt.n	8001270 <SSD1306_UpdateScreen+0xd4>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <SSD1306_UpdateScreen+0x20>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d00e      	beq.n	80011d8 <SSD1306_UpdateScreen+0x3c>
            		////USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
            	}
            }
            break;
    }
}
 80011ba:	e059      	b.n	8001270 <SSD1306_UpdateScreen+0xd4>
        	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c0:	482e      	ldr	r0, [pc, #184]	@ (800127c <SSD1306_UpdateScreen+0xe0>)
 80011c2:	f001 fdcb 	bl	8002d5c <HAL_GPIO_TogglePin>
            page             = 0;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
            ssd_update_done  = 0;  // marca que el refresco está en curso
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <SSD1306_UpdateScreen+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
            state            = 1;
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <SSD1306_UpdateScreen+0xdc>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
            if (!i2c1_tx_busy) {
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <SSD1306_UpdateScreen+0xec>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d143      	bne.n	800126a <SSD1306_UpdateScreen+0xce>
                SSD1306_WRITECOMMAND(0xB0 + page);
 80011e2:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3b50      	subs	r3, #80	@ 0x50
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	@ 0x78
 80011f0:	f000 f992 	bl	8001518 <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x00);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	@ 0x78
 80011fa:	f000 f98d 	bl	8001518 <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x10);
 80011fe:	2210      	movs	r2, #16
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	@ 0x78
 8001204:	f000 f988 	bl	8001518 <SSD1306_I2C_Write>
                uint8_t *buf = &SSD1306_Buffer[SSD1306_WIDTH * page];
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <SSD1306_UpdateScreen+0xf0>)
 8001210:	4413      	add	r3, r2
 8001212:	603b      	str	r3, [r7, #0]
                SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, buf, SSD1306_WIDTH);
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 f99a 	bl	8001554 <SSD1306_I2C_WriteMulti>
                state = 2;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <SSD1306_UpdateScreen+0xdc>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
            break;
 8001226:	e020      	b.n	800126a <SSD1306_UpdateScreen+0xce>
            if (!i2c1_tx_busy) {
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <SSD1306_UpdateScreen+0xec>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d114      	bne.n	800125c <SSD1306_UpdateScreen+0xc0>
                page++;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 800123c:	701a      	strb	r2, [r3, #0]
                if (page < 8) {
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <SSD1306_UpdateScreen+0xe4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d803      	bhi.n	800124e <SSD1306_UpdateScreen+0xb2>
                    state = 1;  // preparamos la siguiente página
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <SSD1306_UpdateScreen+0xdc>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
            break;
 800124c:	e00f      	b.n	800126e <SSD1306_UpdateScreen+0xd2>
                    ssd_update_done = 1;
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <SSD1306_UpdateScreen+0xe8>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
                    state           = 0;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <SSD1306_UpdateScreen+0xdc>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
            break;
 800125a:	e008      	b.n	800126e <SSD1306_UpdateScreen+0xd2>
            	if (counter <= 10) {
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d805      	bhi.n	800126e <SSD1306_UpdateScreen+0xd2>
            		counter++;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	3301      	adds	r3, #1
 8001266:	71fb      	strb	r3, [r7, #7]
            break;
 8001268:	e001      	b.n	800126e <SSD1306_UpdateScreen+0xd2>
            break;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <SSD1306_UpdateScreen+0xd4>
            break;
 800126e:	bf00      	nop
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000ad8 	.word	0x20000ad8
 800127c:	40011000 	.word	0x40011000
 8001280:	20000ad9 	.word	0x20000ad9
 8001284:	20000000 	.word	0x20000000
 8001288:	200005b6 	.word	0x200005b6
 800128c:	200005d0 	.word	0x200005d0

08001290 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <SSD1306_Fill+0x14>
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <SSD1306_Fill+0x16>
 80012a4:	23ff      	movs	r3, #255	@ 0xff
 80012a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012aa:	4619      	mov	r1, r3
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <SSD1306_Fill+0x2c>)
 80012ae:	f00b fe4d 	bl	800cf4c <memset>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200005d0 	.word	0x200005d0

080012c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	70fb      	strb	r3, [r7, #3]
	if (
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012d6:	d848      	bhi.n	800136a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	2b3f      	cmp	r3, #63	@ 0x3f
 80012dc:	d845      	bhi.n	800136a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SSD1306_DrawPixel+0xb4>)
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d11a      	bne.n	8001330 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012fa:	88fa      	ldrh	r2, [r7, #6]
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	b298      	uxth	r0, r3
 8001302:	4603      	mov	r3, r0
 8001304:	01db      	lsls	r3, r3, #7
 8001306:	4413      	add	r3, r2
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <SSD1306_DrawPixel+0xb8>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	b25a      	sxtb	r2, r3
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b259      	sxtb	r1, r3
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	4413      	add	r3, r2
 8001328:	b2c9      	uxtb	r1, r1
 800132a:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <SSD1306_DrawPixel+0xb8>)
 800132c:	54d1      	strb	r1, [r2, r3]
 800132e:	e01d      	b.n	800136c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	b298      	uxth	r0, r3
 8001338:	4603      	mov	r3, r0
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4413      	add	r3, r2
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <SSD1306_DrawPixel+0xb8>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	b25a      	sxtb	r2, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	b25b      	sxtb	r3, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	b259      	sxtb	r1, r3
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	4603      	mov	r3, r0
 800135e:	01db      	lsls	r3, r3, #7
 8001360:	4413      	add	r3, r2
 8001362:	b2c9      	uxtb	r1, r1
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <SSD1306_DrawPixel+0xb8>)
 8001366:	54d1      	strb	r1, [r2, r3]
 8001368:	e000      	b.n	800136c <SSD1306_DrawPixel+0xac>
		return;
 800136a:	bf00      	nop
	}
}
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	200009d0 	.word	0x200009d0
 8001378:	200005d0 	.word	0x200005d0

0800137c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	4613      	mov	r3, r2
 800138a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800138c:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SSD1306_GotoXY+0x28>)
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <SSD1306_GotoXY+0x28>)
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	8053      	strh	r3, [r2, #2]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200009d0 	.word	0x200009d0

080013a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013b8:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <SSD1306_Putc+0xf8>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
	if (
 80013c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013c6:	dc07      	bgt.n	80013d8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013c8:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <SSD1306_Putc+0xf8>)
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80013d6:	dd01      	ble.n	80013dc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e05d      	b.n	8001498 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e04b      	b.n	800147a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3b20      	subs	r3, #32
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	7849      	ldrb	r1, [r1, #1]
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	e030      	b.n	8001468 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001416:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <SSD1306_Putc+0xf8>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b298      	uxth	r0, r3
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <SSD1306_Putc+0xf8>)
 8001424:	885a      	ldrh	r2, [r3, #2]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	79ba      	ldrb	r2, [r7, #6]
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff ff45 	bl	80012c0 <SSD1306_DrawPixel>
 8001436:	e014      	b.n	8001462 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <SSD1306_Putc+0xf8>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b298      	uxth	r0, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <SSD1306_Putc+0xf8>)
 8001446:	885a      	ldrh	r2, [r3, #2]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4413      	add	r3, r2
 800144e:	b299      	uxth	r1, r3
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	f7ff ff2f 	bl	80012c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4293      	cmp	r3, r2
 8001472:	d3c8      	bcc.n	8001406 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	461a      	mov	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	4293      	cmp	r3, r2
 8001484:	d3ad      	bcc.n	80013e2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <SSD1306_Putc+0xf8>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <SSD1306_Putc+0xf8>)
 8001494:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001496:	79fb      	ldrb	r3, [r7, #7]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200009d0 	.word	0x200009d0

080014a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	4613      	mov	r3, r2
 80014b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014b2:	e012      	b.n	80014da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff73 	bl	80013a8 <SSD1306_Putc>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d002      	beq.n	80014d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	e008      	b.n	80014e6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e8      	bne.n	80014b4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <SSD1306_I2C_Init+0x24>)
 80014f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fa:	e002      	b.n	8001502 <SSD1306_I2C_Init+0x12>
		p--;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <SSD1306_I2C_Init+0xc>
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	0003d090 	.word	0x0003d090

08001518 <SSD1306_I2C_Write>:



void SSD1306_I2C_Write(uint8_t address, uint8_t control, uint8_t databyte) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	460b      	mov	r3, r1
 8001524:	71bb      	strb	r3, [r7, #6]
 8001526:	4613      	mov	r3, r2
 8001528:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2] = { control, databyte };
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	733b      	strb	r3, [r7, #12]
 800152e:	797b      	ldrb	r3, [r7, #5]
 8001530:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, address, buf, 2, HAL_MAX_DELAY);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	b299      	uxth	r1, r3
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	4803      	ldr	r0, [pc, #12]	@ (8001550 <SSD1306_I2C_Write+0x38>)
 8001544:	f001 fd7c 	bl	8003040 <HAL_I2C_Master_Transmit>
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000278 	.word	0x20000278

08001554 <SSD1306_I2C_WriteMulti>:



void SSD1306_I2C_WriteMulti(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	603a      	str	r2, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	460b      	mov	r3, r1
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
    dma_tx_buffer[0] = ctrl;
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <SSD1306_I2C_WriteMulti+0x68>)
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	7013      	strb	r3, [r2, #0]
    memcpy(&dma_tx_buffer[1], data, len);
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4812      	ldr	r0, [pc, #72]	@ (80015c0 <SSD1306_I2C_WriteMulti+0x6c>)
 8001578:	f00b fd1c 	bl	800cfb4 <memcpy>

    // **Sólo** datos: espera si un envío anterior sigue vivo
    while (i2c1_tx_busy) {
 800157c:	e000      	b.n	8001580 <SSD1306_I2C_WriteMulti+0x2c>
        __WFI();
 800157e:	bf30      	wfi
    while (i2c1_tx_busy) {
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <SSD1306_I2C_WriteMulti+0x70>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <SSD1306_I2C_WriteMulti+0x2a>
    }

    // 1) DEBUG: parámetros de la transmisión
    i2c1_tx_busy = 1;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <SSD1306_I2C_WriteMulti+0x70>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Write_DMA(
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	2240      	movs	r2, #64	@ 0x40
 800159c:	2178      	movs	r1, #120	@ 0x78
 800159e:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <SSD1306_I2C_WriteMulti+0x74>)
 80015a0:	f001 fe4c 	bl	800323c <HAL_I2C_Mem_Write_DMA>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
    /*//USB_Debug("Transmit_DMA returned %d, CCR=0x%08lX, CNDTR=%u\r\n",
              ret,
              DMA1_Channel6->CCR,
              DMA1_Channel6->CNDTR);*/

    if (ret != HAL_OK) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <SSD1306_I2C_WriteMulti+0x60>
        // Error de DMA: libéralo para no colgarte
        i2c1_tx_busy = 0;
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SSD1306_I2C_WriteMulti+0x70>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
    }
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200009d8 	.word	0x200009d8
 80015c0:	200009d9 	.word	0x200009d9
 80015c4:	200005b6 	.word	0x200005b6
 80015c8:	20000278 	.word	0x20000278

080015cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <HAL_MspInit+0x5c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <HAL_MspInit+0x5c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_MspInit+0x60>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_MspInit+0x60>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000

08001630 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a28      	ldr	r2, [pc, #160]	@ (80016ec <HAL_ADC_MspInit+0xbc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d149      	bne.n	80016e4 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_ADC_MspInit+0xc0>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001680:	23ff      	movs	r3, #255	@ 0xff
 8001682:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4819      	ldr	r0, [pc, #100]	@ (80016f4 <HAL_ADC_MspInit+0xc4>)
 8001690:	f001 f9c8 	bl	8002a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 8001696:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_ADC_MspInit+0xcc>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016ca:	f000 ff39 	bl	8002540 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80016d4:	f7ff fc46 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016dc:	621a      	str	r2, [r3, #32]
 80016de:	4a06      	ldr	r2, [pc, #24]	@ (80016f8 <HAL_ADC_MspInit+0xc8>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40012400 	.word	0x40012400
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	20000234 	.word	0x20000234
 80016fc:	40020008 	.word	0x40020008

08001700 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <HAL_I2C_MspInit+0xcc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d151      	bne.n	80017c4 <HAL_I2C_MspInit+0xc4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	2312      	movs	r3, #18
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4822      	ldr	r0, [pc, #136]	@ (80017d4 <HAL_I2C_MspInit+0xd4>)
 800174c:	f001 f96a 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 8001756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_I2C_MspInit+0xd0>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <HAL_I2C_MspInit+0xdc>)
 800176c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 8001770:	2210      	movs	r2, #16
 8001772:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 800179a:	f000 fed1 	bl	8002540 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80017a4:	f7ff fbde 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 80017ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <HAL_I2C_MspInit+0xd8>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	201f      	movs	r0, #31
 80017ba:	f000 fe8a 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017be:	201f      	movs	r0, #31
 80017c0:	f000 fea3 	bl	800250a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	200002cc 	.word	0x200002cc
 80017dc:	4002006c 	.word	0x4002006c

080017e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_TIM_Base_MspInit+0x58>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10c      	bne.n	800180c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 80017f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800180a:	e010      	b.n	800182e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001814:	d10b      	bne.n	800182e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_TIM_Base_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40012c00 	.word	0x40012c00
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_TIM_MspPostInit+0xbc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d119      	bne.n	8001894 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a26      	ldr	r2, [pc, #152]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	481d      	ldr	r0, [pc, #116]	@ (8001904 <HAL_TIM_MspPostInit+0xc4>)
 800188e:	f001 f8c9 	bl	8002a24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001892:	e02e      	b.n	80018f2 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189c:	d129      	bne.n	80018f2 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_TIM_MspPostInit+0xc0>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b6:	2308      	movs	r3, #8
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2302      	movs	r3, #2
 80018c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	480f      	ldr	r0, [pc, #60]	@ (8001908 <HAL_TIM_MspPostInit+0xc8>)
 80018ca:	f001 f8ab 	bl	8002a24 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_TIM_MspPostInit+0xcc>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_TIM_MspPostInit+0xcc>)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	6053      	str	r3, [r2, #4]
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00
 800190c:	40010000 	.word	0x40010000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f902 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <DMA1_Channel1_IRQHandler+0x10>)
 800196e:	f000 ff19 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000234 	.word	0x20000234

0800197c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA1_Channel6_IRQHandler+0x10>)
 8001982:	f000 ff0f 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002cc 	.word	0x200002cc

08001990 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001996:	f003 ffc5 	bl	8005924 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200017b0 	.word	0x200017b0

080019a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <I2C1_EV_IRQHandler+0x10>)
 80019aa:	f001 fecb 	bl	8003744 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000278 	.word	0x20000278

080019b8 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <HAL_I2C_MemTxCpltCallback+0x28>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d105      	bne.n	80019d6 <HAL_I2C_MemTxCpltCallback+0x1e>
	    	ssd_update_done = 1;
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_I2C_MemTxCpltCallback+0x2c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
	    	i2c1_tx_busy = 0;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_I2C_MemTxCpltCallback+0x30>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	    }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40005400 	.word	0x40005400
 80019e4:	20000000 	.word	0x20000000
 80019e8:	200005b6 	.word	0x200005b6

080019ec <HAL_ADC_ConvCpltCallback>:
//    	i2c1_tx_busy = 0;
//    }
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <HAL_ADC_ConvCpltCallback+0x24>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d102      	bne.n	8001a04 <HAL_ADC_ConvCpltCallback+0x18>
        sensores_listos = 1;
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_ADC_ConvCpltCallback+0x28>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
    }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40012400 	.word	0x40012400
 8001a14:	200005cc 	.word	0x200005cc

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f00b fa88 	bl	800cf5c <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20005000 	.word	0x20005000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000adc 	.word	0x20000adc
 8001a80:	20001df0 	.word	0x20001df0

08001a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a90:	f7ff fff8 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a96:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aac:	4c09      	ldr	r4, [pc, #36]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f00b fa55 	bl	800cf68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7fe ff35 	bl	800092c <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001acc:	0800e0c0 	.word	0x0800e0c0
  ldr r2, =_sbss
 8001ad0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ad4:	20001df0 	.word	0x20001df0

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	@ (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 fce5 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fd68 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fcfd 	bl	8002526 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 fcc5 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	20000014 	.word	0x20000014
 8001b64:	20000010 	.word	0x20000010

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000014 	.word	0x20000014
 8001b88:	20000ae0 	.word	0x20000ae0

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	@ (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000ae0 	.word	0x20000ae0

08001ba0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0be      	b.n	8001d40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fd26 	bl	8001630 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 faf5 	bl	80021d4 <ADC_ConversionStop_Disable>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 8099 	bne.w	8001d2e <HAL_ADC_Init+0x18e>
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8095 	bne.w	8001d2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c0c:	f023 0302 	bic.w	r3, r3, #2
 8001c10:	f043 0202 	orr.w	r2, r3, #2
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7b1b      	ldrb	r3, [r3, #12]
 8001c26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_Init+0xa2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_ADC_Init+0xa8>
 8001c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c46:	e000      	b.n	8001c4a <HAL_ADC_Init+0xaa>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7d1b      	ldrb	r3, [r3, #20]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d119      	bne.n	8001c8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7b1b      	ldrb	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	035a      	lsls	r2, r3, #13
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e00b      	b.n	8001c8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <HAL_ADC_Init+0x1a8>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_Init+0x126>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d104      	bne.n	8001cd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	051b      	lsls	r3, r3, #20
 8001cce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_ADC_Init+0x1ac>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10b      	bne.n	8001d0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d0a:	e018      	b.n	8001d3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	f023 0312 	bic.w	r3, r3, #18
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d2c:	e007      	b.n	8001d3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	ffe1f7fd 	.word	0xffe1f7fd
 8001d4c:	ff1f0efe 	.word	0xff1f0efe

08001d50 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a64      	ldr	r2, [pc, #400]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_ADC_Start_DMA+0x24>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a63      	ldr	r2, [pc, #396]	@ (8001efc <HAL_ADC_Start_DMA+0x1ac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_Start_DMA+0x32>
 8001d74:	4b60      	ldr	r3, [pc, #384]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 80b3 	bne.w	8001ee8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_Start_DMA+0x40>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0ae      	b.n	8001eee <HAL_ADC_Start_DMA+0x19e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f9c1 	bl	8002120 <ADC_Enable>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 809a 	bne.w	8001ede <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8001efc <HAL_ADC_Start_DMA+0x1ac>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x84>
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1a8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d115      	bne.n	8001e00 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d026      	beq.n	8001e3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001df6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dfe:	e01d      	b.n	8001e3c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a39      	ldr	r2, [pc, #228]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_ADC_Start_DMA+0xd0>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <HAL_ADC_Start_DMA+0x1ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d10d      	bne.n	8001e3c <HAL_ADC_Start_DMA+0xec>
 8001e20:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1a8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	f023 0206 	bic.w	r2, r3, #6
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a25      	ldr	r2, [pc, #148]	@ (8001f00 <HAL_ADC_Start_DMA+0x1b0>)
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <HAL_ADC_Start_DMA+0x1b4>)
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_ADC_Start_DMA+0x1b8>)
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0202 	mvn.w	r2, #2
 8001e84:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e94:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a18      	ldr	r0, [r3, #32]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	334c      	adds	r3, #76	@ 0x4c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f000 fba5 	bl	80025f4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eb4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eb8:	d108      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ec8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001eca:	e00f      	b.n	8001eec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001eda:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001edc:	e006      	b.n	8001eec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001ee6:	e001      	b.n	8001eec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012400 	.word	0x40012400
 8001efc:	40012800 	.word	0x40012800
 8001f00:	08002257 	.word	0x08002257
 8001f04:	080022d3 	.word	0x080022d3
 8001f08:	080022ef 	.word	0x080022ef

08001f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x20>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0dc      	b.n	800210a <HAL_ADC_ConfigChannel+0x1da>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	d81c      	bhi.n	8001f9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b05      	subs	r3, #5
 8001f72:	221f      	movs	r2, #31
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4019      	ands	r1, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b05      	subs	r3, #5
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f98:	e03c      	b.n	8002014 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d81c      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b23      	subs	r3, #35	@ 0x23
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4019      	ands	r1, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b23      	subs	r3, #35	@ 0x23
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fda:	e01b      	b.n	8002014 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b41      	subs	r3, #65	@ 0x41
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b41      	subs	r3, #65	@ 0x41
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b09      	cmp	r3, #9
 800201a:	d91c      	bls.n	8002056 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68d9      	ldr	r1, [r3, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	3b1e      	subs	r3, #30
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6898      	ldr	r0, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	3b1e      	subs	r3, #30
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	e019      	b.n	800208a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	2207      	movs	r2, #7
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	4019      	ands	r1, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6898      	ldr	r0, [r3, #8]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b10      	cmp	r3, #16
 8002090:	d003      	beq.n	800209a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002096:	2b11      	cmp	r3, #17
 8002098:	d132      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_ADC_ConfigChannel+0x1e4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d125      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d126      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d11a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_ADC_ConfigChannel+0x1e8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a13      	ldr	r2, [pc, #76]	@ (800211c <HAL_ADC_ConfigChannel+0x1ec>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9a      	lsrs	r2, r3, #18
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x1b2>
 80020ee:	e007      	b.n	8002100 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40012400 	.word	0x40012400
 8002118:	2000000c 	.word	0x2000000c
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d040      	beq.n	80021c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800214e:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <ADC_Enable+0xac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <ADC_Enable+0xb0>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800215c:	e002      	b.n	8002164 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800216a:	f7ff fd0f 	bl	8001b8c <HAL_GetTick>
 800216e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002170:	e01f      	b.n	80021b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002172:	f7ff fd0b 	bl	8001b8c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d918      	bls.n	80021b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d011      	beq.n	80021b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d1d8      	bne.n	8002172 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d12e      	bne.n	800224c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021fe:	f7ff fcc5 	bl	8001b8c <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002204:	e01b      	b.n	800223e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002206:	f7ff fcc1 	bl	8001b8c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d914      	bls.n	800223e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10d      	bne.n	800223e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e007      	b.n	800224e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d0dc      	beq.n	8002206 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800226c:	2b00      	cmp	r3, #0
 800226e:	d127      	bne.n	80022c0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002286:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800228a:	d115      	bne.n	80022b8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002290:	2b00      	cmp	r3, #0
 8002292:	d111      	bne.n	80022b8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff fb97 	bl	80019ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022be:	e004      	b.n	80022ca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fe13 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff fe02 	bl	8001f1e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4906      	ldr	r1, [pc, #24]	@ (80023bc <__NVIC_EnableIRQ+0x34>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	@ (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	@ (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	@ 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff90 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff2d 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff42 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff90 	bl	8002414 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5f 	bl	80023c0 <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff35 	bl	8002388 <__NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffa2 	bl	8002478 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e043      	b.n	80025de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_DMA_Init+0xa8>)
 800255e:	4413      	add	r3, r2
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_DMA_Init+0xac>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1f      	ldr	r2, [pc, #124]	@ (80025f0 <HAL_DMA_Init+0xb0>)
 8002572:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800258a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800258e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	bffdfff8 	.word	0xbffdfff8
 80025ec:	cccccccd 	.word	0xcccccccd
 80025f0:	40020000 	.word	0x40020000

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Start_IT+0x20>
 8002610:	2302      	movs	r3, #2
 8002612:	e04b      	b.n	80026ac <HAL_DMA_Start_IT+0xb8>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13a      	bne.n	800269e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f9bc 	bl	80029ca <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 020e 	orr.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 020a 	orr.w	r2, r2, #10
 800268a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d005      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e051      	b.n	800277c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 020e 	bic.w	r2, r2, #14
 80026e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_DMA_Abort_IT+0xd4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d029      	beq.n	8002756 <HAL_DMA_Abort_IT+0xa2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	@ (800278c <HAL_DMA_Abort_IT+0xd8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_Abort_IT+0x9e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <HAL_DMA_Abort_IT+0xdc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01a      	beq.n	800274c <HAL_DMA_Abort_IT+0x98>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	@ (8002794 <HAL_DMA_Abort_IT+0xe0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d012      	beq.n	8002746 <HAL_DMA_Abort_IT+0x92>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_DMA_Abort_IT+0xe4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00a      	beq.n	8002740 <HAL_DMA_Abort_IT+0x8c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <HAL_DMA_Abort_IT+0xe8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d102      	bne.n	800273a <HAL_DMA_Abort_IT+0x86>
 8002734:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002738:	e00e      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 800273a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800273e:	e00b      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 8002740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002744:	e008      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 8002746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274a:	e005      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 800274c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002750:	e002      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 8002752:	2310      	movs	r3, #16
 8002754:	e000      	b.n	8002758 <HAL_DMA_Abort_IT+0xa4>
 8002756:	2301      	movs	r3, #1
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <HAL_DMA_Abort_IT+0xec>)
 800275a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
    } 
  }
  return status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40020008 	.word	0x40020008
 800278c:	4002001c 	.word	0x4002001c
 8002790:	40020030 	.word	0x40020030
 8002794:	40020044 	.word	0x40020044
 8002798:	40020058 	.word	0x40020058
 800279c:	4002006c 	.word	0x4002006c
 80027a0:	40020000 	.word	0x40020000

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d04f      	beq.n	800286c <HAL_DMA_IRQHandler+0xc8>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d029      	beq.n	8002852 <HAL_DMA_IRQHandler+0xae>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a65      	ldr	r2, [pc, #404]	@ (8002998 <HAL_DMA_IRQHandler+0x1f4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_IRQHandler+0xaa>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a63      	ldr	r2, [pc, #396]	@ (800299c <HAL_DMA_IRQHandler+0x1f8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01a      	beq.n	8002848 <HAL_DMA_IRQHandler+0xa4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a62      	ldr	r2, [pc, #392]	@ (80029a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d012      	beq.n	8002842 <HAL_DMA_IRQHandler+0x9e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a60      	ldr	r2, [pc, #384]	@ (80029a4 <HAL_DMA_IRQHandler+0x200>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00a      	beq.n	800283c <HAL_DMA_IRQHandler+0x98>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5f      	ldr	r2, [pc, #380]	@ (80029a8 <HAL_DMA_IRQHandler+0x204>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d102      	bne.n	8002836 <HAL_DMA_IRQHandler+0x92>
 8002830:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002834:	e00e      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 8002836:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800283a:	e00b      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 800283c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002840:	e008      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 8002842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002846:	e005      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 8002848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800284c:	e002      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	e000      	b.n	8002854 <HAL_DMA_IRQHandler+0xb0>
 8002852:	2304      	movs	r3, #4
 8002854:	4a55      	ldr	r2, [pc, #340]	@ (80029ac <HAL_DMA_IRQHandler+0x208>)
 8002856:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8094 	beq.w	800298a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800286a:	e08e      	b.n	800298a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	2202      	movs	r2, #2
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d056      	beq.n	800292a <HAL_DMA_IRQHandler+0x186>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d051      	beq.n	800292a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020a 	bic.w	r2, r2, #10
 80028a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a38      	ldr	r2, [pc, #224]	@ (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d029      	beq.n	800290a <HAL_DMA_IRQHandler+0x166>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a37      	ldr	r2, [pc, #220]	@ (8002998 <HAL_DMA_IRQHandler+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0x162>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	@ (800299c <HAL_DMA_IRQHandler+0x1f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x15c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a34      	ldr	r2, [pc, #208]	@ (80029a0 <HAL_DMA_IRQHandler+0x1fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0x156>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a32      	ldr	r2, [pc, #200]	@ (80029a4 <HAL_DMA_IRQHandler+0x200>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x150>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a31      	ldr	r2, [pc, #196]	@ (80029a8 <HAL_DMA_IRQHandler+0x204>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d102      	bne.n	80028ee <HAL_DMA_IRQHandler+0x14a>
 80028e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028ec:	e00e      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 80028ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f2:	e00b      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 80028f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f8:	e008      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 80028fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028fe:	e005      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 8002900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002904:	e002      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 8002906:	2320      	movs	r3, #32
 8002908:	e000      	b.n	800290c <HAL_DMA_IRQHandler+0x168>
 800290a:	2302      	movs	r3, #2
 800290c:	4a27      	ldr	r2, [pc, #156]	@ (80029ac <HAL_DMA_IRQHandler+0x208>)
 800290e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d034      	beq.n	800298a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002928:	e02f      	b.n	800298a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	2208      	movs	r2, #8
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_DMA_IRQHandler+0x1e8>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020e 	bic.w	r2, r2, #14
 8002952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
    }
  }
  return;
 800298a:	bf00      	nop
 800298c:	bf00      	nop
}
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020008 	.word	0x40020008
 8002998:	4002001c 	.word	0x4002001c
 800299c:	40020030 	.word	0x40020030
 80029a0:	40020044 	.word	0x40020044
 80029a4:	40020058 	.word	0x40020058
 80029a8:	4002006c 	.word	0x4002006c
 80029ac:	40020000 	.word	0x40020000

080029b0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029be:	b2db      	uxtb	r3, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d108      	bne.n	8002a0a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a08:	e007      	b.n	8002a1a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	60da      	str	r2, [r3, #12]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b08b      	sub	sp, #44	@ 0x2c
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	e169      	b.n	8002d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8158 	bne.w	8002d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002cc4 <HAL_GPIO_Init+0x2a0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d05e      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a60:	4a98      	ldr	r2, [pc, #608]	@ (8002cc4 <HAL_GPIO_Init+0x2a0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d875      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a66:	4a98      	ldr	r2, [pc, #608]	@ (8002cc8 <HAL_GPIO_Init+0x2a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d058      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a6c:	4a96      	ldr	r2, [pc, #600]	@ (8002cc8 <HAL_GPIO_Init+0x2a4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d86f      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a72:	4a96      	ldr	r2, [pc, #600]	@ (8002ccc <HAL_GPIO_Init+0x2a8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d052      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a78:	4a94      	ldr	r2, [pc, #592]	@ (8002ccc <HAL_GPIO_Init+0x2a8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d869      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a94      	ldr	r2, [pc, #592]	@ (8002cd0 <HAL_GPIO_Init+0x2ac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04c      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a84:	4a92      	ldr	r2, [pc, #584]	@ (8002cd0 <HAL_GPIO_Init+0x2ac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d863      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a8a:	4a92      	ldr	r2, [pc, #584]	@ (8002cd4 <HAL_GPIO_Init+0x2b0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d046      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
 8002a90:	4a90      	ldr	r2, [pc, #576]	@ (8002cd4 <HAL_GPIO_Init+0x2b0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d85d      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	d82a      	bhi.n	8002af0 <HAL_GPIO_Init+0xcc>
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d859      	bhi.n	8002b52 <HAL_GPIO_Init+0x12e>
 8002a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <HAL_GPIO_Init+0x80>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002b1f 	.word	0x08002b1f
 8002aa8:	08002af9 	.word	0x08002af9
 8002aac:	08002b0b 	.word	0x08002b0b
 8002ab0:	08002b4d 	.word	0x08002b4d
 8002ab4:	08002b53 	.word	0x08002b53
 8002ab8:	08002b53 	.word	0x08002b53
 8002abc:	08002b53 	.word	0x08002b53
 8002ac0:	08002b53 	.word	0x08002b53
 8002ac4:	08002b53 	.word	0x08002b53
 8002ac8:	08002b53 	.word	0x08002b53
 8002acc:	08002b53 	.word	0x08002b53
 8002ad0:	08002b53 	.word	0x08002b53
 8002ad4:	08002b53 	.word	0x08002b53
 8002ad8:	08002b53 	.word	0x08002b53
 8002adc:	08002b53 	.word	0x08002b53
 8002ae0:	08002b53 	.word	0x08002b53
 8002ae4:	08002b53 	.word	0x08002b53
 8002ae8:	08002b01 	.word	0x08002b01
 8002aec:	08002b15 	.word	0x08002b15
 8002af0:	4a79      	ldr	r2, [pc, #484]	@ (8002cd8 <HAL_GPIO_Init+0x2b4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002af6:	e02c      	b.n	8002b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	623b      	str	r3, [r7, #32]
          break;
 8002afe:	e029      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	3304      	adds	r3, #4
 8002b06:	623b      	str	r3, [r7, #32]
          break;
 8002b08:	e024      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e01f      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e01a      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b26:	2304      	movs	r3, #4
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e013      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	611a      	str	r2, [r3, #16]
          break;
 8002b3e:	e009      	b.n	8002b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	615a      	str	r2, [r3, #20]
          break;
 8002b4a:	e003      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
          break;
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x130>
          break;
 8002b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2bff      	cmp	r3, #255	@ 0xff
 8002b58:	d801      	bhi.n	8002b5e <HAL_GPIO_Init+0x13a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_Init+0x13e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d802      	bhi.n	8002b70 <HAL_GPIO_Init+0x14c>
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_Init+0x152>
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	3b08      	subs	r3, #8
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	210f      	movs	r1, #15
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80b1 	beq.w	8002d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002cdc <HAL_GPIO_Init+0x2b8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bbc:	4a48      	ldr	r2, [pc, #288]	@ (8002ce0 <HAL_GPIO_Init+0x2bc>)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a40      	ldr	r2, [pc, #256]	@ (8002ce4 <HAL_GPIO_Init+0x2c0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_GPIO_Init+0x1ec>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	@ (8002ce8 <HAL_GPIO_Init+0x2c4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00d      	beq.n	8002c0c <HAL_GPIO_Init+0x1e8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cec <HAL_GPIO_Init+0x2c8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x1e4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf0 <HAL_GPIO_Init+0x2cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_GPIO_Init+0x1e0>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e006      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e004      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e002      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_GPIO_Init+0x1ee>
 8002c10:	2300      	movs	r3, #0
 8002c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c14:	f002 0203 	and.w	r2, r2, #3
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	4093      	lsls	r3, r2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c22:	492f      	ldr	r1, [pc, #188]	@ (8002ce0 <HAL_GPIO_Init+0x2bc>)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	492c      	ldr	r1, [pc, #176]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4928      	ldr	r1, [pc, #160]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	4922      	ldr	r1, [pc, #136]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	491e      	ldr	r1, [pc, #120]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4918      	ldr	r1, [pc, #96]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4914      	ldr	r1, [pc, #80]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d021      	beq.n	8002cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	490e      	ldr	r1, [pc, #56]	@ (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e021      	b.n	8002d06 <HAL_GPIO_Init+0x2e2>
 8002cc2:	bf00      	nop
 8002cc4:	10320000 	.word	0x10320000
 8002cc8:	10310000 	.word	0x10310000
 8002ccc:	10220000 	.word	0x10220000
 8002cd0:	10210000 	.word	0x10210000
 8002cd4:	10120000 	.word	0x10120000
 8002cd8:	10110000 	.word	0x10110000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4909      	ldr	r1, [pc, #36]	@ (8002d28 <HAL_GPIO_Init+0x304>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	3301      	adds	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f ae8e 	bne.w	8002a38 <HAL_GPIO_Init+0x14>
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	372c      	adds	r7, #44	@ 0x2c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40010400 	.word	0x40010400

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43d9      	mvns	r1, r3
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	611a      	str	r2, [r3, #16]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e12b      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fca2 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df4:	f004 fda4 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a81      	ldr	r2, [pc, #516]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d807      	bhi.n	8002e14 <HAL_I2C_Init+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a80      	ldr	r2, [pc, #512]	@ (8003008 <HAL_I2C_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e006      	b.n	8002e22 <HAL_I2C_Init+0x92>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a7d      	ldr	r2, [pc, #500]	@ (800300c <HAL_I2C_Init+0x27c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e7      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	@ (8003010 <HAL_I2C_Init+0x280>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <HAL_I2C_Init+0xd4>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e009      	b.n	8002e78 <HAL_I2C_Init+0xe8>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a69      	ldr	r2, [pc, #420]	@ (8003014 <HAL_I2C_Init+0x284>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	495c      	ldr	r1, [pc, #368]	@ (8003004 <HAL_I2C_Init+0x274>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d819      	bhi.n	8002ecc <HAL_I2C_Init+0x13c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e59      	subs	r1, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_I2C_Init+0x138>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e59      	subs	r1, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	e051      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e04f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d111      	bne.n	8002ef8 <HAL_I2C_Init+0x168>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_I2C_Init+0x18e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x196>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <HAL_I2C_Init+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e58      	subs	r0, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4a:	e00f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6809      	ldr	r1, [r1, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6911      	ldr	r1, [r2, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	000186a0 	.word	0x000186a0
 8003008:	001e847f 	.word	0x001e847f
 800300c:	003d08ff 	.word	0x003d08ff
 8003010:	431bde83 	.word	0x431bde83
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d103      	bne.n	8003036 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7fe fd9a 	bl	8001b8c <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 80e0 	bne.w	8003228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2319      	movs	r3, #25
 800306e:	2201      	movs	r2, #1
 8003070:	4970      	ldr	r1, [pc, #448]	@ (8003234 <HAL_I2C_Master_Transmit+0x1f4>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f002 f916 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	e0d3      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x50>
 800308c:	2302      	movs	r3, #2
 800308e:	e0cc      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d007      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	@ 0x21
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2210      	movs	r2, #16
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	893a      	ldrh	r2, [r7, #8]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a50      	ldr	r2, [pc, #320]	@ (8003238 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f001 fdfa 	bl	8004cf8 <I2C_MasterRequestWrite>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e08d      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003124:	e066      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6a39      	ldr	r1, [r7, #32]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f002 f9d4 	bl	80054d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b04      	cmp	r3, #4
 800313c:	d107      	bne.n	800314e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	6a39      	ldr	r1, [r7, #32]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f002 f9cb 	bl	8005568 <I2C_WaitOnBTFFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e01a      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d194      	bne.n	8003126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	00100002 	.word	0x00100002
 8003238:	ffff0000 	.word	0xffff0000

0800323c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	817b      	strh	r3, [r7, #10]
 800324e:	460b      	mov	r3, r1
 8003250:	813b      	strh	r3, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325a:	f7fe fc97 	bl	8001b8c <HAL_GetTick>
 800325e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	f040 812e 	bne.w	80034ca <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800326e:	4b99      	ldr	r3, [pc, #612]	@ (80034d4 <HAL_I2C_Mem_Write_DMA+0x298>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	4a98      	ldr	r2, [pc, #608]	@ (80034d8 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a1a      	lsrs	r2, r3, #8
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009a      	lsls	r2, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3b01      	subs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d112      	bne.n	80032ba <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e108      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d0df      	beq.n	8003288 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0fa      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2221      	movs	r2, #33	@ 0x21
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a68      	ldr	r2, [pc, #416]	@ (80034dc <HAL_I2C_Mem_Write_DMA+0x2a0>)
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800333e:	897a      	ldrh	r2, [r7, #10]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80a1 	beq.w	80034a2 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	4a5c      	ldr	r2, [pc, #368]	@ (80034e0 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	4a5b      	ldr	r2, [pc, #364]	@ (80034e4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337c:	2200      	movs	r2, #0
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003384:	2200      	movs	r2, #0
 8003386:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	4619      	mov	r1, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3310      	adds	r3, #16
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	f7ff f929 	bl	80025f4 <HAL_DMA_Start_IT>
 80033a2:	4603      	mov	r3, r0
 80033a4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d166      	bne.n	800347a <HAL_I2C_Mem_Write_DMA+0x23e>
 80033ac:	e013      	b.n	80033d6 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07a      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80033d6:	88f8      	ldrh	r0, [r7, #6]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2323      	movs	r3, #35	@ 0x23
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4603      	mov	r3, r0
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f001 fd08 	bl	8004dfc <I2C_RequestMemoryWrite>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d022      	beq.n	8003438 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f95c 	bl	80026b4 <HAL_DMA_Abort_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003404:	2200      	movs	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003416:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e049      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003464:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003474:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e028      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e014      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000000c 	.word	0x2000000c
 80034d8:	14f8b589 	.word	0x14f8b589
 80034dc:	ffff0000 	.word	0xffff0000
 80034e0:	08004f29 	.word	0x08004f29
 80034e4:	080050e7 	.word	0x080050e7

080034e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	460b      	mov	r3, r1
 80034f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7fe fb48 	bl	8001b8c <HAL_GetTick>
 80034fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	f040 8111 	bne.w	8003732 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2319      	movs	r3, #25
 8003516:	2201      	movs	r2, #1
 8003518:	4988      	ldr	r1, [pc, #544]	@ (800373c <HAL_I2C_IsDeviceReady+0x254>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f001 fec2 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	e104      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_I2C_IsDeviceReady+0x50>
 8003534:	2302      	movs	r3, #2
 8003536:	e0fd      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d007      	beq.n	800355e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2224      	movs	r2, #36	@ 0x24
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a70      	ldr	r2, [pc, #448]	@ (8003740 <HAL_I2C_IsDeviceReady+0x258>)
 8003580:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003590:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f001 fe80 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b8:	d103      	bne.n	80035c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0b6      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fad9 	bl	8001b8c <HAL_GetTick>
 80035da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800360a:	e025      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe fabe 	bl	8001b8c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <HAL_I2C_IsDeviceReady+0x13a>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22a0      	movs	r2, #160	@ 0xa0
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2ba0      	cmp	r3, #160	@ 0xa0
 8003662:	d005      	beq.n	8003670 <HAL_I2C_IsDeviceReady+0x188>
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_I2C_IsDeviceReady+0x188>
 800366a:	7dbb      	ldrb	r3, [r7, #22]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0cd      	beq.n	800360c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d129      	bne.n	80036da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	4921      	ldr	r1, [pc, #132]	@ (800373c <HAL_I2C_IsDeviceReady+0x254>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f001 fdf4 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e036      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e02c      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2319      	movs	r3, #25
 80036fa:	2201      	movs	r2, #1
 80036fc:	490f      	ldr	r1, [pc, #60]	@ (800373c <HAL_I2C_IsDeviceReady+0x254>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f001 fdd0 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e012      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3301      	adds	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	f4ff af32 	bcc.w	8003582 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d003      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x38>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	f040 80c1 	bne.w	80038fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800379c:	d003      	beq.n	80037a6 <HAL_I2C_EV_IRQHandler+0x62>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x66>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_I2C_EV_IRQHandler+0x68>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f000 8132 	beq.w	8003a16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x92>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f001 ff75 	bl	80056b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fce1 	bl	8004196 <I2C_Master_SB>
 80037d4:	e092      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	0a5b      	lsrs	r3, r3, #9
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fd56 	bl	80042a0 <I2C_Master_ADD10>
 80037f4:	e082      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0xd2>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	0a5b      	lsrs	r3, r3, #9
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd6f 	bl	80042f2 <I2C_Master_ADDR>
 8003814:	e072      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03b      	beq.n	800389a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003830:	f000 80f3 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	09db      	lsrs	r3, r3, #7
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a9b      	lsrs	r3, r3, #10
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f939 	bl	8003ad0 <I2C_MasterTransmit_TXE>
 800385e:	e04d      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80d6 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	0a5b      	lsrs	r3, r3, #9
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80cf 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	2b21      	cmp	r3, #33	@ 0x21
 8003880:	d103      	bne.n	800388a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9c0 	bl	8003c08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003888:	e0c7      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	f040 80c4 	bne.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa2e 	bl	8003cf4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003898:	e0bf      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a8:	f000 80b7 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d103      	bne.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 faa7 	bl	8003e24 <I2C_MasterReceive_RXNE>
 80038d6:	e011      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 809a 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	0a5b      	lsrs	r3, r3, #9
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8093 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb5d 	bl	8003fb4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fa:	e08e      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80038fc:	e08d      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e007      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <HAL_I2C_EV_IRQHandler+0x20e>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0a5b      	lsrs	r3, r3, #9
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 ff28 	bl	80047a0 <I2C_Slave_ADDR>
 8003950:	e066      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x22e>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	0a5b      	lsrs	r3, r3, #9
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 ff62 	bl	8004834 <I2C_Slave_STOPF>
 8003970:	e056      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	2b21      	cmp	r3, #33	@ 0x21
 8003976:	d002      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x23a>
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b29      	cmp	r3, #41	@ 0x29
 800397c:	d125      	bne.n	80039ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	09db      	lsrs	r3, r3, #7
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00f      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	0a9b      	lsrs	r3, r3, #10
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fe40 	bl	8004628 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a8:	e039      	b.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d033      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	0a5b      	lsrs	r3, r3, #9
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02d      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fe6d 	bl	80046a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c8:	e029      	b.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	0a9b      	lsrs	r3, r3, #10
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fe77 	bl	80046e2 <I2C_SlaveReceive_RXNE>
 80039f4:	e014      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	0a5b      	lsrs	r3, r3, #9
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fea5 	bl	800475e <I2C_SlaveReceive_BTF>
 8003a14:	e004      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a16:	bf00      	nop
 8003a18:	e002      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ade:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ae6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d150      	bne.n	8003b98 <I2C_MasterTransmit_TXE+0xc8>
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b21      	cmp	r3, #33	@ 0x21
 8003afa:	d14d      	bne.n	8003b98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d01d      	beq.n	8003b3e <I2C_MasterTransmit_TXE+0x6e>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d01a      	beq.n	8003b3e <I2C_MasterTransmit_TXE+0x6e>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b0e:	d016      	beq.n	8003b3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2211      	movs	r2, #17
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff75 	bl	8003a26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b3c:	e060      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d107      	bne.n	8003b88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fd ff19 	bl	80019b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b86:	e03b      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff48 	bl	8003a26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b96:	e033      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b21      	cmp	r3, #33	@ 0x21
 8003b9c:	d005      	beq.n	8003baa <I2C_MasterTransmit_TXE+0xda>
 8003b9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ba0:	2b40      	cmp	r3, #64	@ 0x40
 8003ba2:	d12d      	bne.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b22      	cmp	r3, #34	@ 0x22
 8003ba8:	d12a      	bne.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003bc4:	e01c      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d103      	bne.n	8003bda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f88e 	bl	8003cf4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003bd8:	e012      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bfe:	e7ff      	b.n	8003c00 <I2C_MasterTransmit_TXE+0x130>
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b21      	cmp	r3, #33	@ 0x21
 8003c20:	d164      	bne.n	8003cec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c50:	e04c      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d01d      	beq.n	8003c94 <I2C_MasterTransmit_BTF+0x8c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d01a      	beq.n	8003c94 <I2C_MasterTransmit_BTF+0x8c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c64:	d016      	beq.n	8003c94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2211      	movs	r2, #17
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff feca 	bl	8003a26 <HAL_I2C_MasterTxCpltCallback>
}
 8003c92:	e02b      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ca2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d107      	bne.n	8003cde <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fe6e 	bl	80019b8 <HAL_I2C_MemTxCpltCallback>
}
 8003cdc:	e006      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe9d 	bl	8003a26 <HAL_I2C_MasterTxCpltCallback>
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10b      	bne.n	8003d2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d2a:	e077      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	121b      	asrs	r3, r3, #8
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d46:	e069      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10b      	bne.n	8003d68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d66:	e059      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d152      	bne.n	8003e16 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b22      	cmp	r3, #34	@ 0x22
 8003d74:	d10d      	bne.n	8003d92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d90:	e044      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b21      	cmp	r3, #33	@ 0x21
 8003da0:	d112      	bne.n	8003dc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dc6:	e029      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d124      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b21      	cmp	r3, #33	@ 0x21
 8003dd6:	d121      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003de6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fdd2 	bl	80019b8 <HAL_I2C_MemTxCpltCallback>
}
 8003e14:	e002      	b.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff f8fe 	bl	8003018 <I2C_Flush_DR>
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b22      	cmp	r3, #34	@ 0x22
 8003e36:	f040 80b9 	bne.w	8003fac <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d921      	bls.n	8003e92 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f040 8096 	bne.w	8003fac <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e90:	e08c      	b.n	8003fac <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d07f      	beq.n	8003f9a <I2C_MasterReceive_RXNE+0x176>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <I2C_MasterReceive_RXNE+0x82>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d179      	bne.n	8003f9a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 fba6 	bl	80055f8 <I2C_WaitOnSTOPRequestThroughIT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d14c      	bne.n	8003f4c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ed0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b40      	cmp	r3, #64	@ 0x40
 8003f0a:	d10a      	bne.n	8003f22 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fdbd 	bl	8003a9a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f20:	e044      	b.n	8003fac <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d002      	beq.n	8003f36 <I2C_MasterReceive_RXNE+0x112>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d103      	bne.n	8003f3e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f3c:	e002      	b.n	8003f44 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2212      	movs	r2, #18
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fd77 	bl	8003a38 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f4a:	e02f      	b.n	8003fac <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fd8a 	bl	8003aac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f98:	e008      	b.n	8003fac <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	605a      	str	r2, [r3, #4]
}
 8003faa:	e7ff      	b.n	8003fac <I2C_MasterReceive_RXNE+0x188>
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fda:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004002:	e0c4      	b.n	800418e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b03      	cmp	r3, #3
 800400c:	d129      	bne.n	8004062 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d00a      	beq.n	800403a <I2C_MasterReceive_BTF+0x86>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d007      	beq.n	800403a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004038:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004060:	e095      	b.n	800418e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d17d      	bne.n	8004168 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d002      	beq.n	8004078 <I2C_MasterReceive_BTF+0xc4>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b10      	cmp	r3, #16
 8004076:	d108      	bne.n	800408a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e016      	b.n	80040b8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d002      	beq.n	8004096 <I2C_MasterReceive_BTF+0xe2>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d108      	bne.n	80040a8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e007      	b.n	80040b8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004112:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d10a      	bne.n	800413e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fcaf 	bl	8003a9a <HAL_I2C_MemRxCpltCallback>
}
 800413c:	e027      	b.n	800418e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d002      	beq.n	8004152 <I2C_MasterReceive_BTF+0x19e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b20      	cmp	r3, #32
 8004150:	d103      	bne.n	800415a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
 8004158:	e002      	b.n	8004160 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2212      	movs	r2, #18
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fc69 	bl	8003a38 <HAL_I2C_MasterRxCpltCallback>
}
 8004166:	e012      	b.n	800418e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b40      	cmp	r3, #64	@ 0x40
 80041a8:	d117      	bne.n	80041da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041c4:	e067      	b.n	8004296 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]
}
 80041d8:	e05d      	b.n	8004296 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e2:	d133      	bne.n	800424c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	@ 0x21
 80041ee:	d109      	bne.n	8004204 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	e008      	b.n	8004216 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <I2C_Master_SB+0x92>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d032      	beq.n	8004296 <I2C_Master_SB+0x100>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02d      	beq.n	8004296 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004248:	605a      	str	r2, [r3, #4]
}
 800424a:	e024      	b.n	8004296 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10e      	bne.n	8004272 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	b29b      	uxth	r3, r3
 800425a:	11db      	asrs	r3, r3, #7
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0306 	and.w	r3, r3, #6
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f063 030f 	orn	r3, r3, #15
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
}
 8004270:	e011      	b.n	8004296 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10d      	bne.n	8004296 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	b29b      	uxth	r3, r3
 8004280:	11db      	asrs	r3, r3, #7
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0306 	and.w	r3, r3, #6
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f063 030e 	orn	r3, r3, #14
 800428e:	b2da      	uxtb	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <I2C_Master_ADD10+0x26>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <I2C_Master_ADD10+0x48>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b091      	sub	sp, #68	@ 0x44
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004300:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b22      	cmp	r3, #34	@ 0x22
 800431a:	f040 8174 	bne.w	8004606 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <I2C_Master_ADDR+0x54>
 8004326:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d10b      	bne.n	8004346 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432e:	2300      	movs	r3, #0
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	633b      	str	r3, [r7, #48]	@ 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	633b      	str	r3, [r7, #48]	@ 0x30
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	e16b      	b.n	800461e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11d      	bne.n	800438a <I2C_Master_ADDR+0x98>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004356:	d118      	bne.n	800438a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004358:	2300      	movs	r3, #0
 800435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800437c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	651a      	str	r2, [r3, #80]	@ 0x50
 8004388:	e149      	b.n	800461e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e120      	b.n	80045fe <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	f040 808a 	bne.w	80044dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043ce:	d137      	bne.n	8004440 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043de:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ee:	d113      	bne.n	8004418 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	e0f2      	b.n	80045fe <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e0de      	b.n	80045fe <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004442:	2b08      	cmp	r3, #8
 8004444:	d02e      	beq.n	80044a4 <I2C_Master_ADDR+0x1b2>
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b20      	cmp	r3, #32
 800444a:	d02b      	beq.n	80044a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444e:	2b12      	cmp	r3, #18
 8004450:	d102      	bne.n	8004458 <I2C_Master_ADDR+0x166>
 8004452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004454:	2b01      	cmp	r3, #1
 8004456:	d125      	bne.n	80044a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	2b04      	cmp	r3, #4
 800445c:	d00e      	beq.n	800447c <I2C_Master_ADDR+0x18a>
 800445e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004460:	2b02      	cmp	r3, #2
 8004462:	d00b      	beq.n	800447c <I2C_Master_ADDR+0x18a>
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	2b10      	cmp	r3, #16
 8004468:	d008      	beq.n	800447c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e007      	b.n	800448c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800448a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	e0ac      	b.n	80045fe <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e090      	b.n	80045fe <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d158      	bne.n	8004598 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d021      	beq.n	8004530 <I2C_Master_ADDR+0x23e>
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d01e      	beq.n	8004530 <I2C_Master_ADDR+0x23e>
 80044f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d01b      	beq.n	8004530 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004506:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e012      	b.n	8004556 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800453e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004564:	d14b      	bne.n	80045fe <I2C_Master_ADDR+0x30c>
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800456c:	d00b      	beq.n	8004586 <I2C_Master_ADDR+0x294>
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	2b01      	cmp	r3, #1
 8004572:	d008      	beq.n	8004586 <I2C_Master_ADDR+0x294>
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	2b08      	cmp	r3, #8
 8004578:	d005      	beq.n	8004586 <I2C_Master_ADDR+0x294>
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b10      	cmp	r3, #16
 800457e:	d002      	beq.n	8004586 <I2C_Master_ADDR+0x294>
 8004580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004582:	2b20      	cmp	r3, #32
 8004584:	d13b      	bne.n	80045fe <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	e032      	b.n	80045fe <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045a6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b6:	d117      	bne.n	80045e8 <I2C_Master_ADDR+0x2f6>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045be:	d00b      	beq.n	80045d8 <I2C_Master_ADDR+0x2e6>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d008      	beq.n	80045d8 <I2C_Master_ADDR+0x2e6>
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d005      	beq.n	80045d8 <I2C_Master_ADDR+0x2e6>
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d002      	beq.n	80045d8 <I2C_Master_ADDR+0x2e6>
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d107      	bne.n	80045e8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004604:	e00b      	b.n	800461e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
}
 800461c:	e7ff      	b.n	800461e <I2C_Master_ADDR+0x32c>
 800461e:	bf00      	nop
 8004620:	3744      	adds	r7, #68	@ 0x44
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02b      	beq.n	800469a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <I2C_SlaveTransmit_TXE+0x72>
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b29      	cmp	r3, #41	@ 0x29
 8004674:	d111      	bne.n	800469a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004684:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2221      	movs	r2, #33	@ 0x21
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2228      	movs	r2, #40	@ 0x28
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff f9d8 	bl	8003a4a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d011      	beq.n	80046d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02c      	beq.n	8004756 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d114      	bne.n	8004756 <I2C_SlaveReceive_RXNE+0x74>
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004730:	d111      	bne.n	8004756 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004740:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2222      	movs	r2, #34	@ 0x22
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2228      	movs	r2, #40	@ 0x28
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff f983 	bl	8003a5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d012      	beq.n	8004796 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047ba:	2b28      	cmp	r3, #40	@ 0x28
 80047bc:	d127      	bne.n	800480e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047cc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	81bb      	strh	r3, [r7, #12]
 80047f0:	e002      	b.n	80047f8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004800:	89ba      	ldrh	r2, [r7, #12]
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff f931 	bl	8003a6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800480c:	e00e      	b.n	800482c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004852:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004880:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004890:	d172      	bne.n	8004978 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b22      	cmp	r3, #34	@ 0x22
 8004896:	d002      	beq.n	800489e <I2C_Slave_STOPF+0x6a>
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b2a      	cmp	r3, #42	@ 0x2a
 800489c:	d135      	bne.n	800490a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe f86a 	bl	80029b0 <HAL_DMA_GetState>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d049      	beq.n	8004976 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	4a69      	ldr	r2, [pc, #420]	@ (8004a8c <I2C_Slave_STOPF+0x258>)
 80048e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fee0 	bl	80026b4 <HAL_DMA_Abort_IT>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03d      	beq.n	8004976 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004904:	4610      	mov	r0, r2
 8004906:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004908:	e035      	b.n	8004976 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f043 0204 	orr.w	r2, r3, #4
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800493c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe f834 	bl	80029b0 <HAL_DMA_GetState>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d014      	beq.n	8004978 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	4a4e      	ldr	r2, [pc, #312]	@ (8004a8c <I2C_Slave_STOPF+0x258>)
 8004954:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd feaa 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
 8004974:	e000      	b.n	8004978 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004976:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d03e      	beq.n	8004a00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d112      	bne.n	80049b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d112      	bne.n	80049ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f843 	bl	8004a94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a0e:	e039      	b.n	8004a84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a14:	d109      	bne.n	8004a2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2228      	movs	r2, #40	@ 0x28
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff f819 	bl	8003a5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b28      	cmp	r3, #40	@ 0x28
 8004a34:	d111      	bne.n	8004a5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a15      	ldr	r2, [pc, #84]	@ (8004a90 <I2C_Slave_STOPF+0x25c>)
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff f818 	bl	8003a88 <HAL_I2C_ListenCpltCallback>
}
 8004a58:	e014      	b.n	8004a84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	2b22      	cmp	r3, #34	@ 0x22
 8004a60:	d002      	beq.n	8004a68 <I2C_Slave_STOPF+0x234>
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b22      	cmp	r3, #34	@ 0x22
 8004a66:	d10d      	bne.n	8004a84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe ffec 	bl	8003a5c <HAL_I2C_SlaveRxCpltCallback>
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	08005155 	.word	0x08005155
 8004a90:	ffff0000 	.word	0xffff0000

08004a94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aaa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aac:	7bbb      	ldrb	r3, [r7, #14]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d002      	beq.n	8004ab8 <I2C_ITError+0x24>
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d10a      	bne.n	8004ace <I2C_ITError+0x3a>
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b22      	cmp	r3, #34	@ 0x22
 8004abc:	d107      	bne.n	8004ace <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004acc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ad4:	2b28      	cmp	r3, #40	@ 0x28
 8004ad6:	d107      	bne.n	8004ae8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2228      	movs	r2, #40	@ 0x28
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ae6:	e015      	b.n	8004b14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af6:	d00a      	beq.n	8004b0e <I2C_ITError+0x7a>
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b60      	cmp	r3, #96	@ 0x60
 8004afc:	d007      	beq.n	8004b0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b22:	d162      	bne.n	8004bea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d020      	beq.n	8004b84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf0 <I2C_ITError+0x25c>)
 8004b48:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fdb0 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8089 	beq.w	8004c6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4798      	blx	r3
 8004b82:	e074      	b.n	8004c6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	4a59      	ldr	r2, [pc, #356]	@ (8004cf0 <I2C_ITError+0x25c>)
 8004b8a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fd8f 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d068      	beq.n	8004c6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba6:	2b40      	cmp	r3, #64	@ 0x40
 8004ba8:	d10b      	bne.n	8004bc2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004be4:	4610      	mov	r0, r2
 8004be6:	4798      	blx	r3
 8004be8:	e041      	b.n	8004c6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b60      	cmp	r3, #96	@ 0x60
 8004bf4:	d125      	bne.n	8004c42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0e:	2b40      	cmp	r3, #64	@ 0x40
 8004c10:	d10b      	bne.n	8004c2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fe ff3f 	bl	8003abe <HAL_I2C_AbortCpltCallback>
 8004c40:	e015      	b.n	8004c6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	d10b      	bne.n	8004c68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fe ff1f 	bl	8003aac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10e      	bne.n	8004c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d113      	bne.n	8004ce8 <I2C_ITError+0x254>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b28      	cmp	r3, #40	@ 0x28
 8004cc4:	d110      	bne.n	8004ce8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <I2C_ITError+0x260>)
 8004cca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fe fed0 	bl	8003a88 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	08005155 	.word	0x08005155
 8004cf4:	ffff0000 	.word	0xffff0000

08004cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	460b      	mov	r3, r1
 8004d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	2b12      	cmp	r3, #18
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 faa3 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e035      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e01b      	b.n	8004dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	490e      	ldr	r1, [pc, #56]	@ (8004df4 <I2C_MasterRequestWrite+0xfc>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 faec 	bl	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e010      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4907      	ldr	r1, [pc, #28]	@ (8004df8 <I2C_MasterRequestWrite+0x100>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fadc 	bl	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	00010008 	.word	0x00010008
 8004df8:	00010002 	.word	0x00010002

08004dfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa36 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4c:	d103      	bne.n	8004e56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e05f      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	492d      	ldr	r1, [pc, #180]	@ (8004f24 <I2C_RequestMemoryWrite+0x128>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fa91 	bl	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e04c      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e98:	6a39      	ldr	r1, [r7, #32]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb1c 	bl	80054d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d107      	bne.n	8004ebe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e02b      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]
 8004ed2:	e021      	b.n	8004f18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 faf6 	bl	80054d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e005      	b.n	8004f1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0e:	893b      	ldrh	r3, [r7, #8]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	00010002 	.word	0x00010002

08004f28 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f44:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f68:	2200      	movs	r2, #0
 8004f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	2200      	movs	r2, #0
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004f82:	2b21      	cmp	r3, #33	@ 0x21
 8004f84:	d007      	beq.n	8004f96 <I2C_DMAXferCplt+0x6e>
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004f8c:	2b22      	cmp	r3, #34	@ 0x22
 8004f8e:	d131      	bne.n	8004ff4 <I2C_DMAXferCplt+0xcc>
 8004f90:	7cbb      	ldrb	r3, [r7, #18]
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d12e      	bne.n	8004ff4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fa4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b29      	cmp	r3, #41	@ 0x29
 8004fb0:	d10a      	bne.n	8004fc8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2221      	movs	r2, #33	@ 0x21
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2228      	movs	r2, #40	@ 0x28
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fc0:	6978      	ldr	r0, [r7, #20]
 8004fc2:	f7fe fd42 	bl	8003a4a <HAL_I2C_SlaveTxCpltCallback>
 8004fc6:	e00c      	b.n	8004fe2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fcc:	d109      	bne.n	8004fe2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2222      	movs	r2, #34	@ 0x22
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2228      	movs	r2, #40	@ 0x28
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fdc:	6978      	ldr	r0, [r7, #20]
 8004fde:	f7fe fd3d 	bl	8003a5c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004ff0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ff2:	e074      	b.n	80050de <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d06e      	beq.n	80050de <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005018:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005028:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005030:	d009      	beq.n	8005046 <I2C_DMAXferCplt+0x11e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d006      	beq.n	8005046 <I2C_DMAXferCplt+0x11e>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800503e:	d002      	beq.n	8005046 <I2C_DMAXferCplt+0x11e>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b20      	cmp	r3, #32
 8005044:	d107      	bne.n	8005056 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005054:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005064:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005074:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f7fe fd11 	bl	8003aac <HAL_I2C_ErrorCallback>
}
 800508a:	e028      	b.n	80050de <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d10a      	bne.n	80050b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7fe fcf3 	bl	8003a9a <HAL_I2C_MemRxCpltCallback>
}
 80050b4:	e013      	b.n	80050de <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d002      	beq.n	80050ca <I2C_DMAXferCplt+0x1a2>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d103      	bne.n	80050d2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80050d0:	e002      	b.n	80050d8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2212      	movs	r2, #18
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80050d8:	6978      	ldr	r0, [r7, #20]
 80050da:	f7fe fcad 	bl	8003a38 <HAL_I2C_MasterRxCpltCallback>
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005100:	2200      	movs	r2, #0
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	2200      	movs	r2, #0
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005122:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f043 0210 	orr.w	r2, r3, #16
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7fe fcb0 	bl	8003aac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800516e:	4b4b      	ldr	r3, [pc, #300]	@ (800529c <I2C_DMAAbort+0x148>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	08db      	lsrs	r3, r3, #3
 8005174:	4a4a      	ldr	r2, [pc, #296]	@ (80052a0 <I2C_DMAAbort+0x14c>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	0a1a      	lsrs	r2, r3, #8
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	00da      	lsls	r2, r3, #3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800519a:	e00a      	b.n	80051b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b0:	d0ea      	beq.n	8005188 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051be:	2200      	movs	r2, #0
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f4:	2200      	movs	r2, #0
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	2200      	movs	r2, #0
 8005206:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b60      	cmp	r3, #96	@ 0x60
 8005222:	d10e      	bne.n	8005242 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800523a:	6978      	ldr	r0, [r7, #20]
 800523c:	f7fe fc3f 	bl	8003abe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005240:	e027      	b.n	8005292 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005248:	2b28      	cmp	r3, #40	@ 0x28
 800524a:	d117      	bne.n	800527c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800526a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2228      	movs	r2, #40	@ 0x28
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800527a:	e007      	b.n	800528c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800528c:	6978      	ldr	r0, [r7, #20]
 800528e:	f7fe fc0d 	bl	8003aac <HAL_I2C_ErrorCallback>
}
 8005292:	bf00      	nop
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	14f8b589 	.word	0x14f8b589

080052a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b4:	e048      	b.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d044      	beq.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fc fc65 	bl	8001b8c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d139      	bne.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10d      	bne.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	43da      	mvns	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	e00c      	b.n	8005314 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d116      	bne.n	8005348 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e023      	b.n	8005390 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10d      	bne.n	800536e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	43da      	mvns	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	e00c      	b.n	8005388 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	43da      	mvns	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	429a      	cmp	r2, r3
 800538c:	d093      	beq.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a6:	e071      	b.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b6:	d123      	bne.n	8005400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	f043 0204 	orr.w	r2, r3, #4
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e067      	b.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d041      	beq.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fc fbc0 	bl	8001b8c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d136      	bne.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d10c      	bne.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	43da      	mvns	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf14      	ite	ne
 800543a:	2301      	movne	r3, #1
 800543c:	2300      	moveq	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	e00b      	b.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	43da      	mvns	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e021      	b.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d10c      	bne.n	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	43da      	mvns	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e00b      	b.n	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf14      	ite	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	2300      	moveq	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f47f af6d 	bne.w	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e4:	e034      	b.n	8005550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f8b8 	bl	800565c <I2C_IsAcknowledgeFailed>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e034      	b.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d028      	beq.n	8005550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fc fb45 	bl	8001b8c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11d      	bne.n	8005550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	2b80      	cmp	r3, #128	@ 0x80
 8005520:	d016      	beq.n	8005550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	f043 0220 	orr.w	r2, r3, #32
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e007      	b.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d1c3      	bne.n	80054e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005574:	e034      	b.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f870 	bl	800565c <I2C_IsAcknowledgeFailed>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e034      	b.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d028      	beq.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fc fafd 	bl	8001b8c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d11d      	bne.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d016      	beq.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e007      	b.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d1c3      	bne.n	8005576 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005604:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	08db      	lsrs	r3, r3, #3
 800560a:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	0a1a      	lsrs	r2, r3, #8
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3b01      	subs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e008      	b.n	8005648 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005644:	d0e9      	beq.n	800561a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000000c 	.word	0x2000000c
 8005658:	14f8b589 	.word	0x14f8b589

0800565c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005672:	d11b      	bne.n	80056ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800567c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056c8:	d103      	bne.n	80056d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056d0:	e007      	b.n	80056e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056da:	d102      	bne.n	80056e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2208      	movs	r2, #8
 80056e0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0e8      	b.n	80058d0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f007 f94e 	bl	800c9b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2203      	movs	r2, #3
 800571c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f003 f846 	bl	80087bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800573a:	f003 f81c 	bl	8008776 <USB_CoreInit>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0bf      	b.n	80058d0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f003 f84a 	bl	80087f0 <USB_SetCurrentMode>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0b0      	b.n	80058d0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	e03e      	b.n	80057f2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005774:	7bfa      	ldrb	r2, [r7, #15]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	3311      	adds	r3, #17
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	440b      	add	r3, r1
 8005796:	3310      	adds	r3, #16
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	3313      	adds	r3, #19
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	440b      	add	r3, r1
 80057be:	3320      	adds	r3, #32
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	3324      	adds	r3, #36	@ 0x24
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	440b      	add	r3, r1
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	3301      	adds	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3bb      	bcc.n	8005774 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	e044      	b.n	800588c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	440b      	add	r3, r1
 8005810:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	440b      	add	r3, r1
 8005826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	440b      	add	r3, r1
 800583c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	440b      	add	r3, r1
 8005852:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	3301      	adds	r3, #1
 800588a:	73fb      	strb	r3, [r7, #15]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	429a      	cmp	r2, r3
 8005894:	d3b5      	bcc.n	8005802 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058a0:	f002 ffb2 	bl	8008808 <USB_DevInit>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e00c      	b.n	80058d0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f005 fa32 	bl	800ad32 <USB_DevDisconnect>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_PCD_Start+0x16>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e016      	b.n	800591c <HAL_PCD_Start+0x44>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 ff48 	bl	8008790 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005900:	2101      	movs	r1, #1
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f007 fac9 	bl	800ce9a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f005 fa06 	bl	800ad1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 fa08 	bl	800ad46 <USB_ReadInterrupts>
 8005936:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fb1a 	bl	8005f7c <PCD_EP_ISR_Handler>

    return;
 8005948:	e119      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005966:	b292      	uxth	r2, r2
 8005968:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f007 f89c 	bl	800caaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005972:	2100      	movs	r1, #0
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f905 	bl	8005b84 <HAL_PCD_SetAddress>

    return;
 800597a:	e100      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005998:	b292      	uxth	r2, r2
 800599a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800599e:	e0ee      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00c      	beq.n	80059c4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059bc:	b292      	uxth	r2, r2
 80059be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80059c2:	e0dc      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d027      	beq.n	8005a1e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	b292      	uxth	r2, r2
 80059e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0208 	bic.w	r2, r2, #8
 80059f8:	b292      	uxth	r2, r2
 80059fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f007 f88c 	bl	800cb1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a16:	b292      	uxth	r2, r2
 8005a18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a1c:	e0af      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8083 	beq.w	8005b30 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	77fb      	strb	r3, [r7, #31]
 8005a2e:	e010      	b.n	8005a52 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	7ffb      	ldrb	r3, [r7, #31]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	441a      	add	r2, r3
 8005a3c:	7ffb      	ldrb	r3, [r7, #31]
 8005a3e:	8812      	ldrh	r2, [r2, #0]
 8005a40:	b292      	uxth	r2, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	3320      	adds	r3, #32
 8005a46:	443b      	add	r3, r7
 8005a48:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005a4c:	7ffb      	ldrb	r3, [r7, #31]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	7ffb      	ldrb	r3, [r7, #31]
 8005a54:	2b07      	cmp	r3, #7
 8005a56:	d9eb      	bls.n	8005a30 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	b292      	uxth	r2, r2
 8005a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	b292      	uxth	r2, r2
 8005a84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a88:	bf00      	nop
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f6      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e00f      	b.n	8005ada <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005aba:	7ffb      	ldrb	r3, [r7, #31]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	7ffa      	ldrb	r2, [r7, #31]
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	440a      	add	r2, r1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	3320      	adds	r3, #32
 8005acc:	443b      	add	r3, r7
 8005ace:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ad2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005ad4:	7ffb      	ldrb	r3, [r7, #31]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	2b07      	cmp	r3, #7
 8005ade:	d9ec      	bls.n	8005aba <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0208 	orr.w	r2, r2, #8
 8005af2:	b292      	uxth	r2, r2
 8005af4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0204 	orr.w	r2, r2, #4
 8005b22:	b292      	uxth	r2, r2
 8005b24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f006 ffdd 	bl	800cae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b2e:	e026      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00f      	beq.n	8005b5a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f006 ff9b 	bl	800ca8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b58:	e011      	b.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b76:	b292      	uxth	r2, r2
 8005b78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b7c:	bf00      	nop
  }
}
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_PCD_SetAddress+0x1a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e012      	b.n	8005bc4 <HAL_PCD_SetAddress+0x40>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 f89f 	bl	800acf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	70fb      	strb	r3, [r7, #3]
 8005bde:	460b      	mov	r3, r1
 8005be0:	803b      	strh	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da0e      	bge.n	8005c10 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 0207 	and.w	r2, r3, #7
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	3310      	adds	r3, #16
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	705a      	strb	r2, [r3, #1]
 8005c0e:	e00e      	b.n	8005c2e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 0207 	and.w	r2, r3, #7
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005c3a:	883a      	ldrh	r2, [r7, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	78ba      	ldrb	r2, [r7, #2]
 8005c44:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c46:	78bb      	ldrb	r3, [r7, #2]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d102      	bne.n	8005c52 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_PCD_EP_Open+0x94>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e00e      	b.n	8005c7e <HAL_PCD_EP_Open+0xb2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f002 fde8 	bl	8008844 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da0e      	bge.n	8005cb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	f003 0207 	and.w	r2, r3, #7
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	3310      	adds	r3, #16
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	705a      	strb	r2, [r3, #1]
 8005cb6:	e00e      	b.n	8005cd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	f003 0207 	and.w	r2, r3, #7
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_PCD_EP_Close+0x6a>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e00e      	b.n	8005d0e <HAL_PCD_EP_Close+0x88>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f003 f960 	bl	8008fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	460b      	mov	r3, r1
 8005d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	f003 0207 	and.w	r2, r3, #7
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2200      	movs	r2, #0
 8005d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f003 fb17 	bl	800939c <USB_EPStartXfer>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	f003 0207 	and.w	r2, r3, #7
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	440b      	add	r3, r1
 8005d96:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	460b      	mov	r3, r1
 8005db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	f003 0207 	and.w	r2, r3, #7
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2200      	movs	r2, #0
 8005dea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2201      	movs	r2, #1
 8005df0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f003 fac9 	bl	800939c <USB_EPStartXfer>

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	7912      	ldrb	r2, [r2, #4]
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e04c      	b.n	8005ecc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da0e      	bge.n	8005e58 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 0207 	and.w	r2, r3, #7
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	3310      	adds	r3, #16
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	705a      	strb	r2, [r3, #1]
 8005e56:	e00c      	b.n	8005e72 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_PCD_EP_SetStall+0x7e>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e01c      	b.n	8005ecc <HAL_PCD_EP_SetStall+0xb8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f004 fe2c 	bl	800aafe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d108      	bne.n	8005ec2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f004 ff51 	bl	800ad64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	7912      	ldrb	r2, [r2, #4]
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e040      	b.n	8005f74 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da0e      	bge.n	8005f18 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 0207 	and.w	r2, r3, #7
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3310      	adds	r3, #16
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	705a      	strb	r2, [r3, #1]
 8005f16:	e00e      	b.n	8005f36 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	f003 0207 	and.w	r2, r3, #7
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_PCD_EP_ClrStall+0x82>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e00e      	b.n	8005f74 <HAL_PCD_EP_ClrStall+0xa0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f004 fe1a 	bl	800ab9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b096      	sub	sp, #88	@ 0x58
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f84:	e3bb      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f8e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005fa0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 8175 	bne.w	8006294 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005faa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d14e      	bne.n	8006054 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	81fb      	strh	r3, [r7, #14]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3310      	adds	r3, #16
 8005fde:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800600c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600e:	695a      	ldr	r2, [r3, #20]
 8006010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	441a      	add	r2, r3
 8006016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006018:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800601a:	2100      	movs	r1, #0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f006 fd1c 	bl	800ca5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7b5b      	ldrb	r3, [r3, #13]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8368 	beq.w	80066fe <PCD_EP_ISR_Handler+0x782>
 800602e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 8363 	bne.w	80066fe <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7b5b      	ldrb	r3, [r3, #13]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006042:	b2da      	uxtb	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	735a      	strb	r2, [r3, #13]
 8006052:	e354      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800605a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800606a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800606e:	2b00      	cmp	r3, #0
 8006070:	d034      	beq.n	80060dc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	3306      	adds	r3, #6
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800609a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800609c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80060a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80060ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f004 fea8 	bl	800ae06 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80060c2:	4013      	ands	r3, r2
 80060c4:	823b      	strh	r3, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	8a3a      	ldrh	r2, [r7, #16]
 80060cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060d0:	b292      	uxth	r2, r2
 80060d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f006 fc93 	bl	800ca00 <HAL_PCD_SetupStageCallback>
 80060da:	e310      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80060dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f280 830c 	bge.w	80066fe <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80060f2:	4013      	ands	r3, r2
 80060f4:	83fb      	strh	r3, [r7, #30]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	8bfa      	ldrh	r2, [r7, #30]
 80060fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006100:	b292      	uxth	r2, r2
 8006102:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4413      	add	r3, r2
 8006118:	3306      	adds	r3, #6
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800612c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <PCD_EP_ISR_Handler+0x1f0>
 8006138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d015      	beq.n	800616c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006146:	6959      	ldr	r1, [r3, #20]
 8006148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800614c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006150:	b29b      	uxth	r3, r3
 8006152:	f004 fe58 	bl	800ae06 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	441a      	add	r2, r3
 8006160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006162:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f006 fc5c 	bl	800ca24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006176:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800617a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 82bd 	bne.w	80066fe <PCD_EP_ISR_Handler+0x782>
 8006184:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006188:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800618c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006190:	f000 82b5 	beq.w	80066fe <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	4413      	add	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061be:	b29a      	uxth	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ca:	d91d      	bls.n	8006208 <PCD_EP_ISR_Handler+0x28c>
 80061cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <PCD_EP_ISR_Handler+0x26a>
 80061e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e2:	3b01      	subs	r3, #1
 80061e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	029b      	lsls	r3, r3, #10
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4313      	orrs	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006200:	b29a      	uxth	r2, r3
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e026      	b.n	8006256 <PCD_EP_ISR_Handler+0x2da>
 8006208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <PCD_EP_ISR_Handler+0x2aa>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621e:	b29a      	uxth	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	e017      	b.n	8006256 <PCD_EP_ISR_Handler+0x2da>
 8006226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <PCD_EP_ISR_Handler+0x2c4>
 800623a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623c:	3301      	adds	r3, #1
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29a      	uxth	r2, r3
 8006246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29b      	uxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006266:	827b      	strh	r3, [r7, #18]
 8006268:	8a7b      	ldrh	r3, [r7, #18]
 800626a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800626e:	827b      	strh	r3, [r7, #18]
 8006270:	8a7b      	ldrh	r3, [r7, #18]
 8006272:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006276:	827b      	strh	r3, [r7, #18]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	8a7b      	ldrh	r3, [r7, #18]
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800628a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]
 8006292:	e234      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f280 80fc 	bge.w	80064aa <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062c8:	4013      	ands	r3, r2
 80062ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80062e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80062e4:	b292      	uxth	r2, r2
 80062e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80062e8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	7b1b      	ldrb	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d125      	bne.n	8006352 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	3306      	adds	r3, #6
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800632e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006332:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8092 	beq.w	8006460 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006342:	6959      	ldr	r1, [r3, #20]
 8006344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006346:	88da      	ldrh	r2, [r3, #6]
 8006348:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800634c:	f004 fd5b 	bl	800ae06 <USB_ReadPMA>
 8006350:	e086      	b.n	8006460 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d10a      	bne.n	8006370 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800635a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800635e:	461a      	mov	r2, r3
 8006360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9d9 	bl	800671a <HAL_PCD_EP_DB_Receive>
 8006368:	4603      	mov	r3, r0
 800636a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800636e:	e077      	b.n	8006460 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80063a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d024      	beq.n	8006418 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	3302      	adds	r3, #2
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80063fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02e      	beq.n	8006460 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640c:	891a      	ldrh	r2, [r3, #8]
 800640e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006412:	f004 fcf8 	bl	800ae06 <USB_ReadPMA>
 8006416:	e023      	b.n	8006460 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4413      	add	r3, r2
 800642c:	3306      	adds	r3, #6
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006440:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006444:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006452:	6959      	ldr	r1, [r3, #20]
 8006454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006456:	895a      	ldrh	r2, [r3, #10]
 8006458:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800645c:	f004 fcd3 	bl	800ae06 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006468:	441a      	add	r2, r3
 800646a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800646e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006476:	441a      	add	r2, r3
 8006478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800647a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800647c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <PCD_EP_ISR_Handler+0x514>
 8006484:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d206      	bcs.n	800649e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f006 fac4 	bl	800ca24 <HAL_PCD_DataOutStageCallback>
 800649c:	e005      	b.n	80064aa <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064a4:	4618      	mov	r0, r3
 80064a6:	f002 ff79 	bl	800939c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80064aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80064ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8123 	beq.w	80066fe <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80064b8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	3310      	adds	r3, #16
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 80a2 	bne.w	8006656 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8006512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006514:	2200      	movs	r2, #0
 8006516:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8093 	beq.w	8006648 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006522:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d046      	beq.n	80065bc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800652e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d126      	bne.n	8006584 <PCD_EP_ISR_Handler+0x608>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	627b      	str	r3, [r7, #36]	@ 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	4413      	add	r3, r2
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
 800654e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	011a      	lsls	r2, r3, #4
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	4413      	add	r3, r2
 8006558:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006568:	b29a      	uxth	r2, r3
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e061      	b.n	8006648 <PCD_EP_ISR_Handler+0x6cc>
 8006584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d15d      	bne.n	8006648 <PCD_EP_ISR_Handler+0x6cc>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	4413      	add	r3, r2
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	011a      	lsls	r2, r3, #4
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	2200      	movs	r2, #0
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e045      	b.n	8006648 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d126      	bne.n	8006618 <PCD_EP_ISR_Handler+0x69c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065de:	4413      	add	r3, r2
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	011a      	lsls	r2, r3, #4
 80065e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ea:	4413      	add	r3, r2
 80065ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006610:	b29a      	uxth	r2, r3
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e017      	b.n	8006648 <PCD_EP_ISR_Handler+0x6cc>
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d113      	bne.n	8006648 <PCD_EP_ISR_Handler+0x6cc>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006628:	b29b      	uxth	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662e:	4413      	add	r3, r2
 8006630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	011a      	lsls	r2, r3, #4
 8006638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800663a:	4413      	add	r3, r2
 800663c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f006 fa03 	bl	800ca5a <HAL_PCD_DataInStageCallback>
 8006654:	e053      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800665a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d146      	bne.n	80066f0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800666a:	b29b      	uxth	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4413      	add	r3, r2
 8006676:	3302      	adds	r3, #2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800668a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800668e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006696:	429a      	cmp	r2, r3
 8006698:	d907      	bls.n	80066aa <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800669a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066a6:	619a      	str	r2, [r3, #24]
 80066a8:	e002      	b.n	80066b0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80066aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80066b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f006 f9cb 	bl	800ca5a <HAL_PCD_DataInStageCallback>
 80066c4:	e01b      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80066c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066ce:	441a      	add	r2, r3
 80066d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80066d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066dc:	441a      	add	r2, r3
 80066de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066e8:	4618      	mov	r0, r3
 80066ea:	f002 fe57 	bl	800939c <USB_EPStartXfer>
 80066ee:	e006      	b.n	80066fe <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80066f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80066f4:	461a      	mov	r2, r3
 80066f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f91b 	bl	8006934 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006706:	b29b      	uxth	r3, r3
 8006708:	b21b      	sxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f6ff ac3b 	blt.w	8005f86 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3758      	adds	r7, #88	@ 0x58
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b088      	sub	sp, #32
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d07e      	beq.n	8006830 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	3302      	adds	r3, #2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	8b7b      	ldrh	r3, [r7, #26]
 8006762:	429a      	cmp	r2, r3
 8006764:	d306      	bcc.n	8006774 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	8b7b      	ldrh	r3, [r7, #26]
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	619a      	str	r2, [r3, #24]
 8006772:	e002      	b.n	800677a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d123      	bne.n	80067ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679c:	833b      	strh	r3, [r7, #24]
 800679e:	8b3b      	ldrh	r3, [r7, #24]
 80067a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067a4:	833b      	strh	r3, [r7, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	8b3b      	ldrh	r3, [r7, #24]
 80067b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01f      	beq.n	8006814 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	82fb      	strh	r3, [r7, #22]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006814:	8b7b      	ldrh	r3, [r7, #26]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 8087 	beq.w	800692a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6959      	ldr	r1, [r3, #20]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	891a      	ldrh	r2, [r3, #8]
 8006828:	8b7b      	ldrh	r3, [r7, #26]
 800682a:	f004 faec 	bl	800ae06 <USB_ReadPMA>
 800682e:	e07c      	b.n	800692a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006838:	b29b      	uxth	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4413      	add	r3, r2
 8006844:	3306      	adds	r3, #6
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006858:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	8b7b      	ldrh	r3, [r7, #26]
 8006860:	429a      	cmp	r2, r3
 8006862:	d306      	bcc.n	8006872 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	8b7b      	ldrh	r3, [r7, #26]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	619a      	str	r2, [r3, #24]
 8006870:	e002      	b.n	8006878 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d123      	bne.n	80068c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	83fb      	strh	r3, [r7, #30]
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068a2:	83fb      	strh	r3, [r7, #30]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	8bfb      	ldrh	r3, [r7, #30]
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d11f      	bne.n	8006912 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ec:	83bb      	strh	r3, [r7, #28]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006912:	8b7b      	ldrh	r3, [r7, #26]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6959      	ldr	r1, [r3, #20]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	895a      	ldrh	r2, [r3, #10]
 8006924:	8b7b      	ldrh	r3, [r7, #26]
 8006926:	f004 fa6e 	bl	800ae06 <USB_ReadPMA>
    }
  }

  return count;
 800692a:	8b7b      	ldrh	r3, [r7, #26]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b0a4      	sub	sp, #144	@ 0x90
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 81dd 	beq.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4413      	add	r3, r2
 8006962:	3302      	adds	r3, #2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006976:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006982:	429a      	cmp	r2, r3
 8006984:	d907      	bls.n	8006996 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	619a      	str	r2, [r3, #24]
 8006994:	e002      	b.n	800699c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 80b9 	bne.w	8006b18 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d126      	bne.n	80069fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	4413      	add	r3, r2
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	011a      	lsls	r2, r3, #4
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e01a      	b.n	8006a32 <HAL_PCD_EP_DB_Transmit+0xfe>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d116      	bne.n	8006a32 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a18:	4413      	add	r3, r2
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	011a      	lsls	r2, r3, #4
 8006a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d126      	bne.n	8006a8e <HAL_PCD_EP_DB_Transmit+0x15a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	e017      	b.n	8006abe <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d113      	bne.n	8006abe <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	4413      	add	r3, r2
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	011a      	lsls	r2, r3, #4
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2200      	movs	r2, #0
 8006abc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f005 ffc8 	bl	800ca5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 82fc 	beq.w	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af0:	82fb      	strh	r3, [r7, #22]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	8afb      	ldrh	r3, [r7, #22]
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
 8006b16:	e2da      	b.n	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d021      	beq.n	8006b66 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 82ae 	bne.w	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b88:	441a      	add	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d30b      	bcc.n	8006bb2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6a1a      	ldr	r2, [r3, #32]
 8006ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	621a      	str	r2, [r3, #32]
 8006bb0:	e017      	b.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d108      	bne.n	8006bcc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006bba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006bca:	e00a      	b.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d165      	bne.n	8006cb6 <HAL_PCD_EP_DB_Transmit+0x382>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfe:	4413      	add	r3, r2
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	011a      	lsls	r2, r3, #4
 8006c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c26:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c28:	d91d      	bls.n	8006c66 <HAL_PCD_EP_DB_Transmit+0x332>
 8006c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <HAL_PCD_EP_DB_Transmit+0x310>
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c40:	3b01      	subs	r3, #1
 8006c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e044      	b.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <HAL_PCD_EP_DB_Transmit+0x350>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e035      	b.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	029b      	lsls	r3, r3, #10
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	e01c      	b.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d118      	bne.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd2:	4413      	add	r3, r2
 8006cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011a      	lsls	r2, r3, #4
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cde:	4413      	add	r3, r2
 8006ce0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	6959      	ldr	r1, [r3, #20]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	891a      	ldrh	r2, [r3, #8]
 8006cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f004 f83a 	bl	800ad7a <USB_WritePMA>
 8006d06:	e1e2      	b.n	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3306      	adds	r3, #6
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d307      	bcc.n	8006d50 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d48:	1ad2      	subs	r2, r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	619a      	str	r2, [r3, #24]
 8006d4e:	e002      	b.n	8006d56 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 80c0 	bne.w	8006ee0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d126      	bne.n	8006db6 <HAL_PCD_EP_DB_Transmit+0x482>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d7c:	4413      	add	r3, r2
 8006d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	011a      	lsls	r2, r3, #4
 8006d86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	e01a      	b.n	8006dec <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	785b      	ldrb	r3, [r3, #1]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d116      	bne.n	8006dec <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd2:	4413      	add	r3, r2
 8006dd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	011a      	lsls	r2, r3, #4
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006de4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de8:	2200      	movs	r2, #0
 8006dea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d12b      	bne.n	8006e52 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e0e:	4413      	add	r3, r2
 8006e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	011a      	lsls	r2, r3, #4
 8006e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e017      	b.n	8006e82 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d113      	bne.n	8006e82 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e68:	4413      	add	r3, r2
 8006e6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	011a      	lsls	r2, r3, #4
 8006e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e74:	4413      	add	r3, r2
 8006e76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e7e:	2200      	movs	r2, #0
 8006e80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f005 fde6 	bl	800ca5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 811a 	bne.w	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	441a      	add	r2, r3
 8006ec6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
 8006ede:	e0f6      	b.n	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d121      	bne.n	8006f2e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	f040 80ca 	bne.w	80070ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f42:	441a      	add	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f50:	441a      	add	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d30b      	bcc.n	8006f7a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	621a      	str	r2, [r3, #32]
 8006f78:	e017      	b.n	8006faa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d108      	bne.n	8006f94 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006f82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006f92:	e00a      	b.n	8006faa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d165      	bne.n	8007084 <HAL_PCD_EP_DB_Transmit+0x750>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fcc:	4413      	add	r3, r2
 8006fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	011a      	lsls	r2, r3, #4
 8006fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd8:	4413      	add	r3, r2
 8006fda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ff6:	d91d      	bls.n	8007034 <HAL_PCD_EP_DB_Transmit+0x700>
 8006ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <HAL_PCD_EP_DB_Transmit+0x6de>
 800700c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800700e:	3b01      	subs	r3, #1
 8007010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29a      	uxth	r2, r3
 8007018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800701a:	b29b      	uxth	r3, r3
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	b29b      	uxth	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702c:	b29a      	uxth	r2, r3
 800702e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e041      	b.n	80070b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8007034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <HAL_PCD_EP_DB_Transmit+0x71e>
 800703c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704a:	b29a      	uxth	r2, r3
 800704c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e032      	b.n	80070b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8007052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800705a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_PCD_EP_DB_Transmit+0x738>
 8007066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007068:	3301      	adds	r3, #1
 800706a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800706c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29a      	uxth	r2, r3
 8007072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007074:	b29b      	uxth	r3, r3
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	b29b      	uxth	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b29a      	uxth	r2, r3
 800707e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	e019      	b.n	80070b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d115      	bne.n	80070b8 <HAL_PCD_EP_DB_Transmit+0x784>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709a:	4413      	add	r3, r2
 800709c:	657b      	str	r3, [r7, #84]	@ 0x54
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	4413      	add	r3, r2
 80070a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6959      	ldr	r1, [r3, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	895a      	ldrh	r2, [r3, #10]
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f003 fe56 	bl	800ad7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e8:	82bb      	strh	r3, [r7, #20]
 80070ea:	8abb      	ldrh	r3, [r7, #20]
 80070ec:	f083 0310 	eor.w	r3, r3, #16
 80070f0:	82bb      	strh	r3, [r7, #20]
 80070f2:	8abb      	ldrh	r3, [r7, #20]
 80070f4:	f083 0320 	eor.w	r3, r3, #32
 80070f8:	82bb      	strh	r3, [r7, #20]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	8abb      	ldrh	r3, [r7, #20]
 800710a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800710e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711a:	b29b      	uxth	r3, r3
 800711c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3790      	adds	r7, #144	@ 0x90
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	817b      	strh	r3, [r7, #10]
 8007136:	4613      	mov	r3, r2
 8007138:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800713a:	897b      	ldrh	r3, [r7, #10]
 800713c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	f003 0207 	and.w	r2, r3, #7
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	3310      	adds	r3, #16
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e009      	b.n	8007172 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800715e:	897a      	ldrh	r2, [r7, #10]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007172:	893b      	ldrh	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d107      	bne.n	8007188 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2200      	movs	r2, #0
 800717c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b29a      	uxth	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	80da      	strh	r2, [r3, #6]
 8007186:	e00b      	b.n	80071a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2201      	movs	r2, #1
 800718c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	b29a      	uxth	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	b29a      	uxth	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e272      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8087 	beq.w	80072da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071cc:	4b92      	ldr	r3, [pc, #584]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 030c 	and.w	r3, r3, #12
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d00c      	beq.n	80071f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071d8:	4b8f      	ldr	r3, [pc, #572]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 030c 	and.w	r3, r3, #12
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d112      	bne.n	800720a <HAL_RCC_OscConfig+0x5e>
 80071e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f0:	d10b      	bne.n	800720a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f2:	4b89      	ldr	r3, [pc, #548]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d06c      	beq.n	80072d8 <HAL_RCC_OscConfig+0x12c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d168      	bne.n	80072d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e24c      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007212:	d106      	bne.n	8007222 <HAL_RCC_OscConfig+0x76>
 8007214:	4b80      	ldr	r3, [pc, #512]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a7f      	ldr	r2, [pc, #508]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800721a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e02e      	b.n	8007280 <HAL_RCC_OscConfig+0xd4>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x98>
 800722a:	4b7b      	ldr	r3, [pc, #492]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a7a      	ldr	r2, [pc, #488]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b78      	ldr	r3, [pc, #480]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a77      	ldr	r2, [pc, #476]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800723c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e01d      	b.n	8007280 <HAL_RCC_OscConfig+0xd4>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0xbc>
 800724e:	4b72      	ldr	r3, [pc, #456]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a71      	ldr	r2, [pc, #452]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b6f      	ldr	r3, [pc, #444]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6e      	ldr	r2, [pc, #440]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0xd4>
 8007268:	4b6b      	ldr	r3, [pc, #428]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6a      	ldr	r2, [pc, #424]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800726e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b68      	ldr	r3, [pc, #416]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a67      	ldr	r2, [pc, #412]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800727a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800727e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007288:	f7fa fc80 	bl	8001b8c <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007290:	f7fa fc7c 	bl	8001b8c <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b64      	cmp	r3, #100	@ 0x64
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e200      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a2:	4b5d      	ldr	r3, [pc, #372]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0xe4>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b0:	f7fa fc6c 	bl	8001b8c <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fa fc68 	bl	8001b8c <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	@ 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e1ec      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ca:	4b53      	ldr	r3, [pc, #332]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0x10c>
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d063      	beq.n	80073ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80072f2:	4b49      	ldr	r3, [pc, #292]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d11c      	bne.n	8007338 <HAL_RCC_OscConfig+0x18c>
 80072fe:	4b46      	ldr	r3, [pc, #280]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d116      	bne.n	8007338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730a:	4b43      	ldr	r3, [pc, #268]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RCC_OscConfig+0x176>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e1c0      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007322:	4b3d      	ldr	r3, [pc, #244]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4939      	ldr	r1, [pc, #228]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007332:	4313      	orrs	r3, r2
 8007334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007336:	e03a      	b.n	80073ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d020      	beq.n	8007382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007340:	4b36      	ldr	r3, [pc, #216]	@ (800741c <HAL_RCC_OscConfig+0x270>)
 8007342:	2201      	movs	r2, #1
 8007344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007346:	f7fa fc21 	bl	8001b8c <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800734e:	f7fa fc1d 	bl	8001b8c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e1a1      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007360:	4b2d      	ldr	r3, [pc, #180]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0f0      	beq.n	800734e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800736c:	4b2a      	ldr	r3, [pc, #168]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4927      	ldr	r1, [pc, #156]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 800737c:	4313      	orrs	r3, r2
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	e015      	b.n	80073ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007382:	4b26      	ldr	r3, [pc, #152]	@ (800741c <HAL_RCC_OscConfig+0x270>)
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007388:	f7fa fc00 	bl	8001b8c <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007390:	f7fa fbfc 	bl	8001b8c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e180      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d03a      	beq.n	8007430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d019      	beq.n	80073f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073c2:	4b17      	ldr	r3, [pc, #92]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c8:	f7fa fbe0 	bl	8001b8c <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fa fbdc 	bl	8001b8c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e160      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007418 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80073ee:	2001      	movs	r0, #1
 80073f0:	f000 faba 	bl	8007968 <RCC_Delay>
 80073f4:	e01c      	b.n	8007430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <HAL_RCC_OscConfig+0x274>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073fc:	f7fa fbc6 	bl	8001b8c <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007402:	e00f      	b.n	8007424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007404:	f7fa fbc2 	bl	8001b8c <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d908      	bls.n	8007424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e146      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
 8007416:	bf00      	nop
 8007418:	40021000 	.word	0x40021000
 800741c:	42420000 	.word	0x42420000
 8007420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007424:	4b92      	ldr	r3, [pc, #584]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e9      	bne.n	8007404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80a6 	beq.w	800758a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007442:	4b8b      	ldr	r3, [pc, #556]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800744e:	4b88      	ldr	r3, [pc, #544]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	4a87      	ldr	r2, [pc, #540]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007458:	61d3      	str	r3, [r2, #28]
 800745a:	4b85      	ldr	r3, [pc, #532]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007462:	60bb      	str	r3, [r7, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746a:	4b82      	ldr	r3, [pc, #520]	@ (8007674 <HAL_RCC_OscConfig+0x4c8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007472:	2b00      	cmp	r3, #0
 8007474:	d118      	bne.n	80074a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007476:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_RCC_OscConfig+0x4c8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a7e      	ldr	r2, [pc, #504]	@ (8007674 <HAL_RCC_OscConfig+0x4c8>)
 800747c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007482:	f7fa fb83 	bl	8001b8c <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007488:	e008      	b.n	800749c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748a:	f7fa fb7f 	bl	8001b8c <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b64      	cmp	r3, #100	@ 0x64
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e103      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749c:	4b75      	ldr	r3, [pc, #468]	@ (8007674 <HAL_RCC_OscConfig+0x4c8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0f0      	beq.n	800748a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d106      	bne.n	80074be <HAL_RCC_OscConfig+0x312>
 80074b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	4a6e      	ldr	r2, [pc, #440]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	6213      	str	r3, [r2, #32]
 80074bc:	e02d      	b.n	800751a <HAL_RCC_OscConfig+0x36e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10c      	bne.n	80074e0 <HAL_RCC_OscConfig+0x334>
 80074c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	4a69      	ldr	r2, [pc, #420]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	6213      	str	r3, [r2, #32]
 80074d2:	4b67      	ldr	r3, [pc, #412]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	4a66      	ldr	r2, [pc, #408]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074d8:	f023 0304 	bic.w	r3, r3, #4
 80074dc:	6213      	str	r3, [r2, #32]
 80074de:	e01c      	b.n	800751a <HAL_RCC_OscConfig+0x36e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b05      	cmp	r3, #5
 80074e6:	d10c      	bne.n	8007502 <HAL_RCC_OscConfig+0x356>
 80074e8:	4b61      	ldr	r3, [pc, #388]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	4a60      	ldr	r2, [pc, #384]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074ee:	f043 0304 	orr.w	r3, r3, #4
 80074f2:	6213      	str	r3, [r2, #32]
 80074f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	4a5d      	ldr	r2, [pc, #372]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6213      	str	r3, [r2, #32]
 8007500:	e00b      	b.n	800751a <HAL_RCC_OscConfig+0x36e>
 8007502:	4b5b      	ldr	r3, [pc, #364]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	4a5a      	ldr	r2, [pc, #360]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	6213      	str	r3, [r2, #32]
 800750e:	4b58      	ldr	r3, [pc, #352]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	4a57      	ldr	r2, [pc, #348]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007514:	f023 0304 	bic.w	r3, r3, #4
 8007518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d015      	beq.n	800754e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007522:	f7fa fb33 	bl	8001b8c <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007528:	e00a      	b.n	8007540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752a:	f7fa fb2f 	bl	8001b8c <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007538:	4293      	cmp	r3, r2
 800753a:	d901      	bls.n	8007540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e0b1      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007540:	4b4b      	ldr	r3, [pc, #300]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0ee      	beq.n	800752a <HAL_RCC_OscConfig+0x37e>
 800754c:	e014      	b.n	8007578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800754e:	f7fa fb1d 	bl	8001b8c <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007554:	e00a      	b.n	800756c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007556:	f7fa fb19 	bl	8001b8c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007564:	4293      	cmp	r3, r2
 8007566:	d901      	bls.n	800756c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e09b      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756c:	4b40      	ldr	r3, [pc, #256]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1ee      	bne.n	8007556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757e:	4b3c      	ldr	r3, [pc, #240]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	4a3b      	ldr	r2, [pc, #236]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8087 	beq.w	80076a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007594:	4b36      	ldr	r3, [pc, #216]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	2b08      	cmp	r3, #8
 800759e:	d061      	beq.n	8007664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d146      	bne.n	8007636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a8:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <HAL_RCC_OscConfig+0x4cc>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ae:	f7fa faed 	bl	8001b8c <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b6:	f7fa fae9 	bl	8001b8c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e06d      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075c8:	4b29      	ldr	r3, [pc, #164]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f0      	bne.n	80075b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075dc:	d108      	bne.n	80075f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80075de:	4b24      	ldr	r3, [pc, #144]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4921      	ldr	r1, [pc, #132]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a19      	ldr	r1, [r3, #32]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	430b      	orrs	r3, r1
 8007602:	491b      	ldr	r1, [pc, #108]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007604:	4313      	orrs	r3, r2
 8007606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007608:	4b1b      	ldr	r3, [pc, #108]	@ (8007678 <HAL_RCC_OscConfig+0x4cc>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760e:	f7fa fabd 	bl	8001b8c <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007616:	f7fa fab9 	bl	8001b8c <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e03d      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007628:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0f0      	beq.n	8007616 <HAL_RCC_OscConfig+0x46a>
 8007634:	e035      	b.n	80076a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007636:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <HAL_RCC_OscConfig+0x4cc>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763c:	f7fa faa6 	bl	8001b8c <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fa faa2 	bl	8001b8c <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e026      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007656:	4b06      	ldr	r3, [pc, #24]	@ (8007670 <HAL_RCC_OscConfig+0x4c4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x498>
 8007662:	e01e      	b.n	80076a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d107      	bne.n	800767c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e019      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
 8007670:	40021000 	.word	0x40021000
 8007674:	40007000 	.word	0x40007000
 8007678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800767c:	4b0b      	ldr	r3, [pc, #44]	@ (80076ac <HAL_RCC_OscConfig+0x500>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	429a      	cmp	r2, r3
 800768e:	d106      	bne.n	800769e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769a:	429a      	cmp	r2, r3
 800769c:	d001      	beq.n	80076a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40021000 	.word	0x40021000

080076b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0d0      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d910      	bls.n	80076f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d2:	4b67      	ldr	r3, [pc, #412]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f023 0207 	bic.w	r2, r3, #7
 80076da:	4965      	ldr	r1, [pc, #404]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e2:	4b63      	ldr	r3, [pc, #396]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d001      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0b8      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d020      	beq.n	8007742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800770c:	4b59      	ldr	r3, [pc, #356]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4a58      	ldr	r2, [pc, #352]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007724:	4b53      	ldr	r3, [pc, #332]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4a52      	ldr	r2, [pc, #328]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800772a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800772e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4b50      	ldr	r3, [pc, #320]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	494d      	ldr	r1, [pc, #308]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800773e:	4313      	orrs	r3, r2
 8007740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d040      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	4b47      	ldr	r3, [pc, #284]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d115      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e07f      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d107      	bne.n	800777e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776e:	4b41      	ldr	r3, [pc, #260]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e073      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777e:	4b3d      	ldr	r3, [pc, #244]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e06b      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778e:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f023 0203 	bic.w	r2, r3, #3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	4936      	ldr	r1, [pc, #216]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	4313      	orrs	r3, r2
 800779e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a0:	f7fa f9f4 	bl	8001b8c <HAL_GetTick>
 80077a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a6:	e00a      	b.n	80077be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a8:	f7fa f9f0 	bl	8001b8c <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e053      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077be:	4b2d      	ldr	r3, [pc, #180]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f003 020c 	and.w	r2, r3, #12
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d1eb      	bne.n	80077a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d0:	4b27      	ldr	r3, [pc, #156]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d210      	bcs.n	8007800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077de:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 0207 	bic.w	r2, r3, #7
 80077e6:	4922      	ldr	r1, [pc, #136]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ee:	4b20      	ldr	r3, [pc, #128]	@ (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e032      	b.n	8007866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800780c:	4b19      	ldr	r3, [pc, #100]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4916      	ldr	r1, [pc, #88]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800781a:	4313      	orrs	r3, r2
 800781c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800782a:	4b12      	ldr	r3, [pc, #72]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	490e      	ldr	r1, [pc, #56]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 800783a:	4313      	orrs	r3, r2
 800783c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800783e:	f000 f821 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 8007842:	4602      	mov	r2, r0
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	490a      	ldr	r1, [pc, #40]	@ (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007850:	5ccb      	ldrb	r3, [r1, r3]
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	4a09      	ldr	r2, [pc, #36]	@ (800787c <HAL_RCC_ClockConfig+0x1cc>)
 8007858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800785a:	4b09      	ldr	r3, [pc, #36]	@ (8007880 <HAL_RCC_ClockConfig+0x1d0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fa f952 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40022000 	.word	0x40022000
 8007874:	40021000 	.word	0x40021000
 8007878:	0800e058 	.word	0x0800e058
 800787c:	2000000c 	.word	0x2000000c
 8007880:	20000010 	.word	0x20000010

08007884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x94>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 030c 	and.w	r3, r3, #12
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d002      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x30>
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d003      	beq.n	80078ba <HAL_RCC_GetSysClockFreq+0x36>
 80078b2:	e027      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078b4:	4b19      	ldr	r3, [pc, #100]	@ (800791c <HAL_RCC_GetSysClockFreq+0x98>)
 80078b6:	613b      	str	r3, [r7, #16]
      break;
 80078b8:	e027      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	0c9b      	lsrs	r3, r3, #18
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	4a17      	ldr	r2, [pc, #92]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x9c>)
 80078c4:	5cd3      	ldrb	r3, [r2, r3]
 80078c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80078d2:	4b11      	ldr	r3, [pc, #68]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x94>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	0c5b      	lsrs	r3, r3, #17
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	4a11      	ldr	r2, [pc, #68]	@ (8007924 <HAL_RCC_GetSysClockFreq+0xa0>)
 80078de:	5cd3      	ldrb	r3, [r2, r3]
 80078e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a0d      	ldr	r2, [pc, #52]	@ (800791c <HAL_RCC_GetSysClockFreq+0x98>)
 80078e6:	fb03 f202 	mul.w	r2, r3, r2
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	e004      	b.n	80078fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007928 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078f8:	fb02 f303 	mul.w	r3, r2, r3
 80078fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	613b      	str	r3, [r7, #16]
      break;
 8007902:	e002      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007904:	4b05      	ldr	r3, [pc, #20]	@ (800791c <HAL_RCC_GetSysClockFreq+0x98>)
 8007906:	613b      	str	r3, [r7, #16]
      break;
 8007908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800790a:	693b      	ldr	r3, [r7, #16]
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40021000 	.word	0x40021000
 800791c:	007a1200 	.word	0x007a1200
 8007920:	0800e070 	.word	0x0800e070
 8007924:	0800e080 	.word	0x0800e080
 8007928:	003d0900 	.word	0x003d0900

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b02      	ldr	r3, [pc, #8]	@ (800793c <HAL_RCC_GetHCLKFreq+0x10>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr
 800793c:	2000000c 	.word	0x2000000c

08007940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007944:	f7ff fff2 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	4903      	ldr	r1, [pc, #12]	@ (8007964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40021000 	.word	0x40021000
 8007964:	0800e068 	.word	0x0800e068

08007968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <RCC_Delay+0x34>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a0a      	ldr	r2, [pc, #40]	@ (80079a0 <RCC_Delay+0x38>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a5b      	lsrs	r3, r3, #9
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007984:	bf00      	nop
  }
  while (Delay --);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	60fa      	str	r2, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f9      	bne.n	8007984 <RCC_Delay+0x1c>
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr
 800799c:	2000000c 	.word	0x2000000c
 80079a0:	10624dd3 	.word	0x10624dd3

080079a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d07d      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80079c0:	2300      	movs	r3, #0
 80079c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079d0:	4b4c      	ldr	r3, [pc, #304]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079da:	61d3      	str	r3, [r2, #28]
 80079dc:	4b49      	ldr	r3, [pc, #292]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ec:	4b46      	ldr	r3, [pc, #280]	@ (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d118      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079f8:	4b43      	ldr	r3, [pc, #268]	@ (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a42      	ldr	r2, [pc, #264]	@ (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a04:	f7fa f8c2 	bl	8001b8c <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a0a:	e008      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fa f8be 	bl	8001b8c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b64      	cmp	r3, #100	@ 0x64
 8007a18:	d901      	bls.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e06d      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a2a:	4b36      	ldr	r3, [pc, #216]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d02e      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d027      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a48:	4b2e      	ldr	r3, [pc, #184]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a52:	4b2e      	ldr	r3, [pc, #184]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a58:	4b2c      	ldr	r3, [pc, #176]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a5e:	4a29      	ldr	r2, [pc, #164]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d014      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6e:	f7fa f88d 	bl	8001b8c <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a74:	e00a      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f7fa f889 	bl	8001b8c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e036      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0ee      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a98:	4b1a      	ldr	r3, [pc, #104]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4917      	ldr	r1, [pc, #92]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab0:	4b14      	ldr	r3, [pc, #80]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	4a13      	ldr	r2, [pc, #76]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	490b      	ldr	r1, [pc, #44]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ae6:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	4904      	ldr	r1, [pc, #16]	@ (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	40021000 	.word	0x40021000
 8007b08:	40007000 	.word	0x40007000
 8007b0c:	42420440 	.word	0x42420440

08007b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e041      	b.n	8007ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 fe52 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f000 fab2 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e041      	b.n	8007c44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f839 	bl	8007c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 fa63 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start+0x24>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e022      	b.n	8007cca <HAL_TIM_PWM_Start+0x6a>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d109      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x3e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e015      	b.n	8007cca <HAL_TIM_PWM_Start+0x6a>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d109      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x58>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e008      	b.n	8007cca <HAL_TIM_PWM_Start+0x6a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e05e      	b.n	8007d90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d104      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0x82>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ce0:	e013      	b.n	8007d0a <HAL_TIM_PWM_Start+0xaa>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d104      	bne.n	8007cf2 <HAL_TIM_PWM_Start+0x92>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cf0:	e00b      	b.n	8007d0a <HAL_TIM_PWM_Start+0xaa>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d104      	bne.n	8007d02 <HAL_TIM_PWM_Start+0xa2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d00:	e003      	b.n	8007d0a <HAL_TIM_PWM_Start+0xaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fc5c 	bl	80085d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8007d98 <HAL_TIM_PWM_Start+0x138>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d107      	bne.n	8007d32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a18      	ldr	r2, [pc, #96]	@ (8007d98 <HAL_TIM_PWM_Start+0x138>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_TIM_PWM_Start+0xfa>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d44:	d009      	beq.n	8007d5a <HAL_TIM_PWM_Start+0xfa>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a14      	ldr	r2, [pc, #80]	@ (8007d9c <HAL_TIM_PWM_Start+0x13c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_TIM_PWM_Start+0xfa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a12      	ldr	r2, [pc, #72]	@ (8007da0 <HAL_TIM_PWM_Start+0x140>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d111      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b06      	cmp	r3, #6
 8007d6a:	d010      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7c:	e007      	b.n	8007d8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40000400 	.word	0x40000400
 8007da0:	40000800 	.word	0x40000800

08007da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e0ae      	b.n	8007f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	f200 809f 	bhi.w	8007f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e0d 	.word	0x08007e0d
 8007ddc:	08007f11 	.word	0x08007f11
 8007de0:	08007f11 	.word	0x08007f11
 8007de4:	08007f11 	.word	0x08007f11
 8007de8:	08007e4d 	.word	0x08007e4d
 8007dec:	08007f11 	.word	0x08007f11
 8007df0:	08007f11 	.word	0x08007f11
 8007df4:	08007f11 	.word	0x08007f11
 8007df8:	08007e8f 	.word	0x08007e8f
 8007dfc:	08007f11 	.word	0x08007f11
 8007e00:	08007f11 	.word	0x08007f11
 8007e04:	08007f11 	.word	0x08007f11
 8007e08:	08007ecf 	.word	0x08007ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f9be 	bl	8008194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0208 	orr.w	r2, r2, #8
 8007e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0204 	bic.w	r2, r2, #4
 8007e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6999      	ldr	r1, [r3, #24]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	619a      	str	r2, [r3, #24]
      break;
 8007e4a:	e064      	b.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fa04 	bl	8008260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6999      	ldr	r1, [r3, #24]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	021a      	lsls	r2, r3, #8
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	619a      	str	r2, [r3, #24]
      break;
 8007e8c:	e043      	b.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fa4d 	bl	8008334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0208 	orr.w	r2, r2, #8
 8007ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0204 	bic.w	r2, r2, #4
 8007eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69d9      	ldr	r1, [r3, #28]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	61da      	str	r2, [r3, #28]
      break;
 8007ecc:	e023      	b.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fa97 	bl	8008408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69d9      	ldr	r1, [r3, #28]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	021a      	lsls	r2, r3, #8
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	61da      	str	r2, [r3, #28]
      break;
 8007f0e:	e002      	b.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
      break;
 8007f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_ConfigClockSource+0x1c>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e0b4      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x186>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7c:	d03e      	beq.n	8007ffc <HAL_TIM_ConfigClockSource+0xd4>
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f82:	f200 8087 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8a:	f000 8086 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x172>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f92:	d87f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b70      	cmp	r3, #112	@ 0x70
 8007f96:	d01a      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0xa6>
 8007f98:	2b70      	cmp	r3, #112	@ 0x70
 8007f9a:	d87b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b60      	cmp	r3, #96	@ 0x60
 8007f9e:	d050      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x11a>
 8007fa0:	2b60      	cmp	r3, #96	@ 0x60
 8007fa2:	d877      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b50      	cmp	r3, #80	@ 0x50
 8007fa6:	d03c      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0xfa>
 8007fa8:	2b50      	cmp	r3, #80	@ 0x50
 8007faa:	d873      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b40      	cmp	r3, #64	@ 0x40
 8007fae:	d058      	beq.n	8008062 <HAL_TIM_ConfigClockSource+0x13a>
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	d86f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b30      	cmp	r3, #48	@ 0x30
 8007fb6:	d064      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fb8:	2b30      	cmp	r3, #48	@ 0x30
 8007fba:	d86b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d060      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d867      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d05c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d05a      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fcc:	e062      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fde:	f000 fad8 	bl	8008592 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      break;
 8007ffa:	e04f      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800800c:	f000 fac1 	bl	8008592 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800801e:	609a      	str	r2, [r3, #8]
      break;
 8008020:	e03c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800802e:	461a      	mov	r2, r3
 8008030:	f000 fa38 	bl	80084a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2150      	movs	r1, #80	@ 0x50
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fa8f 	bl	800855e <TIM_ITRx_SetConfig>
      break;
 8008040:	e02c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800804e:	461a      	mov	r2, r3
 8008050:	f000 fa56 	bl	8008500 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2160      	movs	r1, #96	@ 0x60
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fa7f 	bl	800855e <TIM_ITRx_SetConfig>
      break;
 8008060:	e01c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800806e:	461a      	mov	r2, r3
 8008070:	f000 fa18 	bl	80084a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2140      	movs	r1, #64	@ 0x40
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fa6f 	bl	800855e <TIM_ITRx_SetConfig>
      break;
 8008080:	e00c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f000 fa66 	bl	800855e <TIM_ITRx_SetConfig>
      break;
 8008092:	e003      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
      break;
 8008098:	e000      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800809a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008188 <TIM_Base_SetConfig+0xd0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00b      	beq.n	80080e8 <TIM_Base_SetConfig+0x30>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d6:	d007      	beq.n	80080e8 <TIM_Base_SetConfig+0x30>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a2c      	ldr	r2, [pc, #176]	@ (800818c <TIM_Base_SetConfig+0xd4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_Base_SetConfig+0x30>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008190 <TIM_Base_SetConfig+0xd8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d108      	bne.n	80080fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a22      	ldr	r2, [pc, #136]	@ (8008188 <TIM_Base_SetConfig+0xd0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00b      	beq.n	800811a <TIM_Base_SetConfig+0x62>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008108:	d007      	beq.n	800811a <TIM_Base_SetConfig+0x62>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a1f      	ldr	r2, [pc, #124]	@ (800818c <TIM_Base_SetConfig+0xd4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d003      	beq.n	800811a <TIM_Base_SetConfig+0x62>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a1e      	ldr	r2, [pc, #120]	@ (8008190 <TIM_Base_SetConfig+0xd8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d108      	bne.n	800812c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a0d      	ldr	r2, [pc, #52]	@ (8008188 <TIM_Base_SetConfig+0xd0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d103      	bne.n	8008160 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f023 0201 	bic.w	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	611a      	str	r2, [r3, #16]
  }
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr
 8008188:	40012c00 	.word	0x40012c00
 800818c:	40000400 	.word	0x40000400
 8008190:	40000800 	.word	0x40000800

08008194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	f023 0201 	bic.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f023 0302 	bic.w	r3, r3, #2
 80081dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1c      	ldr	r2, [pc, #112]	@ (800825c <TIM_OC1_SetConfig+0xc8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10c      	bne.n	800820a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0308 	bic.w	r3, r3, #8
 80081f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a13      	ldr	r2, [pc, #76]	@ (800825c <TIM_OC1_SetConfig+0xc8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d111      	bne.n	8008236 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40012c00 	.word	0x40012c00

08008260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	f023 0210 	bic.w	r2, r3, #16
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800828e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f023 0320 	bic.w	r3, r3, #32
 80082aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <TIM_OC2_SetConfig+0xd0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d10d      	bne.n	80082dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a14      	ldr	r2, [pc, #80]	@ (8008330 <TIM_OC2_SetConfig+0xd0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d113      	bne.n	800830c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr
 8008330:	40012c00 	.word	0x40012c00

08008334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800837c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a1d      	ldr	r2, [pc, #116]	@ (8008404 <TIM_OC3_SetConfig+0xd0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d10d      	bne.n	80083ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a14      	ldr	r2, [pc, #80]	@ (8008404 <TIM_OC3_SetConfig+0xd0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d113      	bne.n	80083de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	621a      	str	r2, [r3, #32]
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00

08008408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800843e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	031b      	lsls	r3, r3, #12
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a0f      	ldr	r2, [pc, #60]	@ (80084a0 <TIM_OC4_SetConfig+0x98>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d109      	bne.n	800847c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800846e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	40012c00 	.word	0x40012c00

080084a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	f023 0201 	bic.w	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f023 030a 	bic.w	r3, r3, #10
 80084e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0210 	bic.w	r2, r3, #16
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800852a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	031b      	lsls	r3, r3, #12
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800853c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	f043 0307 	orr.w	r3, r3, #7
 8008580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	609a      	str	r2, [r3, #8]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr

08008592 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008592:	b480      	push	{r7}
 8008594:	b087      	sub	sp, #28
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	021a      	lsls	r2, r3, #8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	609a      	str	r2, [r3, #8]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr

080085d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	2201      	movs	r2, #1
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a1a      	ldr	r2, [r3, #32]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	fa01 f303 	lsl.w	r3, r1, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e046      	b.n	80086be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a16      	ldr	r2, [pc, #88]	@ (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867c:	d009      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a12      	ldr	r2, [pc, #72]	@ (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a10      	ldr	r2, [pc, #64]	@ (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d10c      	bne.n	80086ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr
 80086c8:	40012c00 	.word	0x40012c00
 80086cc:	40000400 	.word	0x40000400
 80086d0:	40000800 	.word	0x40000800

080086d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e03d      	b.n	800876c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr

08008776 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	4638      	mov	r0, r7
 8008780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087a0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80087a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr

080087bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087c4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80087c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	43db      	mvns	r3, r3
 80087d8:	b29b      	uxth	r3, r3
 80087da:	4013      	ands	r3, r2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	4638      	mov	r0, r7
 8008812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
	...

08008844 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008844:	b480      	push	{r7}
 8008846:	b09d      	sub	sp, #116	@ 0x74
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800886a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	78db      	ldrb	r3, [r3, #3]
 8008872:	2b03      	cmp	r3, #3
 8008874:	d81f      	bhi.n	80088b6 <USB_ActivateEndpoint+0x72>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <USB_ActivateEndpoint+0x38>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	0800888d 	.word	0x0800888d
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088bf 	.word	0x080088bf
 8008888:	0800889b 	.word	0x0800889b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800888c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008890:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008894:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008898:	e012      	b.n	80088c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800889a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800889e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80088a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80088a6:	e00b      	b.n	80088c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80088a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80088b4:	e004      	b.n	80088c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80088bc:	e000      	b.n	80088c0 <USB_ActivateEndpoint+0x7c>
      break;
 80088be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	441a      	add	r2, r3
 80088ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088de:	b29b      	uxth	r3, r3
 80088e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	7b1b      	ldrb	r3, [r3, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 8178 	bne.w	8008c20 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8084 	beq.w	8008a42 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	61bb      	str	r3, [r7, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	4413      	add	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	011a      	lsls	r2, r3, #4
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	b29b      	uxth	r3, r3
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	827b      	strh	r3, [r7, #18]
 800897c:	8a7b      	ldrh	r3, [r7, #18]
 800897e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d01b      	beq.n	80089be <USB_ActivateEndpoint+0x17a>
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899c:	823b      	strh	r3, [r7, #16]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	441a      	add	r2, r3
 80089a8:	8a3b      	ldrh	r3, [r7, #16]
 80089aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	78db      	ldrb	r3, [r3, #3]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d020      	beq.n	8008a08 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089dc:	81bb      	strh	r3, [r7, #12]
 80089de:	89bb      	ldrh	r3, [r7, #12]
 80089e0:	f083 0320 	eor.w	r3, r3, #32
 80089e4:	81bb      	strh	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	89bb      	ldrh	r3, [r7, #12]
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]
 8008a06:	e2d5      	b.n	8008fb4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a1e:	81fb      	strh	r3, [r7, #14]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	441a      	add	r2, r3
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
 8008a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	8013      	strh	r3, [r2, #0]
 8008a40:	e2b8      	b.n	8008fb4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	4413      	add	r3, r2
 8008a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	011a      	lsls	r2, r3, #4
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	88db      	ldrh	r3, [r3, #6]
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	4413      	add	r3, r2
 8008a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	011a      	lsls	r2, r3, #4
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	4413      	add	r3, r2
 8008a94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ab0:	d91d      	bls.n	8008aee <USB_ActivateEndpoint+0x2aa>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <USB_ActivateEndpoint+0x288>
 8008ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	e026      	b.n	8008b3c <USB_ActivateEndpoint+0x2f8>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <USB_ActivateEndpoint+0x2c8>
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	801a      	strh	r2, [r3, #0]
 8008b0a:	e017      	b.n	8008b3c <USB_ActivateEndpoint+0x2f8>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <USB_ActivateEndpoint+0x2e2>
 8008b20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b22:	3301      	adds	r3, #1
 8008b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	029b      	lsls	r3, r3, #10
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01b      	beq.n	8008b8c <USB_ActivateEndpoint+0x348>
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6a:	843b      	strh	r3, [r7, #32]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	441a      	add	r2, r3
 8008b76:	8c3b      	ldrh	r3, [r7, #32]
 8008b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d124      	bne.n	8008bde <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008baa:	83bb      	strh	r3, [r7, #28]
 8008bac:	8bbb      	ldrh	r3, [r7, #28]
 8008bae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008bb2:	83bb      	strh	r3, [r7, #28]
 8008bb4:	8bbb      	ldrh	r3, [r7, #28]
 8008bb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bba:	83bb      	strh	r3, [r7, #28]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	8bbb      	ldrh	r3, [r7, #28]
 8008bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	8013      	strh	r3, [r2, #0]
 8008bdc:	e1ea      	b.n	8008fb4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf4:	83fb      	strh	r3, [r7, #30]
 8008bf6:	8bfb      	ldrh	r3, [r7, #30]
 8008bf8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bfc:	83fb      	strh	r3, [r7, #30]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	441a      	add	r2, r3
 8008c08:	8bfb      	ldrh	r3, [r7, #30]
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]
 8008c1e:	e1c9      	b.n	8008fb4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d11e      	bne.n	8008c66 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	441a      	add	r2, r3
 8008c4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c58:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	8013      	strh	r3, [r2, #0]
 8008c64:	e01d      	b.n	8008ca2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	441a      	add	r2, r3
 8008c8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cb2:	4413      	add	r3, r2
 8008cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	011a      	lsls	r2, r3, #4
 8008cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	891b      	ldrh	r3, [r3, #8]
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ce6:	4413      	add	r3, r2
 8008ce8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	011a      	lsls	r2, r3, #4
 8008cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d08:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f040 8093 	bne.w	8008e3a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008d24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01b      	beq.n	8008d68 <USB_ActivateEndpoint+0x524>
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	441a      	add	r2, r3
 8008d52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008d76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01b      	beq.n	8008db8 <USB_ActivateEndpoint+0x574>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d96:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dce:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008dd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dd2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dd6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008dd8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008dde:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	8013      	strh	r3, [r2, #0]
 8008e38:	e0bc      	b.n	8008fb4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01d      	beq.n	8008e92 <USB_ActivateEndpoint+0x64e>
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	441a      	add	r2, r3
 8008e7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008ea2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01d      	beq.n	8008eea <USB_ActivateEndpoint+0x6a6>
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	441a      	add	r2, r3
 8008ed2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ee2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d024      	beq.n	8008f3c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008f0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008f10:	f083 0320 	eor.w	r3, r3, #32
 8008f14:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	441a      	add	r2, r3
 8008f22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	8013      	strh	r3, [r2, #0]
 8008f3a:	e01d      	b.n	8008f78 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	441a      	add	r2, r3
 8008f60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	441a      	add	r2, r3
 8008f9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008fb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3774      	adds	r7, #116	@ 0x74
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop

08008fc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b08d      	sub	sp, #52	@ 0x34
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	7b1b      	ldrb	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 808e 	bne.w	80090f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d044      	beq.n	800906a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	81bb      	strh	r3, [r7, #12]
 8008fee:	89bb      	ldrh	r3, [r7, #12]
 8008ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01b      	beq.n	8009030 <USB_DeactivateEndpoint+0x6c>
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800900a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800900e:	817b      	strh	r3, [r7, #10]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	441a      	add	r2, r3
 800901a:	897b      	ldrh	r3, [r7, #10]
 800901c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009028:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009046:	813b      	strh	r3, [r7, #8]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	441a      	add	r2, r3
 8009052:	893b      	ldrh	r3, [r7, #8]
 8009054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800905c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009064:	b29b      	uxth	r3, r3
 8009066:	8013      	strh	r3, [r2, #0]
 8009068:	e192      	b.n	8009390 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	827b      	strh	r3, [r7, #18]
 8009078:	8a7b      	ldrh	r3, [r7, #18]
 800907a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01b      	beq.n	80090ba <USB_DeactivateEndpoint+0xf6>
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009098:	823b      	strh	r3, [r7, #16]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	8a3b      	ldrh	r3, [r7, #16]
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d0:	81fb      	strh	r3, [r7, #14]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]
 80090f2:	e14d      	b.n	8009390 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f040 80a5 	bne.w	8009248 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	843b      	strh	r3, [r7, #32]
 800910c:	8c3b      	ldrh	r3, [r7, #32]
 800910e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01b      	beq.n	800914e <USB_DeactivateEndpoint+0x18a>
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912c:	83fb      	strh	r3, [r7, #30]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	441a      	add	r2, r3
 8009138:	8bfb      	ldrh	r3, [r7, #30]
 800913a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800913e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914a:	b29b      	uxth	r3, r3
 800914c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	83bb      	strh	r3, [r7, #28]
 800915c:	8bbb      	ldrh	r3, [r7, #28]
 800915e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01b      	beq.n	800919e <USB_DeactivateEndpoint+0x1da>
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917c:	837b      	strh	r3, [r7, #26]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	441a      	add	r2, r3
 8009188:	8b7b      	ldrh	r3, [r7, #26]
 800918a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800918e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800919a:	b29b      	uxth	r3, r3
 800919c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b4:	833b      	strh	r3, [r7, #24]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8b3b      	ldrh	r3, [r7, #24]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ec:	82fb      	strh	r3, [r7, #22]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8afb      	ldrh	r3, [r7, #22]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009224:	82bb      	strh	r3, [r7, #20]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	441a      	add	r2, r3
 8009230:	8abb      	ldrh	r3, [r7, #20]
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]
 8009246:	e0a3      	b.n	8009390 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009256:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01b      	beq.n	8009298 <USB_DeactivateEndpoint+0x2d4>
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009276:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	441a      	add	r2, r3
 8009282:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800928c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009294:	b29b      	uxth	r3, r3
 8009296:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80092a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80092a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01b      	beq.n	80092e8 <USB_DeactivateEndpoint+0x324>
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009336:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800934c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800936a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	441a      	add	r2, r3
 800937a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800937c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800938c:	b29b      	uxth	r3, r3
 800938e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3734      	adds	r7, #52	@ 0x34
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr

0800939c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b0c2      	sub	sp, #264	@ 0x108
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093aa:	6018      	str	r0, [r3, #0]
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	f040 86b7 	bne.w	800a136 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d908      	bls.n	80093f6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093f4:	e007      	b.n	8009406 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80093f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	7b1b      	ldrb	r3, [r3, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d13a      	bne.n	800948c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6959      	ldr	r1, [r3, #20]
 8009422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	88da      	ldrh	r2, [r3, #6]
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009432:	b29b      	uxth	r3, r3
 8009434:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009438:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800943c:	6800      	ldr	r0, [r0, #0]
 800943e:	f001 fc9c 	bl	800ad7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	613b      	str	r3, [r7, #16]
 800944e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800945c:	b29b      	uxth	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4413      	add	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	011a      	lsls	r2, r3, #4
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	f000 be1f 	b.w	800a0ca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	78db      	ldrb	r3, [r3, #3]
 8009498:	2b02      	cmp	r3, #2
 800949a:	f040 8462 	bne.w	8009d62 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800949e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6a1a      	ldr	r2, [r3, #32]
 80094aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	f240 83df 	bls.w	8009c7a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80094bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80094e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	441a      	add	r2, r3
 8009500:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6a1a      	ldr	r2, [r3, #32]
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 81c7 	beq.w	80098ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800955e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30
 800956a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	785b      	ldrb	r3, [r3, #1]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d177      	bne.n	800966a <USB_EPStartXfer+0x2ce>
 800957a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009594:	b29b      	uxth	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	4413      	add	r3, r2
 800959c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800959e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	011a      	lsls	r2, r3, #4
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	4413      	add	r3, r2
 80095b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	801a      	strh	r2, [r3, #0]
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80095cc:	d921      	bls.n	8009612 <USB_EPStartXfer+0x276>
 80095ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	f003 031f 	and.w	r3, r3, #31
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <USB_EPStartXfer+0x252>
 80095e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095e8:	3b01      	subs	r3, #1
 80095ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	029b      	lsls	r3, r3, #10
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4313      	orrs	r3, r2
 8009600:	b29b      	uxth	r3, r3
 8009602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960a:	b29a      	uxth	r2, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	e050      	b.n	80096b4 <USB_EPStartXfer+0x318>
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <USB_EPStartXfer+0x294>
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009628:	b29a      	uxth	r2, r3
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	801a      	strh	r2, [r3, #0]
 800962e:	e041      	b.n	80096b4 <USB_EPStartXfer+0x318>
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <USB_EPStartXfer+0x2b4>
 8009646:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800964a:	3301      	adds	r3, #1
 800964c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	b29a      	uxth	r2, r3
 8009656:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800965a:	b29b      	uxth	r3, r3
 800965c:	029b      	lsls	r3, r3, #10
 800965e:	b29b      	uxth	r3, r3
 8009660:	4313      	orrs	r3, r2
 8009662:	b29a      	uxth	r2, r3
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e024      	b.n	80096b4 <USB_EPStartXfer+0x318>
 800966a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d11c      	bne.n	80096b4 <USB_EPStartXfer+0x318>
 800967a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009688:	b29b      	uxth	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	4413      	add	r3, r2
 8009690:	633b      	str	r3, [r7, #48]	@ 0x30
 8009692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	011a      	lsls	r2, r3, #4
 80096a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a2:	4413      	add	r3, r2
 80096a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	895b      	ldrh	r3, [r3, #10]
 80096c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6959      	ldr	r1, [r3, #20]
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80096de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80096e2:	6800      	ldr	r0, [r0, #0]
 80096e4:	f001 fb49 	bl	800ad7a <USB_WritePMA>
            ep->xfer_buff += len;
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	695a      	ldr	r2, [r3, #20]
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	441a      	add	r2, r3
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	429a      	cmp	r2, r3
 8009720:	d90f      	bls.n	8009742 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6a1a      	ldr	r2, [r3, #32]
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009732:	1ad2      	subs	r2, r2, r3
 8009734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	621a      	str	r2, [r3, #32]
 8009740:	e00e      	b.n	8009760 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2200      	movs	r2, #0
 800975e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d177      	bne.n	8009860 <USB_EPStartXfer+0x4c4>
 8009770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800978a:	b29b      	uxth	r3, r3
 800978c:	461a      	mov	r2, r3
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	4413      	add	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	011a      	lsls	r2, r3, #4
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	4413      	add	r3, r2
 80097a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80097c2:	d921      	bls.n	8009808 <USB_EPStartXfer+0x46c>
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <USB_EPStartXfer+0x448>
 80097da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097de:	3b01      	subs	r3, #1
 80097e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009800:	b29a      	uxth	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e056      	b.n	80098b6 <USB_EPStartXfer+0x51a>
 8009808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <USB_EPStartXfer+0x48a>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800981a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981e:	b29a      	uxth	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e047      	b.n	80098b6 <USB_EPStartXfer+0x51a>
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <USB_EPStartXfer+0x4aa>
 800983c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009840:	3301      	adds	r3, #1
 8009842:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29a      	uxth	r2, r3
 800984c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009850:	b29b      	uxth	r3, r3
 8009852:	029b      	lsls	r3, r3, #10
 8009854:	b29b      	uxth	r3, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	e02a      	b.n	80098b6 <USB_EPStartXfer+0x51a>
 8009860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d122      	bne.n	80098b6 <USB_EPStartXfer+0x51a>
 8009870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	623b      	str	r3, [r7, #32]
 800987c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800988a:	b29b      	uxth	r3, r3
 800988c:	461a      	mov	r2, r3
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	4413      	add	r3, r2
 8009892:	623b      	str	r3, [r7, #32]
 8009894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	011a      	lsls	r2, r3, #4
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	4413      	add	r3, r2
 80098a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	891b      	ldrh	r3, [r3, #8]
 80098c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6959      	ldr	r1, [r3, #20]
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80098e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80098e4:	6800      	ldr	r0, [r0, #0]
 80098e6:	f001 fa48 	bl	800ad7a <USB_WritePMA>
 80098ea:	e3ee      	b.n	800a0ca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d177      	bne.n	80099ec <USB_EPStartXfer+0x650>
 80098fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009916:	b29b      	uxth	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800991c:	4413      	add	r3, r2
 800991e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	011a      	lsls	r2, r3, #4
 800992e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009930:	4413      	add	r3, r2
 8009932:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009936:	647b      	str	r3, [r7, #68]	@ 0x44
 8009938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009942:	b29a      	uxth	r2, r3
 8009944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994c:	2b3e      	cmp	r3, #62	@ 0x3e
 800994e:	d921      	bls.n	8009994 <USB_EPStartXfer+0x5f8>
 8009950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009954:	095b      	lsrs	r3, r3, #5
 8009956:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800995a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	2b00      	cmp	r3, #0
 8009964:	d104      	bne.n	8009970 <USB_EPStartXfer+0x5d4>
 8009966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800996a:	3b01      	subs	r3, #1
 800996c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	b29a      	uxth	r2, r3
 8009976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800997a:	b29b      	uxth	r3, r3
 800997c:	029b      	lsls	r3, r3, #10
 800997e:	b29b      	uxth	r3, r3
 8009980:	4313      	orrs	r3, r2
 8009982:	b29b      	uxth	r3, r3
 8009984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998c:	b29a      	uxth	r2, r3
 800998e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	e056      	b.n	8009a42 <USB_EPStartXfer+0x6a6>
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <USB_EPStartXfer+0x616>
 800999c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ae:	801a      	strh	r2, [r3, #0]
 80099b0:	e047      	b.n	8009a42 <USB_EPStartXfer+0x6a6>
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <USB_EPStartXfer+0x636>
 80099c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099cc:	3301      	adds	r3, #1
 80099ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099dc:	b29b      	uxth	r3, r3
 80099de:	029b      	lsls	r3, r3, #10
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	4313      	orrs	r3, r2
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	e02a      	b.n	8009a42 <USB_EPStartXfer+0x6a6>
 80099ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d122      	bne.n	8009a42 <USB_EPStartXfer+0x6a6>
 80099fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1c:	4413      	add	r3, r2
 8009a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	011a      	lsls	r2, r3, #4
 8009a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a30:	4413      	add	r3, r2
 8009a32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	891b      	ldrh	r3, [r3, #8]
 8009a4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6959      	ldr	r1, [r3, #20]
 8009a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a70:	6800      	ldr	r0, [r0, #0]
 8009a72:	f001 f982 	bl	800ad7a <USB_WritePMA>
            ep->xfer_buff += len;
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	441a      	add	r2, r3
 8009a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d90f      	bls.n	8009ad0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6a1a      	ldr	r2, [r3, #32]
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac0:	1ad2      	subs	r2, r2, r3
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	621a      	str	r2, [r3, #32]
 8009ace:	e00e      	b.n	8009aee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d177      	bne.n	8009bfa <USB_EPStartXfer+0x85e>
 8009b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	461a      	mov	r2, r3
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	4413      	add	r3, r2
 8009b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	011a      	lsls	r2, r3, #4
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	4413      	add	r3, r2
 8009b40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b5c:	d921      	bls.n	8009ba2 <USB_EPStartXfer+0x806>
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	095b      	lsrs	r3, r3, #5
 8009b64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <USB_EPStartXfer+0x7e2>
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	029b      	lsls	r3, r3, #10
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	e050      	b.n	8009c44 <USB_EPStartXfer+0x8a8>
 8009ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <USB_EPStartXfer+0x824>
 8009baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	e041      	b.n	8009c44 <USB_EPStartXfer+0x8a8>
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <USB_EPStartXfer+0x844>
 8009bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bda:	3301      	adds	r3, #1
 8009bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	029b      	lsls	r3, r3, #10
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf6:	801a      	strh	r2, [r3, #0]
 8009bf8:	e024      	b.n	8009c44 <USB_EPStartXfer+0x8a8>
 8009bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d11c      	bne.n	8009c44 <USB_EPStartXfer+0x8a8>
 8009c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c1e:	4413      	add	r3, r2
 8009c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	011a      	lsls	r2, r3, #4
 8009c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c32:	4413      	add	r3, r2
 8009c34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	895b      	ldrh	r3, [r3, #10]
 8009c50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6959      	ldr	r1, [r3, #20]
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c72:	6800      	ldr	r0, [r0, #0]
 8009c74:	f001 f881 	bl	800ad7a <USB_WritePMA>
 8009c78:	e227      	b.n	800a0ca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	441a      	add	r2, r3
 8009cce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d06:	4413      	add	r3, r2
 8009d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	011a      	lsls	r2, r3, #4
 8009d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	891b      	ldrh	r3, [r3, #8]
 8009d38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6959      	ldr	r1, [r3, #20]
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	f001 f80d 	bl	800ad7a <USB_WritePMA>
 8009d60:	e1b3      	b.n	800a0ca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6a1a      	ldr	r2, [r3, #32]
 8009d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80c6 	beq.w	8009f34 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d177      	bne.n	8009eb4 <USB_EPStartXfer+0xb18>
 8009dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009de4:	4413      	add	r3, r2
 8009de6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	011a      	lsls	r2, r3, #4
 8009df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009df8:	4413      	add	r3, r2
 8009dfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e0e:	801a      	strh	r2, [r3, #0]
 8009e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e14:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e16:	d921      	bls.n	8009e5c <USB_EPStartXfer+0xac0>
 8009e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d104      	bne.n	8009e38 <USB_EPStartXfer+0xa9c>
 8009e2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e32:	3b01      	subs	r3, #1
 8009e34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	029b      	lsls	r3, r3, #10
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	e050      	b.n	8009efe <USB_EPStartXfer+0xb62>
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <USB_EPStartXfer+0xade>
 8009e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e76:	801a      	strh	r2, [r3, #0]
 8009e78:	e041      	b.n	8009efe <USB_EPStartXfer+0xb62>
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7e:	085b      	lsrs	r3, r3, #1
 8009e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <USB_EPStartXfer+0xafe>
 8009e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e94:	3301      	adds	r3, #1
 8009e96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	029b      	lsls	r3, r3, #10
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	e024      	b.n	8009efe <USB_EPStartXfer+0xb62>
 8009eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d11c      	bne.n	8009efe <USB_EPStartXfer+0xb62>
 8009ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ed8:	4413      	add	r3, r2
 8009eda:	673b      	str	r3, [r7, #112]	@ 0x70
 8009edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	011a      	lsls	r2, r3, #4
 8009eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eec:	4413      	add	r3, r2
 8009eee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009efc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	895b      	ldrh	r3, [r3, #10]
 8009f0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6959      	ldr	r1, [r3, #20]
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009f28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009f2c:	6800      	ldr	r0, [r0, #0]
 8009f2e:	f000 ff24 	bl	800ad7a <USB_WritePMA>
 8009f32:	e0ca      	b.n	800a0ca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d177      	bne.n	800a034 <USB_EPStartXfer+0xc98>
 8009f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f64:	4413      	add	r3, r2
 8009f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	011a      	lsls	r2, r3, #4
 8009f76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f78:	4413      	add	r3, r2
 8009f7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f8e:	801a      	strh	r2, [r3, #0]
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f96:	d921      	bls.n	8009fdc <USB_EPStartXfer+0xc40>
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9c:	095b      	lsrs	r3, r3, #5
 8009f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d104      	bne.n	8009fb8 <USB_EPStartXfer+0xc1c>
 8009fae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	029b      	lsls	r3, r3, #10
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd8:	801a      	strh	r2, [r3, #0]
 8009fda:	e05c      	b.n	800a096 <USB_EPStartXfer+0xcfa>
 8009fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <USB_EPStartXfer+0xc5e>
 8009fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e04d      	b.n	800a096 <USB_EPStartXfer+0xcfa>
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ffe:	085b      	lsrs	r3, r3, #1
 800a000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <USB_EPStartXfer+0xc7e>
 800a010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a014:	3301      	adds	r3, #1
 800a016:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a01a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a024:	b29b      	uxth	r3, r3
 800a026:	029b      	lsls	r3, r3, #10
 800a028:	b29b      	uxth	r3, r3
 800a02a:	4313      	orrs	r3, r2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e030      	b.n	800a096 <USB_EPStartXfer+0xcfa>
 800a034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d128      	bne.n	800a096 <USB_EPStartXfer+0xcfa>
 800a044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a060:	b29b      	uxth	r3, r3
 800a062:	461a      	mov	r2, r3
 800a064:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a068:	4413      	add	r3, r2
 800a06a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	011a      	lsls	r2, r3, #4
 800a07c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a080:	4413      	add	r3, r2
 800a082:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08e:	b29a      	uxth	r2, r3
 800a090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a094:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	891b      	ldrh	r3, [r3, #8]
 800a0a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6959      	ldr	r1, [r3, #20]
 800a0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0c4:	6800      	ldr	r0, [r0, #0]
 800a0c6:	f000 fe58 	bl	800ad7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0f0:	817b      	strh	r3, [r7, #10]
 800a0f2:	897b      	ldrh	r3, [r7, #10]
 800a0f4:	f083 0310 	eor.w	r3, r3, #16
 800a0f8:	817b      	strh	r3, [r7, #10]
 800a0fa:	897b      	ldrh	r3, [r7, #10]
 800a0fc:	f083 0320 	eor.w	r3, r3, #32
 800a100:	817b      	strh	r3, [r7, #10]
 800a102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	441a      	add	r2, r3
 800a11c:	897b      	ldrh	r3, [r7, #10]
 800a11e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a12e:	b29b      	uxth	r3, r3
 800a130:	8013      	strh	r3, [r2, #0]
 800a132:	f000 bcde 	b.w	800aaf2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	7b1b      	ldrb	r3, [r3, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 80bb 	bne.w	800a2be <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699a      	ldr	r2, [r3, #24]
 800a154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	429a      	cmp	r2, r3
 800a162:	d917      	bls.n	800a194 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a184:	1ad2      	subs	r2, r2, r3
 800a186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	619a      	str	r2, [r3, #24]
 800a192:	e00e      	b.n	800a1b2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	011a      	lsls	r2, r3, #4
 800a1ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a1f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a204:	b29a      	uxth	r2, r3
 800a206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a20a:	801a      	strh	r2, [r3, #0]
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a210:	2b3e      	cmp	r3, #62	@ 0x3e
 800a212:	d924      	bls.n	800a25e <USB_EPStartXfer+0xec2>
 800a214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a218:	095b      	lsrs	r3, r3, #5
 800a21a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a222:	f003 031f 	and.w	r3, r3, #31
 800a226:	2b00      	cmp	r3, #0
 800a228:	d104      	bne.n	800a234 <USB_EPStartXfer+0xe98>
 800a22a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a22e:	3b01      	subs	r3, #1
 800a230:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a240:	b29b      	uxth	r3, r3
 800a242:	029b      	lsls	r3, r3, #10
 800a244:	b29b      	uxth	r3, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a24e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a252:	b29a      	uxth	r2, r3
 800a254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a258:	801a      	strh	r2, [r3, #0]
 800a25a:	f000 bc10 	b.w	800aa7e <USB_EPStartXfer+0x16e2>
 800a25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10c      	bne.n	800a280 <USB_EPStartXfer+0xee4>
 800a266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a276:	b29a      	uxth	r2, r3
 800a278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a27c:	801a      	strh	r2, [r3, #0]
 800a27e:	e3fe      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
 800a280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a284:	085b      	lsrs	r3, r3, #1
 800a286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <USB_EPStartXfer+0xf04>
 800a296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a29a:	3301      	adds	r3, #1
 800a29c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	029b      	lsls	r3, r3, #10
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2ba:	801a      	strh	r2, [r3, #0]
 800a2bc:	e3df      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	78db      	ldrb	r3, [r3, #3]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	f040 8218 	bne.w	800a700 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f040 809d 	bne.w	800a41c <USB_EPStartXfer+0x1080>
 800a2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	461a      	mov	r2, r3
 800a302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a306:	4413      	add	r3, r2
 800a308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	011a      	lsls	r2, r3, #4
 800a31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a31e:	4413      	add	r3, r2
 800a320:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a334:	b29a      	uxth	r2, r3
 800a336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b3e      	cmp	r3, #62	@ 0x3e
 800a34a:	d92b      	bls.n	800a3a4 <USB_EPStartXfer+0x1008>
 800a34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	095b      	lsrs	r3, r3, #5
 800a35a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d104      	bne.n	800a37c <USB_EPStartXfer+0xfe0>
 800a372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a376:	3b01      	subs	r3, #1
 800a378:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a37c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a388:	b29b      	uxth	r3, r3
 800a38a:	029b      	lsls	r3, r3, #10
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	4313      	orrs	r3, r2
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3a0:	801a      	strh	r2, [r3, #0]
 800a3a2:	e070      	b.n	800a486 <USB_EPStartXfer+0x10ea>
 800a3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10c      	bne.n	800a3ce <USB_EPStartXfer+0x1032>
 800a3b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3ca:	801a      	strh	r2, [r3, #0]
 800a3cc:	e05b      	b.n	800a486 <USB_EPStartXfer+0x10ea>
 800a3ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	085b      	lsrs	r3, r3, #1
 800a3dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <USB_EPStartXfer+0x1062>
 800a3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	b29a      	uxth	r2, r3
 800a406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	029b      	lsls	r3, r3, #10
 800a40e:	b29b      	uxth	r3, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a418:	801a      	strh	r2, [r3, #0]
 800a41a:	e034      	b.n	800a486 <USB_EPStartXfer+0x10ea>
 800a41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	785b      	ldrb	r3, [r3, #1]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d12c      	bne.n	800a486 <USB_EPStartXfer+0x10ea>
 800a42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a448:	b29b      	uxth	r3, r3
 800a44a:	461a      	mov	r2, r3
 800a44c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a450:	4413      	add	r3, r2
 800a452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	011a      	lsls	r2, r3, #4
 800a464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a468:	4413      	add	r3, r2
 800a46a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a46e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 809d 	bne.w	800a5e0 <USB_EPStartXfer+0x1244>
 800a4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	011a      	lsls	r2, r3, #4
 800a4de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a4e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a50e:	d92b      	bls.n	800a568 <USB_EPStartXfer+0x11cc>
 800a510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	095b      	lsrs	r3, r3, #5
 800a51e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	f003 031f 	and.w	r3, r3, #31
 800a532:	2b00      	cmp	r3, #0
 800a534:	d104      	bne.n	800a540 <USB_EPStartXfer+0x11a4>
 800a536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a53a:	3b01      	subs	r3, #1
 800a53c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29a      	uxth	r2, r3
 800a548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	029b      	lsls	r3, r3, #10
 800a550:	b29b      	uxth	r3, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	b29b      	uxth	r3, r3
 800a556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a55a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55e:	b29a      	uxth	r2, r3
 800a560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a564:	801a      	strh	r2, [r3, #0]
 800a566:	e069      	b.n	800a63c <USB_EPStartXfer+0x12a0>
 800a568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10c      	bne.n	800a592 <USB_EPStartXfer+0x11f6>
 800a578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a588:	b29a      	uxth	r2, r3
 800a58a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a58e:	801a      	strh	r2, [r3, #0]
 800a590:	e054      	b.n	800a63c <USB_EPStartXfer+0x12a0>
 800a592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	085b      	lsrs	r3, r3, #1
 800a5a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <USB_EPStartXfer+0x1226>
 800a5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5bc:	3301      	adds	r3, #1
 800a5be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	029b      	lsls	r3, r3, #10
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5dc:	801a      	strh	r2, [r3, #0]
 800a5de:	e02d      	b.n	800a63c <USB_EPStartXfer+0x12a0>
 800a5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d125      	bne.n	800a63c <USB_EPStartXfer+0x12a0>
 800a5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	461a      	mov	r2, r3
 800a602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a606:	4413      	add	r3, r2
 800a608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	011a      	lsls	r2, r3, #4
 800a61a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a61e:	4413      	add	r3, r2
 800a620:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	b29a      	uxth	r2, r3
 800a636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a63a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8218 	beq.w	800aa7e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a66e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <USB_EPStartXfer+0x12ea>
 800a67a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a67e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10d      	bne.n	800a6a2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a68a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f040 81f5 	bne.w	800aa7e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a694:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 81ee 	bne.w	800aa7e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6c8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	441a      	add	r2, r3
 800a6e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a6ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	8013      	strh	r3, [r2, #0]
 800a6fe:	e1be      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	78db      	ldrb	r3, [r3, #3]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	f040 81b4 	bne.w	800aa7a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699a      	ldr	r2, [r3, #24]
 800a71e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d917      	bls.n	800a75e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a72e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a73e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	619a      	str	r2, [r3, #24]
 800a75c:	e00e      	b.n	800a77c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2200      	movs	r2, #0
 800a77a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f040 8085 	bne.w	800a898 <USB_EPStartXfer+0x14fc>
 800a78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a7b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	011a      	lsls	r2, r3, #4
 800a7c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7e6:	801a      	strh	r2, [r3, #0]
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7ee:	d923      	bls.n	800a838 <USB_EPStartXfer+0x149c>
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f4:	095b      	lsrs	r3, r3, #5
 800a7f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fe:	f003 031f 	and.w	r3, r3, #31
 800a802:	2b00      	cmp	r3, #0
 800a804:	d104      	bne.n	800a810 <USB_EPStartXfer+0x1474>
 800a806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a80a:	3b01      	subs	r3, #1
 800a80c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29a      	uxth	r2, r3
 800a818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	029b      	lsls	r3, r3, #10
 800a820:	b29b      	uxth	r3, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	b29b      	uxth	r3, r3
 800a826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a82a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a82e:	b29a      	uxth	r2, r3
 800a830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a834:	801a      	strh	r2, [r3, #0]
 800a836:	e060      	b.n	800a8fa <USB_EPStartXfer+0x155e>
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10c      	bne.n	800a85a <USB_EPStartXfer+0x14be>
 800a840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a850:	b29a      	uxth	r2, r3
 800a852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	e04f      	b.n	800a8fa <USB_EPStartXfer+0x155e>
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85e:	085b      	lsrs	r3, r3, #1
 800a860:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <USB_EPStartXfer+0x14de>
 800a870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a874:	3301      	adds	r3, #1
 800a876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a87a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	b29a      	uxth	r2, r3
 800a882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a886:	b29b      	uxth	r3, r3
 800a888:	029b      	lsls	r3, r3, #10
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4313      	orrs	r3, r2
 800a88e:	b29a      	uxth	r2, r3
 800a890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	e030      	b.n	800a8fa <USB_EPStartXfer+0x155e>
 800a898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d128      	bne.n	800a8fa <USB_EPStartXfer+0x155e>
 800a8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	011a      	lsls	r2, r3, #4
 800a8e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a8f8:	801a      	strh	r2, [r3, #0]
 800a8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	785b      	ldrb	r3, [r3, #1]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f040 8085 	bne.w	800aa24 <USB_EPStartXfer+0x1688>
 800a91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a93e:	4413      	add	r3, r2
 800a940:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	011a      	lsls	r2, r3, #4
 800a952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a956:	4413      	add	r3, r2
 800a958:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a95c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a978:	2b3e      	cmp	r3, #62	@ 0x3e
 800a97a:	d923      	bls.n	800a9c4 <USB_EPStartXfer+0x1628>
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	095b      	lsrs	r3, r3, #5
 800a982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a98a:	f003 031f 	and.w	r3, r3, #31
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d104      	bne.n	800a99c <USB_EPStartXfer+0x1600>
 800a992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a996:	3b01      	subs	r3, #1
 800a998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a99c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	029b      	lsls	r3, r3, #10
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	e05c      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
 800a9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10c      	bne.n	800a9e6 <USB_EPStartXfer+0x164a>
 800a9cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	e04b      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
 800a9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ea:	085b      	lsrs	r3, r3, #1
 800a9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d004      	beq.n	800aa06 <USB_EPStartXfer+0x166a>
 800a9fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa00:	3301      	adds	r3, #1
 800aa02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	029b      	lsls	r3, r3, #10
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa20:	801a      	strh	r2, [r3, #0]
 800aa22:	e02c      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
 800aa24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d124      	bne.n	800aa7e <USB_EPStartXfer+0x16e2>
 800aa34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	011a      	lsls	r2, r3, #4
 800aa5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa62:	4413      	add	r3, r2
 800aa64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aa68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	e001      	b.n	800aa7e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e03a      	b.n	800aaf4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aaa8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aaac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aab0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aab4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aab8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aabc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	441a      	add	r2, r3
 800aada:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d020      	beq.n	800ab52 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab26:	81bb      	strh	r3, [r7, #12]
 800ab28:	89bb      	ldrh	r3, [r7, #12]
 800ab2a:	f083 0310 	eor.w	r3, r3, #16
 800ab2e:	81bb      	strh	r3, [r7, #12]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	441a      	add	r2, r3
 800ab3a:	89bb      	ldrh	r3, [r7, #12]
 800ab3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	8013      	strh	r3, [r2, #0]
 800ab50:	e01f      	b.n	800ab92 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab68:	81fb      	strh	r3, [r7, #14]
 800ab6a:	89fb      	ldrh	r3, [r7, #14]
 800ab6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab70:	81fb      	strh	r3, [r7, #14]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	441a      	add	r2, r3
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
 800ab7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bc80      	pop	{r7}
 800ab9c:	4770      	bx	lr

0800ab9e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b087      	sub	sp, #28
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	7b1b      	ldrb	r3, [r3, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 809d 	bne.w	800acec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d04c      	beq.n	800ac54 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	823b      	strh	r3, [r7, #16]
 800abc8:	8a3b      	ldrh	r3, [r7, #16]
 800abca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01b      	beq.n	800ac0a <USB_EPClearStall+0x6c>
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe8:	81fb      	strh	r3, [r7, #14]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	441a      	add	r2, r3
 800abf4:	89fb      	ldrh	r3, [r7, #14]
 800abf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	78db      	ldrb	r3, [r3, #3]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d06c      	beq.n	800acec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac28:	81bb      	strh	r3, [r7, #12]
 800ac2a:	89bb      	ldrh	r3, [r7, #12]
 800ac2c:	f083 0320 	eor.w	r3, r3, #32
 800ac30:	81bb      	strh	r3, [r7, #12]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	441a      	add	r2, r3
 800ac3c:	89bb      	ldrh	r3, [r7, #12]
 800ac3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	8013      	strh	r3, [r2, #0]
 800ac52:	e04b      	b.n	800acec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	82fb      	strh	r3, [r7, #22]
 800ac62:	8afb      	ldrh	r3, [r7, #22]
 800ac64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01b      	beq.n	800aca4 <USB_EPClearStall+0x106>
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac82:	82bb      	strh	r3, [r7, #20]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	441a      	add	r2, r3
 800ac8e:	8abb      	ldrh	r3, [r7, #20]
 800ac90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acba:	827b      	strh	r3, [r7, #18]
 800acbc:	8a7b      	ldrh	r3, [r7, #18]
 800acbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acc2:	827b      	strh	r3, [r7, #18]
 800acc4:	8a7b      	ldrh	r3, [r7, #18]
 800acc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800acca:	827b      	strh	r3, [r7, #18]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	441a      	add	r2, r3
 800acd6:	8a7b      	ldrh	r3, [r7, #18]
 800acd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ace0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ace4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace8:	b29b      	uxth	r3, r3
 800acea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bc80      	pop	{r7}
 800acf6:	4770      	bx	lr

0800acf8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2280      	movs	r2, #128	@ 0x80
 800ad0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bc80      	pop	{r7}
 800ad1c:	4770      	bx	lr

0800ad1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bc80      	pop	{r7}
 800ad44:	4770      	bx	lr

0800ad46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad58:	68fb      	ldr	r3, [r7, #12]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bc80      	pop	{r7}
 800ad62:	4770      	bx	lr

0800ad64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr

0800ad7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b08b      	sub	sp, #44	@ 0x2c
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	60f8      	str	r0, [r7, #12]
 800ad82:	60b9      	str	r1, [r7, #8]
 800ad84:	4611      	mov	r1, r2
 800ad86:	461a      	mov	r2, r3
 800ad88:	460b      	mov	r3, r1
 800ad8a:	80fb      	strh	r3, [r7, #6]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad90:	88bb      	ldrh	r3, [r7, #4]
 800ad92:	3301      	adds	r3, #1
 800ad94:	085b      	lsrs	r3, r3, #1
 800ad96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	005a      	lsls	r2, r3, #1
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800adb2:	e01f      	b.n	800adf4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	3301      	adds	r3, #1
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	b21b      	sxth	r3, r3
 800adc2:	021b      	lsls	r3, r3, #8
 800adc4:	b21a      	sxth	r2, r3
 800adc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adca:	4313      	orrs	r3, r2
 800adcc:	b21b      	sxth	r3, r3
 800adce:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	8a7a      	ldrh	r2, [r7, #18]
 800add4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800add6:	6a3b      	ldr	r3, [r7, #32]
 800add8:	3302      	adds	r3, #2
 800adda:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	3302      	adds	r3, #2
 800ade0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	3301      	adds	r3, #1
 800ade6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	3301      	adds	r3, #1
 800adec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	3b01      	subs	r3, #1
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1dc      	bne.n	800adb4 <USB_WritePMA+0x3a>
  }
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	372c      	adds	r7, #44	@ 0x2c
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr

0800ae06 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b08b      	sub	sp, #44	@ 0x2c
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	4611      	mov	r1, r2
 800ae12:	461a      	mov	r2, r3
 800ae14:	460b      	mov	r3, r1
 800ae16:	80fb      	strh	r3, [r7, #6]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae1c:	88bb      	ldrh	r3, [r7, #4]
 800ae1e:	085b      	lsrs	r3, r3, #1
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	005a      	lsls	r2, r3, #1
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae3e:	e01b      	b.n	800ae78 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	0a1b      	lsrs	r3, r3, #8
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	3302      	adds	r3, #2
 800ae70:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	3b01      	subs	r3, #1
 800ae76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e0      	bne.n	800ae40 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae7e:	88bb      	ldrh	r3, [r7, #4]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	701a      	strb	r2, [r3, #0]
  }
}
 800ae9a:	bf00      	nop
 800ae9c:	372c      	adds	r7, #44	@ 0x2c
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr

0800aea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7c1b      	ldrb	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d115      	bne.n	800aee8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec0:	2202      	movs	r2, #2
 800aec2:	2181      	movs	r1, #129	@ 0x81
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 feac 	bl	800cc22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed4:	2202      	movs	r2, #2
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fea2 	bl	800cc22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800aee6:	e012      	b.n	800af0e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aee8:	2340      	movs	r3, #64	@ 0x40
 800aeea:	2202      	movs	r2, #2
 800aeec:	2181      	movs	r1, #129	@ 0x81
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 fe97 	bl	800cc22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aefa:	2340      	movs	r3, #64	@ 0x40
 800aefc:	2202      	movs	r2, #2
 800aefe:	2101      	movs	r1, #1
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fe8e 	bl	800cc22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af0e:	2308      	movs	r3, #8
 800af10:	2203      	movs	r2, #3
 800af12:	2182      	movs	r1, #130	@ 0x82
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 fe84 	bl	800cc22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af20:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af24:	f001 ffa4 	bl	800ce70 <USBD_static_malloc>
 800af28:	4602      	mov	r2, r0
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800af3a:	2301      	movs	r3, #1
 800af3c:	73fb      	strb	r3, [r7, #15]
 800af3e:	e026      	b.n	800af8e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af46:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2200      	movs	r2, #0
 800af56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	7c1b      	ldrb	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d109      	bne.n	800af7e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af74:	2101      	movs	r1, #1
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 ff43 	bl	800ce02 <USBD_LL_PrepareReceive>
 800af7c:	e007      	b.n	800af8e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af84:	2340      	movs	r3, #64	@ 0x40
 800af86:	2101      	movs	r1, #1
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 ff3a 	bl	800ce02 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800afa8:	2181      	movs	r1, #129	@ 0x81
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 fe5f 	bl	800cc6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800afb6:	2101      	movs	r1, #1
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fe58 	bl	800cc6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800afc6:	2182      	movs	r1, #130	@ 0x82
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 fe50 	bl	800cc6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00e      	beq.n	800affc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 ff4a 	bl	800ce88 <USBD_static_free>
    pdev->pClassData = NULL;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800affc:	7bfb      	ldrb	r3, [r7, #15]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b016:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d039      	beq.n	800b0a4 <USBD_CDC_Setup+0x9e>
 800b030:	2b20      	cmp	r3, #32
 800b032:	d17f      	bne.n	800b134 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	88db      	ldrh	r3, [r3, #6]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d029      	beq.n	800b090 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	b25b      	sxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	da11      	bge.n	800b06a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b052:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	88d2      	ldrh	r2, [r2, #6]
 800b058:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b05a:	6939      	ldr	r1, [r7, #16]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	88db      	ldrh	r3, [r3, #6]
 800b060:	461a      	mov	r2, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 fa06 	bl	800c474 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b068:	e06b      	b.n	800b142 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	785a      	ldrb	r2, [r3, #1]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b080:	6939      	ldr	r1, [r7, #16]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	88db      	ldrh	r3, [r3, #6]
 800b086:	461a      	mov	r2, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 fa21 	bl	800c4d0 <USBD_CtlPrepareRx>
      break;
 800b08e:	e058      	b.n	800b142 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	7850      	ldrb	r0, [r2, #1]
 800b09c:	2200      	movs	r2, #0
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	4798      	blx	r3
      break;
 800b0a2:	e04e      	b.n	800b142 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	2b0b      	cmp	r3, #11
 800b0aa:	d02e      	beq.n	800b10a <USBD_CDC_Setup+0x104>
 800b0ac:	2b0b      	cmp	r3, #11
 800b0ae:	dc38      	bgt.n	800b122 <USBD_CDC_Setup+0x11c>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <USBD_CDC_Setup+0xb4>
 800b0b4:	2b0a      	cmp	r3, #10
 800b0b6:	d014      	beq.n	800b0e2 <USBD_CDC_Setup+0xdc>
 800b0b8:	e033      	b.n	800b122 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d107      	bne.n	800b0d4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b0c4:	f107 030c 	add.w	r3, r7, #12
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f9d1 	bl	800c474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0d2:	e02e      	b.n	800b132 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 f962 	bl	800c3a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0dc:	2302      	movs	r3, #2
 800b0de:	75fb      	strb	r3, [r7, #23]
          break;
 800b0e0:	e027      	b.n	800b132 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d107      	bne.n	800b0fc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0ec:	f107 030f 	add.w	r3, r7, #15
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 f9bd 	bl	800c474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0fa:	e01a      	b.n	800b132 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 f94e 	bl	800c3a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b104:	2302      	movs	r3, #2
 800b106:	75fb      	strb	r3, [r7, #23]
          break;
 800b108:	e013      	b.n	800b132 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b110:	2b03      	cmp	r3, #3
 800b112:	d00d      	beq.n	800b130 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 f942 	bl	800c3a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b11c:	2302      	movs	r3, #2
 800b11e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b120:	e006      	b.n	800b130 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 f93b 	bl	800c3a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b12a:	2302      	movs	r3, #2
 800b12c:	75fb      	strb	r3, [r7, #23]
          break;
 800b12e:	e000      	b.n	800b132 <USBD_CDC_Setup+0x12c>
          break;
 800b130:	bf00      	nop
      }
      break;
 800b132:	e006      	b.n	800b142 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f932 	bl	800c3a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b13c:	2302      	movs	r3, #2
 800b13e:	75fb      	strb	r3, [r7, #23]
      break;
 800b140:	bf00      	nop
  }

  return ret;
 800b142:	7dfb      	ldrb	r3, [r7, #23]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b15e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b166:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d03a      	beq.n	800b1e8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	331c      	adds	r3, #28
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d029      	beq.n	800b1dc <USBD_CDC_DataIn+0x90>
 800b188:	78fa      	ldrb	r2, [r7, #3]
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	331c      	adds	r3, #28
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	78f9      	ldrb	r1, [r7, #3]
 800b19c:	68b8      	ldr	r0, [r7, #8]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	4403      	add	r3, r0
 800b1a8:	3320      	adds	r3, #32
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d110      	bne.n	800b1dc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b1ba:	78fa      	ldrb	r2, [r7, #3]
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	331c      	adds	r3, #28
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1ce:	78f9      	ldrb	r1, [r7, #3]
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fdf1 	bl	800cdbc <USBD_LL_Transmit>
 800b1da:	e003      	b.n	800b1e4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e000      	b.n	800b1ea <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b1e8:	2302      	movs	r3, #2
  }
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b204:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 fe1c 	bl	800ce48 <USBD_LL_GetRxDataSize>
 800b210:	4602      	mov	r2, r0
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00d      	beq.n	800b23e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b236:	4611      	mov	r1, r2
 800b238:	4798      	blx	r3

    return USBD_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e000      	b.n	800b240 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b23e:	2302      	movs	r3, #2
  }
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b256:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d014      	beq.n	800b28c <USBD_CDC_EP0_RxReady+0x44>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b268:	2bff      	cmp	r3, #255	@ 0xff
 800b26a:	d00f      	beq.n	800b28c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b27a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b282:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	22ff      	movs	r2, #255	@ 0xff
 800b288:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2243      	movs	r2, #67	@ 0x43
 800b2a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b2a6:	4b03      	ldr	r3, [pc, #12]	@ (800b2b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	200000a0 	.word	0x200000a0

0800b2b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2243      	movs	r2, #67	@ 0x43
 800b2c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b2c6:	4b03      	ldr	r3, [pc, #12]	@ (800b2d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	2000005c 	.word	0x2000005c

0800b2d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2243      	movs	r2, #67	@ 0x43
 800b2e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b2e6:	4b03      	ldr	r3, [pc, #12]	@ (800b2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bc80      	pop	{r7}
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200000e4 	.word	0x200000e4

0800b2f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	220a      	movs	r2, #10
 800b304:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b306:	4b03      	ldr	r3, [pc, #12]	@ (800b314 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000018 	.word	0x20000018

0800b318 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b322:	2302      	movs	r3, #2
 800b324:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	bc80      	pop	{r7}
 800b342:	4770      	bx	lr

0800b344 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	4613      	mov	r3, r2
 800b350:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b358:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b362:	88fa      	ldrh	r2, [r7, #6]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	bc80      	pop	{r7}
 800b374:	4770      	bx	lr

0800b376 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b386:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	bc80      	pop	{r7}
 800b39a:	4770      	bx	lr

0800b39c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01c      	beq.n	800b3f0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d115      	bne.n	800b3ec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	2181      	movs	r1, #129	@ 0x81
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fcea 	bl	800cdbc <USBD_LL_Transmit>

      return USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e002      	b.n	800b3f2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b3f0:	2302      	movs	r3, #2
  }
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b408:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b410:	2b00      	cmp	r3, #0
 800b412:	d017      	beq.n	800b444 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7c1b      	ldrb	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d109      	bne.n	800b430 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b426:	2101      	movs	r1, #1
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 fcea 	bl	800ce02 <USBD_LL_PrepareReceive>
 800b42e:	e007      	b.n	800b440 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b436:	2340      	movs	r3, #64	@ 0x40
 800b438:	2101      	movs	r1, #1
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 fce1 	bl	800ce02 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	e000      	b.n	800b446 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b444:	2302      	movs	r3, #2
  }
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	4613      	mov	r3, r2
 800b45a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b462:	2302      	movs	r3, #2
 800b464:	e01a      	b.n	800b49c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	79fa      	ldrb	r2, [r7, #7]
 800b492:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f001 fb4f 	bl	800cb38 <USBD_LL_Init>

  return USBD_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d006      	beq.n	800b4c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
 800b4c4:	e001      	b.n	800b4ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 fb84 	bl	800cbec <USBD_LL_Start>

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr

0800b502 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b084      	sub	sp, #16
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	460b      	mov	r3, r1
 800b50c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b50e:	2302      	movs	r3, #2
 800b510:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00c      	beq.n	800b536 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	78fa      	ldrb	r2, [r7, #3]
 800b526:	4611      	mov	r1, r2
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	4798      	blx	r3
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	78fa      	ldrb	r2, [r7, #3]
 800b556:	4611      	mov	r1, r2
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	4798      	blx	r3

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fed8 	bl	800c32e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b58c:	461a      	mov	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b59a:	f003 031f 	and.w	r3, r3, #31
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d016      	beq.n	800b5d0 <USBD_LL_SetupStage+0x6a>
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d81c      	bhi.n	800b5e0 <USBD_LL_SetupStage+0x7a>
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <USBD_LL_SetupStage+0x4a>
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d008      	beq.n	800b5c0 <USBD_LL_SetupStage+0x5a>
 800b5ae:	e017      	b.n	800b5e0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9cb 	bl	800b954 <USBD_StdDevReq>
      break;
 800b5be:	e01a      	b.n	800b5f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fa2d 	bl	800ba28 <USBD_StdItfReq>
      break;
 800b5ce:	e012      	b.n	800b5f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fa6d 	bl	800bab8 <USBD_StdEPReq>
      break;
 800b5de:	e00a      	b.n	800b5f6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b5e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 fb5c 	bl	800ccac <USBD_LL_StallEP>
      break;
 800b5f4:	bf00      	nop
  }

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	460b      	mov	r3, r1
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b60e:	7afb      	ldrb	r3, [r7, #11]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d14b      	bne.n	800b6ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b61a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b622:	2b03      	cmp	r3, #3
 800b624:	d134      	bne.n	800b690 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d919      	bls.n	800b666 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	1ad2      	subs	r2, r2, r3
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b648:	429a      	cmp	r2, r3
 800b64a:	d203      	bcs.n	800b654 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b650:	b29b      	uxth	r3, r3
 800b652:	e002      	b.n	800b65a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b658:	b29b      	uxth	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 ff54 	bl	800c50c <USBD_CtlContinueRx>
 800b664:	e038      	b.n	800b6d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d105      	bne.n	800b688 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 ff51 	bl	800c530 <USBD_CtlSendStatus>
 800b68e:	e023      	b.n	800b6d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b696:	2b05      	cmp	r3, #5
 800b698:	d11e      	bne.n	800b6d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f001 fb01 	bl	800ccac <USBD_LL_StallEP>
 800b6aa:	e015      	b.n	800b6d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00d      	beq.n	800b6d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d108      	bne.n	800b6d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	7afa      	ldrb	r2, [r7, #11]
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	4798      	blx	r3
 800b6d2:	e001      	b.n	800b6d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e000      	b.n	800b6da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	607a      	str	r2, [r7, #4]
 800b6ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b6f0:	7afb      	ldrb	r3, [r7, #11]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d17f      	bne.n	800b7f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3314      	adds	r3, #20
 800b6fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b702:	2b02      	cmp	r3, #2
 800b704:	d15c      	bne.n	800b7c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d915      	bls.n	800b73e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	1ad2      	subs	r2, r2, r3
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	b29b      	uxth	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 febe 	bl	800c4ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b730:	2300      	movs	r3, #0
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f001 fb63 	bl	800ce02 <USBD_LL_PrepareReceive>
 800b73c:	e04e      	b.n	800b7dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	6912      	ldr	r2, [r2, #16]
 800b746:	fbb3 f1f2 	udiv	r1, r3, r2
 800b74a:	fb01 f202 	mul.w	r2, r1, r2
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	2b00      	cmp	r3, #0
 800b752:	d11c      	bne.n	800b78e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	689a      	ldr	r2, [r3, #8]
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d316      	bcc.n	800b78e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	689a      	ldr	r2, [r3, #8]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d20f      	bcs.n	800b78e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f000 fe9a 	bl	800c4ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f001 fb3b 	bl	800ce02 <USBD_LL_PrepareReceive>
 800b78c:	e026      	b.n	800b7dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d105      	bne.n	800b7b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b7b0:	2180      	movs	r1, #128	@ 0x80
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f001 fa7a 	bl	800ccac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 fecc 	bl	800c556 <USBD_CtlReceiveStatus>
 800b7be:	e00d      	b.n	800b7dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d004      	beq.n	800b7d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d103      	bne.n	800b7dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b7d4:	2180      	movs	r1, #128	@ 0x80
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f001 fa68 	bl	800ccac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d11d      	bne.n	800b822 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fe81 	bl	800b4ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7f4:	e015      	b.n	800b822 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00d      	beq.n	800b81e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d108      	bne.n	800b81e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	7afa      	ldrb	r2, [r7, #11]
 800b816:	4611      	mov	r1, r2
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	4798      	blx	r3
 800b81c:	e001      	b.n	800b822 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b81e:	2302      	movs	r3, #2
 800b820:	e000      	b.n	800b824 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b834:	2340      	movs	r3, #64	@ 0x40
 800b836:	2200      	movs	r2, #0
 800b838:	2100      	movs	r1, #0
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 f9f1 	bl	800cc22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2240      	movs	r2, #64	@ 0x40
 800b84c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b850:	2340      	movs	r3, #64	@ 0x40
 800b852:	2200      	movs	r2, #0
 800b854:	2180      	movs	r1, #128	@ 0x80
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f001 f9e3 	bl	800cc22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2240      	movs	r2, #64	@ 0x40
 800b866:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d009      	beq.n	800b8a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6852      	ldr	r2, [r2, #4]
 800b89c:	b2d2      	uxtb	r2, r2
 800b89e:	4611      	mov	r1, r2
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	4798      	blx	r3
  }

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	78fa      	ldrb	r2, [r7, #3]
 800b8be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr

0800b8cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2204      	movs	r2, #4
 800b8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc80      	pop	{r7}
 800b8f2:	4770      	bx	lr

0800b8f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	2b04      	cmp	r3, #4
 800b904:	d105      	bne.n	800b912 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr

0800b91e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d10b      	bne.n	800b948 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b96a:	2b40      	cmp	r3, #64	@ 0x40
 800b96c:	d005      	beq.n	800b97a <USBD_StdDevReq+0x26>
 800b96e:	2b40      	cmp	r3, #64	@ 0x40
 800b970:	d84f      	bhi.n	800ba12 <USBD_StdDevReq+0xbe>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <USBD_StdDevReq+0x36>
 800b976:	2b20      	cmp	r3, #32
 800b978:	d14b      	bne.n	800ba12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	4798      	blx	r3
      break;
 800b988:	e048      	b.n	800ba1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	2b09      	cmp	r3, #9
 800b990:	d839      	bhi.n	800ba06 <USBD_StdDevReq+0xb2>
 800b992:	a201      	add	r2, pc, #4	@ (adr r2, 800b998 <USBD_StdDevReq+0x44>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800b9e9 	.word	0x0800b9e9
 800b99c:	0800b9fd 	.word	0x0800b9fd
 800b9a0:	0800ba07 	.word	0x0800ba07
 800b9a4:	0800b9f3 	.word	0x0800b9f3
 800b9a8:	0800ba07 	.word	0x0800ba07
 800b9ac:	0800b9cb 	.word	0x0800b9cb
 800b9b0:	0800b9c1 	.word	0x0800b9c1
 800b9b4:	0800ba07 	.word	0x0800ba07
 800b9b8:	0800b9df 	.word	0x0800b9df
 800b9bc:	0800b9d5 	.word	0x0800b9d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f9dc 	bl	800bd80 <USBD_GetDescriptor>
          break;
 800b9c8:	e022      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fb3f 	bl	800c050 <USBD_SetAddress>
          break;
 800b9d2:	e01d      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fb7e 	bl	800c0d8 <USBD_SetConfig>
          break;
 800b9dc:	e018      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fc07 	bl	800c1f4 <USBD_GetConfig>
          break;
 800b9e6:	e013      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fc37 	bl	800c25e <USBD_GetStatus>
          break;
 800b9f0:	e00e      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fc65 	bl	800c2c4 <USBD_SetFeature>
          break;
 800b9fa:	e009      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fc74 	bl	800c2ec <USBD_ClrFeature>
          break;
 800ba04:	e004      	b.n	800ba10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fcc9 	bl	800c3a0 <USBD_CtlError>
          break;
 800ba0e:	bf00      	nop
      }
      break;
 800ba10:	e004      	b.n	800ba1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fcc3 	bl	800c3a0 <USBD_CtlError>
      break;
 800ba1a:	bf00      	nop
  }

  return ret;
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop

0800ba28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba3e:	2b40      	cmp	r3, #64	@ 0x40
 800ba40:	d005      	beq.n	800ba4e <USBD_StdItfReq+0x26>
 800ba42:	2b40      	cmp	r3, #64	@ 0x40
 800ba44:	d82e      	bhi.n	800baa4 <USBD_StdItfReq+0x7c>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <USBD_StdItfReq+0x26>
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	d12a      	bne.n	800baa4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba54:	3b01      	subs	r3, #1
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d81d      	bhi.n	800ba96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	889b      	ldrh	r3, [r3, #4]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d813      	bhi.n	800ba8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
 800ba72:	4603      	mov	r3, r0
 800ba74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	88db      	ldrh	r3, [r3, #6]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d110      	bne.n	800baa0 <USBD_StdItfReq+0x78>
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10d      	bne.n	800baa0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fd53 	bl	800c530 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba8a:	e009      	b.n	800baa0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fc86 	bl	800c3a0 <USBD_CtlError>
          break;
 800ba94:	e004      	b.n	800baa0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fc81 	bl	800c3a0 <USBD_CtlError>
          break;
 800ba9e:	e000      	b.n	800baa2 <USBD_StdItfReq+0x7a>
          break;
 800baa0:	bf00      	nop
      }
      break;
 800baa2:	e004      	b.n	800baae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fc7a 	bl	800c3a0 <USBD_CtlError>
      break;
 800baac:	bf00      	nop
  }

  return USBD_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	889b      	ldrh	r3, [r3, #4]
 800baca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bad4:	2b40      	cmp	r3, #64	@ 0x40
 800bad6:	d007      	beq.n	800bae8 <USBD_StdEPReq+0x30>
 800bad8:	2b40      	cmp	r3, #64	@ 0x40
 800bada:	f200 8146 	bhi.w	800bd6a <USBD_StdEPReq+0x2b2>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <USBD_StdEPReq+0x40>
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	f040 8141 	bne.w	800bd6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
      break;
 800baf6:	e13d      	b.n	800bd74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d10a      	bne.n	800bb1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	4798      	blx	r3
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	e12d      	b.n	800bd76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d007      	beq.n	800bb32 <USBD_StdEPReq+0x7a>
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	f300 811b 	bgt.w	800bd5e <USBD_StdEPReq+0x2a6>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d072      	beq.n	800bc12 <USBD_StdEPReq+0x15a>
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d03a      	beq.n	800bba6 <USBD_StdEPReq+0xee>
 800bb30:	e115      	b.n	800bd5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d002      	beq.n	800bb42 <USBD_StdEPReq+0x8a>
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d015      	beq.n	800bb6c <USBD_StdEPReq+0xb4>
 800bb40:	e02b      	b.n	800bb9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00c      	beq.n	800bb62 <USBD_StdEPReq+0xaa>
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	2b80      	cmp	r3, #128	@ 0x80
 800bb4c:	d009      	beq.n	800bb62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 f8aa 	bl	800ccac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb58:	2180      	movs	r1, #128	@ 0x80
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 f8a6 	bl	800ccac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb60:	e020      	b.n	800bba4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fc1b 	bl	800c3a0 <USBD_CtlError>
              break;
 800bb6a:	e01b      	b.n	800bba4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	885b      	ldrh	r3, [r3, #2]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10e      	bne.n	800bb92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <USBD_StdEPReq+0xda>
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b80      	cmp	r3, #128	@ 0x80
 800bb7e:	d008      	beq.n	800bb92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	88db      	ldrh	r3, [r3, #6]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d104      	bne.n	800bb92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f001 f88d 	bl	800ccac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fccc 	bl	800c530 <USBD_CtlSendStatus>

              break;
 800bb98:	e004      	b.n	800bba4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fbff 	bl	800c3a0 <USBD_CtlError>
              break;
 800bba2:	bf00      	nop
          }
          break;
 800bba4:	e0e0      	b.n	800bd68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d002      	beq.n	800bbb6 <USBD_StdEPReq+0xfe>
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d015      	beq.n	800bbe0 <USBD_StdEPReq+0x128>
 800bbb4:	e026      	b.n	800bc04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00c      	beq.n	800bbd6 <USBD_StdEPReq+0x11e>
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	2b80      	cmp	r3, #128	@ 0x80
 800bbc0:	d009      	beq.n	800bbd6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 f870 	bl	800ccac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bbcc:	2180      	movs	r1, #128	@ 0x80
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f001 f86c 	bl	800ccac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbd4:	e01c      	b.n	800bc10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fbe1 	bl	800c3a0 <USBD_CtlError>
              break;
 800bbde:	e017      	b.n	800bc10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	885b      	ldrh	r3, [r3, #2]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d112      	bne.n	800bc0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d004      	beq.n	800bbfc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f001 f877 	bl	800ccea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fc97 	bl	800c530 <USBD_CtlSendStatus>
              }
              break;
 800bc02:	e004      	b.n	800bc0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fbca 	bl	800c3a0 <USBD_CtlError>
              break;
 800bc0c:	e000      	b.n	800bc10 <USBD_StdEPReq+0x158>
              break;
 800bc0e:	bf00      	nop
          }
          break;
 800bc10:	e0aa      	b.n	800bd68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d002      	beq.n	800bc22 <USBD_StdEPReq+0x16a>
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d032      	beq.n	800bc86 <USBD_StdEPReq+0x1ce>
 800bc20:	e097      	b.n	800bd52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <USBD_StdEPReq+0x180>
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b80      	cmp	r3, #128	@ 0x80
 800bc2c:	d004      	beq.n	800bc38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fbb5 	bl	800c3a0 <USBD_CtlError>
                break;
 800bc36:	e091      	b.n	800bd5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da0b      	bge.n	800bc58 <USBD_StdEPReq+0x1a0>
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc46:	4613      	mov	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	3310      	adds	r3, #16
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	3304      	adds	r3, #4
 800bc56:	e00b      	b.n	800bc70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3304      	adds	r3, #4
 800bc70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2200      	movs	r2, #0
 800bc76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fbf8 	bl	800c474 <USBD_CtlSendData>
              break;
 800bc84:	e06a      	b.n	800bd5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da11      	bge.n	800bcb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	f003 020f 	and.w	r2, r3, #15
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3318      	adds	r3, #24
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d117      	bne.n	800bcd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fb78 	bl	800c3a0 <USBD_CtlError>
                  break;
 800bcb0:	e054      	b.n	800bd5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	f003 020f 	and.w	r2, r3, #15
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d104      	bne.n	800bcd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fb65 	bl	800c3a0 <USBD_CtlError>
                  break;
 800bcd6:	e041      	b.n	800bd5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da0b      	bge.n	800bcf8 <USBD_StdEPReq+0x240>
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	3310      	adds	r3, #16
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	e00b      	b.n	800bd10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	3304      	adds	r3, #4
 800bd10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd12:	7bbb      	ldrb	r3, [r7, #14]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <USBD_StdEPReq+0x266>
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	2b80      	cmp	r3, #128	@ 0x80
 800bd1c:	d103      	bne.n	800bd26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	e00e      	b.n	800bd44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bd26:	7bbb      	ldrb	r3, [r7, #14]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fffc 	bl	800cd28 <USBD_LL_IsStallEP>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	e002      	b.n	800bd44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2202      	movs	r2, #2
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fb92 	bl	800c474 <USBD_CtlSendData>
              break;
 800bd50:	e004      	b.n	800bd5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fb23 	bl	800c3a0 <USBD_CtlError>
              break;
 800bd5a:	bf00      	nop
          }
          break;
 800bd5c:	e004      	b.n	800bd68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fb1d 	bl	800c3a0 <USBD_CtlError>
          break;
 800bd66:	bf00      	nop
      }
      break;
 800bd68:	e004      	b.n	800bd74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fb17 	bl	800c3a0 <USBD_CtlError>
      break;
 800bd72:	bf00      	nop
  }

  return ret;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	885b      	ldrh	r3, [r3, #2]
 800bd9a:	0a1b      	lsrs	r3, r3, #8
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	2b06      	cmp	r3, #6
 800bda2:	f200 8128 	bhi.w	800bff6 <USBD_GetDescriptor+0x276>
 800bda6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdac <USBD_GetDescriptor+0x2c>)
 800bda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdac:	0800bdc9 	.word	0x0800bdc9
 800bdb0:	0800bde1 	.word	0x0800bde1
 800bdb4:	0800be21 	.word	0x0800be21
 800bdb8:	0800bff7 	.word	0x0800bff7
 800bdbc:	0800bff7 	.word	0x0800bff7
 800bdc0:	0800bf97 	.word	0x0800bf97
 800bdc4:	0800bfc3 	.word	0x0800bfc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
      break;
 800bdde:	e112      	b.n	800c006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7c1b      	ldrb	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10d      	bne.n	800be04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf0:	f107 0208 	add.w	r2, r7, #8
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	2202      	movs	r2, #2
 800be00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be02:	e100      	b.n	800c006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	f107 0208 	add.w	r2, r7, #8
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	2202      	movs	r2, #2
 800be1c:	701a      	strb	r2, [r3, #0]
      break;
 800be1e:	e0f2      	b.n	800c006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b05      	cmp	r3, #5
 800be28:	f200 80ac 	bhi.w	800bf84 <USBD_GetDescriptor+0x204>
 800be2c:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <USBD_GetDescriptor+0xb4>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be4d 	.word	0x0800be4d
 800be38:	0800be81 	.word	0x0800be81
 800be3c:	0800beb5 	.word	0x0800beb5
 800be40:	0800bee9 	.word	0x0800bee9
 800be44:	0800bf1d 	.word	0x0800bf1d
 800be48:	0800bf51 	.word	0x0800bf51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e091      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa94 	bl	800c3a0 <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e089      	b.n	800bf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	7c12      	ldrb	r2, [r2, #16]
 800be98:	f107 0108 	add.w	r1, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea2:	e077      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa7a 	bl	800c3a0 <USBD_CtlError>
            err++;
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	3301      	adds	r3, #1
 800beb0:	72fb      	strb	r3, [r7, #11]
          break;
 800beb2:	e06f      	b.n	800bf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed6:	e05d      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa60 	bl	800c3a0 <USBD_CtlError>
            err++;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	3301      	adds	r3, #1
 800bee4:	72fb      	strb	r3, [r7, #11]
          break;
 800bee6:	e055      	b.n	800bf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	7c12      	ldrb	r2, [r2, #16]
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0a:	e043      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa46 	bl	800c3a0 <USBD_CtlError>
            err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1a:	e03b      	b.n	800bf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3e:	e029      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa2c 	bl	800c3a0 <USBD_CtlError>
            err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4e:	e021      	b.n	800bf94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7c12      	ldrb	r2, [r2, #16]
 800bf68:	f107 0108 	add.w	r1, r7, #8
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4798      	blx	r3
 800bf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf72:	e00f      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fa12 	bl	800c3a0 <USBD_CtlError>
            err++;
 800bf7c:	7afb      	ldrb	r3, [r7, #11]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	72fb      	strb	r3, [r7, #11]
          break;
 800bf82:	e007      	b.n	800bf94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fa0a 	bl	800c3a0 <USBD_CtlError>
          err++;
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bf92:	e038      	b.n	800c006 <USBD_GetDescriptor+0x286>
 800bf94:	e037      	b.n	800c006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7c1b      	ldrb	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d109      	bne.n	800bfb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa6:	f107 0208 	add.w	r2, r7, #8
 800bfaa:	4610      	mov	r0, r2
 800bfac:	4798      	blx	r3
 800bfae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfb0:	e029      	b.n	800c006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f9f3 	bl	800c3a0 <USBD_CtlError>
        err++;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc0:	e021      	b.n	800c006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7c1b      	ldrb	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10d      	bne.n	800bfe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd2:	f107 0208 	add.w	r2, r7, #8
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	4798      	blx	r3
 800bfda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfe4:	e00f      	b.n	800c006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f9d9 	bl	800c3a0 <USBD_CtlError>
        err++;
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	3301      	adds	r3, #1
 800bff2:	72fb      	strb	r3, [r7, #11]
      break;
 800bff4:	e007      	b.n	800c006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f9d1 	bl	800c3a0 <USBD_CtlError>
      err++;
 800bffe:	7afb      	ldrb	r3, [r7, #11]
 800c000:	3301      	adds	r3, #1
 800c002:	72fb      	strb	r3, [r7, #11]
      break;
 800c004:	bf00      	nop
  }

  if (err != 0U)
 800c006:	7afb      	ldrb	r3, [r7, #11]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d11c      	bne.n	800c046 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c00c:	893b      	ldrh	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d011      	beq.n	800c036 <USBD_GetDescriptor+0x2b6>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	88db      	ldrh	r3, [r3, #6]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00d      	beq.n	800c036 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	88da      	ldrh	r2, [r3, #6]
 800c01e:	893b      	ldrh	r3, [r7, #8]
 800c020:	4293      	cmp	r3, r2
 800c022:	bf28      	it	cs
 800c024:	4613      	movcs	r3, r2
 800c026:	b29b      	uxth	r3, r3
 800c028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c02a:	893b      	ldrh	r3, [r7, #8]
 800c02c:	461a      	mov	r2, r3
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fa1f 	bl	800c474 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	88db      	ldrh	r3, [r3, #6]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d104      	bne.n	800c048 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa76 	bl	800c530 <USBD_CtlSendStatus>
 800c044:	e000      	b.n	800c048 <USBD_GetDescriptor+0x2c8>
    return;
 800c046:	bf00      	nop
    }
  }
}
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop

0800c050 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	889b      	ldrh	r3, [r3, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d130      	bne.n	800c0c4 <USBD_SetAddress+0x74>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	88db      	ldrh	r3, [r3, #6]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d12c      	bne.n	800c0c4 <USBD_SetAddress+0x74>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	885b      	ldrh	r3, [r3, #2]
 800c06e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c070:	d828      	bhi.n	800c0c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c07c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c084:	2b03      	cmp	r3, #3
 800c086:	d104      	bne.n	800c092 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f988 	bl	800c3a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c090:	e01d      	b.n	800c0ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	7bfa      	ldrb	r2, [r7, #15]
 800c096:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fe6d 	bl	800cd7e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fa43 	bl	800c530 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b8:	e009      	b.n	800c0ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c2:	e004      	b.n	800c0ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f96a 	bl	800c3a0 <USBD_CtlError>
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
	...

0800c0d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	885b      	ldrh	r3, [r3, #2]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	4b41      	ldr	r3, [pc, #260]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c0ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0ec:	4b40      	ldr	r3, [pc, #256]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d904      	bls.n	800c0fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 f952 	bl	800c3a0 <USBD_CtlError>
 800c0fc:	e075      	b.n	800c1ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c104:	2b02      	cmp	r3, #2
 800c106:	d002      	beq.n	800c10e <USBD_SetConfig+0x36>
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d023      	beq.n	800c154 <USBD_SetConfig+0x7c>
 800c10c:	e062      	b.n	800c1d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c10e:	4b38      	ldr	r3, [pc, #224]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01a      	beq.n	800c14c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c116:	4b36      	ldr	r3, [pc, #216]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2203      	movs	r2, #3
 800c124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c128:	4b31      	ldr	r3, [pc, #196]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff f9e7 	bl	800b502 <USBD_SetClassConfig>
 800c134:	4603      	mov	r3, r0
 800c136:	2b02      	cmp	r3, #2
 800c138:	d104      	bne.n	800c144 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f92f 	bl	800c3a0 <USBD_CtlError>
            return;
 800c142:	e052      	b.n	800c1ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f9f3 	bl	800c530 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c14a:	e04e      	b.n	800c1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f9ef 	bl	800c530 <USBD_CtlSendStatus>
        break;
 800c152:	e04a      	b.n	800c1ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c154:	4b26      	ldr	r3, [pc, #152]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d112      	bne.n	800c182 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c164:	4b22      	ldr	r3, [pc, #136]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c16e:	4b20      	ldr	r3, [pc, #128]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff f9e3 	bl	800b540 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f9d8 	bl	800c530 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c180:	e033      	b.n	800c1ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c182:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d01d      	beq.n	800c1cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff f9d1 	bl	800b540 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c19e:	4b14      	ldr	r3, [pc, #80]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c1a8:	4b11      	ldr	r3, [pc, #68]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff f9a7 	bl	800b502 <USBD_SetClassConfig>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d104      	bne.n	800c1c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8ef 	bl	800c3a0 <USBD_CtlError>
            return;
 800c1c2:	e012      	b.n	800c1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f9b3 	bl	800c530 <USBD_CtlSendStatus>
        break;
 800c1ca:	e00e      	b.n	800c1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f9af 	bl	800c530 <USBD_CtlSendStatus>
        break;
 800c1d2:	e00a      	b.n	800c1ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f8e2 	bl	800c3a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c1dc:	4b04      	ldr	r3, [pc, #16]	@ (800c1f0 <USBD_SetConfig+0x118>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff f9ac 	bl	800b540 <USBD_ClrClassConfig>
        break;
 800c1e8:	bf00      	nop
    }
  }
}
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000ae4 	.word	0x20000ae4

0800c1f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	88db      	ldrh	r3, [r3, #6]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d004      	beq.n	800c210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f8c9 	bl	800c3a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c20e:	e022      	b.n	800c256 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c216:	2b02      	cmp	r3, #2
 800c218:	dc02      	bgt.n	800c220 <USBD_GetConfig+0x2c>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	dc03      	bgt.n	800c226 <USBD_GetConfig+0x32>
 800c21e:	e015      	b.n	800c24c <USBD_GetConfig+0x58>
 800c220:	2b03      	cmp	r3, #3
 800c222:	d00b      	beq.n	800c23c <USBD_GetConfig+0x48>
 800c224:	e012      	b.n	800c24c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3308      	adds	r3, #8
 800c230:	2201      	movs	r2, #1
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f91d 	bl	800c474 <USBD_CtlSendData>
        break;
 800c23a:	e00c      	b.n	800c256 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	3304      	adds	r3, #4
 800c240:	2201      	movs	r2, #1
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f915 	bl	800c474 <USBD_CtlSendData>
        break;
 800c24a:	e004      	b.n	800c256 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f8a6 	bl	800c3a0 <USBD_CtlError>
        break;
 800c254:	bf00      	nop
}
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b082      	sub	sp, #8
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c26e:	3b01      	subs	r3, #1
 800c270:	2b02      	cmp	r3, #2
 800c272:	d81e      	bhi.n	800c2b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	88db      	ldrh	r3, [r3, #6]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d004      	beq.n	800c286 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f88e 	bl	800c3a0 <USBD_CtlError>
        break;
 800c284:	e01a      	b.n	800c2bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c292:	2b00      	cmp	r3, #0
 800c294:	d005      	beq.n	800c2a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f043 0202 	orr.w	r2, r3, #2
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	330c      	adds	r3, #12
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f8e2 	bl	800c474 <USBD_CtlSendData>
      break;
 800c2b0:	e004      	b.n	800c2bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f873 	bl	800c3a0 <USBD_CtlError>
      break;
 800c2ba:	bf00      	nop
  }
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	885b      	ldrh	r3, [r3, #2]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d106      	bne.n	800c2e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f926 	bl	800c530 <USBD_CtlSendStatus>
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d80b      	bhi.n	800c31a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	885b      	ldrh	r3, [r3, #2]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d10c      	bne.n	800c324 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f90c 	bl	800c530 <USBD_CtlSendStatus>
      }
      break;
 800c318:	e004      	b.n	800c324 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f83f 	bl	800c3a0 <USBD_CtlError>
      break;
 800c322:	e000      	b.n	800c326 <USBD_ClrFeature+0x3a>
      break;
 800c324:	bf00      	nop
  }
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781a      	ldrb	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	785a      	ldrb	r2, [r3, #1]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	3302      	adds	r3, #2
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	3303      	adds	r3, #3
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	021b      	lsls	r3, r3, #8
 800c358:	b29b      	uxth	r3, r3
 800c35a:	4413      	add	r3, r2
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	3304      	adds	r3, #4
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	3305      	adds	r3, #5
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	021b      	lsls	r3, r3, #8
 800c372:	b29b      	uxth	r3, r3
 800c374:	4413      	add	r3, r2
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	3306      	adds	r3, #6
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3307      	adds	r3, #7
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	4413      	add	r3, r2
 800c390:	b29a      	uxth	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	80da      	strh	r2, [r3, #6]

}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bc80      	pop	{r7}
 800c39e:	4770      	bx	lr

0800c3a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c3aa:	2180      	movs	r1, #128	@ 0x80
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fc7d 	bl	800ccac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fc79 	bl	800ccac <USBD_LL_StallEP>
}
 800c3ba:	bf00      	nop
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b086      	sub	sp, #24
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d032      	beq.n	800c43e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f834 	bl	800c446 <USBD_GetLen>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	75fa      	strb	r2, [r7, #23]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7812      	ldrb	r2, [r2, #0]
 800c3fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	75fa      	strb	r2, [r7, #23]
 800c404:	461a      	mov	r2, r3
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	4413      	add	r3, r2
 800c40a:	2203      	movs	r2, #3
 800c40c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c40e:	e012      	b.n	800c436 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	1c5a      	adds	r2, r3, #1
 800c414:	60fa      	str	r2, [r7, #12]
 800c416:	7dfa      	ldrb	r2, [r7, #23]
 800c418:	1c51      	adds	r1, r2, #1
 800c41a:	75f9      	strb	r1, [r7, #23]
 800c41c:	4611      	mov	r1, r2
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	440a      	add	r2, r1
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	75fa      	strb	r2, [r7, #23]
 800c42c:	461a      	mov	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e8      	bne.n	800c410 <USBD_GetString+0x4e>
    }
  }
}
 800c43e:	bf00      	nop
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c452:	e005      	b.n	800c460 <USBD_GetLen+0x1a>
  {
    len++;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	3301      	adds	r3, #1
 800c458:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3301      	adds	r3, #1
 800c45e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1f5      	bne.n	800c454 <USBD_GetLen+0xe>
  }

  return len;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	bc80      	pop	{r7}
 800c472:	4770      	bx	lr

0800c474 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4613      	mov	r3, r2
 800c480:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2202      	movs	r2, #2
 800c486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c48a:	88fa      	ldrh	r2, [r7, #6]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c490:	88fa      	ldrh	r2, [r7, #6]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c496:	88fb      	ldrh	r3, [r7, #6]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	2100      	movs	r1, #0
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f000 fc8d 	bl	800cdbc <USBD_LL_Transmit>

  return USBD_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4ba:	88fb      	ldrh	r3, [r7, #6]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	2100      	movs	r1, #0
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 fc7b 	bl	800cdbc <USBD_LL_Transmit>

  return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2203      	movs	r2, #3
 800c4e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4e6:	88fa      	ldrh	r2, [r7, #6]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c4ee:	88fa      	ldrh	r2, [r7, #6]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4f6:	88fb      	ldrh	r3, [r7, #6]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 fc80 	bl	800ce02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	4613      	mov	r3, r2
 800c518:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c51a:	88fb      	ldrh	r3, [r7, #6]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	2100      	movs	r1, #0
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 fc6e 	bl	800ce02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2204      	movs	r2, #4
 800c53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c540:	2300      	movs	r3, #0
 800c542:	2200      	movs	r2, #0
 800c544:	2100      	movs	r1, #0
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fc38 	bl	800cdbc <USBD_LL_Transmit>

  return USBD_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2205      	movs	r2, #5
 800c562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c566:	2300      	movs	r3, #0
 800c568:	2200      	movs	r2, #0
 800c56a:	2100      	movs	r1, #0
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fc48 	bl	800ce02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c580:	2200      	movs	r2, #0
 800c582:	4912      	ldr	r1, [pc, #72]	@ (800c5cc <MX_USB_DEVICE_Init+0x50>)
 800c584:	4812      	ldr	r0, [pc, #72]	@ (800c5d0 <MX_USB_DEVICE_Init+0x54>)
 800c586:	f7fe ff62 	bl	800b44e <USBD_Init>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c590:	f7f4 fce8 	bl	8000f64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c594:	490f      	ldr	r1, [pc, #60]	@ (800c5d4 <MX_USB_DEVICE_Init+0x58>)
 800c596:	480e      	ldr	r0, [pc, #56]	@ (800c5d0 <MX_USB_DEVICE_Init+0x54>)
 800c598:	f7fe ff84 	bl	800b4a4 <USBD_RegisterClass>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5a2:	f7f4 fcdf 	bl	8000f64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c5a6:	490c      	ldr	r1, [pc, #48]	@ (800c5d8 <MX_USB_DEVICE_Init+0x5c>)
 800c5a8:	4809      	ldr	r0, [pc, #36]	@ (800c5d0 <MX_USB_DEVICE_Init+0x54>)
 800c5aa:	f7fe feb5 	bl	800b318 <USBD_CDC_RegisterInterface>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5b4:	f7f4 fcd6 	bl	8000f64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5b8:	4805      	ldr	r0, [pc, #20]	@ (800c5d0 <MX_USB_DEVICE_Init+0x54>)
 800c5ba:	f7fe ff8c 	bl	800b4d6 <USBD_Start>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5c4:	f7f4 fcce 	bl	8000f64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5c8:	bf00      	nop
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20000138 	.word	0x20000138
 800c5d0:	20000ae8 	.word	0x20000ae8
 800c5d4:	20000024 	.word	0x20000024
 800c5d8:	20000128 	.word	0x20000128

0800c5dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	4905      	ldr	r1, [pc, #20]	@ (800c5f8 <CDC_Init_FS+0x1c>)
 800c5e4:	4805      	ldr	r0, [pc, #20]	@ (800c5fc <CDC_Init_FS+0x20>)
 800c5e6:	f7fe fead 	bl	800b344 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5ea:	4905      	ldr	r1, [pc, #20]	@ (800c600 <CDC_Init_FS+0x24>)
 800c5ec:	4803      	ldr	r0, [pc, #12]	@ (800c5fc <CDC_Init_FS+0x20>)
 800c5ee:	f7fe fec2 	bl	800b376 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	200011ac 	.word	0x200011ac
 800c5fc:	20000ae8 	.word	0x20000ae8
 800c600:	20000dac 	.word	0x20000dac

0800c604 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c604:	b480      	push	{r7}
 800c606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c608:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bc80      	pop	{r7}
 800c610:	4770      	bx	lr
	...

0800c614 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	6039      	str	r1, [r7, #0]
 800c61e:	71fb      	strb	r3, [r7, #7]
 800c620:	4613      	mov	r3, r2
 800c622:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c624:	79fb      	ldrb	r3, [r7, #7]
 800c626:	2b23      	cmp	r3, #35	@ 0x23
 800c628:	d84a      	bhi.n	800c6c0 <CDC_Control_FS+0xac>
 800c62a:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <CDC_Control_FS+0x1c>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c6c1 	.word	0x0800c6c1
 800c634:	0800c6c1 	.word	0x0800c6c1
 800c638:	0800c6c1 	.word	0x0800c6c1
 800c63c:	0800c6c1 	.word	0x0800c6c1
 800c640:	0800c6c1 	.word	0x0800c6c1
 800c644:	0800c6c1 	.word	0x0800c6c1
 800c648:	0800c6c1 	.word	0x0800c6c1
 800c64c:	0800c6c1 	.word	0x0800c6c1
 800c650:	0800c6c1 	.word	0x0800c6c1
 800c654:	0800c6c1 	.word	0x0800c6c1
 800c658:	0800c6c1 	.word	0x0800c6c1
 800c65c:	0800c6c1 	.word	0x0800c6c1
 800c660:	0800c6c1 	.word	0x0800c6c1
 800c664:	0800c6c1 	.word	0x0800c6c1
 800c668:	0800c6c1 	.word	0x0800c6c1
 800c66c:	0800c6c1 	.word	0x0800c6c1
 800c670:	0800c6c1 	.word	0x0800c6c1
 800c674:	0800c6c1 	.word	0x0800c6c1
 800c678:	0800c6c1 	.word	0x0800c6c1
 800c67c:	0800c6c1 	.word	0x0800c6c1
 800c680:	0800c6c1 	.word	0x0800c6c1
 800c684:	0800c6c1 	.word	0x0800c6c1
 800c688:	0800c6c1 	.word	0x0800c6c1
 800c68c:	0800c6c1 	.word	0x0800c6c1
 800c690:	0800c6c1 	.word	0x0800c6c1
 800c694:	0800c6c1 	.word	0x0800c6c1
 800c698:	0800c6c1 	.word	0x0800c6c1
 800c69c:	0800c6c1 	.word	0x0800c6c1
 800c6a0:	0800c6c1 	.word	0x0800c6c1
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6c1 	.word	0x0800c6c1
 800c6ac:	0800c6c1 	.word	0x0800c6c1
 800c6b0:	0800c6c1 	.word	0x0800c6c1
 800c6b4:	0800c6c1 	.word	0x0800c6c1
 800c6b8:	0800c6c1 	.word	0x0800c6c1
 800c6bc:	0800c6c1 	.word	0x0800c6c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6c0:	bf00      	nop
  }

  return (USBD_OK);
 800c6c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bc80      	pop	{r7}
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop

0800c6d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  if (Buf[0] == 'a') {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Por ejemplo, toggle de un LED
//  }
	for(short i = 0;i < *Len;i++){
 800c6da:	2300      	movs	r3, #0
 800c6dc:	81fb      	strh	r3, [r7, #14]
 800c6de:	e00f      	b.n	800c700 <CDC_Receive_FS+0x30>
		On_Data_RX(&rx,Buf[i]);
 800c6e0:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <CDC_Receive_FS+0x54>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c6e8:	6879      	ldr	r1, [r7, #4]
 800c6ea:	440a      	add	r2, r1
 800c6ec:	7812      	ldrb	r2, [r2, #0]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	480d      	ldr	r0, [pc, #52]	@ (800c728 <CDC_Receive_FS+0x58>)
 800c6f2:	4798      	blx	r3
	for(short i = 0;i < *Len;i++){
 800c6f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	81fb      	strh	r3, [r7, #14]
 800c700:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d3e9      	bcc.n	800c6e0 <CDC_Receive_FS+0x10>
	}
//  char msg[] = "Dato recibido\r\n";
//  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));

  // Reestablecer recepción USB
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	4807      	ldr	r0, [pc, #28]	@ (800c72c <CDC_Receive_FS+0x5c>)
 800c710:	f7fe fe31 	bl	800b376 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c714:	4805      	ldr	r0, [pc, #20]	@ (800c72c <CDC_Receive_FS+0x5c>)
 800c716:	f7fe fe70 	bl	800b3fa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c71a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	200015ac 	.word	0x200015ac
 800c728:	200005a0 	.word	0x200005a0
 800c72c:	20000ae8 	.word	0x20000ae8

0800c730 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c740:	4b0d      	ldr	r3, [pc, #52]	@ (800c778 <CDC_Transmit_FS+0x48>)
 800c742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c746:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c752:	2301      	movs	r3, #1
 800c754:	e00b      	b.n	800c76e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c756:	887b      	ldrh	r3, [r7, #2]
 800c758:	461a      	mov	r2, r3
 800c75a:	6879      	ldr	r1, [r7, #4]
 800c75c:	4806      	ldr	r0, [pc, #24]	@ (800c778 <CDC_Transmit_FS+0x48>)
 800c75e:	f7fe fdf1 	bl	800b344 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c762:	4805      	ldr	r0, [pc, #20]	@ (800c778 <CDC_Transmit_FS+0x48>)
 800c764:	f7fe fe1a 	bl	800b39c <USBD_CDC_TransmitPacket>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20000ae8 	.word	0x20000ae8

0800c77c <CDC_Attach_RX_Funct>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_RX_Funct(void(*rxFunction)(_sRx *rx, uint8_t data)){
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
	On_Data_RX = rxFunction;
 800c784:	4a03      	ldr	r2, [pc, #12]	@ (800c794 <CDC_Attach_RX_Funct+0x18>)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6013      	str	r3, [r2, #0]
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	bc80      	pop	{r7}
 800c792:	4770      	bx	lr
 800c794:	200015ac 	.word	0x200015ac

0800c798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2212      	movs	r2, #18
 800c7a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7aa:	4b03      	ldr	r3, [pc, #12]	@ (800c7b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bc80      	pop	{r7}
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	20000154 	.word	0x20000154

0800c7bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	6039      	str	r1, [r7, #0]
 800c7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2204      	movs	r2, #4
 800c7cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7ce:	4b03      	ldr	r3, [pc, #12]	@ (800c7dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20000168 	.word	0x20000168

0800c7e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d105      	bne.n	800c7fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	4907      	ldr	r1, [pc, #28]	@ (800c814 <USBD_FS_ProductStrDescriptor+0x34>)
 800c7f6:	4808      	ldr	r0, [pc, #32]	@ (800c818 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7f8:	f7ff fde3 	bl	800c3c2 <USBD_GetString>
 800c7fc:	e004      	b.n	800c808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	4904      	ldr	r1, [pc, #16]	@ (800c814 <USBD_FS_ProductStrDescriptor+0x34>)
 800c802:	4805      	ldr	r0, [pc, #20]	@ (800c818 <USBD_FS_ProductStrDescriptor+0x38>)
 800c804:	f7ff fddd 	bl	800c3c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c808:	4b02      	ldr	r3, [pc, #8]	@ (800c814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	200015b0 	.word	0x200015b0
 800c818:	0800d898 	.word	0x0800d898

0800c81c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	4904      	ldr	r1, [pc, #16]	@ (800c83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c82c:	4804      	ldr	r0, [pc, #16]	@ (800c840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c82e:	f7ff fdc8 	bl	800c3c2 <USBD_GetString>
  return USBD_StrDesc;
 800c832:	4b02      	ldr	r3, [pc, #8]	@ (800c83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	200015b0 	.word	0x200015b0
 800c840:	0800d8b0 	.word	0x0800d8b0

0800c844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	6039      	str	r1, [r7, #0]
 800c84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	221a      	movs	r2, #26
 800c854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c856:	f000 f843 	bl	800c8e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c85a:	4b02      	ldr	r3, [pc, #8]	@ (800c864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	2000016c 	.word	0x2000016c

0800c868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	6039      	str	r1, [r7, #0]
 800c872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c874:	79fb      	ldrb	r3, [r7, #7]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d105      	bne.n	800c886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	4907      	ldr	r1, [pc, #28]	@ (800c89c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c87e:	4808      	ldr	r0, [pc, #32]	@ (800c8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c880:	f7ff fd9f 	bl	800c3c2 <USBD_GetString>
 800c884:	e004      	b.n	800c890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	4904      	ldr	r1, [pc, #16]	@ (800c89c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c88a:	4805      	ldr	r0, [pc, #20]	@ (800c8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c88c:	f7ff fd99 	bl	800c3c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c890:	4b02      	ldr	r3, [pc, #8]	@ (800c89c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c892:	4618      	mov	r0, r3
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200015b0 	.word	0x200015b0
 800c8a0:	0800d8c4 	.word	0x0800d8c4

0800c8a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	6039      	str	r1, [r7, #0]
 800c8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d105      	bne.n	800c8c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	4907      	ldr	r1, [pc, #28]	@ (800c8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8ba:	4808      	ldr	r0, [pc, #32]	@ (800c8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8bc:	f7ff fd81 	bl	800c3c2 <USBD_GetString>
 800c8c0:	e004      	b.n	800c8cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4904      	ldr	r1, [pc, #16]	@ (800c8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8c6:	4805      	ldr	r0, [pc, #20]	@ (800c8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8c8:	f7ff fd7b 	bl	800c3c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8cc:	4b02      	ldr	r3, [pc, #8]	@ (800c8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200015b0 	.word	0x200015b0
 800c8dc:	0800d8d0 	.word	0x0800d8d0

0800c8e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <Get_SerialNum+0x44>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <Get_SerialNum+0x48>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c92c <Get_SerialNum+0x4c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d009      	beq.n	800c91a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c906:	2208      	movs	r2, #8
 800c908:	4909      	ldr	r1, [pc, #36]	@ (800c930 <Get_SerialNum+0x50>)
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 f814 	bl	800c938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c910:	2204      	movs	r2, #4
 800c912:	4908      	ldr	r1, [pc, #32]	@ (800c934 <Get_SerialNum+0x54>)
 800c914:	68b8      	ldr	r0, [r7, #8]
 800c916:	f000 f80f 	bl	800c938 <IntToUnicode>
  }
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	1ffff7e8 	.word	0x1ffff7e8
 800c928:	1ffff7ec 	.word	0x1ffff7ec
 800c92c:	1ffff7f0 	.word	0x1ffff7f0
 800c930:	2000016e 	.word	0x2000016e
 800c934:	2000017e 	.word	0x2000017e

0800c938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c938:	b480      	push	{r7}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	4613      	mov	r3, r2
 800c944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c94a:	2300      	movs	r3, #0
 800c94c:	75fb      	strb	r3, [r7, #23]
 800c94e:	e027      	b.n	800c9a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	0f1b      	lsrs	r3, r3, #28
 800c954:	2b09      	cmp	r3, #9
 800c956:	d80b      	bhi.n	800c970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	0f1b      	lsrs	r3, r3, #28
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	4619      	mov	r1, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	440b      	add	r3, r1
 800c968:	3230      	adds	r2, #48	@ 0x30
 800c96a:	b2d2      	uxtb	r2, r2
 800c96c:	701a      	strb	r2, [r3, #0]
 800c96e:	e00a      	b.n	800c986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	0f1b      	lsrs	r3, r3, #28
 800c974:	b2da      	uxtb	r2, r3
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	4619      	mov	r1, r3
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	440b      	add	r3, r1
 800c980:	3237      	adds	r2, #55	@ 0x37
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	3301      	adds	r3, #1
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	4413      	add	r3, r2
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
 800c99c:	3301      	adds	r3, #1
 800c99e:	75fb      	strb	r3, [r7, #23]
 800c9a0:	7dfa      	ldrb	r2, [r7, #23]
 800c9a2:	79fb      	ldrb	r3, [r7, #7]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d3d3      	bcc.n	800c950 <IntToUnicode+0x18>
  }
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bc80      	pop	{r7}
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a0d      	ldr	r2, [pc, #52]	@ (800c9f8 <HAL_PCD_MspInit+0x44>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d113      	bne.n	800c9ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9fc <HAL_PCD_MspInit+0x48>)
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c9fc <HAL_PCD_MspInit+0x48>)
 800c9cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c9d0:	61d3      	str	r3, [r2, #28]
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9fc <HAL_PCD_MspInit+0x48>)
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	2014      	movs	r0, #20
 800c9e4:	f7f5 fd75 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c9e8:	2014      	movs	r0, #20
 800c9ea:	f7f5 fd8e 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	40005c00 	.word	0x40005c00
 800c9fc:	40021000 	.word	0x40021000

0800ca00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7fe fda5 	bl	800b566 <USBD_LL_SetupStage>
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ca36:	78fa      	ldrb	r2, [r7, #3]
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7fe fdd7 	bl	800b600 <USBD_LL_DataOutStage>
}
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b082      	sub	sp, #8
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	460b      	mov	r3, r1
 800ca64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ca6c:	78fa      	ldrb	r2, [r7, #3]
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4613      	mov	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	440b      	add	r3, r1
 800ca7a:	3324      	adds	r3, #36	@ 0x24
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	78fb      	ldrb	r3, [r7, #3]
 800ca80:	4619      	mov	r1, r3
 800ca82:	f7fe fe2e 	bl	800b6e2 <USBD_LL_DataInStage>
}
 800ca86:	bf00      	nop
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b082      	sub	sp, #8
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe ff3e 	bl	800b91e <USBD_LL_SOF>
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	799b      	ldrb	r3, [r3, #6]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d001      	beq.n	800cac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cabe:	f7f4 fa51 	bl	8000f64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cac8:	7bfa      	ldrb	r2, [r7, #15]
 800caca:	4611      	mov	r1, r2
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe feee 	bl	800b8ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe fea7 	bl	800b82c <USBD_LL_Reset>
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
	...

0800cae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe fee8 	bl	800b8cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7a9b      	ldrb	r3, [r3, #10]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d005      	beq.n	800cb10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb04:	4b04      	ldr	r3, [pc, #16]	@ (800cb18 <HAL_PCD_SuspendCallback+0x30>)
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	4a03      	ldr	r2, [pc, #12]	@ (800cb18 <HAL_PCD_SuspendCallback+0x30>)
 800cb0a:	f043 0306 	orr.w	r3, r3, #6
 800cb0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	e000ed00 	.word	0xe000ed00

0800cb1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fee2 	bl	800b8f4 <USBD_LL_Resume>
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cb40:	4a28      	ldr	r2, [pc, #160]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a26      	ldr	r2, [pc, #152]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cb50:	4b24      	ldr	r3, [pc, #144]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb52:	4a25      	ldr	r2, [pc, #148]	@ (800cbe8 <USBD_LL_Init+0xb0>)
 800cb54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb56:	4b23      	ldr	r3, [pc, #140]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb58:	2208      	movs	r2, #8
 800cb5a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb5c:	4b21      	ldr	r3, [pc, #132]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb5e:	2202      	movs	r2, #2
 800cb60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb62:	4b20      	ldr	r3, [pc, #128]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb68:	4b1e      	ldr	r3, [pc, #120]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb74:	481b      	ldr	r0, [pc, #108]	@ (800cbe4 <USBD_LL_Init+0xac>)
 800cb76:	f7f8 fdb9 	bl	80056ec <HAL_PCD_Init>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cb80:	f7f4 f9f0 	bl	8000f64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb8a:	2318      	movs	r3, #24
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	f7fa faca 	bl	8007128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb9a:	2358      	movs	r3, #88	@ 0x58
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2180      	movs	r1, #128	@ 0x80
 800cba0:	f7fa fac2 	bl	8007128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbaa:	23c0      	movs	r3, #192	@ 0xc0
 800cbac:	2200      	movs	r2, #0
 800cbae:	2181      	movs	r1, #129	@ 0x81
 800cbb0:	f7fa faba 	bl	8007128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	f7fa fab1 	bl	8007128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2182      	movs	r1, #130	@ 0x82
 800cbd4:	f7fa faa8 	bl	8007128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	200017b0 	.word	0x200017b0
 800cbe8:	40005c00 	.word	0x40005c00

0800cbec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f8 fe68 	bl	80058d8 <HAL_PCD_Start>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 f94e 	bl	800ceb0 <USBD_Get_USB_Status>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	461a      	mov	r2, r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	70fb      	strb	r3, [r7, #3]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70bb      	strb	r3, [r7, #2]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc4a:	78bb      	ldrb	r3, [r7, #2]
 800cc4c:	883a      	ldrh	r2, [r7, #0]
 800cc4e:	78f9      	ldrb	r1, [r7, #3]
 800cc50:	f7f8 ffbc 	bl	8005bcc <HAL_PCD_EP_Open>
 800cc54:	4603      	mov	r3, r0
 800cc56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 f928 	bl	800ceb0 <USBD_Get_USB_Status>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	460b      	mov	r3, r1
 800cc78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f8 fffa 	bl	8005c86 <HAL_PCD_EP_Close>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f909 	bl	800ceb0 <USBD_Get_USB_Status>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccc6:	78fa      	ldrb	r2, [r7, #3]
 800ccc8:	4611      	mov	r1, r2
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7f9 f8a2 	bl	8005e14 <HAL_PCD_EP_SetStall>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f8ea 	bl	800ceb0 <USBD_Get_USB_Status>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd04:	78fa      	ldrb	r2, [r7, #3]
 800cd06:	4611      	mov	r1, r2
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7f9 f8e3 	bl	8005ed4 <HAL_PCD_EP_ClrStall>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 f8cb 	bl	800ceb0 <USBD_Get_USB_Status>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	460b      	mov	r3, r1
 800cd32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	da0b      	bge.n	800cd5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3312      	adds	r3, #18
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	e00b      	b.n	800cd74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd5c:	78fb      	ldrb	r3, [r7, #3]
 800cd5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	440b      	add	r3, r1
 800cd6e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cd72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bc80      	pop	{r7}
 800cd7c:	4770      	bx	lr

0800cd7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd98:	78fa      	ldrb	r2, [r7, #3]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f8 fef1 	bl	8005b84 <HAL_PCD_SetAddress>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f881 	bl	800ceb0 <USBD_Get_USB_Status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	460b      	mov	r3, r1
 800cdca:	72fb      	strb	r3, [r7, #11]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cdde:	893b      	ldrh	r3, [r7, #8]
 800cde0:	7af9      	ldrb	r1, [r7, #11]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	f7f8 ffdf 	bl	8005da6 <HAL_PCD_EP_Transmit>
 800cde8:	4603      	mov	r3, r0
 800cdea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f85e 	bl	800ceb0 <USBD_Get_USB_Status>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	460b      	mov	r3, r1
 800ce10:	72fb      	strb	r3, [r7, #11]
 800ce12:	4613      	mov	r3, r2
 800ce14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce24:	893b      	ldrh	r3, [r7, #8]
 800ce26:	7af9      	ldrb	r1, [r7, #11]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	f7f8 ff74 	bl	8005d16 <HAL_PCD_EP_Receive>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f83b 	bl	800ceb0 <USBD_Get_USB_Status>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce5a:	78fa      	ldrb	r2, [r7, #3]
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f8 ff8a 	bl	8005d78 <HAL_PCD_EP_GetRxCount>
 800ce64:	4603      	mov	r3, r0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
	...

0800ce70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce78:	4b02      	ldr	r3, [pc, #8]	@ (800ce84 <USBD_static_malloc+0x14>)
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bc80      	pop	{r7}
 800ce82:	4770      	bx	lr
 800ce84:	20001a88 	.word	0x20001a88

0800ce88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]

}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bc80      	pop	{r7}
 800ce98:	4770      	bx	lr

0800ce9a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b083      	sub	sp, #12
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	460b      	mov	r3, r1
 800cea4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bc80      	pop	{r7}
 800ceae:	4770      	bx	lr

0800ceb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d817      	bhi.n	800cef4 <USBD_Get_USB_Status+0x44>
 800cec4:	a201      	add	r2, pc, #4	@ (adr r2, 800cecc <USBD_Get_USB_Status+0x1c>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800cedd 	.word	0x0800cedd
 800ced0:	0800cee3 	.word	0x0800cee3
 800ced4:	0800cee9 	.word	0x0800cee9
 800ced8:	0800ceef 	.word	0x0800ceef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
    break;
 800cee0:	e00b      	b.n	800cefa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cee2:	2302      	movs	r3, #2
 800cee4:	73fb      	strb	r3, [r7, #15]
    break;
 800cee6:	e008      	b.n	800cefa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
    break;
 800ceec:	e005      	b.n	800cefa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceee:	2302      	movs	r3, #2
 800cef0:	73fb      	strb	r3, [r7, #15]
    break;
 800cef2:	e002      	b.n	800cefa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cef4:	2302      	movs	r3, #2
 800cef6:	73fb      	strb	r3, [r7, #15]
    break;
 800cef8:	bf00      	nop
  }
  return usb_status;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3714      	adds	r7, #20
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bc80      	pop	{r7}
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop

0800cf08 <siprintf>:
 800cf08:	b40e      	push	{r1, r2, r3}
 800cf0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	2400      	movs	r4, #0
 800cf12:	b09d      	sub	sp, #116	@ 0x74
 800cf14:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cf16:	9002      	str	r0, [sp, #8]
 800cf18:	9006      	str	r0, [sp, #24]
 800cf1a:	9107      	str	r1, [sp, #28]
 800cf1c:	9104      	str	r1, [sp, #16]
 800cf1e:	4809      	ldr	r0, [pc, #36]	@ (800cf44 <siprintf+0x3c>)
 800cf20:	4909      	ldr	r1, [pc, #36]	@ (800cf48 <siprintf+0x40>)
 800cf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf26:	9105      	str	r1, [sp, #20]
 800cf28:	6800      	ldr	r0, [r0, #0]
 800cf2a:	a902      	add	r1, sp, #8
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cf30:	f000 f9a0 	bl	800d274 <_svfiprintf_r>
 800cf34:	9b02      	ldr	r3, [sp, #8]
 800cf36:	701c      	strb	r4, [r3, #0]
 800cf38:	b01d      	add	sp, #116	@ 0x74
 800cf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3e:	b003      	add	sp, #12
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	20000188 	.word	0x20000188
 800cf48:	ffff0208 	.word	0xffff0208

0800cf4c <memset>:
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	4402      	add	r2, r0
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d100      	bne.n	800cf56 <memset+0xa>
 800cf54:	4770      	bx	lr
 800cf56:	f803 1b01 	strb.w	r1, [r3], #1
 800cf5a:	e7f9      	b.n	800cf50 <memset+0x4>

0800cf5c <__errno>:
 800cf5c:	4b01      	ldr	r3, [pc, #4]	@ (800cf64 <__errno+0x8>)
 800cf5e:	6818      	ldr	r0, [r3, #0]
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	20000188 	.word	0x20000188

0800cf68 <__libc_init_array>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	4d0c      	ldr	r5, [pc, #48]	@ (800cfa0 <__libc_init_array+0x38>)
 800cf6e:	4c0d      	ldr	r4, [pc, #52]	@ (800cfa4 <__libc_init_array+0x3c>)
 800cf70:	1b64      	subs	r4, r4, r5
 800cf72:	10a4      	asrs	r4, r4, #2
 800cf74:	42a6      	cmp	r6, r4
 800cf76:	d109      	bne.n	800cf8c <__libc_init_array+0x24>
 800cf78:	f000 fc76 	bl	800d868 <_init>
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	4d0a      	ldr	r5, [pc, #40]	@ (800cfa8 <__libc_init_array+0x40>)
 800cf80:	4c0a      	ldr	r4, [pc, #40]	@ (800cfac <__libc_init_array+0x44>)
 800cf82:	1b64      	subs	r4, r4, r5
 800cf84:	10a4      	asrs	r4, r4, #2
 800cf86:	42a6      	cmp	r6, r4
 800cf88:	d105      	bne.n	800cf96 <__libc_init_array+0x2e>
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf90:	4798      	blx	r3
 800cf92:	3601      	adds	r6, #1
 800cf94:	e7ee      	b.n	800cf74 <__libc_init_array+0xc>
 800cf96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9a:	4798      	blx	r3
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	e7f2      	b.n	800cf86 <__libc_init_array+0x1e>
 800cfa0:	0800e0b8 	.word	0x0800e0b8
 800cfa4:	0800e0b8 	.word	0x0800e0b8
 800cfa8:	0800e0b8 	.word	0x0800e0b8
 800cfac:	0800e0bc 	.word	0x0800e0bc

0800cfb0 <__retarget_lock_acquire_recursive>:
 800cfb0:	4770      	bx	lr

0800cfb2 <__retarget_lock_release_recursive>:
 800cfb2:	4770      	bx	lr

0800cfb4 <memcpy>:
 800cfb4:	440a      	add	r2, r1
 800cfb6:	4291      	cmp	r1, r2
 800cfb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfbc:	d100      	bne.n	800cfc0 <memcpy+0xc>
 800cfbe:	4770      	bx	lr
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfc6:	4291      	cmp	r1, r2
 800cfc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfcc:	d1f9      	bne.n	800cfc2 <memcpy+0xe>
 800cfce:	bd10      	pop	{r4, pc}

0800cfd0 <_free_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	d040      	beq.n	800d05a <_free_r+0x8a>
 800cfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfdc:	1f0c      	subs	r4, r1, #4
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	18e4      	addlt	r4, r4, r3
 800cfe4:	f000 f8de 	bl	800d1a4 <__malloc_lock>
 800cfe8:	4a1c      	ldr	r2, [pc, #112]	@ (800d05c <_free_r+0x8c>)
 800cfea:	6813      	ldr	r3, [r2, #0]
 800cfec:	b933      	cbnz	r3, 800cffc <_free_r+0x2c>
 800cfee:	6063      	str	r3, [r4, #4]
 800cff0:	6014      	str	r4, [r2, #0]
 800cff2:	4628      	mov	r0, r5
 800cff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff8:	f000 b8da 	b.w	800d1b0 <__malloc_unlock>
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	d908      	bls.n	800d012 <_free_r+0x42>
 800d000:	6820      	ldr	r0, [r4, #0]
 800d002:	1821      	adds	r1, r4, r0
 800d004:	428b      	cmp	r3, r1
 800d006:	bf01      	itttt	eq
 800d008:	6819      	ldreq	r1, [r3, #0]
 800d00a:	685b      	ldreq	r3, [r3, #4]
 800d00c:	1809      	addeq	r1, r1, r0
 800d00e:	6021      	streq	r1, [r4, #0]
 800d010:	e7ed      	b.n	800cfee <_free_r+0x1e>
 800d012:	461a      	mov	r2, r3
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	b10b      	cbz	r3, 800d01c <_free_r+0x4c>
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d9fa      	bls.n	800d012 <_free_r+0x42>
 800d01c:	6811      	ldr	r1, [r2, #0]
 800d01e:	1850      	adds	r0, r2, r1
 800d020:	42a0      	cmp	r0, r4
 800d022:	d10b      	bne.n	800d03c <_free_r+0x6c>
 800d024:	6820      	ldr	r0, [r4, #0]
 800d026:	4401      	add	r1, r0
 800d028:	1850      	adds	r0, r2, r1
 800d02a:	4283      	cmp	r3, r0
 800d02c:	6011      	str	r1, [r2, #0]
 800d02e:	d1e0      	bne.n	800cff2 <_free_r+0x22>
 800d030:	6818      	ldr	r0, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	4408      	add	r0, r1
 800d036:	6010      	str	r0, [r2, #0]
 800d038:	6053      	str	r3, [r2, #4]
 800d03a:	e7da      	b.n	800cff2 <_free_r+0x22>
 800d03c:	d902      	bls.n	800d044 <_free_r+0x74>
 800d03e:	230c      	movs	r3, #12
 800d040:	602b      	str	r3, [r5, #0]
 800d042:	e7d6      	b.n	800cff2 <_free_r+0x22>
 800d044:	6820      	ldr	r0, [r4, #0]
 800d046:	1821      	adds	r1, r4, r0
 800d048:	428b      	cmp	r3, r1
 800d04a:	bf01      	itttt	eq
 800d04c:	6819      	ldreq	r1, [r3, #0]
 800d04e:	685b      	ldreq	r3, [r3, #4]
 800d050:	1809      	addeq	r1, r1, r0
 800d052:	6021      	streq	r1, [r4, #0]
 800d054:	6063      	str	r3, [r4, #4]
 800d056:	6054      	str	r4, [r2, #4]
 800d058:	e7cb      	b.n	800cff2 <_free_r+0x22>
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	20001dec 	.word	0x20001dec

0800d060 <sbrk_aligned>:
 800d060:	b570      	push	{r4, r5, r6, lr}
 800d062:	4e0f      	ldr	r6, [pc, #60]	@ (800d0a0 <sbrk_aligned+0x40>)
 800d064:	460c      	mov	r4, r1
 800d066:	6831      	ldr	r1, [r6, #0]
 800d068:	4605      	mov	r5, r0
 800d06a:	b911      	cbnz	r1, 800d072 <sbrk_aligned+0x12>
 800d06c:	f000 fba8 	bl	800d7c0 <_sbrk_r>
 800d070:	6030      	str	r0, [r6, #0]
 800d072:	4621      	mov	r1, r4
 800d074:	4628      	mov	r0, r5
 800d076:	f000 fba3 	bl	800d7c0 <_sbrk_r>
 800d07a:	1c43      	adds	r3, r0, #1
 800d07c:	d103      	bne.n	800d086 <sbrk_aligned+0x26>
 800d07e:	f04f 34ff 	mov.w	r4, #4294967295
 800d082:	4620      	mov	r0, r4
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	1cc4      	adds	r4, r0, #3
 800d088:	f024 0403 	bic.w	r4, r4, #3
 800d08c:	42a0      	cmp	r0, r4
 800d08e:	d0f8      	beq.n	800d082 <sbrk_aligned+0x22>
 800d090:	1a21      	subs	r1, r4, r0
 800d092:	4628      	mov	r0, r5
 800d094:	f000 fb94 	bl	800d7c0 <_sbrk_r>
 800d098:	3001      	adds	r0, #1
 800d09a:	d1f2      	bne.n	800d082 <sbrk_aligned+0x22>
 800d09c:	e7ef      	b.n	800d07e <sbrk_aligned+0x1e>
 800d09e:	bf00      	nop
 800d0a0:	20001de8 	.word	0x20001de8

0800d0a4 <_malloc_r>:
 800d0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	1ccd      	adds	r5, r1, #3
 800d0aa:	f025 0503 	bic.w	r5, r5, #3
 800d0ae:	3508      	adds	r5, #8
 800d0b0:	2d0c      	cmp	r5, #12
 800d0b2:	bf38      	it	cc
 800d0b4:	250c      	movcc	r5, #12
 800d0b6:	2d00      	cmp	r5, #0
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	db01      	blt.n	800d0c0 <_malloc_r+0x1c>
 800d0bc:	42a9      	cmp	r1, r5
 800d0be:	d904      	bls.n	800d0ca <_malloc_r+0x26>
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	6033      	str	r3, [r6, #0]
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1a0 <_malloc_r+0xfc>
 800d0ce:	f000 f869 	bl	800d1a4 <__malloc_lock>
 800d0d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	bb44      	cbnz	r4, 800d12c <_malloc_r+0x88>
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff ffbf 	bl	800d060 <sbrk_aligned>
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	d158      	bne.n	800d19a <_malloc_r+0xf6>
 800d0e8:	f8d8 4000 	ldr.w	r4, [r8]
 800d0ec:	4627      	mov	r7, r4
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d143      	bne.n	800d17a <_malloc_r+0xd6>
 800d0f2:	2c00      	cmp	r4, #0
 800d0f4:	d04b      	beq.n	800d18e <_malloc_r+0xea>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	eb04 0903 	add.w	r9, r4, r3
 800d100:	f000 fb5e 	bl	800d7c0 <_sbrk_r>
 800d104:	4581      	cmp	r9, r0
 800d106:	d142      	bne.n	800d18e <_malloc_r+0xea>
 800d108:	6821      	ldr	r1, [r4, #0]
 800d10a:	4630      	mov	r0, r6
 800d10c:	1a6d      	subs	r5, r5, r1
 800d10e:	4629      	mov	r1, r5
 800d110:	f7ff ffa6 	bl	800d060 <sbrk_aligned>
 800d114:	3001      	adds	r0, #1
 800d116:	d03a      	beq.n	800d18e <_malloc_r+0xea>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	442b      	add	r3, r5
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	f8d8 3000 	ldr.w	r3, [r8]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	bb62      	cbnz	r2, 800d180 <_malloc_r+0xdc>
 800d126:	f8c8 7000 	str.w	r7, [r8]
 800d12a:	e00f      	b.n	800d14c <_malloc_r+0xa8>
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	1b52      	subs	r2, r2, r5
 800d130:	d420      	bmi.n	800d174 <_malloc_r+0xd0>
 800d132:	2a0b      	cmp	r2, #11
 800d134:	d917      	bls.n	800d166 <_malloc_r+0xc2>
 800d136:	1961      	adds	r1, r4, r5
 800d138:	42a3      	cmp	r3, r4
 800d13a:	6025      	str	r5, [r4, #0]
 800d13c:	bf18      	it	ne
 800d13e:	6059      	strne	r1, [r3, #4]
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	bf08      	it	eq
 800d144:	f8c8 1000 	streq.w	r1, [r8]
 800d148:	5162      	str	r2, [r4, r5]
 800d14a:	604b      	str	r3, [r1, #4]
 800d14c:	4630      	mov	r0, r6
 800d14e:	f000 f82f 	bl	800d1b0 <__malloc_unlock>
 800d152:	f104 000b 	add.w	r0, r4, #11
 800d156:	1d23      	adds	r3, r4, #4
 800d158:	f020 0007 	bic.w	r0, r0, #7
 800d15c:	1ac2      	subs	r2, r0, r3
 800d15e:	bf1c      	itt	ne
 800d160:	1a1b      	subne	r3, r3, r0
 800d162:	50a3      	strne	r3, [r4, r2]
 800d164:	e7af      	b.n	800d0c6 <_malloc_r+0x22>
 800d166:	6862      	ldr	r2, [r4, #4]
 800d168:	42a3      	cmp	r3, r4
 800d16a:	bf0c      	ite	eq
 800d16c:	f8c8 2000 	streq.w	r2, [r8]
 800d170:	605a      	strne	r2, [r3, #4]
 800d172:	e7eb      	b.n	800d14c <_malloc_r+0xa8>
 800d174:	4623      	mov	r3, r4
 800d176:	6864      	ldr	r4, [r4, #4]
 800d178:	e7ae      	b.n	800d0d8 <_malloc_r+0x34>
 800d17a:	463c      	mov	r4, r7
 800d17c:	687f      	ldr	r7, [r7, #4]
 800d17e:	e7b6      	b.n	800d0ee <_malloc_r+0x4a>
 800d180:	461a      	mov	r2, r3
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	42a3      	cmp	r3, r4
 800d186:	d1fb      	bne.n	800d180 <_malloc_r+0xdc>
 800d188:	2300      	movs	r3, #0
 800d18a:	6053      	str	r3, [r2, #4]
 800d18c:	e7de      	b.n	800d14c <_malloc_r+0xa8>
 800d18e:	230c      	movs	r3, #12
 800d190:	4630      	mov	r0, r6
 800d192:	6033      	str	r3, [r6, #0]
 800d194:	f000 f80c 	bl	800d1b0 <__malloc_unlock>
 800d198:	e794      	b.n	800d0c4 <_malloc_r+0x20>
 800d19a:	6005      	str	r5, [r0, #0]
 800d19c:	e7d6      	b.n	800d14c <_malloc_r+0xa8>
 800d19e:	bf00      	nop
 800d1a0:	20001dec 	.word	0x20001dec

0800d1a4 <__malloc_lock>:
 800d1a4:	4801      	ldr	r0, [pc, #4]	@ (800d1ac <__malloc_lock+0x8>)
 800d1a6:	f7ff bf03 	b.w	800cfb0 <__retarget_lock_acquire_recursive>
 800d1aa:	bf00      	nop
 800d1ac:	20001de4 	.word	0x20001de4

0800d1b0 <__malloc_unlock>:
 800d1b0:	4801      	ldr	r0, [pc, #4]	@ (800d1b8 <__malloc_unlock+0x8>)
 800d1b2:	f7ff befe 	b.w	800cfb2 <__retarget_lock_release_recursive>
 800d1b6:	bf00      	nop
 800d1b8:	20001de4 	.word	0x20001de4

0800d1bc <__ssputs_r>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	461f      	mov	r7, r3
 800d1c2:	688e      	ldr	r6, [r1, #8]
 800d1c4:	4682      	mov	sl, r0
 800d1c6:	42be      	cmp	r6, r7
 800d1c8:	460c      	mov	r4, r1
 800d1ca:	4690      	mov	r8, r2
 800d1cc:	680b      	ldr	r3, [r1, #0]
 800d1ce:	d82d      	bhi.n	800d22c <__ssputs_r+0x70>
 800d1d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1d8:	d026      	beq.n	800d228 <__ssputs_r+0x6c>
 800d1da:	6965      	ldr	r5, [r4, #20]
 800d1dc:	6909      	ldr	r1, [r1, #16]
 800d1de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1e2:	eba3 0901 	sub.w	r9, r3, r1
 800d1e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1ea:	1c7b      	adds	r3, r7, #1
 800d1ec:	444b      	add	r3, r9
 800d1ee:	106d      	asrs	r5, r5, #1
 800d1f0:	429d      	cmp	r5, r3
 800d1f2:	bf38      	it	cc
 800d1f4:	461d      	movcc	r5, r3
 800d1f6:	0553      	lsls	r3, r2, #21
 800d1f8:	d527      	bpl.n	800d24a <__ssputs_r+0x8e>
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	f7ff ff52 	bl	800d0a4 <_malloc_r>
 800d200:	4606      	mov	r6, r0
 800d202:	b360      	cbz	r0, 800d25e <__ssputs_r+0xa2>
 800d204:	464a      	mov	r2, r9
 800d206:	6921      	ldr	r1, [r4, #16]
 800d208:	f7ff fed4 	bl	800cfb4 <memcpy>
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	6126      	str	r6, [r4, #16]
 800d21a:	444e      	add	r6, r9
 800d21c:	6026      	str	r6, [r4, #0]
 800d21e:	463e      	mov	r6, r7
 800d220:	6165      	str	r5, [r4, #20]
 800d222:	eba5 0509 	sub.w	r5, r5, r9
 800d226:	60a5      	str	r5, [r4, #8]
 800d228:	42be      	cmp	r6, r7
 800d22a:	d900      	bls.n	800d22e <__ssputs_r+0x72>
 800d22c:	463e      	mov	r6, r7
 800d22e:	4632      	mov	r2, r6
 800d230:	4641      	mov	r1, r8
 800d232:	6820      	ldr	r0, [r4, #0]
 800d234:	f000 faaa 	bl	800d78c <memmove>
 800d238:	2000      	movs	r0, #0
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	1b9b      	subs	r3, r3, r6
 800d23e:	60a3      	str	r3, [r4, #8]
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	4433      	add	r3, r6
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24a:	462a      	mov	r2, r5
 800d24c:	f000 fad6 	bl	800d7fc <_realloc_r>
 800d250:	4606      	mov	r6, r0
 800d252:	2800      	cmp	r0, #0
 800d254:	d1e0      	bne.n	800d218 <__ssputs_r+0x5c>
 800d256:	4650      	mov	r0, sl
 800d258:	6921      	ldr	r1, [r4, #16]
 800d25a:	f7ff feb9 	bl	800cfd0 <_free_r>
 800d25e:	230c      	movs	r3, #12
 800d260:	f8ca 3000 	str.w	r3, [sl]
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d26e:	81a3      	strh	r3, [r4, #12]
 800d270:	e7e9      	b.n	800d246 <__ssputs_r+0x8a>
	...

0800d274 <_svfiprintf_r>:
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	4698      	mov	r8, r3
 800d27a:	898b      	ldrh	r3, [r1, #12]
 800d27c:	4607      	mov	r7, r0
 800d27e:	061b      	lsls	r3, r3, #24
 800d280:	460d      	mov	r5, r1
 800d282:	4614      	mov	r4, r2
 800d284:	b09d      	sub	sp, #116	@ 0x74
 800d286:	d510      	bpl.n	800d2aa <_svfiprintf_r+0x36>
 800d288:	690b      	ldr	r3, [r1, #16]
 800d28a:	b973      	cbnz	r3, 800d2aa <_svfiprintf_r+0x36>
 800d28c:	2140      	movs	r1, #64	@ 0x40
 800d28e:	f7ff ff09 	bl	800d0a4 <_malloc_r>
 800d292:	6028      	str	r0, [r5, #0]
 800d294:	6128      	str	r0, [r5, #16]
 800d296:	b930      	cbnz	r0, 800d2a6 <_svfiprintf_r+0x32>
 800d298:	230c      	movs	r3, #12
 800d29a:	603b      	str	r3, [r7, #0]
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a0:	b01d      	add	sp, #116	@ 0x74
 800d2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a6:	2340      	movs	r3, #64	@ 0x40
 800d2a8:	616b      	str	r3, [r5, #20]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ae:	2320      	movs	r3, #32
 800d2b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2b4:	2330      	movs	r3, #48	@ 0x30
 800d2b6:	f04f 0901 	mov.w	r9, #1
 800d2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d458 <_svfiprintf_r+0x1e4>
 800d2c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2c6:	4623      	mov	r3, r4
 800d2c8:	469a      	mov	sl, r3
 800d2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ce:	b10a      	cbz	r2, 800d2d4 <_svfiprintf_r+0x60>
 800d2d0:	2a25      	cmp	r2, #37	@ 0x25
 800d2d2:	d1f9      	bne.n	800d2c8 <_svfiprintf_r+0x54>
 800d2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d8:	d00b      	beq.n	800d2f2 <_svfiprintf_r+0x7e>
 800d2da:	465b      	mov	r3, fp
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7ff ff6b 	bl	800d1bc <__ssputs_r>
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f000 80a7 	beq.w	800d43a <_svfiprintf_r+0x1c6>
 800d2ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2ee:	445a      	add	r2, fp
 800d2f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 809f 	beq.w	800d43a <_svfiprintf_r+0x1c6>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d306:	f10a 0a01 	add.w	sl, sl, #1
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	9307      	str	r3, [sp, #28]
 800d30e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d312:	931a      	str	r3, [sp, #104]	@ 0x68
 800d314:	4654      	mov	r4, sl
 800d316:	2205      	movs	r2, #5
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	484e      	ldr	r0, [pc, #312]	@ (800d458 <_svfiprintf_r+0x1e4>)
 800d31e:	f000 fa5f 	bl	800d7e0 <memchr>
 800d322:	9a04      	ldr	r2, [sp, #16]
 800d324:	b9d8      	cbnz	r0, 800d35e <_svfiprintf_r+0xea>
 800d326:	06d0      	lsls	r0, r2, #27
 800d328:	bf44      	itt	mi
 800d32a:	2320      	movmi	r3, #32
 800d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d330:	0711      	lsls	r1, r2, #28
 800d332:	bf44      	itt	mi
 800d334:	232b      	movmi	r3, #43	@ 0x2b
 800d336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d33a:	f89a 3000 	ldrb.w	r3, [sl]
 800d33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d340:	d015      	beq.n	800d36e <_svfiprintf_r+0xfa>
 800d342:	4654      	mov	r4, sl
 800d344:	2000      	movs	r0, #0
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	9a07      	ldr	r2, [sp, #28]
 800d34c:	4621      	mov	r1, r4
 800d34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d352:	3b30      	subs	r3, #48	@ 0x30
 800d354:	2b09      	cmp	r3, #9
 800d356:	d94b      	bls.n	800d3f0 <_svfiprintf_r+0x17c>
 800d358:	b1b0      	cbz	r0, 800d388 <_svfiprintf_r+0x114>
 800d35a:	9207      	str	r2, [sp, #28]
 800d35c:	e014      	b.n	800d388 <_svfiprintf_r+0x114>
 800d35e:	eba0 0308 	sub.w	r3, r0, r8
 800d362:	fa09 f303 	lsl.w	r3, r9, r3
 800d366:	4313      	orrs	r3, r2
 800d368:	46a2      	mov	sl, r4
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	e7d2      	b.n	800d314 <_svfiprintf_r+0xa0>
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	1d19      	adds	r1, r3, #4
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	9103      	str	r1, [sp, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bfbb      	ittet	lt
 800d37a:	425b      	neglt	r3, r3
 800d37c:	f042 0202 	orrlt.w	r2, r2, #2
 800d380:	9307      	strge	r3, [sp, #28]
 800d382:	9307      	strlt	r3, [sp, #28]
 800d384:	bfb8      	it	lt
 800d386:	9204      	strlt	r2, [sp, #16]
 800d388:	7823      	ldrb	r3, [r4, #0]
 800d38a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d38c:	d10a      	bne.n	800d3a4 <_svfiprintf_r+0x130>
 800d38e:	7863      	ldrb	r3, [r4, #1]
 800d390:	2b2a      	cmp	r3, #42	@ 0x2a
 800d392:	d132      	bne.n	800d3fa <_svfiprintf_r+0x186>
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	3402      	adds	r4, #2
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	9203      	str	r2, [sp, #12]
 800d39e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3a2:	9305      	str	r3, [sp, #20]
 800d3a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d45c <_svfiprintf_r+0x1e8>
 800d3a8:	2203      	movs	r2, #3
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	7821      	ldrb	r1, [r4, #0]
 800d3ae:	f000 fa17 	bl	800d7e0 <memchr>
 800d3b2:	b138      	cbz	r0, 800d3c4 <_svfiprintf_r+0x150>
 800d3b4:	2240      	movs	r2, #64	@ 0x40
 800d3b6:	9b04      	ldr	r3, [sp, #16]
 800d3b8:	eba0 000a 	sub.w	r0, r0, sl
 800d3bc:	4082      	lsls	r2, r0
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	3401      	adds	r4, #1
 800d3c2:	9304      	str	r3, [sp, #16]
 800d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c8:	2206      	movs	r2, #6
 800d3ca:	4825      	ldr	r0, [pc, #148]	@ (800d460 <_svfiprintf_r+0x1ec>)
 800d3cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3d0:	f000 fa06 	bl	800d7e0 <memchr>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d036      	beq.n	800d446 <_svfiprintf_r+0x1d2>
 800d3d8:	4b22      	ldr	r3, [pc, #136]	@ (800d464 <_svfiprintf_r+0x1f0>)
 800d3da:	bb1b      	cbnz	r3, 800d424 <_svfiprintf_r+0x1b0>
 800d3dc:	9b03      	ldr	r3, [sp, #12]
 800d3de:	3307      	adds	r3, #7
 800d3e0:	f023 0307 	bic.w	r3, r3, #7
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	9303      	str	r3, [sp, #12]
 800d3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ea:	4433      	add	r3, r6
 800d3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ee:	e76a      	b.n	800d2c6 <_svfiprintf_r+0x52>
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3f8:	e7a8      	b.n	800d34c <_svfiprintf_r+0xd8>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f04f 0c0a 	mov.w	ip, #10
 800d400:	4619      	mov	r1, r3
 800d402:	3401      	adds	r4, #1
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	4620      	mov	r0, r4
 800d408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d40c:	3a30      	subs	r2, #48	@ 0x30
 800d40e:	2a09      	cmp	r2, #9
 800d410:	d903      	bls.n	800d41a <_svfiprintf_r+0x1a6>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d0c6      	beq.n	800d3a4 <_svfiprintf_r+0x130>
 800d416:	9105      	str	r1, [sp, #20]
 800d418:	e7c4      	b.n	800d3a4 <_svfiprintf_r+0x130>
 800d41a:	4604      	mov	r4, r0
 800d41c:	2301      	movs	r3, #1
 800d41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d422:	e7f0      	b.n	800d406 <_svfiprintf_r+0x192>
 800d424:	ab03      	add	r3, sp, #12
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	462a      	mov	r2, r5
 800d42a:	4638      	mov	r0, r7
 800d42c:	4b0e      	ldr	r3, [pc, #56]	@ (800d468 <_svfiprintf_r+0x1f4>)
 800d42e:	a904      	add	r1, sp, #16
 800d430:	f3af 8000 	nop.w
 800d434:	1c42      	adds	r2, r0, #1
 800d436:	4606      	mov	r6, r0
 800d438:	d1d6      	bne.n	800d3e8 <_svfiprintf_r+0x174>
 800d43a:	89ab      	ldrh	r3, [r5, #12]
 800d43c:	065b      	lsls	r3, r3, #25
 800d43e:	f53f af2d 	bmi.w	800d29c <_svfiprintf_r+0x28>
 800d442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d444:	e72c      	b.n	800d2a0 <_svfiprintf_r+0x2c>
 800d446:	ab03      	add	r3, sp, #12
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	462a      	mov	r2, r5
 800d44c:	4638      	mov	r0, r7
 800d44e:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <_svfiprintf_r+0x1f4>)
 800d450:	a904      	add	r1, sp, #16
 800d452:	f000 f87d 	bl	800d550 <_printf_i>
 800d456:	e7ed      	b.n	800d434 <_svfiprintf_r+0x1c0>
 800d458:	0800e082 	.word	0x0800e082
 800d45c:	0800e088 	.word	0x0800e088
 800d460:	0800e08c 	.word	0x0800e08c
 800d464:	00000000 	.word	0x00000000
 800d468:	0800d1bd 	.word	0x0800d1bd

0800d46c <_printf_common>:
 800d46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	4616      	mov	r6, r2
 800d472:	4698      	mov	r8, r3
 800d474:	688a      	ldr	r2, [r1, #8]
 800d476:	690b      	ldr	r3, [r1, #16]
 800d478:	4607      	mov	r7, r0
 800d47a:	4293      	cmp	r3, r2
 800d47c:	bfb8      	it	lt
 800d47e:	4613      	movlt	r3, r2
 800d480:	6033      	str	r3, [r6, #0]
 800d482:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d486:	460c      	mov	r4, r1
 800d488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d48c:	b10a      	cbz	r2, 800d492 <_printf_common+0x26>
 800d48e:	3301      	adds	r3, #1
 800d490:	6033      	str	r3, [r6, #0]
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	0699      	lsls	r1, r3, #26
 800d496:	bf42      	ittt	mi
 800d498:	6833      	ldrmi	r3, [r6, #0]
 800d49a:	3302      	addmi	r3, #2
 800d49c:	6033      	strmi	r3, [r6, #0]
 800d49e:	6825      	ldr	r5, [r4, #0]
 800d4a0:	f015 0506 	ands.w	r5, r5, #6
 800d4a4:	d106      	bne.n	800d4b4 <_printf_common+0x48>
 800d4a6:	f104 0a19 	add.w	sl, r4, #25
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	6832      	ldr	r2, [r6, #0]
 800d4ae:	1a9b      	subs	r3, r3, r2
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	dc2b      	bgt.n	800d50c <_printf_common+0xa0>
 800d4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	3b00      	subs	r3, #0
 800d4bc:	bf18      	it	ne
 800d4be:	2301      	movne	r3, #1
 800d4c0:	0692      	lsls	r2, r2, #26
 800d4c2:	d430      	bmi.n	800d526 <_printf_common+0xba>
 800d4c4:	4641      	mov	r1, r8
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4cc:	47c8      	blx	r9
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	d023      	beq.n	800d51a <_printf_common+0xae>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	6922      	ldr	r2, [r4, #16]
 800d4d6:	f003 0306 	and.w	r3, r3, #6
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	bf14      	ite	ne
 800d4de:	2500      	movne	r5, #0
 800d4e0:	6833      	ldreq	r3, [r6, #0]
 800d4e2:	f04f 0600 	mov.w	r6, #0
 800d4e6:	bf08      	it	eq
 800d4e8:	68e5      	ldreq	r5, [r4, #12]
 800d4ea:	f104 041a 	add.w	r4, r4, #26
 800d4ee:	bf08      	it	eq
 800d4f0:	1aed      	subeq	r5, r5, r3
 800d4f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d4f6:	bf08      	it	eq
 800d4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	bfc4      	itt	gt
 800d500:	1a9b      	subgt	r3, r3, r2
 800d502:	18ed      	addgt	r5, r5, r3
 800d504:	42b5      	cmp	r5, r6
 800d506:	d11a      	bne.n	800d53e <_printf_common+0xd2>
 800d508:	2000      	movs	r0, #0
 800d50a:	e008      	b.n	800d51e <_printf_common+0xb2>
 800d50c:	2301      	movs	r3, #1
 800d50e:	4652      	mov	r2, sl
 800d510:	4641      	mov	r1, r8
 800d512:	4638      	mov	r0, r7
 800d514:	47c8      	blx	r9
 800d516:	3001      	adds	r0, #1
 800d518:	d103      	bne.n	800d522 <_printf_common+0xb6>
 800d51a:	f04f 30ff 	mov.w	r0, #4294967295
 800d51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d522:	3501      	adds	r5, #1
 800d524:	e7c1      	b.n	800d4aa <_printf_common+0x3e>
 800d526:	2030      	movs	r0, #48	@ 0x30
 800d528:	18e1      	adds	r1, r4, r3
 800d52a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d534:	4422      	add	r2, r4
 800d536:	3302      	adds	r3, #2
 800d538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d53c:	e7c2      	b.n	800d4c4 <_printf_common+0x58>
 800d53e:	2301      	movs	r3, #1
 800d540:	4622      	mov	r2, r4
 800d542:	4641      	mov	r1, r8
 800d544:	4638      	mov	r0, r7
 800d546:	47c8      	blx	r9
 800d548:	3001      	adds	r0, #1
 800d54a:	d0e6      	beq.n	800d51a <_printf_common+0xae>
 800d54c:	3601      	adds	r6, #1
 800d54e:	e7d9      	b.n	800d504 <_printf_common+0x98>

0800d550 <_printf_i>:
 800d550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d554:	7e0f      	ldrb	r7, [r1, #24]
 800d556:	4691      	mov	r9, r2
 800d558:	2f78      	cmp	r7, #120	@ 0x78
 800d55a:	4680      	mov	r8, r0
 800d55c:	460c      	mov	r4, r1
 800d55e:	469a      	mov	sl, r3
 800d560:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d566:	d807      	bhi.n	800d578 <_printf_i+0x28>
 800d568:	2f62      	cmp	r7, #98	@ 0x62
 800d56a:	d80a      	bhi.n	800d582 <_printf_i+0x32>
 800d56c:	2f00      	cmp	r7, #0
 800d56e:	f000 80d1 	beq.w	800d714 <_printf_i+0x1c4>
 800d572:	2f58      	cmp	r7, #88	@ 0x58
 800d574:	f000 80b8 	beq.w	800d6e8 <_printf_i+0x198>
 800d578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d57c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d580:	e03a      	b.n	800d5f8 <_printf_i+0xa8>
 800d582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d586:	2b15      	cmp	r3, #21
 800d588:	d8f6      	bhi.n	800d578 <_printf_i+0x28>
 800d58a:	a101      	add	r1, pc, #4	@ (adr r1, 800d590 <_printf_i+0x40>)
 800d58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d590:	0800d5e9 	.word	0x0800d5e9
 800d594:	0800d5fd 	.word	0x0800d5fd
 800d598:	0800d579 	.word	0x0800d579
 800d59c:	0800d579 	.word	0x0800d579
 800d5a0:	0800d579 	.word	0x0800d579
 800d5a4:	0800d579 	.word	0x0800d579
 800d5a8:	0800d5fd 	.word	0x0800d5fd
 800d5ac:	0800d579 	.word	0x0800d579
 800d5b0:	0800d579 	.word	0x0800d579
 800d5b4:	0800d579 	.word	0x0800d579
 800d5b8:	0800d579 	.word	0x0800d579
 800d5bc:	0800d6fb 	.word	0x0800d6fb
 800d5c0:	0800d627 	.word	0x0800d627
 800d5c4:	0800d6b5 	.word	0x0800d6b5
 800d5c8:	0800d579 	.word	0x0800d579
 800d5cc:	0800d579 	.word	0x0800d579
 800d5d0:	0800d71d 	.word	0x0800d71d
 800d5d4:	0800d579 	.word	0x0800d579
 800d5d8:	0800d627 	.word	0x0800d627
 800d5dc:	0800d579 	.word	0x0800d579
 800d5e0:	0800d579 	.word	0x0800d579
 800d5e4:	0800d6bd 	.word	0x0800d6bd
 800d5e8:	6833      	ldr	r3, [r6, #0]
 800d5ea:	1d1a      	adds	r2, r3, #4
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6032      	str	r2, [r6, #0]
 800d5f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e09c      	b.n	800d736 <_printf_i+0x1e6>
 800d5fc:	6833      	ldr	r3, [r6, #0]
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	1d19      	adds	r1, r3, #4
 800d602:	6031      	str	r1, [r6, #0]
 800d604:	0606      	lsls	r6, r0, #24
 800d606:	d501      	bpl.n	800d60c <_printf_i+0xbc>
 800d608:	681d      	ldr	r5, [r3, #0]
 800d60a:	e003      	b.n	800d614 <_printf_i+0xc4>
 800d60c:	0645      	lsls	r5, r0, #25
 800d60e:	d5fb      	bpl.n	800d608 <_printf_i+0xb8>
 800d610:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d614:	2d00      	cmp	r5, #0
 800d616:	da03      	bge.n	800d620 <_printf_i+0xd0>
 800d618:	232d      	movs	r3, #45	@ 0x2d
 800d61a:	426d      	negs	r5, r5
 800d61c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d620:	230a      	movs	r3, #10
 800d622:	4858      	ldr	r0, [pc, #352]	@ (800d784 <_printf_i+0x234>)
 800d624:	e011      	b.n	800d64a <_printf_i+0xfa>
 800d626:	6821      	ldr	r1, [r4, #0]
 800d628:	6833      	ldr	r3, [r6, #0]
 800d62a:	0608      	lsls	r0, r1, #24
 800d62c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d630:	d402      	bmi.n	800d638 <_printf_i+0xe8>
 800d632:	0649      	lsls	r1, r1, #25
 800d634:	bf48      	it	mi
 800d636:	b2ad      	uxthmi	r5, r5
 800d638:	2f6f      	cmp	r7, #111	@ 0x6f
 800d63a:	6033      	str	r3, [r6, #0]
 800d63c:	bf14      	ite	ne
 800d63e:	230a      	movne	r3, #10
 800d640:	2308      	moveq	r3, #8
 800d642:	4850      	ldr	r0, [pc, #320]	@ (800d784 <_printf_i+0x234>)
 800d644:	2100      	movs	r1, #0
 800d646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d64a:	6866      	ldr	r6, [r4, #4]
 800d64c:	2e00      	cmp	r6, #0
 800d64e:	60a6      	str	r6, [r4, #8]
 800d650:	db05      	blt.n	800d65e <_printf_i+0x10e>
 800d652:	6821      	ldr	r1, [r4, #0]
 800d654:	432e      	orrs	r6, r5
 800d656:	f021 0104 	bic.w	r1, r1, #4
 800d65a:	6021      	str	r1, [r4, #0]
 800d65c:	d04b      	beq.n	800d6f6 <_printf_i+0x1a6>
 800d65e:	4616      	mov	r6, r2
 800d660:	fbb5 f1f3 	udiv	r1, r5, r3
 800d664:	fb03 5711 	mls	r7, r3, r1, r5
 800d668:	5dc7      	ldrb	r7, [r0, r7]
 800d66a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d66e:	462f      	mov	r7, r5
 800d670:	42bb      	cmp	r3, r7
 800d672:	460d      	mov	r5, r1
 800d674:	d9f4      	bls.n	800d660 <_printf_i+0x110>
 800d676:	2b08      	cmp	r3, #8
 800d678:	d10b      	bne.n	800d692 <_printf_i+0x142>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	07df      	lsls	r7, r3, #31
 800d67e:	d508      	bpl.n	800d692 <_printf_i+0x142>
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	6861      	ldr	r1, [r4, #4]
 800d684:	4299      	cmp	r1, r3
 800d686:	bfde      	ittt	le
 800d688:	2330      	movle	r3, #48	@ 0x30
 800d68a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d68e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d692:	1b92      	subs	r2, r2, r6
 800d694:	6122      	str	r2, [r4, #16]
 800d696:	464b      	mov	r3, r9
 800d698:	4621      	mov	r1, r4
 800d69a:	4640      	mov	r0, r8
 800d69c:	f8cd a000 	str.w	sl, [sp]
 800d6a0:	aa03      	add	r2, sp, #12
 800d6a2:	f7ff fee3 	bl	800d46c <_printf_common>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	d14a      	bne.n	800d740 <_printf_i+0x1f0>
 800d6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ae:	b004      	add	sp, #16
 800d6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	f043 0320 	orr.w	r3, r3, #32
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	2778      	movs	r7, #120	@ 0x78
 800d6be:	4832      	ldr	r0, [pc, #200]	@ (800d788 <_printf_i+0x238>)
 800d6c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6c4:	6823      	ldr	r3, [r4, #0]
 800d6c6:	6831      	ldr	r1, [r6, #0]
 800d6c8:	061f      	lsls	r7, r3, #24
 800d6ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6ce:	d402      	bmi.n	800d6d6 <_printf_i+0x186>
 800d6d0:	065f      	lsls	r7, r3, #25
 800d6d2:	bf48      	it	mi
 800d6d4:	b2ad      	uxthmi	r5, r5
 800d6d6:	6031      	str	r1, [r6, #0]
 800d6d8:	07d9      	lsls	r1, r3, #31
 800d6da:	bf44      	itt	mi
 800d6dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d6e0:	6023      	strmi	r3, [r4, #0]
 800d6e2:	b11d      	cbz	r5, 800d6ec <_printf_i+0x19c>
 800d6e4:	2310      	movs	r3, #16
 800d6e6:	e7ad      	b.n	800d644 <_printf_i+0xf4>
 800d6e8:	4826      	ldr	r0, [pc, #152]	@ (800d784 <_printf_i+0x234>)
 800d6ea:	e7e9      	b.n	800d6c0 <_printf_i+0x170>
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	f023 0320 	bic.w	r3, r3, #32
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	e7f6      	b.n	800d6e4 <_printf_i+0x194>
 800d6f6:	4616      	mov	r6, r2
 800d6f8:	e7bd      	b.n	800d676 <_printf_i+0x126>
 800d6fa:	6833      	ldr	r3, [r6, #0]
 800d6fc:	6825      	ldr	r5, [r4, #0]
 800d6fe:	1d18      	adds	r0, r3, #4
 800d700:	6961      	ldr	r1, [r4, #20]
 800d702:	6030      	str	r0, [r6, #0]
 800d704:	062e      	lsls	r6, r5, #24
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	d501      	bpl.n	800d70e <_printf_i+0x1be>
 800d70a:	6019      	str	r1, [r3, #0]
 800d70c:	e002      	b.n	800d714 <_printf_i+0x1c4>
 800d70e:	0668      	lsls	r0, r5, #25
 800d710:	d5fb      	bpl.n	800d70a <_printf_i+0x1ba>
 800d712:	8019      	strh	r1, [r3, #0]
 800d714:	2300      	movs	r3, #0
 800d716:	4616      	mov	r6, r2
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	e7bc      	b.n	800d696 <_printf_i+0x146>
 800d71c:	6833      	ldr	r3, [r6, #0]
 800d71e:	2100      	movs	r1, #0
 800d720:	1d1a      	adds	r2, r3, #4
 800d722:	6032      	str	r2, [r6, #0]
 800d724:	681e      	ldr	r6, [r3, #0]
 800d726:	6862      	ldr	r2, [r4, #4]
 800d728:	4630      	mov	r0, r6
 800d72a:	f000 f859 	bl	800d7e0 <memchr>
 800d72e:	b108      	cbz	r0, 800d734 <_printf_i+0x1e4>
 800d730:	1b80      	subs	r0, r0, r6
 800d732:	6060      	str	r0, [r4, #4]
 800d734:	6863      	ldr	r3, [r4, #4]
 800d736:	6123      	str	r3, [r4, #16]
 800d738:	2300      	movs	r3, #0
 800d73a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d73e:	e7aa      	b.n	800d696 <_printf_i+0x146>
 800d740:	4632      	mov	r2, r6
 800d742:	4649      	mov	r1, r9
 800d744:	4640      	mov	r0, r8
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	47d0      	blx	sl
 800d74a:	3001      	adds	r0, #1
 800d74c:	d0ad      	beq.n	800d6aa <_printf_i+0x15a>
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	079b      	lsls	r3, r3, #30
 800d752:	d413      	bmi.n	800d77c <_printf_i+0x22c>
 800d754:	68e0      	ldr	r0, [r4, #12]
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	4298      	cmp	r0, r3
 800d75a:	bfb8      	it	lt
 800d75c:	4618      	movlt	r0, r3
 800d75e:	e7a6      	b.n	800d6ae <_printf_i+0x15e>
 800d760:	2301      	movs	r3, #1
 800d762:	4632      	mov	r2, r6
 800d764:	4649      	mov	r1, r9
 800d766:	4640      	mov	r0, r8
 800d768:	47d0      	blx	sl
 800d76a:	3001      	adds	r0, #1
 800d76c:	d09d      	beq.n	800d6aa <_printf_i+0x15a>
 800d76e:	3501      	adds	r5, #1
 800d770:	68e3      	ldr	r3, [r4, #12]
 800d772:	9903      	ldr	r1, [sp, #12]
 800d774:	1a5b      	subs	r3, r3, r1
 800d776:	42ab      	cmp	r3, r5
 800d778:	dcf2      	bgt.n	800d760 <_printf_i+0x210>
 800d77a:	e7eb      	b.n	800d754 <_printf_i+0x204>
 800d77c:	2500      	movs	r5, #0
 800d77e:	f104 0619 	add.w	r6, r4, #25
 800d782:	e7f5      	b.n	800d770 <_printf_i+0x220>
 800d784:	0800e093 	.word	0x0800e093
 800d788:	0800e0a4 	.word	0x0800e0a4

0800d78c <memmove>:
 800d78c:	4288      	cmp	r0, r1
 800d78e:	b510      	push	{r4, lr}
 800d790:	eb01 0402 	add.w	r4, r1, r2
 800d794:	d902      	bls.n	800d79c <memmove+0x10>
 800d796:	4284      	cmp	r4, r0
 800d798:	4623      	mov	r3, r4
 800d79a:	d807      	bhi.n	800d7ac <memmove+0x20>
 800d79c:	1e43      	subs	r3, r0, #1
 800d79e:	42a1      	cmp	r1, r4
 800d7a0:	d008      	beq.n	800d7b4 <memmove+0x28>
 800d7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7aa:	e7f8      	b.n	800d79e <memmove+0x12>
 800d7ac:	4601      	mov	r1, r0
 800d7ae:	4402      	add	r2, r0
 800d7b0:	428a      	cmp	r2, r1
 800d7b2:	d100      	bne.n	800d7b6 <memmove+0x2a>
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7be:	e7f7      	b.n	800d7b0 <memmove+0x24>

0800d7c0 <_sbrk_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4d05      	ldr	r5, [pc, #20]	@ (800d7dc <_sbrk_r+0x1c>)
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4608      	mov	r0, r1
 800d7ca:	602b      	str	r3, [r5, #0]
 800d7cc:	f7f4 f924 	bl	8001a18 <_sbrk>
 800d7d0:	1c43      	adds	r3, r0, #1
 800d7d2:	d102      	bne.n	800d7da <_sbrk_r+0x1a>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	b103      	cbz	r3, 800d7da <_sbrk_r+0x1a>
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	20001de0 	.word	0x20001de0

0800d7e0 <memchr>:
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	b510      	push	{r4, lr}
 800d7e4:	b2c9      	uxtb	r1, r1
 800d7e6:	4402      	add	r2, r0
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	d101      	bne.n	800d7f2 <memchr+0x12>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e003      	b.n	800d7fa <memchr+0x1a>
 800d7f2:	7804      	ldrb	r4, [r0, #0]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	428c      	cmp	r4, r1
 800d7f8:	d1f6      	bne.n	800d7e8 <memchr+0x8>
 800d7fa:	bd10      	pop	{r4, pc}

0800d7fc <_realloc_r>:
 800d7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d800:	4607      	mov	r7, r0
 800d802:	4614      	mov	r4, r2
 800d804:	460d      	mov	r5, r1
 800d806:	b921      	cbnz	r1, 800d812 <_realloc_r+0x16>
 800d808:	4611      	mov	r1, r2
 800d80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80e:	f7ff bc49 	b.w	800d0a4 <_malloc_r>
 800d812:	b92a      	cbnz	r2, 800d820 <_realloc_r+0x24>
 800d814:	f7ff fbdc 	bl	800cfd0 <_free_r>
 800d818:	4625      	mov	r5, r4
 800d81a:	4628      	mov	r0, r5
 800d81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d820:	f000 f81a 	bl	800d858 <_malloc_usable_size_r>
 800d824:	4284      	cmp	r4, r0
 800d826:	4606      	mov	r6, r0
 800d828:	d802      	bhi.n	800d830 <_realloc_r+0x34>
 800d82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d82e:	d8f4      	bhi.n	800d81a <_realloc_r+0x1e>
 800d830:	4621      	mov	r1, r4
 800d832:	4638      	mov	r0, r7
 800d834:	f7ff fc36 	bl	800d0a4 <_malloc_r>
 800d838:	4680      	mov	r8, r0
 800d83a:	b908      	cbnz	r0, 800d840 <_realloc_r+0x44>
 800d83c:	4645      	mov	r5, r8
 800d83e:	e7ec      	b.n	800d81a <_realloc_r+0x1e>
 800d840:	42b4      	cmp	r4, r6
 800d842:	4622      	mov	r2, r4
 800d844:	4629      	mov	r1, r5
 800d846:	bf28      	it	cs
 800d848:	4632      	movcs	r2, r6
 800d84a:	f7ff fbb3 	bl	800cfb4 <memcpy>
 800d84e:	4629      	mov	r1, r5
 800d850:	4638      	mov	r0, r7
 800d852:	f7ff fbbd 	bl	800cfd0 <_free_r>
 800d856:	e7f1      	b.n	800d83c <_realloc_r+0x40>

0800d858 <_malloc_usable_size_r>:
 800d858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d85c:	1f18      	subs	r0, r3, #4
 800d85e:	2b00      	cmp	r3, #0
 800d860:	bfbc      	itt	lt
 800d862:	580b      	ldrlt	r3, [r1, r0]
 800d864:	18c0      	addlt	r0, r0, r3
 800d866:	4770      	bx	lr

0800d868 <_init>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr

0800d874 <_fini>:
 800d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d876:	bf00      	nop
 800d878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87a:	bc08      	pop	{r3}
 800d87c:	469e      	mov	lr, r3
 800d87e:	4770      	bx	lr
