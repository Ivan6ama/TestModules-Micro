
Modules_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d848  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e790  0800e790  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e790  0800e790  000101d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e790  0800e790  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e790  0800e790  0000f790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e794  0800e794  0000f794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e798  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  200001d8  0800e970  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf0  0800e970  00010cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d61  00000000  00000000  00010201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a6  00000000  00000000  00027f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001118  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb2a  00000000  00000000  0002e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c347  00000000  00000000  0004a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095413  00000000  00000000  000665d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb9e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  000fba28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00101bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d93c 	.word	0x0800d93c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800d93c 	.word	0x0800d93c

0800014c <UNER_SetTxFunction>:

/**
 * @brief Asigna la función de transmisión para el protocolo.
 */
void UNER_SetTxFunction(txFunct_t func)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    sendFunction = func;
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <UNER_SetTxFunction+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200001f4 	.word	0x200001f4

08000168 <UNER_Init>:

/**
 * @brief Inicializa las estructuras de transmisión y recepción.
 */
void UNER_Init(_sTx *tx, uint8_t *txBuf, _sRx *rx, uint8_t *rxBuf)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
 8000174:	603b      	str	r3, [r7, #0]
    tx->buf = txBuf;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
    tx->iw = 0;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	711a      	strb	r2, [r3, #4]
    tx->ir = 0;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	715a      	strb	r2, [r3, #5]
    tx->length = SIZEBUFTX - 1;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	22ff      	movs	r2, #255	@ 0xff
 800018c:	719a      	strb	r2, [r3, #6]
    tx->chks = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	71da      	strb	r2, [r3, #7]

    rx->buf = rxBuf;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	601a      	str	r2, [r3, #0]
    rx->iw = 0;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	711a      	strb	r2, [r3, #4]
    rx->ir = 0;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	715a      	strb	r2, [r3, #5]
    rx->header = HEADER_U;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	719a      	strb	r2, [r3, #6]
    rx->length = SIZEBUFRX - 1;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	71da      	strb	r2, [r3, #7]
    rx->size = 0;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	721a      	strb	r2, [r3, #8]
    rx->data = 0;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2200      	movs	r2, #0
 80001bc:	725a      	strb	r2, [r3, #9]
    rx->chks = 0;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2200      	movs	r2, #0
 80001c2:	729a      	strb	r2, [r3, #10]

    protocolState = HEADER_U;
 80001c4:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <UNER_Init+0x74>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
    CMDID = UNKNOWN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <UNER_Init+0x78>)
 80001cc:	22ff      	movs	r2, #255	@ 0xff
 80001ce:	701a      	strb	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200001f9 	.word	0x200001f9
 80001e0:	200001f8 	.word	0x200001f8

080001e4 <UNER_SerialTask>:

/**
 * @brief Lógica periódica de recepción y transmisión de datos.
 */
void UNER_SerialTask(_sTx *tx, _sRx *rx)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (rx->iw != rx->ir) {
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	791a      	ldrb	r2, [r3, #4]
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	795b      	ldrb	r3, [r3, #5]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d003      	beq.n	8000202 <UNER_SerialTask+0x1e>
        UNER_DecodeHeader(rx, tx);
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f000 f841 	bl	8000284 <UNER_DecodeHeader>
    }

    if (tx->ir != tx->iw) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	795a      	ldrb	r2, [r3, #5]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d016      	beq.n	800023c <UNER_SerialTask+0x58>
        sendFunction(&tx->buf[tx->ir]);
 800020e:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <UNER_SerialTask+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	6879      	ldr	r1, [r7, #4]
 8000218:	7949      	ldrb	r1, [r1, #5]
 800021a:	440a      	add	r2, r1
 800021c:	4610      	mov	r0, r2
 800021e:	4798      	blx	r3
        tx->ir++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	715a      	strb	r2, [r3, #5]
        tx->ir &= tx->length;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	4013      	ands	r3, r2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	715a      	strb	r2, [r3, #5]
    }
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001f4 	.word	0x200001f4

08000248 <UNER_OnRxByte>:

/**
 * @brief Almacena cada byte recibido en el buffer.
 */
void UNER_OnRxByte(_sRx *rx, uint8_t data)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    rx->buf[rx->iw++] = data;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	1c59      	adds	r1, r3, #1
 800025e:	b2c8      	uxtb	r0, r1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	7108      	strb	r0, [r1, #4]
 8000264:	4413      	add	r3, r2
 8000266:	78fa      	ldrb	r2, [r7, #3]
 8000268:	701a      	strb	r2, [r3, #0]
    rx->iw &= rx->length;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	791a      	ldrb	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	4013      	ands	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	711a      	strb	r2, [r3, #4]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <UNER_DecodeHeader>:
 * @brief Decodifica el encabezado del protocolo UNER.
 * @param rx Buffer de recepción.
 * @param tx Buffer de transmisión.
 */
void UNER_DecodeHeader(_sRx *rx, _sTx *tx)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    uint8_t i = rx->iw;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	73fb      	strb	r3, [r7, #15]
    while(rx->ir != i){
 8000294:	e0df      	b.n	8000456 <UNER_DecodeHeader+0x1d2>
        switch(rx->header){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	799b      	ldrb	r3, [r3, #6]
 800029a:	2b06      	cmp	r3, #6
 800029c:	f200 80c8 	bhi.w	8000430 <UNER_DecodeHeader+0x1ac>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <UNER_DecodeHeader+0x24>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002c5 	.word	0x080002c5
 80002ac:	080002df 	.word	0x080002df
 80002b0:	0800030b 	.word	0x0800030b
 80002b4:	08000337 	.word	0x08000337
 80002b8:	08000363 	.word	0x08000363
 80002bc:	0800037b 	.word	0x0800037b
 80002c0:	080003d1 	.word	0x080003d1
            case HEADER_U:
                if(rx->buf[rx->ir] == 'U'){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7952      	ldrb	r2, [r2, #5]
 80002cc:	4413      	add	r3, r2
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b55      	cmp	r3, #85	@ 0x55
 80002d2:	f040 80b1 	bne.w	8000438 <UNER_DecodeHeader+0x1b4>
                    rx->header = HEADER_N;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	719a      	strb	r2, [r3, #6]
                }
            break;
 80002dc:	e0ac      	b.n	8000438 <UNER_DecodeHeader+0x1b4>
            case HEADER_N:
                if(rx->buf[rx->ir] == 'N'){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7952      	ldrb	r2, [r2, #5]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80002ec:	d103      	bne.n	80002f6 <UNER_DecodeHeader+0x72>
                    rx->header = HEADER_E;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2202      	movs	r2, #2
 80002f2:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80002f4:	e0a1      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	715a      	strb	r2, [r3, #5]
            break;
 8000308:	e097      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_E:
                if(rx->buf[rx->ir] == 'E'){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7952      	ldrb	r2, [r2, #5]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b45      	cmp	r3, #69	@ 0x45
 8000318:	d103      	bne.n	8000322 <UNER_DecodeHeader+0x9e>
                    rx->header = HEADER_R;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2203      	movs	r2, #3
 800031e:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 8000320:	e08b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	3b01      	subs	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	715a      	strb	r2, [r3, #5]
            break;
 8000334:	e081      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case HEADER_R:
                if(rx->buf[rx->ir] == 'R'){
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7952      	ldrb	r2, [r2, #5]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b52      	cmp	r3, #82	@ 0x52
 8000344:	d103      	bne.n	800034e <UNER_DecodeHeader+0xca>
                    rx->header = NBYTES;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2204      	movs	r2, #4
 800034a:	719a      	strb	r2, [r3, #6]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 800034c:	e075      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	3b01      	subs	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	715a      	strb	r2, [r3, #5]
            break;
 8000360:	e06b      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case NBYTES:
                rx->header = TOKEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2205      	movs	r2, #5
 8000366:	719a      	strb	r2, [r3, #6]
                rx->size = rx->buf[rx->ir];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7952      	ldrb	r2, [r2, #5]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	721a      	strb	r2, [r3, #8]
            break;
 8000378:	e05f      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case TOKEN:
                if(rx->buf[rx->ir] == ':'){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7952      	ldrb	r2, [r2, #5]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b3a      	cmp	r3, #58	@ 0x3a
 8000388:	d118      	bne.n	80003bc <UNER_DecodeHeader+0x138>
                    rx->chks = 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':' ^ rx->size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	729a      	strb	r2, [r3, #10]
                    rx->header = PAYLOAD;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2206      	movs	r2, #6
 800039c:	719a      	strb	r2, [r3, #6]
                    rx->data = rx->ir + 1;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	725a      	strb	r2, [r3, #9]
                    rx->data &= rx->length;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5a      	ldrb	r2, [r3, #9]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	79db      	ldrb	r3, [r3, #7]
 80003b2:	4013      	ands	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	725a      	strb	r2, [r3, #9]
                }else{
                    rx->header = HEADER_U;
                    rx->ir--;
                }
            break;
 80003ba:	e03e      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    rx->header = HEADER_U;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	719a      	strb	r2, [r3, #6]
                    rx->ir--;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	715a      	strb	r2, [r3, #5]
            break;
 80003ce:	e034      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            case PAYLOAD:
                rx->size--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	721a      	strb	r2, [r3, #8]
                if(rx->size > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <UNER_DecodeHeader+0x17a>
                    rx->chks ^= rx->buf[rx->ir];
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a9a      	ldrb	r2, [r3, #10]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	7949      	ldrb	r1, [r1, #5]
 80003f0:	440b      	add	r3, r1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	729a      	strb	r2, [r3, #10]
                    if(rx->buf[rx->ir] == rx->chks){
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
                    }
                    rx->header = HEADER_U;
                }
            break;
 80003fc:	e01d      	b.n	800043a <UNER_DecodeHeader+0x1b6>
                    if(rx->buf[rx->ir] == rx->chks){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	7952      	ldrb	r2, [r2, #5]
 8000406:	4413      	add	r3, r2
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7a9b      	ldrb	r3, [r3, #10]
 800040e:	429a      	cmp	r2, r3
 8000410:	d10a      	bne.n	8000428 <UNER_DecodeHeader+0x1a4>
                        UNER_DecodePayload(rx->buf[rx->data], tx, rx);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7a52      	ldrb	r2, [r2, #9]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6839      	ldr	r1, [r7, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f822 	bl	800046c <UNER_DecodePayload>
                    rx->header = HEADER_U;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	719a      	strb	r2, [r3, #6]
            break;
 800042e:	e004      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            default:
                rx->header = HEADER_U;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	719a      	strb	r2, [r3, #6]
            break;
 8000436:	e000      	b.n	800043a <UNER_DecodeHeader+0x1b6>
            break;
 8000438:	bf00      	nop
        }
        rx->ir++;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	3301      	adds	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	715a      	strb	r2, [r3, #5]
        rx->ir &= rx->length;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795a      	ldrb	r2, [r3, #5]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	79db      	ldrb	r3, [r3, #7]
 800044e:	4013      	ands	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	715a      	strb	r2, [r3, #5]
    while(rx->ir != i){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	429a      	cmp	r2, r3
 800045e:	f47f af1a 	bne.w	8000296 <UNER_DecodeHeader+0x12>
    }
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <UNER_DecodePayload>:

void UNER_DecodePayload(uint8_t bufRx,_sTx *tx, _sRx *rx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	73fb      	strb	r3, [r7, #15]
    switch(bufRx){
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2bf1      	cmp	r3, #241	@ 0xf1
 800047e:	d010      	beq.n	80004a2 <UNER_DecodePayload+0x36>
 8000480:	2bf1      	cmp	r3, #241	@ 0xf1
 8000482:	dc39      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 8000484:	2bf0      	cmp	r3, #240	@ 0xf0
 8000486:	d006      	beq.n	8000496 <UNER_DecodePayload+0x2a>
 8000488:	2bf0      	cmp	r3, #240	@ 0xf0
 800048a:	dc35      	bgt.n	80004f8 <UNER_DecodePayload+0x8c>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d00e      	beq.n	80004ae <UNER_DecodePayload+0x42>
 8000490:	2b02      	cmp	r3, #2
 8000492:	d02b      	beq.n	80004ec <UNER_DecodePayload+0x80>
 8000494:	e030      	b.n	80004f8 <UNER_DecodePayload+0x8c>
        case ALIVE:
            UNER_WriteContentTx(bufRx, tx);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f83a 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004a0:	e030      	b.n	8000504 <UNER_DecodePayload+0x98>
        case FIRMWARE:
        	UNER_WriteContentTx(bufRx, tx);
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	68b9      	ldr	r1, [r7, #8]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f834 	bl	8000514 <UNER_WriteContentTx>
        break;
 80004ac:	e02a      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIMOTORS:
			w.i8[0] = rx->buf[rx->data + 1];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	7a5b      	ldrb	r3, [r3, #9]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	4b13      	ldr	r3, [pc, #76]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004c0:	701a      	strb	r2, [r3, #0]
			w.i8[1] = rx->buf[rx->data + 2];
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a5b      	ldrb	r3, [r3, #9]
 80004ca:	3302      	adds	r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004d4:	705a      	strb	r2, [r3, #1]

		    appCallback(UIMOTORS, &w);
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <UNER_DecodePayload+0xa4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	490c      	ldr	r1, [pc, #48]	@ (800050c <UNER_DecodePayload+0xa0>)
 80004dc:	2001      	movs	r0, #1
 80004de:	4798      	blx	r3

			UNER_WriteContentTx(bufRx, tx);
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	68b9      	ldr	r1, [r7, #8]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f815 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004ea:	e00b      	b.n	8000504 <UNER_DecodePayload+0x98>
		case UIDISPLAY:
			UNER_WriteContentTx(bufRx, tx);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f80f 	bl	8000514 <UNER_WriteContentTx>
		break;
 80004f6:	e005      	b.n	8000504 <UNER_DecodePayload+0x98>
        default:
            UNER_WriteContentTx(bufRx, tx);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	68b9      	ldr	r1, [r7, #8]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f809 	bl	8000514 <UNER_WriteContentTx>
        break;
 8000502:	bf00      	nop
    }
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200001fc 	.word	0x200001fc
 8000510:	20000200 	.word	0x20000200

08000514 <UNER_WriteContentTx>:

void UNER_WriteContentTx(uint8_t bufRx,_sTx *tx)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
    switch(bufRx){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2bf1      	cmp	r3, #241	@ 0xf1
 8000524:	d01a      	beq.n	800055c <UNER_WriteContentTx+0x48>
 8000526:	2bf1      	cmp	r3, #241	@ 0xf1
 8000528:	dc50      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 800052a:	2bf0      	cmp	r3, #240	@ 0xf0
 800052c:	d006      	beq.n	800053c <UNER_WriteContentTx+0x28>
 800052e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000530:	dc4c      	bgt.n	80005cc <UNER_WriteContentTx+0xb8>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d02a      	beq.n	800058c <UNER_WriteContentTx+0x78>
 8000536:	2b02      	cmp	r3, #2
 8000538:	d038      	beq.n	80005ac <UNER_WriteContentTx+0x98>
 800053a:	e047      	b.n	80005cc <UNER_WriteContentTx+0xb8>
        case ALIVE:
            UNER_PutHeaderOnTx(tx, ALIVE, 2);
 800053c:	2202      	movs	r2, #2
 800053e:	21f0      	movs	r1, #240	@ 0xf0
 8000540:	6838      	ldr	r0, [r7, #0]
 8000542:	f000 f861 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, ACK);
 8000546:	210d      	movs	r1, #13
 8000548:	6838      	ldr	r0, [r7, #0]
 800054a:	f000 f90c 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	79db      	ldrb	r3, [r3, #7]
 8000552:	4619      	mov	r1, r3
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 f906 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800055a:	e04d      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case FIRMWARE:
        	UNER_PutHeaderOnTx(tx, FIRMWARE, 18);
 800055c:	2212      	movs	r2, #18
 800055e:	21f1      	movs	r1, #241	@ 0xf1
 8000560:	6838      	ldr	r0, [r7, #0]
 8000562:	f000 f851 	bl	8000608 <UNER_PutHeaderOnTx>
			UNER_PutStrOnTx(tx, "+&DBG");
 8000566:	4926      	ldr	r1, [pc, #152]	@ (8000600 <UNER_WriteContentTx+0xec>)
 8000568:	6838      	ldr	r0, [r7, #0]
 800056a:	f000 f923 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutStrOnTx(tx, firmware);
 800056e:	4925      	ldr	r1, [pc, #148]	@ (8000604 <UNER_WriteContentTx+0xf0>)
 8000570:	6838      	ldr	r0, [r7, #0]
 8000572:	f000 f91f 	bl	80007b4 <UNER_PutStrOnTx>
			UNER_PutByteOnTx(tx, '\n');
 8000576:	210a      	movs	r1, #10
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f000 f8f4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	4619      	mov	r1, r3
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f000 f8ee 	bl	8000766 <UNER_PutByteOnTx>
        break;
 800058a:	e035      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIMOTORS:
        	UNER_PutHeaderOnTx(tx, UIMOTORS, 2);
 800058c:	2202      	movs	r2, #2
 800058e:	2101      	movs	r1, #1
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f000 f839 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 1);
 8000596:	2101      	movs	r1, #1
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 f8e4 	bl	8000766 <UNER_PutByteOnTx>
        	UNER_PutByteOnTx(tx, tx->chks);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	4619      	mov	r1, r3
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f000 f8de 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005aa:	e025      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        case UIDISPLAY:
        	UNER_PutHeaderOnTx(tx, UIDISPLAY, 2);
 80005ac:	2202      	movs	r2, #2
 80005ae:	2102      	movs	r1, #2
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 f829 	bl	8000608 <UNER_PutHeaderOnTx>
        	UNER_PutByteOnTx(tx, 2);
 80005b6:	2102      	movs	r1, #2
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f000 f8d4 	bl	8000766 <UNER_PutByteOnTx>
			UNER_PutByteOnTx(tx, tx->chks);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	79db      	ldrb	r3, [r3, #7]
 80005c2:	4619      	mov	r1, r3
 80005c4:	6838      	ldr	r0, [r7, #0]
 80005c6:	f000 f8ce 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005ca:	e015      	b.n	80005f8 <UNER_WriteContentTx+0xe4>
        default:
            UNER_PutHeaderOnTx(tx, (_eCmd)tx->buf[tx->iw], 2);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2202      	movs	r2, #2
 80005da:	4619      	mov	r1, r3
 80005dc:	6838      	ldr	r0, [r7, #0]
 80005de:	f000 f813 	bl	8000608 <UNER_PutHeaderOnTx>
            UNER_PutByteOnTx(tx, UNKNOWN);
 80005e2:	21ff      	movs	r1, #255	@ 0xff
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f000 f8be 	bl	8000766 <UNER_PutByteOnTx>
            UNER_PutByteOnTx(tx, tx->chks);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6838      	ldr	r0, [r7, #0]
 80005f2:	f000 f8b8 	bl	8000766 <UNER_PutByteOnTx>
        break;
 80005f6:	bf00      	nop
    }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800d954 	.word	0x0800d954
 8000604:	0800d9c8 	.word	0x0800d9c8

08000608 <UNER_PutHeaderOnTx>:

uint8_t UNER_PutHeaderOnTx(_sTx *tx, _eCmd ID, uint8_t N)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	4613      	mov	r3, r2
 8000616:	70bb      	strb	r3, [r7, #2]
    tx->chks = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	71da      	strb	r2, [r3, #7]
    tx->buf[tx->iw++] = 'U';
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	b2c8      	uxtb	r0, r1
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	7108      	strb	r0, [r1, #4]
 800062e:	4413      	add	r3, r2
 8000630:	2255      	movs	r2, #85	@ 0x55
 8000632:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791a      	ldrb	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	4013      	ands	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'N';
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	b2c8      	uxtb	r0, r1
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	7108      	strb	r0, [r1, #4]
 8000654:	4413      	add	r3, r2
 8000656:	224e      	movs	r2, #78	@ 0x4e
 8000658:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791a      	ldrb	r2, [r3, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	799b      	ldrb	r3, [r3, #6]
 8000662:	4013      	ands	r3, r2
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'E';
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	1c59      	adds	r1, r3, #1
 8000674:	b2c8      	uxtb	r0, r1
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	7108      	strb	r0, [r1, #4]
 800067a:	4413      	add	r3, r2
 800067c:	2245      	movs	r2, #69	@ 0x45
 800067e:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791a      	ldrb	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	4013      	ands	r3, r2
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = 'R';
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	1c59      	adds	r1, r3, #1
 800069a:	b2c8      	uxtb	r0, r1
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	7108      	strb	r0, [r1, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	2252      	movs	r2, #82	@ 0x52
 80006a4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791a      	ldrb	r2, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = N + 1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	1c59      	adds	r1, r3, #1
 80006c0:	b2c8      	uxtb	r0, r1
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	7108      	strb	r0, [r1, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	78ba      	ldrb	r2, [r7, #2]
 80006ca:	3201      	adds	r2, #1
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791a      	ldrb	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ':';
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	b2c8      	uxtb	r0, r1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	7108      	strb	r0, [r1, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	223a      	movs	r2, #58	@ 0x3a
 80006f4:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791a      	ldrb	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	4013      	ands	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	711a      	strb	r2, [r3, #4]
    tx->buf[tx->iw++] = ID;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	1c59      	adds	r1, r3, #1
 8000710:	b2c8      	uxtb	r0, r1
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	7108      	strb	r0, [r1, #4]
 8000716:	4413      	add	r3, r2
 8000718:	78fa      	ldrb	r2, [r7, #3]
 800071a:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791a      	ldrb	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	4013      	ands	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	711a      	strb	r2, [r3, #4]
    tx->chks ^= (N + 1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	b25a      	sxtb	r2, r3
 8000732:	78bb      	ldrb	r3, [r7, #2]
 8000734:	3301      	adds	r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4053      	eors	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	71da      	strb	r2, [r3, #7]
    tx->chks ^= ('U' ^ 'N' ^ 'E' ^ 'R' ^ ID ^ ':');
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	79da      	ldrb	r2, [r3, #7]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	79db      	ldrb	r3, [r3, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <UNER_PutByteOnTx>:

uint8_t UNER_PutByteOnTx(_sTx *tx, uint8_t byte)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
    tx->buf[tx->iw++] = byte;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	1c59      	adds	r1, r3, #1
 800077c:	b2c8      	uxtb	r0, r1
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	7108      	strb	r0, [r1, #4]
 8000782:	4413      	add	r3, r2
 8000784:	78fa      	ldrb	r2, [r7, #3]
 8000786:	701a      	strb	r2, [r3, #0]
    tx->iw &= tx->length;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791a      	ldrb	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	799b      	ldrb	r3, [r3, #6]
 8000790:	4013      	ands	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	711a      	strb	r2, [r3, #4]
    tx->chks ^= byte;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	79da      	ldrb	r2, [r3, #7]
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4053      	eors	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	71da      	strb	r2, [r3, #7]
    return tx->chks;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	79db      	ldrb	r3, [r3, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <UNER_PutStrOnTx>:

uint8_t UNER_PutStrOnTx(_sTx *tx, const char *str)
{
 80007b4:	b490      	push	{r4, r7}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    uint16_t generalIndex = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	81fb      	strh	r3, [r7, #14]
    while (str[generalIndex]) {
 80007c2:	e022      	b.n	800080a <UNER_PutStrOnTx+0x56>
        tx->buf[tx->iw++] = str[generalIndex];
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	1c58      	adds	r0, r3, #1
 80007d4:	b2c4      	uxtb	r4, r0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	7104      	strb	r4, [r0, #4]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
        tx->iw &= tx->length;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791a      	ldrb	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	4013      	ands	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	711a      	strb	r2, [r3, #4]
        tx->chks ^= str[generalIndex++];
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	81fa      	strh	r2, [r7, #14]
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	4053      	eors	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	71da      	strb	r2, [r3, #7]
    while (str[generalIndex]) {
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1d6      	bne.n	80007c4 <UNER_PutStrOnTx+0x10>
    }
    return tx->chks;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	79db      	ldrb	r3, [r3, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr

08000824 <UNER_SetAppCallback>:


void UNER_SetAppCallback(UNER_ApplicationCallback_t callback) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    appCallback = callback;
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <UNER_SetAppCallback+0x18>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000200 	.word	0x20000200

08000840 <oled_hal_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "main.h"

void oled_hal_write(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 8000840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000844:	b087      	sub	sp, #28
 8000846:	af02      	add	r7, sp, #8
 8000848:	603a      	str	r2, [r7, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	460b      	mov	r3, r1
 8000852:	71bb      	strb	r3, [r7, #6]
 8000854:	4613      	mov	r3, r2
 8000856:	80bb      	strh	r3, [r7, #4]
 8000858:	466b      	mov	r3, sp
 800085a:	461e      	mov	r6, r3
	uint8_t buf[len + 1]; // buffer local m
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	1c59      	adds	r1, r3, #1
 8000860:	1e4b      	subs	r3, r1, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	460a      	mov	r2, r1
 8000866:	2300      	movs	r3, #0
 8000868:	4690      	mov	r8, r2
 800086a:	4699      	mov	r9, r3
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000878:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800087c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000880:	460a      	mov	r2, r1
 8000882:	2300      	movs	r3, #0
 8000884:	4614      	mov	r4, r2
 8000886:	461d      	mov	r5, r3
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	00eb      	lsls	r3, r5, #3
 8000892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000896:	00e2      	lsls	r2, r4, #3
 8000898:	460b      	mov	r3, r1
 800089a:	3307      	adds	r3, #7
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	ebad 0d03 	sub.w	sp, sp, r3
 80008a4:	ab02      	add	r3, sp, #8
 80008a6:	3300      	adds	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
    buf[0] = ctrl;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, len);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	88ba      	ldrh	r2, [r7, #4]
 80008b6:	6839      	ldr	r1, [r7, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00c fbe5 	bl	800d088 <memcpy>

    //HAL_I2C_Master_Transmit_DMA(&hi2c1, addr, buf, len + 1);
    HAL_I2C_Mem_Write_DMA(&hi2c1, addr, ctrl, I2C_MEMADD_SIZE_8BIT, data, len);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	b299      	uxth	r1, r3
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	88bb      	ldrh	r3, [r7, #4]
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <oled_hal_write+0xa4>)
 80008d2:	f002 fd1d 	bl	8003310 <HAL_I2C_Mem_Write_DMA>
 80008d6:	46b5      	mov	sp, r6
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008e2:	bf00      	nop
 80008e4:	20000278 	.word	0x20000278

080008e8 <oled_hal_write_single>:

int oled_hal_write_single(uint8_t addr, uint8_t ctrl, uint8_t data) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	460b      	mov	r3, r1
 80008f4:	71bb      	strb	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2] = { ctrl, data };
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	733b      	strb	r3, [r7, #12]
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	737b      	strb	r3, [r7, #13]
    return (HAL_I2C_Master_Transmit(&hi2c1, addr, buf, 2, HAL_MAX_DELAY) == HAL_OK) ? 0 : -1;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	b299      	uxth	r1, r3
 8000906:	f107 020c 	add.w	r2, r7, #12
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2302      	movs	r3, #2
 8000912:	4807      	ldr	r0, [pc, #28]	@ (8000930 <oled_hal_write_single+0x48>)
 8000914:	f002 fbfe 	bl	8003114 <HAL_I2C_Master_Transmit>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <oled_hal_write_single+0x3a>
 800091e:	2300      	movs	r3, #0
 8000920:	e001      	b.n	8000926 <oled_hal_write_single+0x3e>
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000278 	.word	0x20000278

08000934 <UNER_AppHandler>:

void UNER_AppHandler(_eCmd cmd, _uWork *data)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
    switch (cmd) {
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10a      	bne.n	800095c <UNER_AppHandler+0x28>
        case UIMOTORS:
            leftMotorSpeed = data->i8[0];
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f993 2000 	ldrsb.w	r2, [r3]
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <UNER_AppHandler+0x34>)
 800094e:	701a      	strb	r2, [r3, #0]
            rightMotorSpeed = data->i8[1];
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000956:	4b05      	ldr	r3, [pc, #20]	@ (800096c <UNER_AppHandler+0x38>)
 8000958:	701a      	strb	r2, [r3, #0]

            //ssd_update_done = 1;
            break;
 800095a:	e000      	b.n	800095e <UNER_AppHandler+0x2a>
        default:
            break;
 800095c:	bf00      	nop
    }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	200005b4 	.word	0x200005b4
 800096c:	200005b5 	.word	0x200005b5

08000970 <Motor_Set>:

void Motor_Set(int motor, int8_t speed)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
    // Saturar valor a -100..100
    if (speed > 100) speed = 100;
 800097c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000980:	2b64      	cmp	r3, #100	@ 0x64
 8000982:	dd01      	ble.n	8000988 <Motor_Set+0x18>
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	70fb      	strb	r3, [r7, #3]
    if (speed < -100) speed = -100;
 8000988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800098c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000990:	da01      	bge.n	8000996 <Motor_Set+0x26>
 8000992:	239c      	movs	r3, #156	@ 0x9c
 8000994:	70fb      	strb	r3, [r7, #3]


    switch (motor) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <Motor_Set+0x34>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d00c      	beq.n	80009bc <Motor_Set+0x4c>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
            break;

        default:
            // Motor inválido, podés agregar error handling
            break;
 80009a2:	e016      	b.n	80009d2 <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <Motor_Set+0x6c>)
 80009ac:	f002 fa42 	bl	8002e34 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <Motor_Set+0x70>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80009ba:	e00a      	b.n	80009d2 <Motor_Set+0x62>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <Motor_Set+0x6c>)
 80009c2:	f002 fa37 	bl	8002e34 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <Motor_Set+0x74>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80009ce:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80009d0:	bf00      	nop
    }
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010800 	.word	0x40010800
 80009e0:	20000310 	.word	0x20000310
 80009e4:	20000358 	.word	0x20000358

080009e8 <Oled_Init>:

void Oled_Init(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	if (!SSD1306_Init()) {
 80009ec:	f000 fb82 	bl	80010f4 <SSD1306_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <Oled_Init+0x12>
		while (1);
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <Oled_Init+0xe>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}

080009fe <sendByteOverUSB>:


void sendByteOverUSB(uint8_t *byte)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
    // CDC_Transmit_FS envía un buffer, acá mandamos 1 byte
    while(CDC_Transmit_FS(byte, 1) == USBD_BUSY){
 8000a06:	bf00      	nop
 8000a08:	2101      	movs	r1, #1
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f00b fefa 	bl	800c804 <CDC_Transmit_FS>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d0f8      	beq.n	8000a08 <sendByteOverUSB+0xa>
        // Esperar o hacer algo mientras el USB está ocupado
    }
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f001 f8dd 	bl	8001be4 <HAL_Init>

  /* USER CODE BEGIN Init */
  OLED_IO_Interface_t oled_hal = {
 8000a2a:	4a45      	ldr	r2, [pc, #276]	@ (8000b40 <main+0x120>)
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a34:	e883 0003 	stmia.w	r3, {r0, r1}
      .Write = oled_hal_write,
      .WriteSingle = oled_hal_write_single
  };

  OLED_RegisterIO(&oled_hal);
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fb3d 	bl	80010bc <OLED_RegisterIO>

  UNER_Init(&tx, bufTx, &rx, bufRx);
 8000a42:	4b40      	ldr	r3, [pc, #256]	@ (8000b44 <main+0x124>)
 8000a44:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <main+0x128>)
 8000a46:	4941      	ldr	r1, [pc, #260]	@ (8000b4c <main+0x12c>)
 8000a48:	4841      	ldr	r0, [pc, #260]	@ (8000b50 <main+0x130>)
 8000a4a:	f7ff fb8d 	bl	8000168 <UNER_Init>

  UNER_SetTxFunction(sendByteOverUSB);
 8000a4e:	4841      	ldr	r0, [pc, #260]	@ (8000b54 <main+0x134>)
 8000a50:	f7ff fb7c 	bl	800014c <UNER_SetTxFunction>

  CDC_Attach_RX_Funct(&UNER_OnRxByte);
 8000a54:	4840      	ldr	r0, [pc, #256]	@ (8000b58 <main+0x138>)
 8000a56:	f00b fefb 	bl	800c850 <CDC_Attach_RX_Funct>

  /* USER CODE END Init */


  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f895 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 faed 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a62:	f000 fac5 	bl	8000ff0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000a66:	f00b fdf3 	bl	800c650 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000a6a:	f000 f97f 	bl	8000d6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a6e:	f000 f9ab 	bl	8000dc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a72:	f000 fa49 	bl	8000f08 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000a76:	f000 f8e5 	bl	8000c44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  UNER_SetAppCallback(UNER_AppHandler);
 8000a7a:	4838      	ldr	r0, [pc, #224]	@ (8000b5c <main+0x13c>)
 8000a7c:	f7ff fed2 	bl	8000824 <UNER_SetAppCallback>


  // Inicializacion PWM motores
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a80:	2100      	movs	r1, #0
 8000a82:	4837      	ldr	r0, [pc, #220]	@ (8000b60 <main+0x140>)
 8000a84:	f007 f956 	bl	8007d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4836      	ldr	r0, [pc, #216]	@ (8000b64 <main+0x144>)
 8000a8c:	f007 f952 	bl	8007d34 <HAL_TIM_PWM_Start>

  leftMotorSpeed = 0;
 8000a90:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <main+0x148>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
  rightMotorSpeed = 0;
 8000a96:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x14c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  Motor_Set(0, 0);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff66 	bl	8000970 <Motor_Set>
  Motor_Set(1, 80);
 8000aa4:	2150      	movs	r1, #80	@ 0x50
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff62 	bl	8000970 <Motor_Set>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_valores, NUM_SENSORES);
 8000aac:	2208      	movs	r2, #8
 8000aae:	4930      	ldr	r1, [pc, #192]	@ (8000b70 <main+0x150>)
 8000ab0:	4830      	ldr	r0, [pc, #192]	@ (8000b74 <main+0x154>)
 8000ab2:	f001 f9d1 	bl	8001e58 <HAL_ADC_Start_DMA>

  Oled_Init();
 8000ab6:	f7ff ff97 	bl	80009e8 <Oled_Init>
  SSD1306_Clear();
 8000aba:	f000 fdba 	bl	8001632 <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UNER_SerialTask(&tx,&rx);
 8000abe:	4922      	ldr	r1, [pc, #136]	@ (8000b48 <main+0x128>)
 8000ac0:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <main+0x130>)
 8000ac2:	f7ff fb8f 	bl	80001e4 <UNER_SerialTask>


	  char texto[20];
	  SSD1306_GotoXY(0, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 fcf9 	bl	80014c0 <SSD1306_GotoXY>
	  sprintf(texto, "LSPD: %4d", leftMotorSpeed);
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <main+0x148>)
 8000ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4927      	ldr	r1, [pc, #156]	@ (8000b78 <main+0x158>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00c fa7e 	bl	800cfdc <siprintf>
	  SSD1306_Puts("   ", &Font_11x18, SSD1306_COLOR_WHITE); // limpiar línea
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4926      	ldr	r1, [pc, #152]	@ (8000b7c <main+0x15c>)
 8000ae4:	4826      	ldr	r0, [pc, #152]	@ (8000b80 <main+0x160>)
 8000ae6:	f000 fd7f 	bl	80015e8 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 0);
 8000aea:	2100      	movs	r1, #0
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 fce7 	bl	80014c0 <SSD1306_GotoXY>
	  SSD1306_Puts(texto, &Font_11x18, SSD1306_COLOR_BLACK);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	4921      	ldr	r1, [pc, #132]	@ (8000b7c <main+0x15c>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fd75 	bl	80015e8 <SSD1306_Puts>

	  SSD1306_GotoXY(0, 25);
 8000afe:	2119      	movs	r1, #25
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fcdd 	bl	80014c0 <SSD1306_GotoXY>
	  sprintf(texto, "RSPD: %4d", rightMotorSpeed);
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <main+0x14c>)
 8000b08:	f993 3000 	ldrsb.w	r3, [r3]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	491c      	ldr	r1, [pc, #112]	@ (8000b84 <main+0x164>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00c fa62 	bl	800cfdc <siprintf>
	  SSD1306_Puts("   ", &Font_11x18, SSD1306_COLOR_WHITE); // limpiar línea
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4918      	ldr	r1, [pc, #96]	@ (8000b7c <main+0x15c>)
 8000b1c:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <main+0x160>)
 8000b1e:	f000 fd63 	bl	80015e8 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 25);
 8000b22:	2119      	movs	r1, #25
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fccb 	bl	80014c0 <SSD1306_GotoXY>
	  SSD1306_Puts(texto, &Font_11x18, SSD1306_COLOR_BLACK);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <main+0x15c>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fd59 	bl	80015e8 <SSD1306_Puts>

	  SSD1306_Task();
 8000b36:	f000 facf 	bl	80010d8 <SSD1306_Task>
  {
 8000b3a:	bf00      	nop
 8000b3c:	e7bf      	b.n	8000abe <main+0x9e>
 8000b3e:	bf00      	nop
 8000b40:	0800d978 	.word	0x0800d978
 8000b44:	200003a0 	.word	0x200003a0
 8000b48:	200005a0 	.word	0x200005a0
 8000b4c:	200004a0 	.word	0x200004a0
 8000b50:	200005ac 	.word	0x200005ac
 8000b54:	080009ff 	.word	0x080009ff
 8000b58:	08000249 	.word	0x08000249
 8000b5c:	08000935 	.word	0x08000935
 8000b60:	20000310 	.word	0x20000310
 8000b64:	20000358 	.word	0x20000358
 8000b68:	200005b4 	.word	0x200005b4
 8000b6c:	200005b5 	.word	0x200005b5
 8000b70:	200005b8 	.word	0x200005b8
 8000b74:	20000204 	.word	0x20000204
 8000b78:	0800d95c 	.word	0x0800d95c
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	0800d968 	.word	0x0800d968
 8000b84:	0800d96c 	.word	0x0800d96c

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	@ 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b92:	2228      	movs	r2, #40	@ 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00c fa42 	bl	800d020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 fb4e 	bl	8007280 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bea:	f000 fa61 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 fdba 	bl	8007784 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c16:	f000 fa4b 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c1a:	2312      	movs	r3, #18
 8000c1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c22:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 ff24 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c36:	f000 fa3b 	bl	80010b0 <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3750      	adds	r7, #80	@ 0x50
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c56:	4a44      	ldr	r2, [pc, #272]	@ (8000d68 <MX_ADC1_Init+0x124>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c5a:	4b42      	ldr	r3, [pc, #264]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c62:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b3e      	ldr	r3, [pc, #248]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c70:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c76:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c82:	4838      	ldr	r0, [pc, #224]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000c84:	f001 f810 	bl	8001ca8 <HAL_ADC_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c8e:	f000 fa0f 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000ca4:	f001 f9c8 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f9ff 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482a      	ldr	r0, [pc, #168]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000cbc:	f001 f9bc 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000cc6:	f000 f9f3 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4824      	ldr	r0, [pc, #144]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000cd4:	f001 f9b0 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000cde:	f000 f9e7 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000cec:	f001 f9a4 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000cf6:	f000 f9db 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000d04:	f001 f998 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000d0e:	f000 f9cf 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d12:	2306      	movs	r3, #6
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000d1c:	f001 f98c 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000d26:	f000 f9c3 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000d34:	f001 f980 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d3e:	f000 f9b7 	bl	80010b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d42:	2308      	movs	r3, #8
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_ADC1_Init+0x120>)
 8000d4c:	f001 f974 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d56:	f000 f9ab 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000204 	.word	0x20000204
 8000d68:	40012400 	.word	0x40012400

08000d6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <MX_I2C1_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_I2C1_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_I2C1_Init+0x50>)
 8000daa:	f002 f85b 	bl	8002e64 <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 f97c 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000278 	.word	0x20000278
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	00061a80 	.word	0x00061a80

08000dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b096      	sub	sp, #88	@ 0x58
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00c f90d 	bl	800d020 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e08:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <MX_TIM1_Init+0x13c>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e0e:	2247      	movs	r2, #71	@ 0x47
 8000e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e18:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e1a:	2263      	movs	r2, #99	@ 0x63
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4833      	ldr	r0, [pc, #204]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e32:	f006 fed7 	bl	8007be4 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e3c:	f000 f938 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482c      	ldr	r0, [pc, #176]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e4e:	f007 f8d5 	bl	8007ffc <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e58:	f000 f92a 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e5c:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e5e:	f006 ff10 	bl	8007c82 <HAL_TIM_PWM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e68:	f000 f922 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4821      	ldr	r0, [pc, #132]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000e7c:	f007 fc36 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e86:	f000 f913 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	2360      	movs	r3, #96	@ 0x60
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000eb0:	f006 ffe2 	bl	8007e78 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000eba:	f000 f8f9 	bl	80010b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000ee2:	f007 fc61 	bl	80087a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000eec:	f000 f8e0 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <MX_TIM1_Init+0x138>)
 8000ef2:	f000 fd29 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3758      	adds	r7, #88	@ 0x58
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000310 	.word	0x20000310
 8000f04:	40012c00 	.word	0x40012c00

08000f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	@ 0x38
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f42:	2247      	movs	r2, #71	@ 0x47
 8000f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f4e:	2263      	movs	r2, #99	@ 0x63
 8000f50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f5e:	4823      	ldr	r0, [pc, #140]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f60:	f006 fe40 	bl	8007be4 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000f6a:	f000 f8a1 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481c      	ldr	r0, [pc, #112]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f7c:	f007 f83e 	bl	8007ffc <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f86:	f000 f893 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f8a:	4818      	ldr	r0, [pc, #96]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000f8c:	f006 fe79 	bl	8007c82 <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000f96:	f000 f88b 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000faa:	f007 fb9f 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000fb4:	f000 f87c 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb8:	2360      	movs	r3, #96	@ 0x60
 8000fba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000fd0:	f006 ff52 	bl	8007e78 <HAL_TIM_PWM_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000fda:	f000 f869 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM2_Init+0xe4>)
 8000fe0:	f000 fcb2 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3738      	adds	r7, #56	@ 0x38
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000358 	.word	0x20000358

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_DMA_Init+0x48>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <MX_DMA_Init+0x48>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <MX_DMA_Init+0x48>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	200b      	movs	r0, #11
 8001014:	f001 fae1 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001018:	200b      	movs	r0, #11
 800101a:	f001 fafa 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2010      	movs	r0, #16
 8001024:	f001 fad9 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001028:	2010      	movs	r0, #16
 800102a:	f001 faf2 	bl	8002612 <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a19      	ldr	r2, [pc, #100]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_GPIO_Init+0x70>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_GPIO_Init+0x70>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <MX_GPIO_Init+0x70>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <OLED_RegisterIO>:

#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void OLED_RegisterIO(const OLED_IO_Interface_t* io) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    oled_io = io;
 80010c4:	4a03      	ldr	r2, [pc, #12]	@ (80010d4 <OLED_RegisterIO+0x18>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200009d4 	.word	0x200009d4

080010d8 <SSD1306_Task>:

void SSD1306_Task(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	if (ssd_update_done) {
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <SSD1306_Task+0x18>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SSD1306_Task+0x12>
		SSD1306_UpdateScreen(); // lanza siguiente refresco
 80010e6:	f000 f901 	bl	80012ec <SSD1306_UpdateScreen>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <SSD1306_Init>:
        }
    }
}


uint8_t SSD1306_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
    //USB_Debug("SSD1306_Init: Inicializando I2C...\r\n");
    SSD1306_I2C_Init();
 80010fa:	f000 faa3 	bl	8001644 <SSD1306_I2C_Init>

    //USB_Debug("SSD1306_Init: Comprobando I2C addr=0x%02X...\r\n", SSD1306_I2C_ADDR);
    if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 2000) != HAL_OK) {
 80010fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001102:	2201      	movs	r2, #1
 8001104:	2178      	movs	r1, #120	@ 0x78
 8001106:	485a      	ldr	r0, [pc, #360]	@ (8001270 <SSD1306_Init+0x17c>)
 8001108:	f002 fa58 	bl	80035bc <HAL_I2C_IsDeviceReady>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SSD1306_Init+0x22>
        //USB_Debug("SSD1306_Init: ERROR, no responde I2C\r\n");
        return 0;
 8001112:	2300      	movs	r3, #0
 8001114:	e0a7      	b.n	8001266 <SSD1306_Init+0x172>
    }
    //USB_Debug("SSD1306_Init: I2C OK\r\n");

    //USB_Debug("SSD1306_Init: Retardo inicial...\r\n");
    for (volatile uint32_t p = 250000; p; --p) { __NOP(); }
 8001116:	4b57      	ldr	r3, [pc, #348]	@ (8001274 <SSD1306_Init+0x180>)
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	e003      	b.n	8001124 <SSD1306_Init+0x30>
 800111c:	bf00      	nop
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f8      	bne.n	800111c <SSD1306_Init+0x28>

    //USB_Debug("SSD1306_Init: Enviando comandos de init...\r\n");
    SSD1306_WRITECOMMAND(0xAE);
 800112a:	22ae      	movs	r2, #174	@ 0xae
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	@ 0x78
 8001130:	f000 fa9c 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	@ 0x78
 800113a:	f000 fa97 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 800113e:	2210      	movs	r2, #16
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	@ 0x78
 8001144:	f000 fa92 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xB0);
 8001148:	22b0      	movs	r2, #176	@ 0xb0
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	@ 0x78
 800114e:	f000 fa8d 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xC8);
 8001152:	22c8      	movs	r2, #200	@ 0xc8
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fa88 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 fa83 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8001166:	2210      	movs	r2, #16
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 fa7e 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40);
 8001170:	2240      	movs	r2, #64	@ 0x40
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	@ 0x78
 8001176:	f000 fa79 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x81);
 800117a:	2281      	movs	r2, #129	@ 0x81
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f000 fa74 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);
 8001184:	22ff      	movs	r2, #255	@ 0xff
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	@ 0x78
 800118a:	f000 fa6f 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA1);
 800118e:	22a1      	movs	r2, #161	@ 0xa1
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f000 fa6a 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA6);
 8001198:	22a6      	movs	r2, #166	@ 0xa6
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fa65 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA8);
 80011a2:	22a8      	movs	r2, #168	@ 0xa8
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	@ 0x78
 80011a8:	f000 fa60 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x3F);
 80011ac:	223f      	movs	r2, #63	@ 0x3f
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	@ 0x78
 80011b2:	f000 fa5b 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA4);
 80011b6:	22a4      	movs	r2, #164	@ 0xa4
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 fa56 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD3);
 80011c0:	22d3      	movs	r2, #211	@ 0xd3
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	@ 0x78
 80011c6:	f000 fa51 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	@ 0x78
 80011d0:	f000 fa4c 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD5);
 80011d4:	22d5      	movs	r2, #213	@ 0xd5
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	@ 0x78
 80011da:	f000 fa47 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xF0);
 80011de:	22f0      	movs	r2, #240	@ 0xf0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	@ 0x78
 80011e4:	f000 fa42 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD9);
 80011e8:	22d9      	movs	r2, #217	@ 0xd9
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	@ 0x78
 80011ee:	f000 fa3d 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 80011f2:	2222      	movs	r2, #34	@ 0x22
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	@ 0x78
 80011f8:	f000 fa38 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDA);
 80011fc:	22da      	movs	r2, #218	@ 0xda
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	@ 0x78
 8001202:	f000 fa33 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x12);
 8001206:	2212      	movs	r2, #18
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	@ 0x78
 800120c:	f000 fa2e 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xDB);
 8001210:	22db      	movs	r2, #219	@ 0xdb
 8001212:	2100      	movs	r1, #0
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 fa29 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);
 800121a:	2220      	movs	r2, #32
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	@ 0x78
 8001220:	f000 fa24 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x8D);
 8001224:	228d      	movs	r2, #141	@ 0x8d
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	@ 0x78
 800122a:	f000 fa1f 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14);
 800122e:	2214      	movs	r2, #20
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	@ 0x78
 8001234:	f000 fa1a 	bl	800166c <SSD1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xAF);
 8001238:	22af      	movs	r2, #175	@ 0xaf
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	@ 0x78
 800123e:	f000 fa15 	bl	800166c <SSD1306_I2C_Write>

    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001242:	222e      	movs	r2, #46	@ 0x2e
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f000 fa10 	bl	800166c <SSD1306_I2C_Write>
    //USB_Debug("SSD1306_Init: Comandos init enviados\r\n");

    //USB_Debug("SSD1306_Init: Limpiando pantalla...\r\n");
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f8c1 	bl	80013d4 <SSD1306_Fill>


    SSD1306.CurrentX = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <SSD1306_Init+0x184>)
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <SSD1306_Init+0x184>)
 800125a:	2200      	movs	r2, #0
 800125c:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SSD1306_Init+0x184>)
 8001260:	2201      	movs	r2, #1
 8001262:	715a      	strb	r2, [r3, #5]

    //USB_Debug("SSD1306_Init: COMPLETADO\r\n");
    return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000278 	.word	0x20000278
 8001274:	0003d090 	.word	0x0003d090
 8001278:	200009cc 	.word	0x200009cc

0800127c <SSD1306_UpdateScreen_Blocking>:

void SSD1306_UpdateScreen_Blocking(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b0a2      	sub	sp, #136	@ 0x88
 8001280:	af00      	add	r7, sp, #0
    //USB_Debug("SSD1306_UpdateScreen_Blocking: Comenzando actualizacion (blocking)\r\n");

    // buffer temporal: 1 byte de control + 128 bytes de datos
    uint8_t buf[1 + SSD1306_WIDTH];

    for (uint8_t m = 0; m < 8; m++) {
 8001282:	2300      	movs	r3, #0
 8001284:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001288:	e024      	b.n	80012d4 <SSD1306_UpdateScreen_Blocking+0x58>
        //USB_Debug("SSD1306_UpdateScreen_Blocking: Pagina %u\r\n", m);

        // 1) envía comandos de posicionamiento
        SSD1306_WRITECOMMAND(0xB0 + m);
 800128a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800128e:	3b50      	subs	r3, #80	@ 0x50
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	@ 0x78
 8001298:	f000 f9e8 	bl	800166c <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	@ 0x78
 80012a2:	f000 f9e3 	bl	800166c <SSD1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 80012a6:	2210      	movs	r2, #16
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	@ 0x78
 80012ac:	f000 f9de 	bl	800166c <SSD1306_I2C_Write>

        // 2) monta el paquete de datos: control=0x40 + página de 128 bytes
        buf[0] = 0x40;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	713b      	strb	r3, [r7, #4]
        memcpy(&buf[1],
               &SSD1306_Buffer[SSD1306_WIDTH * m],
 80012b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <SSD1306_UpdateScreen_Blocking+0x6c>)
 80012bc:	1899      	adds	r1, r3, r2
        memcpy(&buf[1],
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	3301      	adds	r3, #1
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00b fedf 	bl	800d088 <memcpy>
    for (uint8_t m = 0; m < 8; m++) {
 80012ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80012ce:	3301      	adds	r3, #1
 80012d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80012d4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d9d6      	bls.n	800128a <SSD1306_UpdateScreen_Blocking+0xe>

        // 3) envía todo con HAL_I2C_Master_Transmit (bloqueante)
    }

    //USB_Debug("SSD1306_UpdateScreen_Blocking: Pantalla actualizada (blocking)\r\n");
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3788      	adds	r7, #136	@ 0x88
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200005cc 	.word	0x200005cc

080012ec <SSD1306_UpdateScreen>:



void SSD1306_UpdateScreen(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
    static uint8_t page  = 0;
    static uint8_t state = 0; // 0=idle,1=prep,2=waiting DMA
    uint8_t counter = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]

    switch (state) {
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <SSD1306_UpdateScreen+0xd4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d037      	beq.n	800136e <SSD1306_UpdateScreen+0x82>
 80012fe:	2b02      	cmp	r3, #2
 8001300:	dc59      	bgt.n	80013b6 <SSD1306_UpdateScreen+0xca>
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <SSD1306_UpdateScreen+0x20>
 8001306:	2b01      	cmp	r3, #1
 8001308:	d009      	beq.n	800131e <SSD1306_UpdateScreen+0x32>
            		////USB_Debug("SSD1306_Update: esperando fin de DMA, flag busy=%u\r\n", i2c1_tx_busy);
            	}
            }
            break;
    }
}
 800130a:	e054      	b.n	80013b6 <SSD1306_UpdateScreen+0xca>
            page             = 0;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
            ssd_update_done  = 0;  // marca que el refresco está en curso
 8001312:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <SSD1306_UpdateScreen+0xdc>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
            state            = 1;
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <SSD1306_UpdateScreen+0xd4>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
            if (!i2c1_tx_busy) {
 800131e:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <SSD1306_UpdateScreen+0xe0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d143      	bne.n	80013b0 <SSD1306_UpdateScreen+0xc4>
                SSD1306_WRITECOMMAND(0xB0 + page);
 8001328:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3b50      	subs	r3, #80	@ 0x50
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f000 f999 	bl	800166c <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x00);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	@ 0x78
 8001340:	f000 f994 	bl	800166c <SSD1306_I2C_Write>
                SSD1306_WRITECOMMAND(0x10);
 8001344:	2210      	movs	r2, #16
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	@ 0x78
 800134a:	f000 f98f 	bl	800166c <SSD1306_I2C_Write>
                uint8_t *buf = &SSD1306_Buffer[SSD1306_WIDTH * page];
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	4a1e      	ldr	r2, [pc, #120]	@ (80013d0 <SSD1306_UpdateScreen+0xe4>)
 8001356:	4413      	add	r3, r2
 8001358:	603b      	str	r3, [r7, #0]
                SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, buf, SSD1306_WIDTH);
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	2140      	movs	r1, #64	@ 0x40
 8001360:	2078      	movs	r0, #120	@ 0x78
 8001362:	f000 f999 	bl	8001698 <SSD1306_I2C_WriteMulti>
                state = 2;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <SSD1306_UpdateScreen+0xd4>)
 8001368:	2202      	movs	r2, #2
 800136a:	701a      	strb	r2, [r3, #0]
            break;
 800136c:	e020      	b.n	80013b0 <SSD1306_UpdateScreen+0xc4>
            if (!i2c1_tx_busy) {
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <SSD1306_UpdateScreen+0xe0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d114      	bne.n	80013a2 <SSD1306_UpdateScreen+0xb6>
                page++;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 8001382:	701a      	strb	r2, [r3, #0]
                if (page < 8) {
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <SSD1306_UpdateScreen+0xd8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d803      	bhi.n	8001394 <SSD1306_UpdateScreen+0xa8>
                    state = 1;  // preparamos la siguiente página
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <SSD1306_UpdateScreen+0xd4>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
            break;
 8001392:	e00f      	b.n	80013b4 <SSD1306_UpdateScreen+0xc8>
                    ssd_update_done = 1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <SSD1306_UpdateScreen+0xdc>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
                    state           = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <SSD1306_UpdateScreen+0xd4>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
            break;
 80013a0:	e008      	b.n	80013b4 <SSD1306_UpdateScreen+0xc8>
            	if (counter <= 10) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d805      	bhi.n	80013b4 <SSD1306_UpdateScreen+0xc8>
            		counter++;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3301      	adds	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
            break;
 80013ae:	e001      	b.n	80013b4 <SSD1306_UpdateScreen+0xc8>
            break;
 80013b0:	bf00      	nop
 80013b2:	e000      	b.n	80013b6 <SSD1306_UpdateScreen+0xca>
            break;
 80013b4:	bf00      	nop
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200009d8 	.word	0x200009d8
 80013c4:	200009d9 	.word	0x200009d9
 80013c8:	20000000 	.word	0x20000000
 80013cc:	200005b6 	.word	0x200005b6
 80013d0:	200005cc 	.word	0x200005cc

080013d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <SSD1306_Fill+0x14>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e000      	b.n	80013ea <SSD1306_Fill+0x16>
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ee:	4619      	mov	r1, r3
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <SSD1306_Fill+0x2c>)
 80013f2:	f00b fe15 	bl	800d020 <memset>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200005cc 	.word	0x200005cc

08001404 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	460b      	mov	r3, r1
 8001410:	80bb      	strh	r3, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	70fb      	strb	r3, [r7, #3]
	if (
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	2b7f      	cmp	r3, #127	@ 0x7f
 800141a:	d848      	bhi.n	80014ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001420:	d845      	bhi.n	80014ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <SSD1306_DrawPixel+0xb4>)
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d11a      	bne.n	8001474 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	b298      	uxth	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	01db      	lsls	r3, r3, #7
 800144a:	4413      	add	r3, r2
 800144c:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <SSD1306_DrawPixel+0xb8>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b259      	sxtb	r1, r3
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	4603      	mov	r3, r0
 8001468:	01db      	lsls	r3, r3, #7
 800146a:	4413      	add	r3, r2
 800146c:	b2c9      	uxtb	r1, r1
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <SSD1306_DrawPixel+0xb8>)
 8001470:	54d1      	strb	r1, [r2, r3]
 8001472:	e01d      	b.n	80014b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	b298      	uxth	r0, r3
 800147c:	4603      	mov	r3, r0
 800147e:	01db      	lsls	r3, r3, #7
 8001480:	4413      	add	r3, r2
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <SSD1306_DrawPixel+0xb8>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	b25a      	sxtb	r2, r3
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	b25b      	sxtb	r3, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4013      	ands	r3, r2
 800149c:	b259      	sxtb	r1, r3
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	4603      	mov	r3, r0
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4413      	add	r3, r2
 80014a6:	b2c9      	uxtb	r1, r1
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <SSD1306_DrawPixel+0xb8>)
 80014aa:	54d1      	strb	r1, [r2, r3]
 80014ac:	e000      	b.n	80014b0 <SSD1306_DrawPixel+0xac>
		return;
 80014ae:	bf00      	nop
	}
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200009cc 	.word	0x200009cc
 80014bc:	200005cc 	.word	0x200005cc

080014c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	4613      	mov	r3, r2
 80014ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014d0:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SSD1306_GotoXY+0x28>)
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <SSD1306_GotoXY+0x28>)
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	8053      	strh	r3, [r2, #2]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200009cc 	.word	0x200009cc

080014ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014fc:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <SSD1306_Putc+0xf8>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
	if (
 8001508:	2b7f      	cmp	r3, #127	@ 0x7f
 800150a:	dc07      	bgt.n	800151c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <SSD1306_Putc+0xf8>)
 800150e:	885b      	ldrh	r3, [r3, #2]
 8001510:	461a      	mov	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001518:	2b3f      	cmp	r3, #63	@ 0x3f
 800151a:	dd01      	ble.n	8001520 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800151c:	2300      	movs	r3, #0
 800151e:	e05d      	b.n	80015dc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e04b      	b.n	80015be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3b20      	subs	r3, #32
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	7849      	ldrb	r1, [r1, #1]
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4619      	mov	r1, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	440b      	add	r3, r1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	e030      	b.n	80015ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <SSD1306_Putc+0xf8>)
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b298      	uxth	r0, r3
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <SSD1306_Putc+0xf8>)
 8001568:	885a      	ldrh	r2, [r3, #2]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff ff45 	bl	8001404 <SSD1306_DrawPixel>
 800157a:	e014      	b.n	80015a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <SSD1306_Putc+0xf8>)
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b298      	uxth	r0, r3
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <SSD1306_Putc+0xf8>)
 800158a:	885a      	ldrh	r2, [r3, #2]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b299      	uxth	r1, r3
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	f7ff ff2f 	bl	8001404 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3301      	adds	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d3c8      	bcc.n	800154a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	461a      	mov	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d3ad      	bcc.n	8001526 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <SSD1306_Putc+0xf8>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <SSD1306_Putc+0xf8>)
 80015d8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80015da:	79fb      	ldrb	r3, [r7, #7]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200009cc 	.word	0x200009cc

080015e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015f6:	e012      	b.n	800161e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff73 	bl	80014ec <SSD1306_Putc>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d002      	beq.n	8001618 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	e008      	b.n	800162a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1e8      	bne.n	80015f8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	781b      	ldrb	r3, [r3, #0]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fecc 	bl	80013d4 <SSD1306_Fill>
	SSD1306_UpdateScreen_Blocking();
 800163c:	f7ff fe1e 	bl	800127c <SSD1306_UpdateScreen_Blocking>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <SSD1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void SSD1306_I2C_Init() {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <SSD1306_I2C_Init+0x24>)
 800164c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800164e:	e002      	b.n	8001656 <SSD1306_I2C_Init+0x12>
		p--;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <SSD1306_I2C_Init+0xc>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	0003d090 	.word	0x0003d090

0800166c <SSD1306_I2C_Write>:



void SSD1306_I2C_Write(uint8_t address, uint8_t control, uint8_t databyte) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
	  oled_io->WriteSingle(address, control, databyte);
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SSD1306_I2C_Write+0x28>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	797a      	ldrb	r2, [r7, #5]
 8001686:	79b9      	ldrb	r1, [r7, #6]
 8001688:	79f8      	ldrb	r0, [r7, #7]
 800168a:	4798      	blx	r3
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200009d4 	.word	0x200009d4

08001698 <SSD1306_I2C_WriteMulti>:



void SSD1306_I2C_WriteMulti(uint8_t addr, uint8_t ctrl, uint8_t* data, uint16_t len) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	603a      	str	r2, [r7, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	460b      	mov	r3, r1
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	4613      	mov	r3, r2
 80016ac:	80bb      	strh	r3, [r7, #4]
	i2c1_tx_busy = 1;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <SSD1306_I2C_WriteMulti+0x34>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
	oled_io->Write(SSD1306_I2C_ADDR, ctrl,data,len);
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <SSD1306_I2C_WriteMulti+0x38>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681c      	ldr	r4, [r3, #0]
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	79b9      	ldrb	r1, [r7, #6]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	2078      	movs	r0, #120	@ 0x78
 80016c2:	47a0      	blx	r4
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	200005b6 	.word	0x200005b6
 80016d0:	200009d4 	.word	0x200009d4

080016d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x60>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_MspInit+0x60>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a28      	ldr	r2, [pc, #160]	@ (80017f4 <HAL_ADC_MspInit+0xbc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d149      	bne.n	80017ec <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a26      	ldr	r2, [pc, #152]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001788:	23ff      	movs	r3, #255	@ 0xff
 800178a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178c:	2303      	movs	r3, #3
 800178e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4819      	ldr	r0, [pc, #100]	@ (80017fc <HAL_ADC_MspInit+0xc4>)
 8001798:	f001 f9c8 	bl	8002b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_ADC_MspInit+0xcc>)
 80017a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017bc:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017d2:	f000 ff39 	bl	8002648 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80017dc:	f7ff fc68 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017e4:	621a      	str	r2, [r3, #32]
 80017e6:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40012400 	.word	0x40012400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800
 8001800:	20000234 	.word	0x20000234
 8001804:	40020008 	.word	0x40020008

08001808 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2c      	ldr	r2, [pc, #176]	@ (80018d4 <HAL_I2C_MspInit+0xcc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d151      	bne.n	80018cc <HAL_I2C_MspInit+0xc4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a2a      	ldr	r2, [pc, #168]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001840:	23c0      	movs	r3, #192	@ 0xc0
 8001842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001844:	2312      	movs	r3, #18
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	@ (80018dc <HAL_I2C_MspInit+0xd4>)
 8001854:	f001 f96a 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 800185e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001862:	61d3      	str	r3, [r2, #28]
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_I2C_MspInit+0xd0>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <HAL_I2C_MspInit+0xdc>)
 8001874:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 8001878:	2210      	movs	r2, #16
 800187a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80018a0:	480f      	ldr	r0, [pc, #60]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 80018a2:	f000 fed1 	bl	8002648 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80018ac:	f7ff fc00 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_I2C_MspInit+0xd8>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	201f      	movs	r0, #31
 80018c2:	f000 fe8a 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018c6:	201f      	movs	r0, #31
 80018c8:	f000 fea3 	bl	8002612 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	200002cc 	.word	0x200002cc
 80018e4:	4002006c 	.word	0x4002006c

080018e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <HAL_TIM_Base_MspInit+0x58>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10c      	bne.n	8001914 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 8001900:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001912:	e010      	b.n	8001936 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191c:	d10b      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_TIM_Base_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a28      	ldr	r2, [pc, #160]	@ (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d119      	bne.n	800199c <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	481d      	ldr	r0, [pc, #116]	@ (8001a0c <HAL_TIM_MspPostInit+0xc4>)
 8001996:	f001 f8c9 	bl	8002b2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800199a:	e02e      	b.n	80019fa <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a4:	d129      	bne.n	80019fa <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_TIM_MspPostInit+0xc0>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019be:	2308      	movs	r3, #8
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <HAL_TIM_MspPostInit+0xc8>)
 80019d2:	f001 f8ab 	bl	8002b2c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_TIM_MspPostInit+0xcc>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_TIM_MspPostInit+0xcc>)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	6053      	str	r3, [r2, #4]
}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40010000 	.word	0x40010000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <NMI_Handler+0x4>

08001a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <MemManage_Handler+0x4>

08001a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f902 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <DMA1_Channel1_IRQHandler+0x10>)
 8001a76:	f000 ff19 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000234 	.word	0x20000234

08001a84 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <DMA1_Channel6_IRQHandler+0x10>)
 8001a8a:	f000 ff0f 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002cc 	.word	0x200002cc

08001a98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001a9e:	f003 ffab 	bl	80059f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200016b0 	.word	0x200016b0

08001aac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <I2C1_EV_IRQHandler+0x10>)
 8001ab2:	f001 feb1 	bl	8003818 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000278 	.word	0x20000278

08001ac0 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d105      	bne.n	8001ade <HAL_I2C_MemTxCpltCallback+0x1e>
	    	ssd_update_done = 1;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_I2C_MemTxCpltCallback+0x2c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
	    	i2c1_tx_busy = 0;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_I2C_MemTxCpltCallback+0x30>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
	    }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	20000000 	.word	0x20000000
 8001af0:	200005b6 	.word	0x200005b6

08001af4 <HAL_ADC_ConvCpltCallback>:
//    	i2c1_tx_busy = 0;
//    }
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d102      	bne.n	8001b0c <HAL_ADC_ConvCpltCallback+0x18>
        sensores_listos = 1;
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_ADC_ConvCpltCallback+0x28>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40012400 	.word	0x40012400
 8001b1c:	200005c8 	.word	0x200005c8

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f00b fa6e 	bl	800d030 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20005000 	.word	0x20005000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	200009dc 	.word	0x200009dc
 8001b88:	20001cf0 	.word	0x20001cf0

08001b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff fff8 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b9e:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb4:	4c09      	ldr	r4, [pc, #36]	@ (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f00b fa3b 	bl	800d03c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc6:	f7fe ff2b 	bl	8000a20 <main>
  bx lr
 8001bca:	4770      	bx	lr
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bd4:	0800e798 	.word	0x0800e798
  ldr r2, =_sbss
 8001bd8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bdc:	20001cf0 	.word	0x20001cf0

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 fce5 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fd68 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fcfd 	bl	800262e <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 fcc5 	bl	80025da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	@ (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	20000010 	.word	0x20000010

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_IncTick+0x20>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a03      	ldr	r2, [pc, #12]	@ (8001c90 <HAL_IncTick+0x20>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000014 	.word	0x20000014
 8001c90:	200009e0 	.word	0x200009e0

08001c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b02      	ldr	r3, [pc, #8]	@ (8001ca4 <HAL_GetTick+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	200009e0 	.word	0x200009e0

08001ca8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0be      	b.n	8001e48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fd26 	bl	8001738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 faf5 	bl	80022dc <ADC_ConversionStop_Disable>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 8099 	bne.w	8001e36 <HAL_ADC_Init+0x18e>
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8095 	bne.w	8001e36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d14:	f023 0302 	bic.w	r3, r3, #2
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7b1b      	ldrb	r3, [r3, #12]
 8001d2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_Init+0xa2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_ADC_Init+0xa8>
 8001d4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4e:	e000      	b.n	8001d52 <HAL_ADC_Init+0xaa>
 8001d50:	2300      	movs	r3, #0
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7d1b      	ldrb	r3, [r3, #20]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d119      	bne.n	8001d94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7b1b      	ldrb	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	035a      	lsls	r2, r3, #13
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e00b      	b.n	8001d94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_ADC_Init+0x1a8>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc4:	d003      	beq.n	8001dce <HAL_ADC_Init+0x126>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d104      	bne.n	8001dd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	051b      	lsls	r3, r3, #20
 8001dd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <HAL_ADC_Init+0x1ac>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10b      	bne.n	8001e14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e12:	e018      	b.n	8001e46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	f023 0312 	bic.w	r3, r3, #18
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e34:	e007      	b.n	8001e46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	ffe1f7fd 	.word	0xffe1f7fd
 8001e54:	ff1f0efe 	.word	0xff1f0efe

08001e58 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a64      	ldr	r2, [pc, #400]	@ (8002000 <HAL_ADC_Start_DMA+0x1a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_Start_DMA+0x24>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a63      	ldr	r2, [pc, #396]	@ (8002004 <HAL_ADC_Start_DMA+0x1ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d106      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x32>
 8001e7c:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <HAL_ADC_Start_DMA+0x1a8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 80b3 	bne.w	8001ff0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_Start_DMA+0x40>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e0ae      	b.n	8001ff6 <HAL_ADC_Start_DMA+0x19e>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f9c1 	bl	8002228 <ADC_Enable>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 809a 	bne.w	8001fe6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a4e      	ldr	r2, [pc, #312]	@ (8002004 <HAL_ADC_Start_DMA+0x1ac>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_Start_DMA+0x84>
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <HAL_ADC_Start_DMA+0x1a8>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d115      	bne.n	8001f08 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d026      	beq.n	8001f44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001efe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f06:	e01d      	b.n	8001f44 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a39      	ldr	r2, [pc, #228]	@ (8002000 <HAL_ADC_Start_DMA+0x1a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_Start_DMA+0xd0>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a38      	ldr	r2, [pc, #224]	@ (8002004 <HAL_ADC_Start_DMA+0x1ac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d10d      	bne.n	8001f44 <HAL_ADC_Start_DMA+0xec>
 8001f28:	4b35      	ldr	r3, [pc, #212]	@ (8002000 <HAL_ADC_Start_DMA+0x1a8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f023 0206 	bic.w	r2, r3, #6
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a25      	ldr	r2, [pc, #148]	@ (8002008 <HAL_ADC_Start_DMA+0x1b0>)
 8001f72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_ADC_Start_DMA+0x1b4>)
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_ADC_Start_DMA+0x1b8>)
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f9c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a18      	ldr	r0, [r3, #32]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	334c      	adds	r3, #76	@ 0x4c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f000 fba5 	bl	80026fc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fbc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fc0:	d108      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001fd0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fe2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fe4:	e006      	b.n	8001ff4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001fee:	e001      	b.n	8001ff4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40012400 	.word	0x40012400
 8002004:	40012800 	.word	0x40012800
 8002008:	0800235f 	.word	0x0800235f
 800200c:	080023db 	.word	0x080023db
 8002010:	080023f7 	.word	0x080023f7

08002014 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x20>
 8002054:	2302      	movs	r3, #2
 8002056:	e0dc      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1da>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d81c      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b05      	subs	r3, #5
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a0:	e03c      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d81c      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b23      	subs	r3, #35	@ 0x23
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4019      	ands	r1, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b23      	subs	r3, #35	@ 0x23
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e2:	e01b      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b41      	subs	r3, #65	@ 0x41
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b41      	subs	r3, #65	@ 0x41
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d91c      	bls.n	800215e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	2207      	movs	r2, #7
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6898      	ldr	r0, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	3b1e      	subs	r3, #30
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	e019      	b.n	8002192 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6898      	ldr	r0, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d132      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_ADC_ConfigChannel+0x1e4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d126      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d11a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_ADC_ConfigChannel+0x1e8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <HAL_ADC_ConfigChannel+0x1ec>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1b2>
 80021f6:	e007      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012400 	.word	0x40012400
 8002220:	2000000c 	.word	0x2000000c
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d040      	beq.n	80022c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <ADC_Enable+0xac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <ADC_Enable+0xb0>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002264:	e002      	b.n	800226c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002272:	f7ff fd0f 	bl	8001c94 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002278:	e01f      	b.n	80022ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227a:	f7ff fd0b 	bl	8001c94 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d918      	bls.n	80022ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d011      	beq.n	80022ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1d8      	bne.n	800227a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000000c 	.word	0x2000000c
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12e      	bne.n	8002354 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002306:	f7ff fcc5 	bl	8001c94 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800230c:	e01b      	b.n	8002346 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800230e:	f7ff fcc1 	bl	8001c94 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d914      	bls.n	8002346 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10d      	bne.n	8002346 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d0dc      	beq.n	800230e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d127      	bne.n	80023c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800238e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002392:	d115      	bne.n	80023c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002398:	2b00      	cmp	r3, #0
 800239a:	d111      	bne.n	80023c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fb97 	bl	8001af4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023c6:	e004      	b.n	80023d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fe13 	bl	8002014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fe02 	bl	8002026 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff90 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff2d 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff42 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff35 	bl	8002490 <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa2 	bl	8002580 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e043      	b.n	80026e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <HAL_DMA_Init+0xa8>)
 8002666:	4413      	add	r3, r2
 8002668:	4a22      	ldr	r2, [pc, #136]	@ (80026f4 <HAL_DMA_Init+0xac>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_DMA_Init+0xb0>)
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002692:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	bffdfff8 	.word	0xbffdfff8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020000 	.word	0x40020000

080026fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_DMA_Start_IT+0x20>
 8002718:	2302      	movs	r3, #2
 800271a:	e04b      	b.n	80027b4 <HAL_DMA_Start_IT+0xb8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d13a      	bne.n	80027a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9bc 	bl	8002ad2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 020e 	orr.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 020a 	orr.w	r2, r2, #10
 8002792:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e005      	b.n	80027b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d005      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e051      	b.n	8002884 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020e 	bic.w	r2, r2, #14
 80027ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <HAL_DMA_Abort_IT+0xd4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d029      	beq.n	800285e <HAL_DMA_Abort_IT+0xa2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <HAL_DMA_Abort_IT+0xd8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_Abort_IT+0x9e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_DMA_Abort_IT+0xdc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_Abort_IT+0x98>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_DMA_Abort_IT+0xe0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d012      	beq.n	800284e <HAL_DMA_Abort_IT+0x92>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_DMA_Abort_IT+0xe4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00a      	beq.n	8002848 <HAL_DMA_Abort_IT+0x8c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_DMA_Abort_IT+0xe8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_DMA_Abort_IT+0x86>
 800283c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002840:	e00e      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 8002842:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002846:	e00b      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 8002848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800284c:	e008      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 800284e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002852:	e005      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 8002854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002858:	e002      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 800285a:	2310      	movs	r3, #16
 800285c:	e000      	b.n	8002860 <HAL_DMA_Abort_IT+0xa4>
 800285e:	2301      	movs	r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <HAL_DMA_Abort_IT+0xec>)
 8002862:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
    } 
  }
  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40020008 	.word	0x40020008
 8002894:	4002001c 	.word	0x4002001c
 8002898:	40020030 	.word	0x40020030
 800289c:	40020044 	.word	0x40020044
 80028a0:	40020058 	.word	0x40020058
 80028a4:	4002006c 	.word	0x4002006c
 80028a8:	40020000 	.word	0x40020000

080028ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d04f      	beq.n	8002974 <HAL_DMA_IRQHandler+0xc8>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a66      	ldr	r2, [pc, #408]	@ (8002a9c <HAL_DMA_IRQHandler+0x1f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d029      	beq.n	800295a <HAL_DMA_IRQHandler+0xae>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_DMA_IRQHandler+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0xaa>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_DMA_IRQHandler+0x1f8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01a      	beq.n	8002950 <HAL_DMA_IRQHandler+0xa4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a62      	ldr	r2, [pc, #392]	@ (8002aa8 <HAL_DMA_IRQHandler+0x1fc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0x9e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a60      	ldr	r2, [pc, #384]	@ (8002aac <HAL_DMA_IRQHandler+0x200>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x98>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab0 <HAL_DMA_IRQHandler+0x204>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d102      	bne.n	800293e <HAL_DMA_IRQHandler+0x92>
 8002938:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800293c:	e00e      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800293e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002942:	e00b      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002944:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002948:	e008      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800294a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800294e:	e005      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002954:	e002      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 8002956:	2340      	movs	r3, #64	@ 0x40
 8002958:	e000      	b.n	800295c <HAL_DMA_IRQHandler+0xb0>
 800295a:	2304      	movs	r3, #4
 800295c:	4a55      	ldr	r2, [pc, #340]	@ (8002ab4 <HAL_DMA_IRQHandler+0x208>)
 800295e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8094 	beq.w	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002972:	e08e      	b.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2202      	movs	r2, #2
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d056      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x186>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d051      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020a 	bic.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a38      	ldr	r2, [pc, #224]	@ (8002a9c <HAL_DMA_IRQHandler+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d029      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x166>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a37      	ldr	r2, [pc, #220]	@ (8002aa0 <HAL_DMA_IRQHandler+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x162>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a35      	ldr	r2, [pc, #212]	@ (8002aa4 <HAL_DMA_IRQHandler+0x1f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x15c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a34      	ldr	r2, [pc, #208]	@ (8002aa8 <HAL_DMA_IRQHandler+0x1fc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d012      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x156>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <HAL_DMA_IRQHandler+0x200>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x150>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a31      	ldr	r2, [pc, #196]	@ (8002ab0 <HAL_DMA_IRQHandler+0x204>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x14a>
 80029f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029f4:	e00e      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 80029f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fa:	e00b      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	e008      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a06:	e005      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a0c:	e002      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0x168>
 8002a12:	2302      	movs	r3, #2
 8002a14:	4a27      	ldr	r2, [pc, #156]	@ (8002ab4 <HAL_DMA_IRQHandler+0x208>)
 8002a16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d034      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a30:	e02f      	b.n	8002a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2208      	movs	r2, #8
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d028      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d023      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020e 	bic.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
    }
  }
  return;
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
}
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40020008 	.word	0x40020008
 8002aa0:	4002001c 	.word	0x4002001c
 8002aa4:	40020030 	.word	0x40020030
 8002aa8:	40020044 	.word	0x40020044
 8002aac:	40020058 	.word	0x40020058
 8002ab0:	4002006c 	.word	0x4002006c
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ac6:	b2db      	uxtb	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d108      	bne.n	8002b12 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b10:	e007      	b.n	8002b22 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	60da      	str	r2, [r3, #12]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b08b      	sub	sp, #44	@ 0x2c
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3e:	e169      	b.n	8002e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b40:	2201      	movs	r2, #1
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8158 	bne.w	8002e0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a9a      	ldr	r2, [pc, #616]	@ (8002dcc <HAL_GPIO_Init+0x2a0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d05e      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
 8002b68:	4a98      	ldr	r2, [pc, #608]	@ (8002dcc <HAL_GPIO_Init+0x2a0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d875      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002b6e:	4a98      	ldr	r2, [pc, #608]	@ (8002dd0 <HAL_GPIO_Init+0x2a4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d058      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
 8002b74:	4a96      	ldr	r2, [pc, #600]	@ (8002dd0 <HAL_GPIO_Init+0x2a4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d86f      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002b7a:	4a96      	ldr	r2, [pc, #600]	@ (8002dd4 <HAL_GPIO_Init+0x2a8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d052      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
 8002b80:	4a94      	ldr	r2, [pc, #592]	@ (8002dd4 <HAL_GPIO_Init+0x2a8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d869      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002b86:	4a94      	ldr	r2, [pc, #592]	@ (8002dd8 <HAL_GPIO_Init+0x2ac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d04c      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
 8002b8c:	4a92      	ldr	r2, [pc, #584]	@ (8002dd8 <HAL_GPIO_Init+0x2ac>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d863      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002b92:	4a92      	ldr	r2, [pc, #584]	@ (8002ddc <HAL_GPIO_Init+0x2b0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d046      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
 8002b98:	4a90      	ldr	r2, [pc, #576]	@ (8002ddc <HAL_GPIO_Init+0x2b0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d85d      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002b9e:	2b12      	cmp	r3, #18
 8002ba0:	d82a      	bhi.n	8002bf8 <HAL_GPIO_Init+0xcc>
 8002ba2:	2b12      	cmp	r3, #18
 8002ba4:	d859      	bhi.n	8002c5a <HAL_GPIO_Init+0x12e>
 8002ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_GPIO_Init+0x80>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002c27 	.word	0x08002c27
 8002bb0:	08002c01 	.word	0x08002c01
 8002bb4:	08002c13 	.word	0x08002c13
 8002bb8:	08002c55 	.word	0x08002c55
 8002bbc:	08002c5b 	.word	0x08002c5b
 8002bc0:	08002c5b 	.word	0x08002c5b
 8002bc4:	08002c5b 	.word	0x08002c5b
 8002bc8:	08002c5b 	.word	0x08002c5b
 8002bcc:	08002c5b 	.word	0x08002c5b
 8002bd0:	08002c5b 	.word	0x08002c5b
 8002bd4:	08002c5b 	.word	0x08002c5b
 8002bd8:	08002c5b 	.word	0x08002c5b
 8002bdc:	08002c5b 	.word	0x08002c5b
 8002be0:	08002c5b 	.word	0x08002c5b
 8002be4:	08002c5b 	.word	0x08002c5b
 8002be8:	08002c5b 	.word	0x08002c5b
 8002bec:	08002c5b 	.word	0x08002c5b
 8002bf0:	08002c09 	.word	0x08002c09
 8002bf4:	08002c1d 	.word	0x08002c1d
 8002bf8:	4a79      	ldr	r2, [pc, #484]	@ (8002de0 <HAL_GPIO_Init+0x2b4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bfe:	e02c      	b.n	8002c5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	623b      	str	r3, [r7, #32]
          break;
 8002c06:	e029      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	623b      	str	r3, [r7, #32]
          break;
 8002c10:	e024      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	3308      	adds	r3, #8
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e01f      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	330c      	adds	r3, #12
 8002c22:	623b      	str	r3, [r7, #32]
          break;
 8002c24:	e01a      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	623b      	str	r3, [r7, #32]
          break;
 8002c32:	e013      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	611a      	str	r2, [r3, #16]
          break;
 8002c46:	e009      	b.n	8002c5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c48:	2308      	movs	r3, #8
 8002c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	615a      	str	r2, [r3, #20]
          break;
 8002c52:	e003      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
          break;
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x130>
          break;
 8002c5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2bff      	cmp	r3, #255	@ 0xff
 8002c60:	d801      	bhi.n	8002c66 <HAL_GPIO_Init+0x13a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_Init+0x13e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d802      	bhi.n	8002c78 <HAL_GPIO_Init+0x14c>
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	e002      	b.n	8002c7e <HAL_GPIO_Init+0x152>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	3b08      	subs	r3, #8
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	210f      	movs	r1, #15
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80b1 	beq.w	8002e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cac:	4b4d      	ldr	r3, [pc, #308]	@ (8002de4 <HAL_GPIO_Init+0x2b8>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002de4 <HAL_GPIO_Init+0x2b8>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_GPIO_Init+0x2b8>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cc4:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_GPIO_Init+0x2bc>)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a40      	ldr	r2, [pc, #256]	@ (8002dec <HAL_GPIO_Init+0x2c0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_GPIO_Init+0x1ec>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8002df0 <HAL_GPIO_Init+0x2c4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00d      	beq.n	8002d14 <HAL_GPIO_Init+0x1e8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002df4 <HAL_GPIO_Init+0x2c8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <HAL_GPIO_Init+0x1e4>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3d      	ldr	r2, [pc, #244]	@ (8002df8 <HAL_GPIO_Init+0x2cc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_GPIO_Init+0x1e0>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x1ee>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e004      	b.n	8002d1a <HAL_GPIO_Init+0x1ee>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e002      	b.n	8002d1a <HAL_GPIO_Init+0x1ee>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_GPIO_Init+0x1ee>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4093      	lsls	r3, r2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d2a:	492f      	ldr	r1, [pc, #188]	@ (8002de8 <HAL_GPIO_Init+0x2bc>)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	492c      	ldr	r1, [pc, #176]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d52:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4928      	ldr	r1, [pc, #160]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4922      	ldr	r1, [pc, #136]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d7a:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	491e      	ldr	r1, [pc, #120]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4918      	ldr	r1, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002da2:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4914      	ldr	r1, [pc, #80]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d021      	beq.n	8002e00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	490e      	ldr	r1, [pc, #56]	@ (8002dfc <HAL_GPIO_Init+0x2d0>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e021      	b.n	8002e0e <HAL_GPIO_Init+0x2e2>
 8002dca:	bf00      	nop
 8002dcc:	10320000 	.word	0x10320000
 8002dd0:	10310000 	.word	0x10310000
 8002dd4:	10220000 	.word	0x10220000
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10120000 	.word	0x10120000
 8002de0:	10110000 	.word	0x10110000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40010800 	.word	0x40010800
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40011400 	.word	0x40011400
 8002dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_GPIO_Init+0x304>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4909      	ldr	r1, [pc, #36]	@ (8002e30 <HAL_GPIO_Init+0x304>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	3301      	adds	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f ae8e 	bne.w	8002b40 <HAL_GPIO_Init+0x14>
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	372c      	adds	r7, #44	@ 0x2c
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e50:	e003      	b.n	8002e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	041a      	lsls	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fcbc 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f004 fda4 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	@ (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	2b80      	cmp	r3, #128	@ 0x80
 8003100:	d103      	bne.n	800310a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
 8003124:	4613      	mov	r3, r2
 8003126:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7fe fdb4 	bl	8001c94 <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b20      	cmp	r3, #32
 8003138:	f040 80e0 	bne.w	80032fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	4970      	ldr	r1, [pc, #448]	@ (8003308 <HAL_I2C_Master_Transmit+0x1f4>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f002 f916 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	e0d3      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_I2C_Master_Transmit+0x50>
 8003160:	2302      	movs	r3, #2
 8003162:	e0cc      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d007      	beq.n	800318a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003198:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2221      	movs	r2, #33	@ 0x21
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2210      	movs	r2, #16
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	893a      	ldrh	r2, [r7, #8]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a50      	ldr	r2, [pc, #320]	@ (800330c <HAL_I2C_Master_Transmit+0x1f8>)
 80031ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031cc:	8979      	ldrh	r1, [r7, #10]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f001 fdfa 	bl	8004dcc <I2C_MasterRequestWrite>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e08d      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031f8:	e066      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f002 f9d4 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003220:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06b      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d11b      	bne.n	800329c <HAL_I2C_Master_Transmit+0x188>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f002 f9cb 	bl	800563c <I2C_WaitOnBTFFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e01a      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d194      	bne.n	80031fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	00100002 	.word	0x00100002
 800330c:	ffff0000 	.word	0xffff0000

08003310 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	@ 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	817b      	strh	r3, [r7, #10]
 8003322:	460b      	mov	r3, r1
 8003324:	813b      	strh	r3, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332e:	f7fe fcb1 	bl	8001c94 <HAL_GetTick>
 8003332:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	f040 812e 	bne.w	800359e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003342:	4b99      	ldr	r3, [pc, #612]	@ (80035a8 <HAL_I2C_Mem_Write_DMA+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	08db      	lsrs	r3, r3, #3
 8003348:	4a98      	ldr	r2, [pc, #608]	@ (80035ac <HAL_I2C_Mem_Write_DMA+0x29c>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a1a      	lsrs	r2, r3, #8
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3b01      	subs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d112      	bne.n	800338e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
 800338c:	e108      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d0df      	beq.n	800335c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Mem_Write_DMA+0x9a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0fa      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	@ 0x21
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2240      	movs	r2, #64	@ 0x40
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003400:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a68      	ldr	r2, [pc, #416]	@ (80035b0 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8003410:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003412:	897a      	ldrh	r2, [r7, #10]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a1 	beq.w	8003576 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d022      	beq.n	8003482 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	4a5c      	ldr	r2, [pc, #368]	@ (80035b4 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8003442:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003448:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	2200      	movs	r2, #0
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2200      	movs	r2, #0
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3310      	adds	r3, #16
 800346c:	461a      	mov	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	f7ff f943 	bl	80026fc <HAL_DMA_Start_IT>
 8003476:	4603      	mov	r3, r0
 8003478:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800347a:	7efb      	ldrb	r3, [r7, #27]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d166      	bne.n	800354e <HAL_I2C_Mem_Write_DMA+0x23e>
 8003480:	e013      	b.n	80034aa <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07a      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80034aa:	88f8      	ldrh	r0, [r7, #6]
 80034ac:	893a      	ldrh	r2, [r7, #8]
 80034ae:	8979      	ldrh	r1, [r7, #10]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	2323      	movs	r3, #35	@ 0x23
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4603      	mov	r3, r0
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f001 fd08 	bl	8004ed0 <I2C_RequestMemoryWrite>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d022      	beq.n	800350c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f976 	bl	80027bc <HAL_DMA_Abort_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e049      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003538:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003548:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e028      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e014      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	2000000c 	.word	0x2000000c
 80035ac:	14f8b589 	.word	0x14f8b589
 80035b0:	ffff0000 	.word	0xffff0000
 80035b4:	08004ffd 	.word	0x08004ffd
 80035b8:	080051bb 	.word	0x080051bb

080035bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7fe fb62 	bl	8001c94 <HAL_GetTick>
 80035d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	f040 8111 	bne.w	8003806 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2319      	movs	r3, #25
 80035ea:	2201      	movs	r2, #1
 80035ec:	4988      	ldr	r1, [pc, #544]	@ (8003810 <HAL_I2C_IsDeviceReady+0x254>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f001 fec2 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	e104      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_I2C_IsDeviceReady+0x50>
 8003608:	2302      	movs	r3, #2
 800360a:	e0fd      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d007      	beq.n	8003632 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2224      	movs	r2, #36	@ 0x24
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a70      	ldr	r2, [pc, #448]	@ (8003814 <HAL_I2C_IsDeviceReady+0x258>)
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003664:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f001 fe80 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368c:	d103      	bne.n	8003696 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0b6      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe faf3 	bl	8001c94 <HAL_GetTick>
 80036ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036de:	e025      	b.n	800372c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe fad8 	bl	8001c94 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <HAL_I2C_IsDeviceReady+0x13a>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	22a0      	movs	r2, #160	@ 0xa0
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2ba0      	cmp	r3, #160	@ 0xa0
 8003736:	d005      	beq.n	8003744 <HAL_I2C_IsDeviceReady+0x188>
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_I2C_IsDeviceReady+0x188>
 800373e:	7dbb      	ldrb	r3, [r7, #22]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0cd      	beq.n	80036e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d129      	bne.n	80037ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003768:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2319      	movs	r3, #25
 8003786:	2201      	movs	r2, #1
 8003788:	4921      	ldr	r1, [pc, #132]	@ (8003810 <HAL_I2C_IsDeviceReady+0x254>)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 fdf4 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e036      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e02c      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2319      	movs	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	490f      	ldr	r1, [pc, #60]	@ (8003810 <HAL_I2C_IsDeviceReady+0x254>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f001 fdd0 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e012      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	f4ff af32 	bcc.w	8003656 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	00100002 	.word	0x00100002
 8003814:	ffff0000 	.word	0xffff0000

08003818 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003838:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b10      	cmp	r3, #16
 8003846:	d003      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x38>
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	f040 80c1 	bne.w	80039d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_I2C_EV_IRQHandler+0x6e>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003870:	d003      	beq.n	800387a <HAL_I2C_EV_IRQHandler+0x62>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003878:	d101      	bne.n	800387e <HAL_I2C_EV_IRQHandler+0x66>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_I2C_EV_IRQHandler+0x68>
 800387e:	2300      	movs	r3, #0
 8003880:	2b01      	cmp	r3, #1
 8003882:	f000 8132 	beq.w	8003aea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x92>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d006      	beq.n	80038aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 ff75 	bl	800578c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fce1 	bl	800426a <I2C_Master_SB>
 80038a8:	e092      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0xb2>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fd56 	bl	8004374 <I2C_Master_ADD10>
 80038c8:	e082      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0xd2>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	0a5b      	lsrs	r3, r3, #9
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fd6f 	bl	80043c6 <I2C_Master_ADDR>
 80038e8:	e072      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03b      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003904:	f000 80f3 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <HAL_I2C_EV_IRQHandler+0x11c>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_I2C_EV_IRQHandler+0x11c>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f939 	bl	8003ba4 <I2C_MasterTransmit_TXE>
 8003932:	e04d      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80d6 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80cf 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	2b21      	cmp	r3, #33	@ 0x21
 8003954:	d103      	bne.n	800395e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9c0 	bl	8003cdc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395c:	e0c7      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	f040 80c4 	bne.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa2e 	bl	8003dc8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396c:	e0bf      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397c:	f000 80b7 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00f      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x194>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x194>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 faa7 	bl	8003ef8 <I2C_MasterReceive_RXNE>
 80039aa:	e011      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 809a 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0a5b      	lsrs	r3, r3, #9
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8093 	beq.w	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb5d 	bl	8004088 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ce:	e08e      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
 80039d0:	e08d      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e007      	b.n	80039f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d012      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x20e>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	0a5b      	lsrs	r3, r3, #9
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a1c:	69b9      	ldr	r1, [r7, #24]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 ff28 	bl	8004874 <I2C_Slave_ADDR>
 8003a24:	e066      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x22e>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	0a5b      	lsrs	r3, r3, #9
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 ff62 	bl	8004908 <I2C_Slave_STOPF>
 8003a44:	e056      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a46:	7bbb      	ldrb	r3, [r7, #14]
 8003a48:	2b21      	cmp	r3, #33	@ 0x21
 8003a4a:	d002      	beq.n	8003a52 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a4c:	7bbb      	ldrb	r3, [r7, #14]
 8003a4e:	2b29      	cmp	r3, #41	@ 0x29
 8003a50:	d125      	bne.n	8003a9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	09db      	lsrs	r3, r3, #7
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00f      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0x266>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	0a9b      	lsrs	r3, r3, #10
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0x266>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fe40 	bl	80046fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a7c:	e039      	b.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d033      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02d      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe6d 	bl	8004776 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a9c:	e029      	b.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00f      	beq.n	8003aca <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	0a9b      	lsrs	r3, r3, #10
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fe77 	bl	80047b6 <I2C_SlaveReceive_RXNE>
 8003ac8:	e014      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	0a5b      	lsrs	r3, r3, #9
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fea5 	bl	8004832 <I2C_SlaveReceive_BTF>
 8003ae8:	e004      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	70fb      	strb	r3, [r7, #3]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d150      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0xc8>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b21      	cmp	r3, #33	@ 0x21
 8003bce:	d14d      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d01d      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d01a      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003be2:	d016      	beq.n	8003c12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bf2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2211      	movs	r2, #17
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff75 	bl	8003afa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c10:	e060      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d107      	bne.n	8003c5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd ff33 	bl	8001ac0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c5a:	e03b      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff48 	bl	8003afa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c6a:	e033      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b21      	cmp	r3, #33	@ 0x21
 8003c70:	d005      	beq.n	8003c7e <I2C_MasterTransmit_TXE+0xda>
 8003c72:	7bbb      	ldrb	r3, [r7, #14]
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d12d      	bne.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b22      	cmp	r3, #34	@ 0x22
 8003c7c:	d12a      	bne.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c98:	e01c      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d103      	bne.n	8003cae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f88e 	bl	8003dc8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003cac:	e012      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cd2:	e7ff      	b.n	8003cd4 <I2C_MasterTransmit_TXE+0x130>
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b21      	cmp	r3, #33	@ 0x21
 8003cf4:	d164      	bne.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d24:	e04c      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d01d      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d01a      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d38:	d016      	beq.n	8003d68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2211      	movs	r2, #17
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff feca 	bl	8003afa <HAL_I2C_MasterTxCpltCallback>
}
 8003d66:	e02b      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d107      	bne.n	8003db2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fe88 	bl	8001ac0 <HAL_I2C_MemTxCpltCallback>
}
 8003db0:	e006      	b.n	8003dc0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fe9d 	bl	8003afa <HAL_I2C_MasterTxCpltCallback>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003dfe:	e077      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	121b      	asrs	r3, r3, #8
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e1a:	e069      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10b      	bne.n	8003e3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e3a:	e059      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d152      	bne.n	8003eea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b22      	cmp	r3, #34	@ 0x22
 8003e48:	d10d      	bne.n	8003e66 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e64:	e044      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b21      	cmp	r3, #33	@ 0x21
 8003e74:	d112      	bne.n	8003e9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e9a:	e029      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d124      	bne.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b21      	cmp	r3, #33	@ 0x21
 8003eaa:	d121      	bne.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd fdec 	bl	8001ac0 <HAL_I2C_MemTxCpltCallback>
}
 8003ee8:	e002      	b.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff f8fe 	bl	80030ec <I2C_Flush_DR>
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b22      	cmp	r3, #34	@ 0x22
 8003f0a:	f040 80b9 	bne.w	8004080 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d921      	bls.n	8003f66 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	f040 8096 	bne.w	8004080 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f62:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f64:	e08c      	b.n	8004080 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d07f      	beq.n	800406e <I2C_MasterReceive_RXNE+0x176>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d002      	beq.n	8003f7a <I2C_MasterReceive_RXNE+0x82>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d179      	bne.n	800406e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fba6 	bl	80056cc <I2C_WaitOnSTOPRequestThroughIT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d14c      	bne.n	8004020 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fa4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d10a      	bne.n	8003ff6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fdbd 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ff4:	e044      	b.n	8004080 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d002      	beq.n	800400a <I2C_MasterReceive_RXNE+0x112>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b20      	cmp	r3, #32
 8004008:	d103      	bne.n	8004012 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004010:	e002      	b.n	8004018 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2212      	movs	r2, #18
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fd77 	bl	8003b0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800401e:	e02f      	b.n	8004080 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800402e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fd8a 	bl	8003b80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800406c:	e008      	b.n	8004080 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407c:	605a      	str	r2, [r3, #4]
}
 800407e:	e7ff      	b.n	8004080 <I2C_MasterReceive_RXNE+0x188>
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11b      	bne.n	80040d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80040d6:	e0c4      	b.n	8004262 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d129      	bne.n	8004136 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d00a      	beq.n	800410e <I2C_MasterReceive_BTF+0x86>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d007      	beq.n	800410e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004134:	e095      	b.n	8004262 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d17d      	bne.n	800423c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d002      	beq.n	800414c <I2C_MasterReceive_BTF+0xc4>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b10      	cmp	r3, #16
 800414a:	d108      	bne.n	800415e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e016      	b.n	800418c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b04      	cmp	r3, #4
 8004162:	d002      	beq.n	800416a <I2C_MasterReceive_BTF+0xe2>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d108      	bne.n	800417c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80041e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d10a      	bne.n	8004212 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fcaf 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
}
 8004210:	e027      	b.n	8004262 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d002      	beq.n	8004226 <I2C_MasterReceive_BTF+0x19e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b20      	cmp	r3, #32
 8004224:	d103      	bne.n	800422e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
 800422c:	e002      	b.n	8004234 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2212      	movs	r2, #18
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fc69 	bl	8003b0c <HAL_I2C_MasterRxCpltCallback>
}
 800423a:	e012      	b.n	8004262 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d117      	bne.n	80042ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004296:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004298:	e067      	b.n	800436a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
}
 80042ac:	e05d      	b.n	800436a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b6:	d133      	bne.n	8004320 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b21      	cmp	r3, #33	@ 0x21
 80042c2:	d109      	bne.n	80042d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	e008      	b.n	80042ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <I2C_Master_SB+0x92>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d108      	bne.n	800430e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d032      	beq.n	800436a <I2C_Master_SB+0x100>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02d      	beq.n	800436a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800431c:	605a      	str	r2, [r3, #4]
}
 800431e:	e024      	b.n	800436a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10e      	bne.n	8004346 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432c:	b29b      	uxth	r3, r3
 800432e:	11db      	asrs	r3, r3, #7
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f063 030f 	orn	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
}
 8004344:	e011      	b.n	800436a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434a:	2b01      	cmp	r3, #1
 800434c:	d10d      	bne.n	800436a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	b29b      	uxth	r3, r3
 8004354:	11db      	asrs	r3, r3, #7
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0306 	and.w	r3, r3, #6
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f063 030e 	orn	r3, r3, #14
 8004362:	b2da      	uxtb	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	b2da      	uxtb	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <I2C_Master_ADD10+0x26>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <I2C_Master_ADD10+0x48>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ba:	605a      	str	r2, [r3, #4]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b091      	sub	sp, #68	@ 0x44
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b22      	cmp	r3, #34	@ 0x22
 80043ee:	f040 8174 	bne.w	80046da <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <I2C_Master_ADDR+0x54>
 80043fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d10b      	bne.n	800441a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	633b      	str	r3, [r7, #48]	@ 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	e16b      	b.n	80046f2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <I2C_Master_ADDR+0x98>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800442a:	d118      	bne.n	800445e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004450:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	651a      	str	r2, [r3, #80]	@ 0x50
 800445c:	e149      	b.n	80046f2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d113      	bne.n	8004490 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e120      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 808a 	bne.w	80045b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044a2:	d137      	bne.n	8004514 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c2:	d113      	bne.n	80044ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	e0f2      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e0de      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004516:	2b08      	cmp	r3, #8
 8004518:	d02e      	beq.n	8004578 <I2C_Master_ADDR+0x1b2>
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	2b20      	cmp	r3, #32
 800451e:	d02b      	beq.n	8004578 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004522:	2b12      	cmp	r3, #18
 8004524:	d102      	bne.n	800452c <I2C_Master_ADDR+0x166>
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	2b01      	cmp	r3, #1
 800452a:	d125      	bne.n	8004578 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00e      	beq.n	8004550 <I2C_Master_ADDR+0x18a>
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	2b02      	cmp	r3, #2
 8004536:	d00b      	beq.n	8004550 <I2C_Master_ADDR+0x18a>
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	2b10      	cmp	r3, #16
 800453c:	d008      	beq.n	8004550 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e007      	b.n	8004560 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800455e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	e0ac      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004586:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e090      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d158      	bne.n	800466c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d021      	beq.n	8004604 <I2C_Master_ADDR+0x23e>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d01e      	beq.n	8004604 <I2C_Master_ADDR+0x23e>
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d01b      	beq.n	8004604 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e012      	b.n	800462a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004612:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004638:	d14b      	bne.n	80046d2 <I2C_Master_ADDR+0x30c>
 800463a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004640:	d00b      	beq.n	800465a <I2C_Master_ADDR+0x294>
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	2b01      	cmp	r3, #1
 8004646:	d008      	beq.n	800465a <I2C_Master_ADDR+0x294>
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b08      	cmp	r3, #8
 800464c:	d005      	beq.n	800465a <I2C_Master_ADDR+0x294>
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	2b10      	cmp	r3, #16
 8004652:	d002      	beq.n	800465a <I2C_Master_ADDR+0x294>
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	2b20      	cmp	r3, #32
 8004658:	d13b      	bne.n	80046d2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e032      	b.n	80046d2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800467a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468a:	d117      	bne.n	80046bc <I2C_Master_ADDR+0x2f6>
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004692:	d00b      	beq.n	80046ac <I2C_Master_ADDR+0x2e6>
 8004694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004696:	2b01      	cmp	r3, #1
 8004698:	d008      	beq.n	80046ac <I2C_Master_ADDR+0x2e6>
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	2b08      	cmp	r3, #8
 800469e:	d005      	beq.n	80046ac <I2C_Master_ADDR+0x2e6>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d002      	beq.n	80046ac <I2C_Master_ADDR+0x2e6>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d107      	bne.n	80046bc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80046d8:	e00b      	b.n	80046f2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
}
 80046f0:	e7ff      	b.n	80046f2 <I2C_Master_ADDR+0x32c>
 80046f2:	bf00      	nop
 80046f4:	3744      	adds	r7, #68	@ 0x44
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02b      	beq.n	800476e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d114      	bne.n	800476e <I2C_SlaveTransmit_TXE+0x72>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b29      	cmp	r3, #41	@ 0x29
 8004748:	d111      	bne.n	800476e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004758:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2221      	movs	r2, #33	@ 0x21
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2228      	movs	r2, #40	@ 0x28
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff f9d8 	bl	8003b1e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d011      	beq.n	80047ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02c      	beq.n	800482a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <I2C_SlaveReceive_RXNE+0x74>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b2a      	cmp	r3, #42	@ 0x2a
 8004804:	d111      	bne.n	800482a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004814:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2222      	movs	r2, #34	@ 0x22
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2228      	movs	r2, #40	@ 0x28
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff f983 	bl	8003b30 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d012      	beq.n	800486a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800488e:	2b28      	cmp	r3, #40	@ 0x28
 8004890:	d127      	bne.n	80048e2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	09db      	lsrs	r3, r3, #7
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	81bb      	strh	r3, [r7, #12]
 80048c4:	e002      	b.n	80048cc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80048d4:	89ba      	ldrh	r2, [r7, #12]
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff f931 	bl	8003b42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048e0:	e00e      	b.n	8004900 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004916:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004926:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004954:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004964:	d172      	bne.n	8004a4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b22      	cmp	r3, #34	@ 0x22
 800496a:	d002      	beq.n	8004972 <I2C_Slave_STOPF+0x6a>
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004970:	d135      	bne.n	80049de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f884 	bl	8002ab8 <HAL_DMA_GetState>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d049      	beq.n	8004a4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	4a69      	ldr	r2, [pc, #420]	@ (8004b60 <I2C_Slave_STOPF+0x258>)
 80049bc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd fefa 	bl	80027bc <HAL_DMA_Abort_IT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d03d      	beq.n	8004a4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049d8:	4610      	mov	r0, r2
 80049da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049dc:	e035      	b.n	8004a4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	f043 0204 	orr.w	r2, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe f84e 	bl	8002ab8 <HAL_DMA_GetState>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d014      	beq.n	8004a4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a26:	4a4e      	ldr	r2, [pc, #312]	@ (8004b60 <I2C_Slave_STOPF+0x258>)
 8004a28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd fec4 	bl	80027bc <HAL_DMA_Abort_IT>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a44:	4610      	mov	r0, r2
 8004a46:	4798      	blx	r3
 8004a48:	e000      	b.n	8004a4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d03e      	beq.n	8004ad4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d112      	bne.n	8004a8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d112      	bne.n	8004abe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f843 	bl	8004b68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ae2:	e039      	b.n	8004b58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae8:	d109      	bne.n	8004afe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2228      	movs	r2, #40	@ 0x28
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff f819 	bl	8003b30 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b28      	cmp	r3, #40	@ 0x28
 8004b08:	d111      	bne.n	8004b2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <I2C_Slave_STOPF+0x25c>)
 8004b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff f818 	bl	8003b5c <HAL_I2C_ListenCpltCallback>
}
 8004b2c:	e014      	b.n	8004b58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	2b22      	cmp	r3, #34	@ 0x22
 8004b34:	d002      	beq.n	8004b3c <I2C_Slave_STOPF+0x234>
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b22      	cmp	r3, #34	@ 0x22
 8004b3a:	d10d      	bne.n	8004b58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe ffec 	bl	8003b30 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	08005229 	.word	0x08005229
 8004b64:	ffff0000 	.word	0xffff0000

08004b68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b80:	7bbb      	ldrb	r3, [r7, #14]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d002      	beq.n	8004b8c <I2C_ITError+0x24>
 8004b86:	7bbb      	ldrb	r3, [r7, #14]
 8004b88:	2b40      	cmp	r3, #64	@ 0x40
 8004b8a:	d10a      	bne.n	8004ba2 <I2C_ITError+0x3a>
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	@ 0x22
 8004b90:	d107      	bne.n	8004ba2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ba8:	2b28      	cmp	r3, #40	@ 0x28
 8004baa:	d107      	bne.n	8004bbc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2228      	movs	r2, #40	@ 0x28
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bba:	e015      	b.n	8004be8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bca:	d00a      	beq.n	8004be2 <I2C_ITError+0x7a>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b60      	cmp	r3, #96	@ 0x60
 8004bd0:	d007      	beq.n	8004be2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf6:	d162      	bne.n	8004cbe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d020      	beq.n	8004c58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004dc4 <I2C_ITError+0x25c>)
 8004c1c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd fdca 	bl	80027bc <HAL_DMA_Abort_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8089 	beq.w	8004d42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c52:	4610      	mov	r0, r2
 8004c54:	4798      	blx	r3
 8004c56:	e074      	b.n	8004d42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	4a59      	ldr	r2, [pc, #356]	@ (8004dc4 <I2C_ITError+0x25c>)
 8004c5e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fd fda9 	bl	80027bc <HAL_DMA_Abort_IT>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d068      	beq.n	8004d42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b40      	cmp	r3, #64	@ 0x40
 8004c7c:	d10b      	bne.n	8004c96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4798      	blx	r3
 8004cbc:	e041      	b.n	8004d42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b60      	cmp	r3, #96	@ 0x60
 8004cc8:	d125      	bne.n	8004d16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d10b      	bne.n	8004cfe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fe ff3f 	bl	8003b92 <HAL_I2C_AbortCpltCallback>
 8004d14:	e015      	b.n	8004d42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d10b      	bne.n	8004d3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fe ff1f 	bl	8003b80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d113      	bne.n	8004dbc <I2C_ITError+0x254>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b28      	cmp	r3, #40	@ 0x28
 8004d98:	d110      	bne.n	8004dbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc8 <I2C_ITError+0x260>)
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fe fed0 	bl	8003b5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08005229 	.word	0x08005229
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d006      	beq.n	8004df6 <I2C_MasterRequestWrite+0x2a>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d003      	beq.n	8004df6 <I2C_MasterRequestWrite+0x2a>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df4:	d108      	bne.n	8004e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e00b      	b.n	8004e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	2b12      	cmp	r3, #18
 8004e0e:	d107      	bne.n	8004e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 faa3 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e46:	d103      	bne.n	8004e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e035      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e5c:	d108      	bne.n	8004e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e01b      	b.n	8004ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e70:	897b      	ldrh	r3, [r7, #10]
 8004e72:	11db      	asrs	r3, r3, #7
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f063 030f 	orn	r3, r3, #15
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	490e      	ldr	r1, [pc, #56]	@ (8004ec8 <I2C_MasterRequestWrite+0xfc>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 faec 	bl	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e010      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4907      	ldr	r1, [pc, #28]	@ (8004ecc <I2C_MasterRequestWrite+0x100>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fadc 	bl	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	00010008 	.word	0x00010008
 8004ecc:	00010002 	.word	0x00010002

08004ed0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	813b      	strh	r3, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fa36 	bl	8005378 <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f20:	d103      	bne.n	8004f2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e05f      	b.n	8004fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	492d      	ldr	r1, [pc, #180]	@ (8004ff8 <I2C_RequestMemoryWrite+0x128>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa91 	bl	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e04c      	b.n	8004fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fb1c 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d107      	bne.n	8004f92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e02b      	b.n	8004fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]
 8004fa6:	e021      	b.n	8004fec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fa8:	893b      	ldrh	r3, [r7, #8]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb8:	6a39      	ldr	r1, [r7, #32]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 faf6 	bl	80055ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00d      	beq.n	8004fe2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d107      	bne.n	8004fde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e005      	b.n	8004fee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe2:	893b      	ldrh	r3, [r7, #8]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	00010002 	.word	0x00010002

08004ffc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005010:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005018:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800502e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503c:	2200      	movs	r2, #0
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	2200      	movs	r2, #0
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005056:	2b21      	cmp	r3, #33	@ 0x21
 8005058:	d007      	beq.n	800506a <I2C_DMAXferCplt+0x6e>
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005060:	2b22      	cmp	r3, #34	@ 0x22
 8005062:	d131      	bne.n	80050c8 <I2C_DMAXferCplt+0xcc>
 8005064:	7cbb      	ldrb	r3, [r7, #18]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d12e      	bne.n	80050c8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005078:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	2b29      	cmp	r3, #41	@ 0x29
 8005084:	d10a      	bne.n	800509c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2228      	movs	r2, #40	@ 0x28
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f7fe fd42 	bl	8003b1e <HAL_I2C_SlaveTxCpltCallback>
 800509a:	e00c      	b.n	80050b6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a0:	d109      	bne.n	80050b6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2222      	movs	r2, #34	@ 0x22
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2228      	movs	r2, #40	@ 0x28
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050b0:	6978      	ldr	r0, [r7, #20]
 80050b2:	f7fe fd3d 	bl	8003b30 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80050c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050c6:	e074      	b.n	80051b2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d06e      	beq.n	80051b2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ec:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005104:	d009      	beq.n	800511a <I2C_DMAXferCplt+0x11e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d006      	beq.n	800511a <I2C_DMAXferCplt+0x11e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005112:	d002      	beq.n	800511a <I2C_DMAXferCplt+0x11e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b20      	cmp	r3, #32
 8005118:	d107      	bne.n	800512a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005128:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005138:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005148:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	f7fe fd11 	bl	8003b80 <HAL_I2C_ErrorCallback>
}
 800515e:	e028      	b.n	80051b2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d10a      	bne.n	800518a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f7fe fcf3 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
}
 8005188:	e013      	b.n	80051b2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d002      	beq.n	800519e <I2C_DMAXferCplt+0x1a2>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b20      	cmp	r3, #32
 800519c:	d103      	bne.n	80051a6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051a4:	e002      	b.n	80051ac <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2212      	movs	r2, #18
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7fe fcad 	bl	8003b0c <HAL_I2C_MasterRxCpltCallback>
}
 80051b2:	bf00      	nop
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d4:	2200      	movs	r2, #0
 80051d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	2200      	movs	r2, #0
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f043 0210 	orr.w	r2, r3, #16
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7fe fcb0 	bl	8003b80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005240:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005242:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <I2C_DMAAbort+0x148>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	08db      	lsrs	r3, r3, #3
 8005248:	4a4a      	ldr	r2, [pc, #296]	@ (8005374 <I2C_DMAAbort+0x14c>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	0a1a      	lsrs	r2, r3, #8
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800526e:	e00a      	b.n	8005286 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005284:	d0ea      	beq.n	800525c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	2200      	movs	r2, #0
 80052a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	2200      	movs	r2, #0
 80052ca:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	2200      	movs	r2, #0
 80052da:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b60      	cmp	r3, #96	@ 0x60
 80052f6:	d10e      	bne.n	8005316 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	f7fe fc3f 	bl	8003b92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005314:	e027      	b.n	8005366 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800531c:	2b28      	cmp	r3, #40	@ 0x28
 800531e:	d117      	bne.n	8005350 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800533e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2228      	movs	r2, #40	@ 0x28
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800534e:	e007      	b.n	8005360 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005360:	6978      	ldr	r0, [r7, #20]
 8005362:	f7fe fc0d 	bl	8003b80 <HAL_I2C_ErrorCallback>
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000000c 	.word	0x2000000c
 8005374:	14f8b589 	.word	0x14f8b589

08005378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005388:	e048      	b.n	800541c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d044      	beq.n	800541c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fc fc7f 	bl	8001c94 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d139      	bne.n	800541c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10d      	bne.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	43da      	mvns	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4013      	ands	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	e00c      	b.n	80053e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	43da      	mvns	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4013      	ands	r3, r2
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d116      	bne.n	800541c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e023      	b.n	8005464 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10d      	bne.n	8005442 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	43da      	mvns	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4013      	ands	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	e00c      	b.n	800545c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	43da      	mvns	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d093      	beq.n	800538a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800547a:	e071      	b.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548a:	d123      	bne.n	80054d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e067      	b.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d041      	beq.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054dc:	f7fc fbda 	bl	8001c94 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d302      	bcc.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d136      	bne.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10c      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e00b      	b.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e021      	b.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d10c      	bne.n	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	43da      	mvns	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e00b      	b.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4013      	ands	r3, r2
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	f47f af6d 	bne.w	800547c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b8:	e034      	b.n	8005624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8b8 	bl	8005730 <I2C_IsAcknowledgeFailed>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e034      	b.n	8005634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d028      	beq.n	8005624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fc fb5f 	bl	8001c94 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11d      	bne.n	8005624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b80      	cmp	r3, #128	@ 0x80
 80055f4:	d016      	beq.n	8005624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e007      	b.n	8005634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d1c3      	bne.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005648:	e034      	b.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f870 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e034      	b.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d028      	beq.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005662:	f7fc fb17 	bl	8001c94 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d302      	bcc.n	8005678 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11d      	bne.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d016      	beq.n	80056b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e007      	b.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d1c3      	bne.n	800564a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80056d8:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	4a13      	ldr	r2, [pc, #76]	@ (800572c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	0a1a      	lsrs	r2, r3, #8
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d107      	bne.n	800570a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e008      	b.n	800571c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d0e9      	beq.n	80056ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	2000000c 	.word	0x2000000c
 800572c:	14f8b589 	.word	0x14f8b589

08005730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005746:	d11b      	bne.n	8005780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800579c:	d103      	bne.n	80057a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057a4:	e007      	b.n	80057b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80057ae:	d102      	bne.n	80057b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2208      	movs	r2, #8
 80057b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0e8      	b.n	80059a4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f007 f94e 	bl	800ca88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 f846 	bl	8008890 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800580e:	f003 f81c 	bl	800884a <USB_CoreInit>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0bf      	b.n	80059a4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f003 f84a 	bl	80088c4 <USB_SetCurrentMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0b0      	b.n	80059a4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	e03e      	b.n	80058c6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	440b      	add	r3, r1
 8005856:	3311      	adds	r3, #17
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	3310      	adds	r3, #16
 800586c:	7bfa      	ldrb	r2, [r7, #15]
 800586e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	3313      	adds	r3, #19
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	440b      	add	r3, r1
 8005892:	3320      	adds	r3, #32
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	440b      	add	r3, r1
 80058a6:	3324      	adds	r3, #36	@ 0x24
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	3301      	adds	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	791b      	ldrb	r3, [r3, #4]
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d3bb      	bcc.n	8005848 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e044      	b.n	8005960 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	440b      	add	r3, r1
 80058fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	3301      	adds	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	791b      	ldrb	r3, [r3, #4]
 8005964:	7bfa      	ldrb	r2, [r7, #15]
 8005966:	429a      	cmp	r2, r3
 8005968:	d3b5      	bcc.n	80058d6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005974:	f002 ffb2 	bl	80088dc <USB_DevInit>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e00c      	b.n	80059a4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f005 fa32 	bl	800ae06 <USB_DevDisconnect>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_PCD_Start+0x16>
 80059be:	2302      	movs	r3, #2
 80059c0:	e016      	b.n	80059f0 <HAL_PCD_Start+0x44>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f002 ff48 	bl	8008864 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80059d4:	2101      	movs	r1, #1
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f007 fac9 	bl	800cf6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f005 fa06 	bl	800adf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f005 fa08 	bl	800ae1a <USB_ReadInterrupts>
 8005a0a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb1a 	bl	8006050 <PCD_EP_ISR_Handler>

    return;
 8005a1c:	e119      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d013      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f007 f89c 	bl	800cb7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a46:	2100      	movs	r1, #0
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f905 	bl	8005c58 <HAL_PCD_SetAddress>

    return;
 8005a4e:	e100      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00c      	beq.n	8005a74 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a72:	e0ee      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00c      	beq.n	8005a98 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a90:	b292      	uxth	r2, r2
 8005a92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a96:	e0dc      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d027      	beq.n	8005af2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0208 	bic.w	r2, r2, #8
 8005acc:	b292      	uxth	r2, r2
 8005ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f007 f88c 	bl	800cbf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005aea:	b292      	uxth	r2, r2
 8005aec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005af0:	e0af      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8083 	beq.w	8005c04 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e010      	b.n	8005b26 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	7ffb      	ldrb	r3, [r7, #31]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	b292      	uxth	r2, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	3320      	adds	r3, #32
 8005b1a:	443b      	add	r3, r7
 8005b1c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
 8005b22:	3301      	adds	r3, #1
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	7ffb      	ldrb	r3, [r7, #31]
 8005b28:	2b07      	cmp	r3, #7
 8005b2a:	d9eb      	bls.n	8005b04 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	b292      	uxth	r2, r2
 8005b40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	b292      	uxth	r2, r2
 8005b58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005b5c:	bf00      	nop
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f6      	beq.n	8005b5e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b82:	b292      	uxth	r2, r2
 8005b84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e00f      	b.n	8005bae <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005b8e:	7ffb      	ldrb	r3, [r7, #31]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	4611      	mov	r1, r2
 8005b96:	7ffa      	ldrb	r2, [r7, #31]
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	440a      	add	r2, r1
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	3320      	adds	r3, #32
 8005ba0:	443b      	add	r3, r7
 8005ba2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ba6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005ba8:	7ffb      	ldrb	r3, [r7, #31]
 8005baa:	3301      	adds	r3, #1
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b07      	cmp	r3, #7
 8005bb2:	d9ec      	bls.n	8005b8e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bde:	b292      	uxth	r2, r2
 8005be0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0204 	orr.w	r2, r2, #4
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f006 ffdd 	bl	800cbbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c02:	e026      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c20:	b292      	uxth	r2, r2
 8005c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f006 ff9b 	bl	800cb62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c2c:	e011      	b.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c4a:	b292      	uxth	r2, r2
 8005c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c50:	bf00      	nop
  }
}
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_PCD_SetAddress+0x1a>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e012      	b.n	8005c98 <HAL_PCD_SetAddress+0x40>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f005 f89f 	bl	800adcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	70fb      	strb	r3, [r7, #3]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	803b      	strh	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da0e      	bge.n	8005ce4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 0207 	and.w	r2, r3, #7
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	705a      	strb	r2, [r3, #1]
 8005ce2:	e00e      	b.n	8005d02 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 0207 	and.w	r2, r3, #7
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d0e:	883a      	ldrh	r2, [r7, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	78ba      	ldrb	r2, [r7, #2]
 8005d18:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d1a:	78bb      	ldrb	r3, [r7, #2]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d102      	bne.n	8005d26 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_PCD_EP_Open+0x94>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e00e      	b.n	8005d52 <HAL_PCD_EP_Open+0xb2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f002 fde8 	bl	8008918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da0e      	bge.n	8005d8c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	f003 0207 	and.w	r2, r3, #7
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	705a      	strb	r2, [r3, #1]
 8005d8a:	e00e      	b.n	8005daa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 0207 	and.w	r2, r3, #7
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_PCD_EP_Close+0x6a>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e00e      	b.n	8005de2 <HAL_PCD_EP_Close+0x88>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 f960 	bl	8009098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	460b      	mov	r3, r1
 8005df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	f003 0207 	and.w	r2, r3, #7
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f003 fb17 	bl	8009470 <USB_EPStartXfer>

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	f003 0207 	and.w	r2, r3, #7
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	460b      	mov	r3, r1
 8005e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	f003 0207 	and.w	r2, r3, #7
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	3310      	adds	r3, #16
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 fac9 	bl	8009470 <USB_EPStartXfer>

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	7912      	ldrb	r2, [r2, #4]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e04c      	b.n	8005fa0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da0e      	bge.n	8005f2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 0207 	and.w	r2, r3, #7
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	705a      	strb	r2, [r3, #1]
 8005f2a:	e00c      	b.n	8005f46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_PCD_EP_SetStall+0x7e>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e01c      	b.n	8005fa0 <HAL_PCD_EP_SetStall+0xb8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f004 fe2c 	bl	800abd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f004 ff51 	bl	800ae38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	7912      	ldrb	r2, [r2, #4]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e040      	b.n	8006048 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da0e      	bge.n	8005fec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 0207 	and.w	r2, r3, #7
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3310      	adds	r3, #16
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	705a      	strb	r2, [r3, #1]
 8005fea:	e00e      	b.n	800600a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	b2da      	uxtb	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_PCD_EP_ClrStall+0x82>
 8006026:	2302      	movs	r3, #2
 8006028:	e00e      	b.n	8006048 <HAL_PCD_EP_ClrStall+0xa0>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	4618      	mov	r0, r3
 800603a:	f004 fe1a 	bl	800ac72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b096      	sub	sp, #88	@ 0x58
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006058:	e3bb      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006062:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006074:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 8175 	bne.w	8006368 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800607e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	d14e      	bne.n	8006128 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609a:	81fb      	strh	r3, [r7, #14]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3310      	adds	r3, #16
 80060b2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	3302      	adds	r3, #2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80060e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	441a      	add	r2, r3
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80060ee:	2100      	movs	r1, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f006 fd1c 	bl	800cb2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7b5b      	ldrb	r3, [r3, #13]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8368 	beq.w	80067d2 <PCD_EP_ISR_Handler+0x782>
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 8363 	bne.w	80067d2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7b5b      	ldrb	r3, [r3, #13]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006116:	b2da      	uxtb	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	735a      	strb	r2, [r3, #13]
 8006126:	e354      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800612e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800613a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800613e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006142:	2b00      	cmp	r3, #0
 8006144:	d034      	beq.n	80061b0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	3306      	adds	r3, #6
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800616e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006170:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800617c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006182:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006184:	b29b      	uxth	r3, r3
 8006186:	f004 fea8 	bl	800aeda <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006196:	4013      	ands	r3, r2
 8006198:	823b      	strh	r3, [r7, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	8a3a      	ldrh	r2, [r7, #16]
 80061a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061a4:	b292      	uxth	r2, r2
 80061a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f006 fc93 	bl	800cad4 <HAL_PCD_SetupStageCallback>
 80061ae:	e310      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80061b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f280 830c 	bge.w	80067d2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061c6:	4013      	ands	r3, r2
 80061c8:	83fb      	strh	r3, [r7, #30]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	8bfa      	ldrh	r2, [r7, #30]
 80061d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061d4:	b292      	uxth	r2, r2
 80061d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	3306      	adds	r3, #6
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006202:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d019      	beq.n	8006240 <PCD_EP_ISR_Handler+0x1f0>
 800620c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d015      	beq.n	8006240 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621a:	6959      	ldr	r1, [r3, #20]
 800621c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006222:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006224:	b29b      	uxth	r3, r3
 8006226:	f004 fe58 	bl	800aeda <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800622a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	441a      	add	r2, r3
 8006234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006236:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f006 fc5c 	bl	800caf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800624a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800624e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 82bd 	bne.w	80067d2 <PCD_EP_ISR_Handler+0x782>
 8006258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800625c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006264:	f000 82b5 	beq.w	80067d2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	4413      	add	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006292:	b29a      	uxth	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b3e      	cmp	r3, #62	@ 0x3e
 800629e:	d91d      	bls.n	80062dc <PCD_EP_ISR_Handler+0x28c>
 80062a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <PCD_EP_ISR_Handler+0x26a>
 80062b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b6:	3b01      	subs	r3, #1
 80062b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e026      	b.n	800632a <PCD_EP_ISR_Handler+0x2da>
 80062dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <PCD_EP_ISR_Handler+0x2aa>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	e017      	b.n	800632a <PCD_EP_ISR_Handler+0x2da>
 80062fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	647b      	str	r3, [r7, #68]	@ 0x44
 8006302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <PCD_EP_ISR_Handler+0x2c4>
 800630e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006310:	3301      	adds	r3, #1
 8006312:	647b      	str	r3, [r7, #68]	@ 0x44
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29a      	uxth	r2, r3
 800631a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631c:	b29b      	uxth	r3, r3
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	b29b      	uxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	827b      	strh	r3, [r7, #18]
 800633c:	8a7b      	ldrh	r3, [r7, #18]
 800633e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006342:	827b      	strh	r3, [r7, #18]
 8006344:	8a7b      	ldrh	r3, [r7, #18]
 8006346:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800634a:	827b      	strh	r3, [r7, #18]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	8a7b      	ldrh	r3, [r7, #18]
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]
 8006366:	e234      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800637c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006380:	2b00      	cmp	r3, #0
 8006382:	f280 80fc 	bge.w	800657e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800639c:	4013      	ands	r3, r2
 800639e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80063b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063b8:	b292      	uxth	r2, r2
 80063ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063bc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
 80063d0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d4:	7b1b      	ldrb	r3, [r3, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d125      	bne.n	8006426 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	3306      	adds	r3, #6
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006402:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8092 	beq.w	8006534 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006416:	6959      	ldr	r1, [r3, #20]
 8006418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641a:	88da      	ldrh	r2, [r3, #6]
 800641c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006420:	f004 fd5b 	bl	800aeda <USB_ReadPMA>
 8006424:	e086      	b.n	8006534 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d10a      	bne.n	8006444 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800642e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006432:	461a      	mov	r2, r3
 8006434:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9d9 	bl	80067ee <HAL_PCD_EP_DB_Receive>
 800643c:	4603      	mov	r3, r0
 800643e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006442:	e077      	b.n	8006534 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d024      	beq.n	80064ec <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	3302      	adds	r3, #2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80064ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d02e      	beq.n	8006534 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064dc:	6959      	ldr	r1, [r3, #20]
 80064de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e0:	891a      	ldrh	r2, [r3, #8]
 80064e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064e6:	f004 fcf8 	bl	800aeda <USB_ReadPMA>
 80064ea:	e023      	b.n	8006534 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	3306      	adds	r3, #6
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006514:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006526:	6959      	ldr	r1, [r3, #20]
 8006528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652a:	895a      	ldrh	r2, [r3, #10]
 800652c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006530:	f004 fcd3 	bl	800aeda <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800653c:	441a      	add	r2, r3
 800653e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006540:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800654a:	441a      	add	r2, r3
 800654c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <PCD_EP_ISR_Handler+0x514>
 8006558:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800655c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	429a      	cmp	r2, r3
 8006562:	d206      	bcs.n	8006572 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f006 fac4 	bl	800caf8 <HAL_PCD_DataOutStageCallback>
 8006570:	e005      	b.n	800657e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006578:	4618      	mov	r0, r3
 800657a:	f002 ff79 	bl	8009470 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800657e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8123 	beq.w	80067d2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800658c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	3310      	adds	r3, #16
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80065d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80065dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 80a2 	bne.w	800672a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80065e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e8:	2200      	movs	r2, #0
 80065ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80065ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8093 	beq.w	800671c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d046      	beq.n	8006690 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d126      	bne.n	8006658 <PCD_EP_ISR_Handler+0x608>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	4413      	add	r3, r2
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
 8006622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	011a      	lsls	r2, r3, #4
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	4413      	add	r3, r2
 800662c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006630:	623b      	str	r3, [r7, #32]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e061      	b.n	800671c <PCD_EP_ISR_Handler+0x6cc>
 8006658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d15d      	bne.n	800671c <PCD_EP_ISR_Handler+0x6cc>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	4413      	add	r3, r2
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	4413      	add	r3, r2
 8006682:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	2200      	movs	r2, #0
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e045      	b.n	800671c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d126      	bne.n	80066ec <PCD_EP_ISR_Handler+0x69c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b2:	4413      	add	r3, r2
 80066b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	011a      	lsls	r2, r3, #4
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	4413      	add	r3, r2
 80066c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e017      	b.n	800671c <PCD_EP_ISR_Handler+0x6cc>
 80066ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d113      	bne.n	800671c <PCD_EP_ISR_Handler+0x6cc>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006702:	4413      	add	r3, r2
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	011a      	lsls	r2, r3, #4
 800670c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670e:	4413      	add	r3, r2
 8006710:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	2200      	movs	r2, #0
 800671a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800671c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f006 fa03 	bl	800cb2e <HAL_PCD_DataInStageCallback>
 8006728:	e053      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800672a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800672e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d146      	bne.n	80067c4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	3302      	adds	r3, #2
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800676a:	429a      	cmp	r2, r3
 800676c:	d907      	bls.n	800677e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800676e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677a:	619a      	str	r2, [r3, #24]
 800677c:	e002      	b.n	8006784 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800677e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006780:	2200      	movs	r2, #0
 8006782:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800678c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f006 f9cb 	bl	800cb2e <HAL_PCD_DataInStageCallback>
 8006798:	e01b      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800679a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067a2:	441a      	add	r2, r3
 80067a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80067a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80067b0:	441a      	add	r2, r3
 80067b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067bc:	4618      	mov	r0, r3
 80067be:	f002 fe57 	bl	8009470 <USB_EPStartXfer>
 80067c2:	e006      	b.n	80067d2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80067c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067c8:	461a      	mov	r2, r3
 80067ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f91b 	bl	8006a08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067da:	b29b      	uxth	r3, r3
 80067dc:	b21b      	sxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f6ff ac3b 	blt.w	800605a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3758      	adds	r7, #88	@ 0x58
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b088      	sub	sp, #32
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	4613      	mov	r3, r2
 80067fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d07e      	beq.n	8006904 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	3302      	adds	r3, #2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800682e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	8b7b      	ldrh	r3, [r7, #26]
 8006836:	429a      	cmp	r2, r3
 8006838:	d306      	bcc.n	8006848 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	8b7b      	ldrh	r3, [r7, #26]
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	619a      	str	r2, [r3, #24]
 8006846:	e002      	b.n	800684e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d123      	bne.n	800689e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800686c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006870:	833b      	strh	r3, [r7, #24]
 8006872:	8b3b      	ldrh	r3, [r7, #24]
 8006874:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006878:	833b      	strh	r3, [r7, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	8b3b      	ldrh	r3, [r7, #24]
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01f      	beq.n	80068e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	82fb      	strh	r3, [r7, #22]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	8afb      	ldrh	r3, [r7, #22]
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068e8:	8b7b      	ldrh	r3, [r7, #26]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8087 	beq.w	80069fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	6959      	ldr	r1, [r3, #20]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	891a      	ldrh	r2, [r3, #8]
 80068fc:	8b7b      	ldrh	r3, [r7, #26]
 80068fe:	f004 faec 	bl	800aeda <USB_ReadPMA>
 8006902:	e07c      	b.n	80069fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	3306      	adds	r3, #6
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800692c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	8b7b      	ldrh	r3, [r7, #26]
 8006934:	429a      	cmp	r2, r3
 8006936:	d306      	bcc.n	8006946 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	699a      	ldr	r2, [r3, #24]
 800693c:	8b7b      	ldrh	r3, [r7, #26]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	619a      	str	r2, [r3, #24]
 8006944:	e002      	b.n	800694c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d123      	bne.n	800699c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800696a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696e:	83fb      	strh	r3, [r7, #30]
 8006970:	8bfb      	ldrh	r3, [r7, #30]
 8006972:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006976:	83fb      	strh	r3, [r7, #30]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	8bfb      	ldrh	r3, [r7, #30]
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11f      	bne.n	80069e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c0:	83bb      	strh	r3, [r7, #28]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	441a      	add	r2, r3
 80069d0:	8bbb      	ldrh	r3, [r7, #28]
 80069d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069e6:	8b7b      	ldrh	r3, [r7, #26]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6959      	ldr	r1, [r3, #20]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	895a      	ldrh	r2, [r3, #10]
 80069f8:	8b7b      	ldrh	r3, [r7, #26]
 80069fa:	f004 fa6e 	bl	800aeda <USB_ReadPMA>
    }
  }

  return count;
 80069fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0a4      	sub	sp, #144	@ 0x90
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 81dd 	beq.w	8006ddc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	3302      	adds	r3, #2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d907      	bls.n	8006a6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	619a      	str	r2, [r3, #24]
 8006a68:	e002      	b.n	8006a70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f040 80b9 	bne.w	8006bec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d126      	bne.n	8006ad0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	4413      	add	r3, r2
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	011a      	lsls	r2, r3, #4
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	e01a      	b.n	8006b06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d116      	bne.n	8006b06 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aec:	4413      	add	r3, r2
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	011a      	lsls	r2, r3, #4
 8006af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	2200      	movs	r2, #0
 8006b04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d126      	bne.n	8006b62 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	011a      	lsls	r2, r3, #4
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	e017      	b.n	8006b92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d113      	bne.n	8006b92 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	4413      	add	r3, r2
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	011a      	lsls	r2, r3, #4
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f005 ffc8 	bl	800cb2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 82fc 	beq.w	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc4:	82fb      	strh	r3, [r7, #22]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	441a      	add	r2, r3
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]
 8006bea:	e2da      	b.n	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d021      	beq.n	8006c3a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 82ae 	bne.w	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c4e:	441a      	add	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d30b      	bcc.n	8006c86 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6a1a      	ldr	r2, [r3, #32]
 8006c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	621a      	str	r2, [r3, #32]
 8006c84:	e017      	b.n	8006cb6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d108      	bne.n	8006ca0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006c8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c9e:	e00a      	b.n	8006cb6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d165      	bne.n	8006d8a <HAL_PCD_EP_DB_Transmit+0x382>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd2:	4413      	add	r3, r2
 8006cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	011a      	lsls	r2, r3, #4
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cde:	4413      	add	r3, r2
 8006ce0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cfc:	d91d      	bls.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x332>
 8006cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <HAL_PCD_EP_DB_Transmit+0x310>
 8006d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d14:	3b01      	subs	r3, #1
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	029b      	lsls	r3, r3, #10
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e044      	b.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x350>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e035      	b.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6e:	3301      	adds	r3, #1
 8006d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	e01c      	b.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d118      	bne.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da6:	4413      	add	r3, r2
 8006da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	011a      	lsls	r2, r3, #4
 8006db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db2:	4413      	add	r3, r2
 8006db4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6959      	ldr	r1, [r3, #20]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	891a      	ldrh	r2, [r3, #8]
 8006dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f004 f83a 	bl	800ae4e <USB_WritePMA>
 8006dda:	e1e2      	b.n	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4413      	add	r3, r2
 8006df0:	3306      	adds	r3, #6
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e04:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d307      	bcc.n	8006e24 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	619a      	str	r2, [r3, #24]
 8006e22:	e002      	b.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 80c0 	bne.w	8006fb4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d126      	bne.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x482>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e50:	4413      	add	r3, r2
 8006e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	011a      	lsls	r2, r3, #4
 8006e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e01a      	b.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d116      	bne.n	8006ec0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ea6:	4413      	add	r3, r2
 8006ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	011a      	lsls	r2, r3, #4
 8006eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d12b      	bne.n	8006f26 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee2:	4413      	add	r3, r2
 8006ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	011a      	lsls	r2, r3, #4
 8006eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e017      	b.n	8006f56 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d113      	bne.n	8006f56 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f3c:	4413      	add	r3, r2
 8006f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f52:	2200      	movs	r2, #0
 8006f54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f005 fde6 	bl	800cb2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 811a 	bne.w	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f88:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]
 8006fb2:	e0f6      	b.n	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d121      	bne.n	8007002 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 80ca 	bne.w	80071a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007016:	441a      	add	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007024:	441a      	add	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d30b      	bcc.n	800704e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	621a      	str	r2, [r3, #32]
 800704c:	e017      	b.n	800707e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d108      	bne.n	8007068 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007056:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800705a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007066:	e00a      	b.n	800707e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	657b      	str	r3, [r7, #84]	@ 0x54
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d165      	bne.n	8007158 <HAL_PCD_EP_DB_Transmit+0x750>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a0:	4413      	add	r3, r2
 80070a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	011a      	lsls	r2, r3, #4
 80070aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ac:	4413      	add	r3, r2
 80070ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ca:	d91d      	bls.n	8007108 <HAL_PCD_EP_DB_Transmit+0x700>
 80070cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80070e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070e2:	3b01      	subs	r3, #1
 80070e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007100:	b29a      	uxth	r2, r3
 8007102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e041      	b.n	800718c <HAL_PCD_EP_DB_Transmit+0x784>
 8007108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <HAL_PCD_EP_DB_Transmit+0x71e>
 8007110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e032      	b.n	800718c <HAL_PCD_EP_DB_Transmit+0x784>
 8007126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_PCD_EP_DB_Transmit+0x738>
 800713a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800713c:	3301      	adds	r3, #1
 800713e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29a      	uxth	r2, r3
 8007146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007148:	b29b      	uxth	r3, r3
 800714a:	029b      	lsls	r3, r3, #10
 800714c:	b29b      	uxth	r3, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	e019      	b.n	800718c <HAL_PCD_EP_DB_Transmit+0x784>
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d115      	bne.n	800718c <HAL_PCD_EP_DB_Transmit+0x784>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007168:	b29b      	uxth	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716e:	4413      	add	r3, r2
 8007170:	657b      	str	r3, [r7, #84]	@ 0x54
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	011a      	lsls	r2, r3, #4
 8007178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717a:	4413      	add	r3, r2
 800717c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007180:	653b      	str	r3, [r7, #80]	@ 0x50
 8007182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007186:	b29a      	uxth	r2, r3
 8007188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6959      	ldr	r1, [r3, #20]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	895a      	ldrh	r2, [r3, #10]
 8007198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800719c:	b29b      	uxth	r3, r3
 800719e:	f003 fe56 	bl	800ae4e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071bc:	82bb      	strh	r3, [r7, #20]
 80071be:	8abb      	ldrh	r3, [r7, #20]
 80071c0:	f083 0310 	eor.w	r3, r3, #16
 80071c4:	82bb      	strh	r3, [r7, #20]
 80071c6:	8abb      	ldrh	r3, [r7, #20]
 80071c8:	f083 0320 	eor.w	r3, r3, #32
 80071cc:	82bb      	strh	r3, [r7, #20]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	441a      	add	r2, r3
 80071dc:	8abb      	ldrh	r3, [r7, #20]
 80071de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3790      	adds	r7, #144	@ 0x90
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	4613      	mov	r3, r2
 800720c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800720e:	897b      	ldrh	r3, [r7, #10]
 8007210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800721a:	897b      	ldrh	r3, [r7, #10]
 800721c:	f003 0207 	and.w	r2, r3, #7
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	3310      	adds	r3, #16
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e009      	b.n	8007246 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007232:	897a      	ldrh	r2, [r7, #10]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007246:	893b      	ldrh	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2200      	movs	r2, #0
 8007250:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	b29a      	uxth	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	80da      	strh	r2, [r3, #6]
 800725a:	e00b      	b.n	8007274 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2201      	movs	r2, #1
 8007260:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	b29a      	uxth	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0c1b      	lsrs	r3, r3, #16
 800726e:	b29a      	uxth	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e272      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8087 	beq.w	80073ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a0:	4b92      	ldr	r3, [pc, #584]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d00c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072ac:	4b8f      	ldr	r3, [pc, #572]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d112      	bne.n	80072de <HAL_RCC_OscConfig+0x5e>
 80072b8:	4b8c      	ldr	r3, [pc, #560]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c4:	d10b      	bne.n	80072de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c6:	4b89      	ldr	r3, [pc, #548]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d06c      	beq.n	80073ac <HAL_RCC_OscConfig+0x12c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d168      	bne.n	80073ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e24c      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e6:	d106      	bne.n	80072f6 <HAL_RCC_OscConfig+0x76>
 80072e8:	4b80      	ldr	r3, [pc, #512]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a7f      	ldr	r2, [pc, #508]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80072ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e02e      	b.n	8007354 <HAL_RCC_OscConfig+0xd4>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <HAL_RCC_OscConfig+0x98>
 80072fe:	4b7b      	ldr	r3, [pc, #492]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a7a      	ldr	r2, [pc, #488]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	4b78      	ldr	r3, [pc, #480]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a77      	ldr	r2, [pc, #476]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e01d      	b.n	8007354 <HAL_RCC_OscConfig+0xd4>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007320:	d10c      	bne.n	800733c <HAL_RCC_OscConfig+0xbc>
 8007322:	4b72      	ldr	r3, [pc, #456]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a71      	ldr	r2, [pc, #452]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4b6f      	ldr	r3, [pc, #444]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a6e      	ldr	r2, [pc, #440]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e00b      	b.n	8007354 <HAL_RCC_OscConfig+0xd4>
 800733c:	4b6b      	ldr	r3, [pc, #428]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6a      	ldr	r2, [pc, #424]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	4b68      	ldr	r3, [pc, #416]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a67      	ldr	r2, [pc, #412]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 800734e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d013      	beq.n	8007384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800735c:	f7fa fc9a 	bl	8001c94 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007364:	f7fa fc96 	bl	8001c94 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b64      	cmp	r3, #100	@ 0x64
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e200      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007376:	4b5d      	ldr	r3, [pc, #372]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f0      	beq.n	8007364 <HAL_RCC_OscConfig+0xe4>
 8007382:	e014      	b.n	80073ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007384:	f7fa fc86 	bl	8001c94 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800738c:	f7fa fc82 	bl	8001c94 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	@ 0x64
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1ec      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739e:	4b53      	ldr	r3, [pc, #332]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x10c>
 80073aa:	e000      	b.n	80073ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d063      	beq.n	8007482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073ba:	4b4c      	ldr	r3, [pc, #304]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f003 030c 	and.w	r3, r3, #12
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80073c6:	4b49      	ldr	r3, [pc, #292]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d11c      	bne.n	800740c <HAL_RCC_OscConfig+0x18c>
 80073d2:	4b46      	ldr	r3, [pc, #280]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <HAL_RCC_OscConfig+0x176>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d001      	beq.n	80073f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e1c0      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f6:	4b3d      	ldr	r3, [pc, #244]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4939      	ldr	r1, [pc, #228]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007406:	4313      	orrs	r3, r2
 8007408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740a:	e03a      	b.n	8007482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d020      	beq.n	8007456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007414:	4b36      	ldr	r3, [pc, #216]	@ (80074f0 <HAL_RCC_OscConfig+0x270>)
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741a:	f7fa fc3b 	bl	8001c94 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007422:	f7fa fc37 	bl	8001c94 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e1a1      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007434:	4b2d      	ldr	r3, [pc, #180]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007440:	4b2a      	ldr	r3, [pc, #168]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4927      	ldr	r1, [pc, #156]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	600b      	str	r3, [r1, #0]
 8007454:	e015      	b.n	8007482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <HAL_RCC_OscConfig+0x270>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745c:	f7fa fc1a 	bl	8001c94 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007464:	f7fa fc16 	bl	8001c94 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e180      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007476:	4b1d      	ldr	r3, [pc, #116]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d03a      	beq.n	8007504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d019      	beq.n	80074ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007496:	4b17      	ldr	r3, [pc, #92]	@ (80074f4 <HAL_RCC_OscConfig+0x274>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800749c:	f7fa fbfa 	bl	8001c94 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a4:	f7fa fbf6 	bl	8001c94 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e160      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <HAL_RCC_OscConfig+0x26c>)
 80074b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f0      	beq.n	80074a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80074c2:	2001      	movs	r0, #1
 80074c4:	f000 faba 	bl	8007a3c <RCC_Delay>
 80074c8:	e01c      	b.n	8007504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074ca:	4b0a      	ldr	r3, [pc, #40]	@ (80074f4 <HAL_RCC_OscConfig+0x274>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d0:	f7fa fbe0 	bl	8001c94 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074d6:	e00f      	b.n	80074f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074d8:	f7fa fbdc 	bl	8001c94 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d908      	bls.n	80074f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e146      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
 80074ea:	bf00      	nop
 80074ec:	40021000 	.word	0x40021000
 80074f0:	42420000 	.word	0x42420000
 80074f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f8:	4b92      	ldr	r3, [pc, #584]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80074fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e9      	bne.n	80074d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80a6 	beq.w	800765e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007516:	4b8b      	ldr	r3, [pc, #556]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007522:	4b88      	ldr	r3, [pc, #544]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	4a87      	ldr	r2, [pc, #540]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800752c:	61d3      	str	r3, [r2, #28]
 800752e:	4b85      	ldr	r3, [pc, #532]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800753e:	4b82      	ldr	r3, [pc, #520]	@ (8007748 <HAL_RCC_OscConfig+0x4c8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d118      	bne.n	800757c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800754a:	4b7f      	ldr	r3, [pc, #508]	@ (8007748 <HAL_RCC_OscConfig+0x4c8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7e      	ldr	r2, [pc, #504]	@ (8007748 <HAL_RCC_OscConfig+0x4c8>)
 8007550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007556:	f7fa fb9d 	bl	8001c94 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fa fb99 	bl	8001c94 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b64      	cmp	r3, #100	@ 0x64
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e103      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007570:	4b75      	ldr	r3, [pc, #468]	@ (8007748 <HAL_RCC_OscConfig+0x4c8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d106      	bne.n	8007592 <HAL_RCC_OscConfig+0x312>
 8007584:	4b6f      	ldr	r3, [pc, #444]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	4a6e      	ldr	r2, [pc, #440]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	6213      	str	r3, [r2, #32]
 8007590:	e02d      	b.n	80075ee <HAL_RCC_OscConfig+0x36e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x334>
 800759a:	4b6a      	ldr	r3, [pc, #424]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	4a69      	ldr	r2, [pc, #420]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	6213      	str	r3, [r2, #32]
 80075a6:	4b67      	ldr	r3, [pc, #412]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	4a66      	ldr	r2, [pc, #408]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	6213      	str	r3, [r2, #32]
 80075b2:	e01c      	b.n	80075ee <HAL_RCC_OscConfig+0x36e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCC_OscConfig+0x356>
 80075bc:	4b61      	ldr	r3, [pc, #388]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	4a60      	ldr	r2, [pc, #384]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075c2:	f043 0304 	orr.w	r3, r3, #4
 80075c6:	6213      	str	r3, [r2, #32]
 80075c8:	4b5e      	ldr	r3, [pc, #376]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6213      	str	r3, [r2, #32]
 80075d4:	e00b      	b.n	80075ee <HAL_RCC_OscConfig+0x36e>
 80075d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4a5a      	ldr	r2, [pc, #360]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	6213      	str	r3, [r2, #32]
 80075e2:	4b58      	ldr	r3, [pc, #352]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	4a57      	ldr	r2, [pc, #348]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d015      	beq.n	8007622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075f6:	f7fa fb4d 	bl	8001c94 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fa fb49 	bl	8001c94 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0b1      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007614:	4b4b      	ldr	r3, [pc, #300]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ee      	beq.n	80075fe <HAL_RCC_OscConfig+0x37e>
 8007620:	e014      	b.n	800764c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007622:	f7fa fb37 	bl	8001c94 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fa fb33 	bl	8001c94 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e09b      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007640:	4b40      	ldr	r3, [pc, #256]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ee      	bne.n	800762a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4b3c      	ldr	r3, [pc, #240]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	4a3b      	ldr	r2, [pc, #236]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8087 	beq.w	8007776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007668:	4b36      	ldr	r3, [pc, #216]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b08      	cmp	r3, #8
 8007672:	d061      	beq.n	8007738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d146      	bne.n	800770a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b33      	ldr	r3, [pc, #204]	@ (800774c <HAL_RCC_OscConfig+0x4cc>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007682:	f7fa fb07 	bl	8001c94 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768a:	f7fa fb03 	bl	8001c94 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e06d      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800769c:	4b29      	ldr	r3, [pc, #164]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b0:	d108      	bne.n	80076c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80076b2:	4b24      	ldr	r3, [pc, #144]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	4921      	ldr	r1, [pc, #132]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a19      	ldr	r1, [r3, #32]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	430b      	orrs	r3, r1
 80076d6:	491b      	ldr	r1, [pc, #108]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076dc:	4b1b      	ldr	r3, [pc, #108]	@ (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e2:	f7fa fad7 	bl	8001c94 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ea:	f7fa fad3 	bl	8001c94 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e03d      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076fc:	4b11      	ldr	r3, [pc, #68]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x46a>
 8007708:	e035      	b.n	8007776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770a:	4b10      	ldr	r3, [pc, #64]	@ (800774c <HAL_RCC_OscConfig+0x4cc>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007710:	f7fa fac0 	bl	8001c94 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007718:	f7fa fabc 	bl	8001c94 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e026      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_RCC_OscConfig+0x4c4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x498>
 8007736:	e01e      	b.n	8007776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d107      	bne.n	8007750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e019      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
 8007744:	40021000 	.word	0x40021000
 8007748:	40007000 	.word	0x40007000
 800774c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCC_OscConfig+0x500>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	429a      	cmp	r2, r3
 8007762:	d106      	bne.n	8007772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776e:	429a      	cmp	r2, r3
 8007770:	d001      	beq.n	8007776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40021000 	.word	0x40021000

08007784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0d0      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007798:	4b6a      	ldr	r3, [pc, #424]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d910      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077a6:	4b67      	ldr	r3, [pc, #412]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 0207 	bic.w	r2, r3, #7
 80077ae:	4965      	ldr	r1, [pc, #404]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b6:	4b63      	ldr	r3, [pc, #396]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d001      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0b8      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077e0:	4b59      	ldr	r3, [pc, #356]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	4a58      	ldr	r2, [pc, #352]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80077e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80077ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077f8:	4b53      	ldr	r3, [pc, #332]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4a52      	ldr	r2, [pc, #328]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80077fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007804:	4b50      	ldr	r3, [pc, #320]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	494d      	ldr	r1, [pc, #308]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007812:	4313      	orrs	r3, r2
 8007814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d040      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782a:	4b47      	ldr	r3, [pc, #284]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e07f      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d107      	bne.n	8007852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007842:	4b41      	ldr	r3, [pc, #260]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e073      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007852:	4b3d      	ldr	r3, [pc, #244]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e06b      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007862:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f023 0203 	bic.w	r2, r3, #3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4936      	ldr	r1, [pc, #216]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007874:	f7fa fa0e 	bl	8001c94 <HAL_GetTick>
 8007878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787a:	e00a      	b.n	8007892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800787c:	f7fa fa0a 	bl	8001c94 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e053      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	4b2d      	ldr	r3, [pc, #180]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f003 020c 	and.w	r2, r3, #12
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d1eb      	bne.n	800787c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d210      	bcs.n	80078d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b2:	4b24      	ldr	r3, [pc, #144]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f023 0207 	bic.w	r2, r3, #7
 80078ba:	4922      	ldr	r1, [pc, #136]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	4313      	orrs	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c2:	4b20      	ldr	r3, [pc, #128]	@ (8007944 <HAL_RCC_ClockConfig+0x1c0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e032      	b.n	800793a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e0:	4b19      	ldr	r3, [pc, #100]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4916      	ldr	r1, [pc, #88]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80078fe:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	490e      	ldr	r1, [pc, #56]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 800790e:	4313      	orrs	r3, r2
 8007910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007912:	f000 f821 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 8007916:	4602      	mov	r2, r0
 8007918:	4b0b      	ldr	r3, [pc, #44]	@ (8007948 <HAL_RCC_ClockConfig+0x1c4>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	490a      	ldr	r1, [pc, #40]	@ (800794c <HAL_RCC_ClockConfig+0x1c8>)
 8007924:	5ccb      	ldrb	r3, [r1, r3]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	4a09      	ldr	r2, [pc, #36]	@ (8007950 <HAL_RCC_ClockConfig+0x1cc>)
 800792c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <HAL_RCC_ClockConfig+0x1d0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa f96c 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40022000 	.word	0x40022000
 8007948:	40021000 	.word	0x40021000
 800794c:	0800e730 	.word	0x0800e730
 8007950:	2000000c 	.word	0x2000000c
 8007954:	20000010 	.word	0x20000010

08007958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	2300      	movs	r3, #0
 800796c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007972:	4b1e      	ldr	r3, [pc, #120]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x94>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	2b04      	cmp	r3, #4
 8007980:	d002      	beq.n	8007988 <HAL_RCC_GetSysClockFreq+0x30>
 8007982:	2b08      	cmp	r3, #8
 8007984:	d003      	beq.n	800798e <HAL_RCC_GetSysClockFreq+0x36>
 8007986:	e027      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007988:	4b19      	ldr	r3, [pc, #100]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800798a:	613b      	str	r3, [r7, #16]
      break;
 800798c:	e027      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	0c9b      	lsrs	r3, r3, #18
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	4a17      	ldr	r2, [pc, #92]	@ (80079f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007998:	5cd3      	ldrb	r3, [r2, r3]
 800799a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d010      	beq.n	80079c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079a6:	4b11      	ldr	r3, [pc, #68]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x94>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	0c5b      	lsrs	r3, r3, #17
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	4a11      	ldr	r2, [pc, #68]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80079b2:	5cd3      	ldrb	r3, [r2, r3]
 80079b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a0d      	ldr	r2, [pc, #52]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80079ba:	fb03 f202 	mul.w	r2, r3, r2
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e004      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a0c      	ldr	r2, [pc, #48]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	613b      	str	r3, [r7, #16]
      break;
 80079d6:	e002      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80079d8:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80079da:	613b      	str	r3, [r7, #16]
      break;
 80079dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079de:	693b      	ldr	r3, [r7, #16]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40021000 	.word	0x40021000
 80079f0:	007a1200 	.word	0x007a1200
 80079f4:	0800e748 	.word	0x0800e748
 80079f8:	0800e758 	.word	0x0800e758
 80079fc:	003d0900 	.word	0x003d0900

08007a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a04:	4b02      	ldr	r3, [pc, #8]	@ (8007a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a06:	681b      	ldr	r3, [r3, #0]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a18:	f7ff fff2 	bl	8007a00 <HAL_RCC_GetHCLKFreq>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	4b05      	ldr	r3, [pc, #20]	@ (8007a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	4903      	ldr	r1, [pc, #12]	@ (8007a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a2a:	5ccb      	ldrb	r3, [r1, r3]
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40021000 	.word	0x40021000
 8007a38:	0800e740 	.word	0x0800e740

08007a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a44:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <RCC_Delay+0x34>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a0a      	ldr	r2, [pc, #40]	@ (8007a74 <RCC_Delay+0x38>)
 8007a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4e:	0a5b      	lsrs	r3, r3, #9
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
 8007a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a58:	bf00      	nop
  }
  while (Delay --);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	60fa      	str	r2, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1f9      	bne.n	8007a58 <RCC_Delay+0x1c>
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr
 8007a70:	2000000c 	.word	0x2000000c
 8007a74:	10624dd3 	.word	0x10624dd3

08007a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07d      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a98:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10d      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aae:	61d3      	str	r3, [r2, #28]
 8007ab0:	4b49      	ldr	r3, [pc, #292]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ac0:	4b46      	ldr	r3, [pc, #280]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d118      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007acc:	4b43      	ldr	r3, [pc, #268]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a42      	ldr	r2, [pc, #264]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ad8:	f7fa f8dc 	bl	8001c94 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ade:	e008      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae0:	f7fa f8d8 	bl	8001c94 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b64      	cmp	r3, #100	@ 0x64
 8007aec:	d901      	bls.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e06d      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af2:	4b3a      	ldr	r3, [pc, #232]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007afe:	4b36      	ldr	r3, [pc, #216]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d02e      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d027      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b26:	4b2e      	ldr	r3, [pc, #184]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b32:	4a29      	ldr	r2, [pc, #164]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d014      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b42:	f7fa f8a7 	bl	8001c94 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b48:	e00a      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b4a:	f7fa f8a3 	bl	8001c94 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e036      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b60:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0ee      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4917      	ldr	r1, [pc, #92]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d105      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b84:	4b14      	ldr	r3, [pc, #80]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4a13      	ldr	r2, [pc, #76]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	490b      	ldr	r1, [pc, #44]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bba:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4904      	ldr	r1, [pc, #16]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40007000 	.word	0x40007000
 8007be0:	42420440 	.word	0x42420440

08007be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e041      	b.n	8007c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7f9 fe6c 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f000 fab2 	bl	800818c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e041      	b.n	8007d18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f839 	bl	8007d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	f000 fa63 	bl	800818c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_TIM_PWM_Start+0x24>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	bf14      	ite	ne
 8007d50:	2301      	movne	r3, #1
 8007d52:	2300      	moveq	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	e022      	b.n	8007d9e <HAL_TIM_PWM_Start+0x6a>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d109      	bne.n	8007d72 <HAL_TIM_PWM_Start+0x3e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	e015      	b.n	8007d9e <HAL_TIM_PWM_Start+0x6a>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d109      	bne.n	8007d8c <HAL_TIM_PWM_Start+0x58>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	e008      	b.n	8007d9e <HAL_TIM_PWM_Start+0x6a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e05e      	b.n	8007e64 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Start+0x82>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db4:	e013      	b.n	8007dde <HAL_TIM_PWM_Start+0xaa>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d104      	bne.n	8007dc6 <HAL_TIM_PWM_Start+0x92>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc4:	e00b      	b.n	8007dde <HAL_TIM_PWM_Start+0xaa>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIM_PWM_Start+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dd4:	e003      	b.n	8007dde <HAL_TIM_PWM_Start+0xaa>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2201      	movs	r2, #1
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fc5c 	bl	80086a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e6c <HAL_TIM_PWM_Start+0x138>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d107      	bne.n	8007e06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a18      	ldr	r2, [pc, #96]	@ (8007e6c <HAL_TIM_PWM_Start+0x138>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00e      	beq.n	8007e2e <HAL_TIM_PWM_Start+0xfa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e18:	d009      	beq.n	8007e2e <HAL_TIM_PWM_Start+0xfa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a14      	ldr	r2, [pc, #80]	@ (8007e70 <HAL_TIM_PWM_Start+0x13c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_TIM_PWM_Start+0xfa>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a12      	ldr	r2, [pc, #72]	@ (8007e74 <HAL_TIM_PWM_Start+0x140>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d111      	bne.n	8007e52 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b06      	cmp	r3, #6
 8007e3e:	d010      	beq.n	8007e62 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e50:	e007      	b.n	8007e62 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0201 	orr.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800

08007e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e0ae      	b.n	8007ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	f200 809f 	bhi.w	8007fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007fe5 	.word	0x08007fe5
 8007eb4:	08007fe5 	.word	0x08007fe5
 8007eb8:	08007fe5 	.word	0x08007fe5
 8007ebc:	08007f21 	.word	0x08007f21
 8007ec0:	08007fe5 	.word	0x08007fe5
 8007ec4:	08007fe5 	.word	0x08007fe5
 8007ec8:	08007fe5 	.word	0x08007fe5
 8007ecc:	08007f63 	.word	0x08007f63
 8007ed0:	08007fe5 	.word	0x08007fe5
 8007ed4:	08007fe5 	.word	0x08007fe5
 8007ed8:	08007fe5 	.word	0x08007fe5
 8007edc:	08007fa3 	.word	0x08007fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f9be 	bl	8008268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6999      	ldr	r1, [r3, #24]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	619a      	str	r2, [r3, #24]
      break;
 8007f1e:	e064      	b.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fa04 	bl	8008334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6999      	ldr	r1, [r3, #24]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	021a      	lsls	r2, r3, #8
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	619a      	str	r2, [r3, #24]
      break;
 8007f60:	e043      	b.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fa4d 	bl	8008408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0208 	orr.w	r2, r2, #8
 8007f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0204 	bic.w	r2, r2, #4
 8007f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69d9      	ldr	r1, [r3, #28]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	61da      	str	r2, [r3, #28]
      break;
 8007fa0:	e023      	b.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fa97 	bl	80084dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69d9      	ldr	r1, [r3, #28]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	021a      	lsls	r2, r3, #8
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	61da      	str	r2, [r3, #28]
      break;
 8007fe2:	e002      	b.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_TIM_ConfigClockSource+0x1c>
 8008014:	2302      	movs	r3, #2
 8008016:	e0b4      	b.n	8008182 <HAL_TIM_ConfigClockSource+0x186>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800803e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008050:	d03e      	beq.n	80080d0 <HAL_TIM_ConfigClockSource+0xd4>
 8008052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008056:	f200 8087 	bhi.w	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800805e:	f000 8086 	beq.w	800816e <HAL_TIM_ConfigClockSource+0x172>
 8008062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008066:	d87f      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008068:	2b70      	cmp	r3, #112	@ 0x70
 800806a:	d01a      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0xa6>
 800806c:	2b70      	cmp	r3, #112	@ 0x70
 800806e:	d87b      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008070:	2b60      	cmp	r3, #96	@ 0x60
 8008072:	d050      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0x11a>
 8008074:	2b60      	cmp	r3, #96	@ 0x60
 8008076:	d877      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b50      	cmp	r3, #80	@ 0x50
 800807a:	d03c      	beq.n	80080f6 <HAL_TIM_ConfigClockSource+0xfa>
 800807c:	2b50      	cmp	r3, #80	@ 0x50
 800807e:	d873      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b40      	cmp	r3, #64	@ 0x40
 8008082:	d058      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x13a>
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d86f      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b30      	cmp	r3, #48	@ 0x30
 800808a:	d064      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x15a>
 800808c:	2b30      	cmp	r3, #48	@ 0x30
 800808e:	d86b      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b20      	cmp	r3, #32
 8008092:	d060      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x15a>
 8008094:	2b20      	cmp	r3, #32
 8008096:	d867      	bhi.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d05c      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x15a>
 800809c:	2b10      	cmp	r3, #16
 800809e:	d05a      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x15a>
 80080a0:	e062      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080b2:	f000 fad8 	bl	8008666 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	609a      	str	r2, [r3, #8]
      break;
 80080ce:	e04f      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080e0:	f000 fac1 	bl	8008666 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080f2:	609a      	str	r2, [r3, #8]
      break;
 80080f4:	e03c      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008102:	461a      	mov	r2, r3
 8008104:	f000 fa38 	bl	8008578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2150      	movs	r1, #80	@ 0x50
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fa8f 	bl	8008632 <TIM_ITRx_SetConfig>
      break;
 8008114:	e02c      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008122:	461a      	mov	r2, r3
 8008124:	f000 fa56 	bl	80085d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2160      	movs	r1, #96	@ 0x60
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fa7f 	bl	8008632 <TIM_ITRx_SetConfig>
      break;
 8008134:	e01c      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	461a      	mov	r2, r3
 8008144:	f000 fa18 	bl	8008578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2140      	movs	r1, #64	@ 0x40
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fa6f 	bl	8008632 <TIM_ITRx_SetConfig>
      break;
 8008154:	e00c      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f000 fa66 	bl	8008632 <TIM_ITRx_SetConfig>
      break;
 8008166:	e003      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
      break;
 800816c:	e000      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800816e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a2f      	ldr	r2, [pc, #188]	@ (800825c <TIM_Base_SetConfig+0xd0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00b      	beq.n	80081bc <TIM_Base_SetConfig+0x30>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0x30>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008260 <TIM_Base_SetConfig+0xd4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0x30>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008264 <TIM_Base_SetConfig+0xd8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d108      	bne.n	80081ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a22      	ldr	r2, [pc, #136]	@ (800825c <TIM_Base_SetConfig+0xd0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00b      	beq.n	80081ee <TIM_Base_SetConfig+0x62>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081dc:	d007      	beq.n	80081ee <TIM_Base_SetConfig+0x62>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <TIM_Base_SetConfig+0xd4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d003      	beq.n	80081ee <TIM_Base_SetConfig+0x62>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <TIM_Base_SetConfig+0xd8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d108      	bne.n	8008200 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a0d      	ldr	r2, [pc, #52]	@ (800825c <TIM_Base_SetConfig+0xd0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d103      	bne.n	8008234 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	611a      	str	r2, [r3, #16]
  }
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800

08008268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f023 0201 	bic.w	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f023 0302 	bic.w	r3, r3, #2
 80082b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a1c      	ldr	r2, [pc, #112]	@ (8008330 <TIM_OC1_SetConfig+0xc8>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d10c      	bne.n	80082de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0308 	bic.w	r3, r3, #8
 80082ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f023 0304 	bic.w	r3, r3, #4
 80082dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a13      	ldr	r2, [pc, #76]	@ (8008330 <TIM_OC1_SetConfig+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d111      	bne.n	800830a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40012c00 	.word	0x40012c00

08008334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	f023 0210 	bic.w	r2, r3, #16
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800836a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0320 	bic.w	r3, r3, #32
 800837e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1d      	ldr	r2, [pc, #116]	@ (8008404 <TIM_OC2_SetConfig+0xd0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10d      	bne.n	80083b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800839a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a14      	ldr	r2, [pc, #80]	@ (8008404 <TIM_OC2_SetConfig+0xd0>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d113      	bne.n	80083e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4313      	orrs	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	621a      	str	r2, [r3, #32]
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr
 8008404:	40012c00 	.word	0x40012c00

08008408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <TIM_OC3_SetConfig+0xd0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10d      	bne.n	8008482 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800846c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a14      	ldr	r2, [pc, #80]	@ (80084d8 <TIM_OC3_SetConfig+0xd0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d113      	bne.n	80084b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	621a      	str	r2, [r3, #32]
}
 80084cc:	bf00      	nop
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40012c00 	.word	0x40012c00

080084dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <TIM_OC4_SetConfig+0x98>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d109      	bne.n	8008550 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	019b      	lsls	r3, r3, #6
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr
 8008574:	40012c00 	.word	0x40012c00

08008578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f023 0201 	bic.w	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f023 030a 	bic.w	r3, r3, #10
 80085b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f023 0210 	bic.w	r2, r3, #16
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	031b      	lsls	r3, r3, #12
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008610:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	621a      	str	r2, [r3, #32]
}
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	f043 0307 	orr.w	r3, r3, #7
 8008654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	609a      	str	r2, [r3, #8]
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr

08008666 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008666:	b480      	push	{r7}
 8008668:	b087      	sub	sp, #28
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008680:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	021a      	lsls	r2, r3, #8
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	431a      	orrs	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4313      	orrs	r3, r2
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	609a      	str	r2, [r3, #8]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2201      	movs	r2, #1
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	43db      	mvns	r3, r3
 80086c6:	401a      	ands	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1a      	ldr	r2, [r3, #32]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	431a      	orrs	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e046      	b.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a16      	ldr	r2, [pc, #88]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008750:	d009      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a12      	ldr	r2, [pc, #72]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a10      	ldr	r2, [pc, #64]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10c      	bne.n	8008780 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4313      	orrs	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800

080087a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e03d      	b.n	8008840 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	4638      	mov	r0, r7
 8008854:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008874:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008878:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	b29a      	uxth	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008898:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800889c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	43db      	mvns	r3, r3
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	4013      	ands	r3, r2
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	4638      	mov	r0, r7
 80088e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr
	...

08008918 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008918:	b480      	push	{r7}
 800891a:	b09d      	sub	sp, #116	@ 0x74
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800893a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800893e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	78db      	ldrb	r3, [r3, #3]
 8008946:	2b03      	cmp	r3, #3
 8008948:	d81f      	bhi.n	800898a <USB_ActivateEndpoint+0x72>
 800894a:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <USB_ActivateEndpoint+0x38>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008961 	.word	0x08008961
 8008954:	0800897d 	.word	0x0800897d
 8008958:	08008993 	.word	0x08008993
 800895c:	0800896f 	.word	0x0800896f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008960:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008968:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800896c:	e012      	b.n	8008994 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800896e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008972:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008976:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800897a:	e00b      	b.n	8008994 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800897c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008984:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008988:	e004      	b.n	8008994 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008990:	e000      	b.n	8008994 <USB_ActivateEndpoint+0x7c>
      break;
 8008992:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	441a      	add	r2, r3
 800899e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80089a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	7812      	ldrb	r2, [r2, #0]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80089e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	7b1b      	ldrb	r3, [r3, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 8178 	bne.w	8008cf4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 8084 	beq.w	8008b16 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	4413      	add	r3, r2
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	011a      	lsls	r2, r3, #4
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	88db      	ldrh	r3, [r3, #6]
 8008a36:	085b      	lsrs	r3, r3, #1
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	827b      	strh	r3, [r7, #18]
 8008a50:	8a7b      	ldrh	r3, [r7, #18]
 8008a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01b      	beq.n	8008a92 <USB_ActivateEndpoint+0x17a>
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a70:	823b      	strh	r3, [r7, #16]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	441a      	add	r2, r3
 8008a7c:	8a3b      	ldrh	r3, [r7, #16]
 8008a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d020      	beq.n	8008adc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab0:	81bb      	strh	r3, [r7, #12]
 8008ab2:	89bb      	ldrh	r3, [r7, #12]
 8008ab4:	f083 0320 	eor.w	r3, r3, #32
 8008ab8:	81bb      	strh	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	441a      	add	r2, r3
 8008ac4:	89bb      	ldrh	r3, [r7, #12]
 8008ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8013      	strh	r3, [r2, #0]
 8008ada:	e2d5      	b.n	8009088 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af2:	81fb      	strh	r3, [r7, #14]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	441a      	add	r2, r3
 8008afe:	89fb      	ldrh	r3, [r7, #14]
 8008b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	8013      	strh	r3, [r2, #0]
 8008b14:	e2b8      	b.n	8009088 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	461a      	mov	r2, r3
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	4413      	add	r3, r2
 8008b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	011a      	lsls	r2, r3, #4
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	4413      	add	r3, r2
 8008b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	4413      	add	r3, r2
 8008b68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b84:	d91d      	bls.n	8008bc2 <USB_ActivateEndpoint+0x2aa>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <USB_ActivateEndpoint+0x288>
 8008b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	029b      	lsls	r3, r3, #10
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	e026      	b.n	8008c10 <USB_ActivateEndpoint+0x2f8>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <USB_ActivateEndpoint+0x2c8>
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	e017      	b.n	8008c10 <USB_ActivateEndpoint+0x2f8>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	085b      	lsrs	r3, r3, #1
 8008be6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <USB_ActivateEndpoint+0x2e2>
 8008bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	029b      	lsls	r3, r3, #10
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01b      	beq.n	8008c60 <USB_ActivateEndpoint+0x348>
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3e:	843b      	strh	r3, [r7, #32]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	8c3b      	ldrh	r3, [r7, #32]
 8008c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d124      	bne.n	8008cb2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7e:	83bb      	strh	r3, [r7, #28]
 8008c80:	8bbb      	ldrh	r3, [r7, #28]
 8008c82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c86:	83bb      	strh	r3, [r7, #28]
 8008c88:	8bbb      	ldrh	r3, [r7, #28]
 8008c8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c8e:	83bb      	strh	r3, [r7, #28]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	441a      	add	r2, r3
 8008c9a:	8bbb      	ldrh	r3, [r7, #28]
 8008c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	8013      	strh	r3, [r2, #0]
 8008cb0:	e1ea      	b.n	8009088 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc8:	83fb      	strh	r3, [r7, #30]
 8008cca:	8bfb      	ldrh	r3, [r7, #30]
 8008ccc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cd0:	83fb      	strh	r3, [r7, #30]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	8bfb      	ldrh	r3, [r7, #30]
 8008cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	8013      	strh	r3, [r2, #0]
 8008cf2:	e1c9      	b.n	8009088 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	78db      	ldrb	r3, [r3, #3]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d11e      	bne.n	8008d3a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d12:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
 8008d38:	e01d      	b.n	8008d76 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d50:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	441a      	add	r2, r3
 8008d5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d86:	4413      	add	r3, r2
 8008d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	011a      	lsls	r2, r3, #4
 8008d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	891b      	ldrh	r3, [r3, #8]
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dba:	4413      	add	r3, r2
 8008dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	011a      	lsls	r2, r3, #4
 8008dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	895b      	ldrh	r3, [r3, #10]
 8008dd2:	085b      	lsrs	r3, r3, #1
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ddc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f040 8093 	bne.w	8008f0e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01b      	beq.n	8008e3c <USB_ActivateEndpoint+0x524>
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008e4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01b      	beq.n	8008e8c <USB_ActivateEndpoint+0x574>
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	441a      	add	r2, r3
 8008e76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008ea4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ea6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008eaa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008eac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008eae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008eb2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	441a      	add	r2, r3
 8008ebe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	441a      	add	r2, r3
 8008ef6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	8013      	strh	r3, [r2, #0]
 8008f0c:	e0bc      	b.n	8009088 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008f1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01d      	beq.n	8008f66 <USB_ActivateEndpoint+0x64e>
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f40:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	441a      	add	r2, r3
 8008f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008f76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01d      	beq.n	8008fbe <USB_ActivateEndpoint+0x6a6>
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f98:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	441a      	add	r2, r3
 8008fa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	78db      	ldrb	r3, [r3, #3]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d024      	beq.n	8009010 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fdc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008fe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008fe4:	f083 0320 	eor.w	r3, r3, #32
 8008fe8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	441a      	add	r2, r3
 8008ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800900a:	b29b      	uxth	r3, r3
 800900c:	8013      	strh	r3, [r2, #0]
 800900e:	e01d      	b.n	800904c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	441a      	add	r2, r3
 8009034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800903c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009048:	b29b      	uxth	r3, r3
 800904a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800905e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009062:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	441a      	add	r2, r3
 8009070:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800907c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009084:	b29b      	uxth	r3, r3
 8009086:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009088:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800908c:	4618      	mov	r0, r3
 800908e:	3774      	adds	r7, #116	@ 0x74
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop

08009098 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009098:	b480      	push	{r7}
 800909a:	b08d      	sub	sp, #52	@ 0x34
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	7b1b      	ldrb	r3, [r3, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 808e 	bne.w	80091c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d044      	beq.n	800913e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	81bb      	strh	r3, [r7, #12]
 80090c2:	89bb      	ldrh	r3, [r7, #12]
 80090c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <USB_DeactivateEndpoint+0x6c>
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e2:	817b      	strh	r3, [r7, #10]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	441a      	add	r2, r3
 80090ee:	897b      	ldrh	r3, [r7, #10]
 80090f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009100:	b29b      	uxth	r3, r3
 8009102:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911a:	813b      	strh	r3, [r7, #8]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	441a      	add	r2, r3
 8009126:	893b      	ldrh	r3, [r7, #8]
 8009128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009138:	b29b      	uxth	r3, r3
 800913a:	8013      	strh	r3, [r2, #0]
 800913c:	e192      	b.n	8009464 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	827b      	strh	r3, [r7, #18]
 800914c:	8a7b      	ldrh	r3, [r7, #18]
 800914e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01b      	beq.n	800918e <USB_DeactivateEndpoint+0xf6>
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916c:	823b      	strh	r3, [r7, #16]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	8a3b      	ldrh	r3, [r7, #16]
 800917a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800917e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918a:	b29b      	uxth	r3, r3
 800918c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a4:	81fb      	strh	r3, [r7, #14]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	441a      	add	r2, r3
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	8013      	strh	r3, [r2, #0]
 80091c6:	e14d      	b.n	8009464 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f040 80a5 	bne.w	800931c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	843b      	strh	r3, [r7, #32]
 80091e0:	8c3b      	ldrh	r3, [r7, #32]
 80091e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01b      	beq.n	8009222 <USB_DeactivateEndpoint+0x18a>
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009200:	83fb      	strh	r3, [r7, #30]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	441a      	add	r2, r3
 800920c:	8bfb      	ldrh	r3, [r7, #30]
 800920e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009216:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800921a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800921e:	b29b      	uxth	r3, r3
 8009220:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	83bb      	strh	r3, [r7, #28]
 8009230:	8bbb      	ldrh	r3, [r7, #28]
 8009232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01b      	beq.n	8009272 <USB_DeactivateEndpoint+0x1da>
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800924c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009250:	837b      	strh	r3, [r7, #26]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	441a      	add	r2, r3
 800925c:	8b7b      	ldrh	r3, [r7, #26]
 800925e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800926a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800926e:	b29b      	uxth	r3, r3
 8009270:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009288:	833b      	strh	r3, [r7, #24]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	441a      	add	r2, r3
 8009294:	8b3b      	ldrh	r3, [r7, #24]
 8009296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800929e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c0:	82fb      	strh	r3, [r7, #22]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	441a      	add	r2, r3
 80092cc:	8afb      	ldrh	r3, [r7, #22]
 80092ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092de:	b29b      	uxth	r3, r3
 80092e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f8:	82bb      	strh	r3, [r7, #20]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	441a      	add	r2, r3
 8009304:	8abb      	ldrh	r3, [r7, #20]
 8009306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800930a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009316:	b29b      	uxth	r3, r3
 8009318:	8013      	strh	r3, [r2, #0]
 800931a:	e0a3      	b.n	8009464 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800932a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800932c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01b      	beq.n	800936c <USB_DeactivateEndpoint+0x2d4>
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b29b      	uxth	r3, r3
 8009342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	441a      	add	r2, r3
 8009356:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009360:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009368:	b29b      	uxth	r3, r3
 800936a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800937a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800937c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01b      	beq.n	80093bc <USB_DeactivateEndpoint+0x324>
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800939a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	441a      	add	r2, r3
 80093a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	441a      	add	r2, r3
 80093de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	441a      	add	r2, r3
 8009416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800941c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009428:	b29b      	uxth	r3, r3
 800942a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800943e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009442:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	441a      	add	r2, r3
 800944e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009460:	b29b      	uxth	r3, r3
 8009462:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3734      	adds	r7, #52	@ 0x34
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr

08009470 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b0c2      	sub	sp, #264	@ 0x108
 8009474:	af00      	add	r7, sp, #0
 8009476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800947e:	6018      	str	r0, [r3, #0]
 8009480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009488:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800948a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b01      	cmp	r3, #1
 8009498:	f040 86b7 	bne.w	800a20a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800949c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d908      	bls.n	80094ca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80094b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80094c8:	e007      	b.n	80094da <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80094ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80094da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	7b1b      	ldrb	r3, [r3, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d13a      	bne.n	8009560 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80094ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6959      	ldr	r1, [r3, #20]
 80094f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	88da      	ldrh	r2, [r3, #6]
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	b29b      	uxth	r3, r3
 8009508:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800950c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009510:	6800      	ldr	r0, [r0, #0]
 8009512:	f001 fc9c 	bl	800ae4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009530:	b29b      	uxth	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4413      	add	r3, r2
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	011a      	lsls	r2, r3, #4
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	f000 be1f 	b.w	800a19e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	78db      	ldrb	r3, [r3, #3]
 800956c:	2b02      	cmp	r3, #2
 800956e:	f040 8462 	bne.w	8009e36 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6a1a      	ldr	r2, [r3, #32]
 800957e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	f240 83df 	bls.w	8009d4e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80095ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	441a      	add	r2, r3
 80095d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80095d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095e0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80095e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a1a      	ldr	r2, [r3, #32]
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	1ad2      	subs	r2, r2, r3
 80095fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800960a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 81c7 	beq.w	80099c0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	633b      	str	r3, [r7, #48]	@ 0x30
 800963e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d177      	bne.n	800973e <USB_EPStartXfer+0x2ce>
 800964e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800965a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009668:	b29b      	uxth	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966e:	4413      	add	r3, r2
 8009670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	011a      	lsls	r2, r3, #4
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	4413      	add	r3, r2
 8009684:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009694:	b29a      	uxth	r2, r3
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	2b3e      	cmp	r3, #62	@ 0x3e
 80096a0:	d921      	bls.n	80096e6 <USB_EPStartXfer+0x276>
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <USB_EPStartXfer+0x252>
 80096b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80096bc:	3b01      	subs	r3, #1
 80096be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	029b      	lsls	r3, r3, #10
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e050      	b.n	8009788 <USB_EPStartXfer+0x318>
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <USB_EPStartXfer+0x294>
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	801a      	strh	r2, [r3, #0]
 8009702:	e041      	b.n	8009788 <USB_EPStartXfer+0x318>
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <USB_EPStartXfer+0x2b4>
 800971a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800971e:	3301      	adds	r3, #1
 8009720:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800972e:	b29b      	uxth	r3, r3
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	b29b      	uxth	r3, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	b29a      	uxth	r2, r3
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e024      	b.n	8009788 <USB_EPStartXfer+0x318>
 800973e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d11c      	bne.n	8009788 <USB_EPStartXfer+0x318>
 800974e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800975c:	b29b      	uxth	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	4413      	add	r3, r2
 8009764:	633b      	str	r3, [r7, #48]	@ 0x30
 8009766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	011a      	lsls	r2, r3, #4
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	4413      	add	r3, r2
 8009778:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800977c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800977e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009782:	b29a      	uxth	r2, r3
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800978c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	895b      	ldrh	r3, [r3, #10]
 8009794:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6959      	ldr	r1, [r3, #20]
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097b6:	6800      	ldr	r0, [r0, #0]
 80097b8:	f001 fb49 	bl	800ae4e <USB_WritePMA>
            ep->xfer_buff += len;
 80097bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695a      	ldr	r2, [r3, #20]
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097cc:	441a      	add	r2, r3
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6a1a      	ldr	r2, [r3, #32]
 80097e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d90f      	bls.n	8009816 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80097f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6a1a      	ldr	r2, [r3, #32]
 8009802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800980c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	621a      	str	r2, [r3, #32]
 8009814:	e00e      	b.n	8009834 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2200      	movs	r2, #0
 8009832:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d177      	bne.n	8009934 <USB_EPStartXfer+0x4c4>
 8009844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	61bb      	str	r3, [r7, #24]
 8009850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800985e:	b29b      	uxth	r3, r3
 8009860:	461a      	mov	r2, r3
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	4413      	add	r3, r2
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	011a      	lsls	r2, r3, #4
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4413      	add	r3, r2
 800987a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800988a:	b29a      	uxth	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009894:	2b3e      	cmp	r3, #62	@ 0x3e
 8009896:	d921      	bls.n	80098dc <USB_EPStartXfer+0x46c>
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989c:	095b      	lsrs	r3, r3, #5
 800989e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <USB_EPStartXfer+0x448>
 80098ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098b2:	3b01      	subs	r3, #1
 80098b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	029b      	lsls	r3, r3, #10
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e056      	b.n	800998a <USB_EPStartXfer+0x51a>
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <USB_EPStartXfer+0x48a>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e047      	b.n	800998a <USB_EPStartXfer+0x51a>
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <USB_EPStartXfer+0x4aa>
 8009910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009914:	3301      	adds	r3, #1
 8009916:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	b29a      	uxth	r2, r3
 8009920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009924:	b29b      	uxth	r3, r3
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	b29b      	uxth	r3, r3
 800992a:	4313      	orrs	r3, r2
 800992c:	b29a      	uxth	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	e02a      	b.n	800998a <USB_EPStartXfer+0x51a>
 8009934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d122      	bne.n	800998a <USB_EPStartXfer+0x51a>
 8009944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800995e:	b29b      	uxth	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	4413      	add	r3, r2
 8009966:	623b      	str	r3, [r7, #32]
 8009968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	011a      	lsls	r2, r3, #4
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	4413      	add	r3, r2
 800997a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009984:	b29a      	uxth	r2, r3
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800998a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	891b      	ldrh	r3, [r3, #8]
 8009996:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800999a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6959      	ldr	r1, [r3, #20]
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80099b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80099b8:	6800      	ldr	r0, [r0, #0]
 80099ba:	f001 fa48 	bl	800ae4e <USB_WritePMA>
 80099be:	e3ee      	b.n	800a19e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	785b      	ldrb	r3, [r3, #1]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d177      	bne.n	8009ac0 <USB_EPStartXfer+0x650>
 80099d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f0:	4413      	add	r3, r2
 80099f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	011a      	lsls	r2, r3, #4
 8009a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a04:	4413      	add	r3, r2
 8009a06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a22:	d921      	bls.n	8009a68 <USB_EPStartXfer+0x5f8>
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d104      	bne.n	8009a44 <USB_EPStartXfer+0x5d4>
 8009a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	029b      	lsls	r3, r3, #10
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4313      	orrs	r3, r2
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	e056      	b.n	8009b16 <USB_EPStartXfer+0x6a6>
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <USB_EPStartXfer+0x616>
 8009a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e047      	b.n	8009b16 <USB_EPStartXfer+0x6a6>
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <USB_EPStartXfer+0x636>
 8009a9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009abc:	801a      	strh	r2, [r3, #0]
 8009abe:	e02a      	b.n	8009b16 <USB_EPStartXfer+0x6a6>
 8009ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d122      	bne.n	8009b16 <USB_EPStartXfer+0x6a6>
 8009ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8009adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af0:	4413      	add	r3, r2
 8009af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	011a      	lsls	r2, r3, #4
 8009b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b04:	4413      	add	r3, r2
 8009b06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	891b      	ldrh	r3, [r3, #8]
 8009b22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6959      	ldr	r1, [r3, #20]
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b44:	6800      	ldr	r0, [r0, #0]
 8009b46:	f001 f982 	bl	800ae4e <USB_WritePMA>
            ep->xfer_buff += len;
 8009b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695a      	ldr	r2, [r3, #20]
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5a:	441a      	add	r2, r3
 8009b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6a1a      	ldr	r2, [r3, #32]
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d90f      	bls.n	8009ba4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	621a      	str	r2, [r3, #32]
 8009ba2:	e00e      	b.n	8009bc2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d177      	bne.n	8009cce <USB_EPStartXfer+0x85e>
 8009bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	4413      	add	r3, r2
 8009c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	011a      	lsls	r2, r3, #4
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c30:	d921      	bls.n	8009c76 <USB_EPStartXfer+0x806>
 8009c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <USB_EPStartXfer+0x7e2>
 8009c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	029b      	lsls	r3, r3, #10
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4313      	orrs	r3, r2
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	e050      	b.n	8009d18 <USB_EPStartXfer+0x8a8>
 8009c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <USB_EPStartXfer+0x824>
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	e041      	b.n	8009d18 <USB_EPStartXfer+0x8a8>
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <USB_EPStartXfer+0x844>
 8009caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cae:	3301      	adds	r3, #1
 8009cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	029b      	lsls	r3, r3, #10
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e024      	b.n	8009d18 <USB_EPStartXfer+0x8a8>
 8009cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d11c      	bne.n	8009d18 <USB_EPStartXfer+0x8a8>
 8009cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cf2:	4413      	add	r3, r2
 8009cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	011a      	lsls	r2, r3, #4
 8009d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d06:	4413      	add	r3, r2
 8009d08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	895b      	ldrh	r3, [r3, #10]
 8009d24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6959      	ldr	r1, [r3, #20]
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d46:	6800      	ldr	r0, [r0, #0]
 8009d48:	f001 f881 	bl	800ae4e <USB_WritePMA>
 8009d4c:	e227      	b.n	800a19e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d84:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	441a      	add	r2, r3
 8009da2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dda:	4413      	add	r3, r2
 8009ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	011a      	lsls	r2, r3, #4
 8009dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dee:	4413      	add	r3, r2
 8009df0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	891b      	ldrh	r3, [r3, #8]
 8009e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6959      	ldr	r1, [r3, #20]
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	f001 f80d 	bl	800ae4e <USB_WritePMA>
 8009e34:	e1b3      	b.n	800a19e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a1a      	ldr	r2, [r3, #32]
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e46:	1ad2      	subs	r2, r2, r3
 8009e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 80c6 	beq.w	800a008 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d177      	bne.n	8009f88 <USB_EPStartXfer+0xb18>
 8009e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009eb8:	4413      	add	r3, r2
 8009eba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	011a      	lsls	r2, r3, #4
 8009eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ecc:	4413      	add	r3, r2
 8009ece:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eea:	d921      	bls.n	8009f30 <USB_EPStartXfer+0xac0>
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d104      	bne.n	8009f0c <USB_EPStartXfer+0xa9c>
 8009f02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f06:	3b01      	subs	r3, #1
 8009f08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	e050      	b.n	8009fd2 <USB_EPStartXfer+0xb62>
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <USB_EPStartXfer+0xade>
 8009f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f4a:	801a      	strh	r2, [r3, #0]
 8009f4c:	e041      	b.n	8009fd2 <USB_EPStartXfer+0xb62>
 8009f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f52:	085b      	lsrs	r3, r3, #1
 8009f54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <USB_EPStartXfer+0xafe>
 8009f64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	029b      	lsls	r3, r3, #10
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	e024      	b.n	8009fd2 <USB_EPStartXfer+0xb62>
 8009f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	785b      	ldrb	r3, [r3, #1]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d11c      	bne.n	8009fd2 <USB_EPStartXfer+0xb62>
 8009f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fac:	4413      	add	r3, r2
 8009fae:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	011a      	lsls	r2, r3, #4
 8009fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	895b      	ldrh	r3, [r3, #10]
 8009fde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6959      	ldr	r1, [r3, #20]
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ff8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ffc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	f000 ff24 	bl	800ae4e <USB_WritePMA>
 800a006:	e0ca      	b.n	800a19e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d177      	bne.n	800a108 <USB_EPStartXfer+0xc98>
 800a018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a01c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a032:	b29b      	uxth	r3, r3
 800a034:	461a      	mov	r2, r3
 800a036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a038:	4413      	add	r3, r2
 800a03a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	011a      	lsls	r2, r3, #4
 800a04a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a04c:	4413      	add	r3, r2
 800a04e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a052:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a05e:	b29a      	uxth	r2, r3
 800a060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a068:	2b3e      	cmp	r3, #62	@ 0x3e
 800a06a:	d921      	bls.n	800a0b0 <USB_EPStartXfer+0xc40>
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d104      	bne.n	800a08c <USB_EPStartXfer+0xc1c>
 800a082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a086:	3b01      	subs	r3, #1
 800a088:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a08c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29a      	uxth	r2, r3
 800a092:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a096:	b29b      	uxth	r3, r3
 800a098:	029b      	lsls	r3, r3, #10
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e05c      	b.n	800a16a <USB_EPStartXfer+0xcfa>
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <USB_EPStartXfer+0xc5e>
 800a0b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	e04d      	b.n	800a16a <USB_EPStartXfer+0xcfa>
 800a0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <USB_EPStartXfer+0xc7e>
 800a0e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a0ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	029b      	lsls	r3, r3, #10
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	4313      	orrs	r3, r2
 800a100:	b29a      	uxth	r2, r3
 800a102:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	e030      	b.n	800a16a <USB_EPStartXfer+0xcfa>
 800a108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d128      	bne.n	800a16a <USB_EPStartXfer+0xcfa>
 800a118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a11c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a134:	b29b      	uxth	r3, r3
 800a136:	461a      	mov	r2, r3
 800a138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a13c:	4413      	add	r3, r2
 800a13e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	011a      	lsls	r2, r3, #4
 800a150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a154:	4413      	add	r3, r2
 800a156:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a15a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a162:	b29a      	uxth	r2, r3
 800a164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a168:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a16a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	891b      	ldrh	r3, [r3, #8]
 800a176:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6959      	ldr	r1, [r3, #20]
 800a186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a190:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a194:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a198:	6800      	ldr	r0, [r0, #0]
 800a19a:	f000 fe58 	bl	800ae4e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c4:	817b      	strh	r3, [r7, #10]
 800a1c6:	897b      	ldrh	r3, [r7, #10]
 800a1c8:	f083 0310 	eor.w	r3, r3, #16
 800a1cc:	817b      	strh	r3, [r7, #10]
 800a1ce:	897b      	ldrh	r3, [r7, #10]
 800a1d0:	f083 0320 	eor.w	r3, r3, #32
 800a1d4:	817b      	strh	r3, [r7, #10]
 800a1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	897b      	ldrh	r3, [r7, #10]
 800a1f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a202:	b29b      	uxth	r3, r3
 800a204:	8013      	strh	r3, [r2, #0]
 800a206:	f000 bcde 	b.w	800abc6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	7b1b      	ldrb	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 80bb 	bne.w	800a392 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699a      	ldr	r2, [r3, #24]
 800a228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	429a      	cmp	r2, r3
 800a236:	d917      	bls.n	800a268 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	699a      	ldr	r2, [r3, #24]
 800a254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	619a      	str	r2, [r3, #24]
 800a266:	e00e      	b.n	800a286 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	011a      	lsls	r2, r3, #4
 800a2be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2e6:	d924      	bls.n	800a332 <USB_EPStartXfer+0xec2>
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ec:	095b      	lsrs	r3, r3, #5
 800a2ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f6:	f003 031f 	and.w	r3, r3, #31
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <USB_EPStartXfer+0xe98>
 800a2fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a302:	3b01      	subs	r3, #1
 800a304:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	b29a      	uxth	r2, r3
 800a310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a314:	b29b      	uxth	r3, r3
 800a316:	029b      	lsls	r3, r3, #10
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4313      	orrs	r3, r2
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a326:	b29a      	uxth	r2, r3
 800a328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a32c:	801a      	strh	r2, [r3, #0]
 800a32e:	f000 bc10 	b.w	800ab52 <USB_EPStartXfer+0x16e2>
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10c      	bne.n	800a354 <USB_EPStartXfer+0xee4>
 800a33a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	e3fe      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
 800a354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <USB_EPStartXfer+0xf04>
 800a36a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a36e:	3301      	adds	r3, #1
 800a370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a380:	b29b      	uxth	r3, r3
 800a382:	029b      	lsls	r3, r3, #10
 800a384:	b29b      	uxth	r3, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	b29a      	uxth	r2, r3
 800a38a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a38e:	801a      	strh	r2, [r3, #0]
 800a390:	e3df      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	78db      	ldrb	r3, [r3, #3]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	f040 8218 	bne.w	800a7d4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 809d 	bne.w	800a4f0 <USB_EPStartXfer+0x1080>
 800a3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3da:	4413      	add	r3, r2
 800a3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	011a      	lsls	r2, r3, #4
 800a3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	b29b      	uxth	r3, r3
 800a404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a408:	b29a      	uxth	r2, r3
 800a40a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a41e:	d92b      	bls.n	800a478 <USB_EPStartXfer+0x1008>
 800a420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	095b      	lsrs	r3, r3, #5
 800a42e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 031f 	and.w	r3, r3, #31
 800a442:	2b00      	cmp	r3, #0
 800a444:	d104      	bne.n	800a450 <USB_EPStartXfer+0xfe0>
 800a446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a44a:	3b01      	subs	r3, #1
 800a44c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	029b      	lsls	r3, r3, #10
 800a460:	b29b      	uxth	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b29b      	uxth	r3, r3
 800a466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46e:	b29a      	uxth	r2, r3
 800a470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a474:	801a      	strh	r2, [r3, #0]
 800a476:	e070      	b.n	800a55a <USB_EPStartXfer+0x10ea>
 800a478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10c      	bne.n	800a4a2 <USB_EPStartXfer+0x1032>
 800a488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a498:	b29a      	uxth	r2, r3
 800a49a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	e05b      	b.n	800a55a <USB_EPStartXfer+0x10ea>
 800a4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <USB_EPStartXfer+0x1062>
 800a4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	029b      	lsls	r3, r3, #10
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4ec:	801a      	strh	r2, [r3, #0]
 800a4ee:	e034      	b.n	800a55a <USB_EPStartXfer+0x10ea>
 800a4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d12c      	bne.n	800a55a <USB_EPStartXfer+0x10ea>
 800a500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a524:	4413      	add	r3, r2
 800a526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a52e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	011a      	lsls	r2, r3, #4
 800a538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a53c:	4413      	add	r3, r2
 800a53e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	b29a      	uxth	r2, r3
 800a554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a558:	801a      	strh	r2, [r3, #0]
 800a55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a55e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	785b      	ldrb	r3, [r3, #1]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f040 809d 	bne.w	800a6b4 <USB_EPStartXfer+0x1244>
 800a57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a57e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a58c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a596:	b29b      	uxth	r3, r3
 800a598:	461a      	mov	r2, r3
 800a59a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a59e:	4413      	add	r3, r2
 800a5a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	011a      	lsls	r2, r3, #4
 800a5b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a5bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5e2:	d92b      	bls.n	800a63c <USB_EPStartXfer+0x11cc>
 800a5e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	095b      	lsrs	r3, r3, #5
 800a5f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <USB_EPStartXfer+0x11a4>
 800a60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a60e:	3b01      	subs	r3, #1
 800a610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a620:	b29b      	uxth	r3, r3
 800a622:	029b      	lsls	r3, r3, #10
 800a624:	b29b      	uxth	r3, r3
 800a626:	4313      	orrs	r3, r2
 800a628:	b29b      	uxth	r3, r3
 800a62a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a632:	b29a      	uxth	r2, r3
 800a634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	e069      	b.n	800a710 <USB_EPStartXfer+0x12a0>
 800a63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10c      	bne.n	800a666 <USB_EPStartXfer+0x11f6>
 800a64c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	b29b      	uxth	r3, r3
 800a654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e054      	b.n	800a710 <USB_EPStartXfer+0x12a0>
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	085b      	lsrs	r3, r3, #1
 800a674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d004      	beq.n	800a696 <USB_EPStartXfer+0x1226>
 800a68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a690:	3301      	adds	r3, #1
 800a692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a696:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	029b      	lsls	r3, r3, #10
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6b0:	801a      	strh	r2, [r3, #0]
 800a6b2:	e02d      	b.n	800a710 <USB_EPStartXfer+0x12a0>
 800a6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d125      	bne.n	800a710 <USB_EPStartXfer+0x12a0>
 800a6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6da:	4413      	add	r3, r2
 800a6dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	011a      	lsls	r2, r3, #4
 800a6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	b29a      	uxth	r2, r3
 800a70a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a70e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8218 	beq.w	800ab52 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <USB_EPStartXfer+0x12ea>
 800a74e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10d      	bne.n	800a776 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a75a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a75e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a762:	2b00      	cmp	r3, #0
 800a764:	f040 81f5 	bne.w	800ab52 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a768:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	f040 81ee 	bne.w	800ab52 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a79c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	441a      	add	r2, r3
 800a7ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a7be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	8013      	strh	r3, [r2, #0]
 800a7d2:	e1be      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	78db      	ldrb	r3, [r3, #3]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	f040 81b4 	bne.w	800ab4e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	699a      	ldr	r2, [r3, #24]
 800a7f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d917      	bls.n	800a832 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	699a      	ldr	r2, [r3, #24]
 800a81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a822:	1ad2      	subs	r2, r2, r3
 800a824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	619a      	str	r2, [r3, #24]
 800a830:	e00e      	b.n	800a850 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2200      	movs	r2, #0
 800a84e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8085 	bne.w	800a96c <USB_EPStartXfer+0x14fc>
 800a862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a87e:	b29b      	uxth	r3, r3
 800a880:	461a      	mov	r2, r3
 800a882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a886:	4413      	add	r3, r2
 800a888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	011a      	lsls	r2, r3, #4
 800a89a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a89e:	4413      	add	r3, r2
 800a8a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8ba:	801a      	strh	r2, [r3, #0]
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8c2:	d923      	bls.n	800a90c <USB_EPStartXfer+0x149c>
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <USB_EPStartXfer+0x1474>
 800a8da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	029b      	lsls	r3, r3, #10
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a902:	b29a      	uxth	r2, r3
 800a904:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e060      	b.n	800a9ce <USB_EPStartXfer+0x155e>
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10c      	bne.n	800a92e <USB_EPStartXfer+0x14be>
 800a914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a924:	b29a      	uxth	r2, r3
 800a926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e04f      	b.n	800a9ce <USB_EPStartXfer+0x155e>
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <USB_EPStartXfer+0x14de>
 800a944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a948:	3301      	adds	r3, #1
 800a94a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a94e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	b29a      	uxth	r2, r3
 800a956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	029b      	lsls	r3, r3, #10
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4313      	orrs	r3, r2
 800a962:	b29a      	uxth	r2, r3
 800a964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a968:	801a      	strh	r2, [r3, #0]
 800a96a:	e030      	b.n	800a9ce <USB_EPStartXfer+0x155e>
 800a96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	785b      	ldrb	r3, [r3, #1]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d128      	bne.n	800a9ce <USB_EPStartXfer+0x155e>
 800a97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a98a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a98e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a998:	b29b      	uxth	r3, r3
 800a99a:	461a      	mov	r2, r3
 800a99c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	011a      	lsls	r2, r3, #4
 800a9b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a9cc:	801a      	strh	r2, [r3, #0]
 800a9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 8085 	bne.w	800aaf8 <USB_EPStartXfer+0x1688>
 800a9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa12:	4413      	add	r3, r2
 800aa14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aa18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	011a      	lsls	r2, r3, #4
 800aa26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aa30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa46:	801a      	strh	r2, [r3, #0]
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa4e:	d923      	bls.n	800aa98 <USB_EPStartXfer+0x1628>
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa54:	095b      	lsrs	r3, r3, #5
 800aa56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5e:	f003 031f 	and.w	r3, r3, #31
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <USB_EPStartXfer+0x1600>
 800aa66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	029b      	lsls	r3, r3, #10
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4313      	orrs	r3, r2
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e05c      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10c      	bne.n	800aaba <USB_EPStartXfer+0x164a>
 800aaa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aab6:	801a      	strh	r2, [r3, #0]
 800aab8:	e04b      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabe:	085b      	lsrs	r3, r3, #1
 800aac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <USB_EPStartXfer+0x166a>
 800aad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aad4:	3301      	adds	r3, #1
 800aad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	029b      	lsls	r3, r3, #10
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4313      	orrs	r3, r2
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaf4:	801a      	strh	r2, [r3, #0]
 800aaf6:	e02c      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
 800aaf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d124      	bne.n	800ab52 <USB_EPStartXfer+0x16e2>
 800ab08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab1e:	4413      	add	r3, r2
 800ab20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	011a      	lsls	r2, r3, #4
 800ab32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab36:	4413      	add	r3, r2
 800ab38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab4a:	801a      	strh	r2, [r3, #0]
 800ab4c:	e001      	b.n	800ab52 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e03a      	b.n	800abc8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	441a      	add	r2, r3
 800abae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800abb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b085      	sub	sp, #20
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d020      	beq.n	800ac26 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abfa:	81bb      	strh	r3, [r7, #12]
 800abfc:	89bb      	ldrh	r3, [r7, #12]
 800abfe:	f083 0310 	eor.w	r3, r3, #16
 800ac02:	81bb      	strh	r3, [r7, #12]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	441a      	add	r2, r3
 800ac0e:	89bb      	ldrh	r3, [r7, #12]
 800ac10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	8013      	strh	r3, [r2, #0]
 800ac24:	e01f      	b.n	800ac66 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac3c:	81fb      	strh	r3, [r7, #14]
 800ac3e:	89fb      	ldrh	r3, [r7, #14]
 800ac40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac44:	81fb      	strh	r3, [r7, #14]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	441a      	add	r2, r3
 800ac50:	89fb      	ldrh	r3, [r7, #14]
 800ac52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bc80      	pop	{r7}
 800ac70:	4770      	bx	lr

0800ac72 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b087      	sub	sp, #28
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	7b1b      	ldrb	r3, [r3, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 809d 	bne.w	800adc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d04c      	beq.n	800ad28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	823b      	strh	r3, [r7, #16]
 800ac9c:	8a3b      	ldrh	r3, [r7, #16]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d01b      	beq.n	800acde <USB_EPClearStall+0x6c>
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acbc:	81fb      	strh	r3, [r7, #14]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	441a      	add	r2, r3
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acda:	b29b      	uxth	r3, r3
 800acdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	78db      	ldrb	r3, [r3, #3]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d06c      	beq.n	800adc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acfc:	81bb      	strh	r3, [r7, #12]
 800acfe:	89bb      	ldrh	r3, [r7, #12]
 800ad00:	f083 0320 	eor.w	r3, r3, #32
 800ad04:	81bb      	strh	r3, [r7, #12]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	441a      	add	r2, r3
 800ad10:	89bb      	ldrh	r3, [r7, #12]
 800ad12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	8013      	strh	r3, [r2, #0]
 800ad26:	e04b      	b.n	800adc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	82fb      	strh	r3, [r7, #22]
 800ad36:	8afb      	ldrh	r3, [r7, #22]
 800ad38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d01b      	beq.n	800ad78 <USB_EPClearStall+0x106>
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad56:	82bb      	strh	r3, [r7, #20]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	441a      	add	r2, r3
 800ad62:	8abb      	ldrh	r3, [r7, #20]
 800ad64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad8e:	827b      	strh	r3, [r7, #18]
 800ad90:	8a7b      	ldrh	r3, [r7, #18]
 800ad92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad96:	827b      	strh	r3, [r7, #18]
 800ad98:	8a7b      	ldrh	r3, [r7, #18]
 800ad9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad9e:	827b      	strh	r3, [r7, #18]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	441a      	add	r2, r3
 800adaa:	8a7b      	ldrh	r3, [r7, #18]
 800adac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bc80      	pop	{r7}
 800adca:	4770      	bx	lr

0800adcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d103      	bne.n	800ade6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2280      	movs	r2, #128	@ 0x80
 800ade2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr

0800adf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr

0800ae06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr

0800ae1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bc80      	pop	{r7}
 800ae36:	4770      	bx	lr

0800ae38 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bc80      	pop	{r7}
 800ae4c:	4770      	bx	lr

0800ae4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b08b      	sub	sp, #44	@ 0x2c
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	4611      	mov	r1, r2
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	80fb      	strh	r3, [r7, #6]
 800ae60:	4613      	mov	r3, r2
 800ae62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ae64:	88bb      	ldrh	r3, [r7, #4]
 800ae66:	3301      	adds	r3, #1
 800ae68:	085b      	lsrs	r3, r3, #1
 800ae6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae74:	88fb      	ldrh	r3, [r7, #6]
 800ae76:	005a      	lsls	r2, r3, #1
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae80:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae86:	e01f      	b.n	800aec8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	3301      	adds	r3, #1
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	b21b      	sxth	r3, r3
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	b21a      	sxth	r2, r3
 800ae9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b21b      	sxth	r3, r3
 800aea2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	8a7a      	ldrh	r2, [r7, #18]
 800aea8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	3302      	adds	r3, #2
 800aeae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	3302      	adds	r3, #2
 800aeb4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3301      	adds	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec4:	3b01      	subs	r3, #1
 800aec6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1dc      	bne.n	800ae88 <USB_WritePMA+0x3a>
  }
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	372c      	adds	r7, #44	@ 0x2c
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bc80      	pop	{r7}
 800aed8:	4770      	bx	lr

0800aeda <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b08b      	sub	sp, #44	@ 0x2c
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	4611      	mov	r1, r2
 800aee6:	461a      	mov	r2, r3
 800aee8:	460b      	mov	r3, r1
 800aeea:	80fb      	strh	r3, [r7, #6]
 800aeec:	4613      	mov	r3, r2
 800aeee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aef0:	88bb      	ldrh	r3, [r7, #4]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	005a      	lsls	r2, r3, #1
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af0c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
 800af12:	e01b      	b.n	800af4c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	3302      	adds	r3, #2
 800af20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	b2da      	uxtb	r2, r3
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3301      	adds	r3, #1
 800af2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	0a1b      	lsrs	r3, r3, #8
 800af34:	b2da      	uxtb	r2, r3
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	3301      	adds	r3, #1
 800af3e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	3302      	adds	r3, #2
 800af44:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	3b01      	subs	r3, #1
 800af4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1e0      	bne.n	800af14 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800af52:	88bb      	ldrh	r3, [r7, #4]
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	b29b      	uxth	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29b      	uxth	r3, r3
 800af64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	701a      	strb	r2, [r3, #0]
  }
}
 800af6e:	bf00      	nop
 800af70:	372c      	adds	r7, #44	@ 0x2c
 800af72:	46bd      	mov	sp, r7
 800af74:	bc80      	pop	{r7}
 800af76:	4770      	bx	lr

0800af78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7c1b      	ldrb	r3, [r3, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d115      	bne.n	800afbc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af94:	2202      	movs	r2, #2
 800af96:	2181      	movs	r1, #129	@ 0x81
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 feac 	bl	800ccf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afa8:	2202      	movs	r2, #2
 800afaa:	2101      	movs	r1, #1
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fea2 	bl	800ccf6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800afba:	e012      	b.n	800afe2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800afbc:	2340      	movs	r3, #64	@ 0x40
 800afbe:	2202      	movs	r2, #2
 800afc0:	2181      	movs	r1, #129	@ 0x81
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fe97 	bl	800ccf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afce:	2340      	movs	r3, #64	@ 0x40
 800afd0:	2202      	movs	r2, #2
 800afd2:	2101      	movs	r1, #1
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fe8e 	bl	800ccf6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afe2:	2308      	movs	r3, #8
 800afe4:	2203      	movs	r2, #3
 800afe6:	2182      	movs	r1, #130	@ 0x82
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 fe84 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aff4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aff8:	f001 ffa4 	bl	800cf44 <USBD_static_malloc>
 800affc:	4602      	mov	r2, r0
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
 800b012:	e026      	b.n	800b062 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b01a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2200      	movs	r2, #0
 800b032:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7c1b      	ldrb	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b048:	2101      	movs	r1, #1
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f001 ff43 	bl	800ced6 <USBD_LL_PrepareReceive>
 800b050:	e007      	b.n	800b062 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b058:	2340      	movs	r3, #64	@ 0x40
 800b05a:	2101      	movs	r1, #1
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 ff3a 	bl	800ced6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b07c:	2181      	movs	r1, #129	@ 0x81
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 fe5f 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b08a:	2101      	movs	r1, #1
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 fe58 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b09a:	2182      	movs	r1, #130	@ 0x82
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 fe50 	bl	800cd42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f001 ff4a 	bl	800cf5c <USBD_static_free>
    pdev->pClassData = NULL;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b086      	sub	sp, #24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b100:	2b00      	cmp	r3, #0
 800b102:	d039      	beq.n	800b178 <USBD_CDC_Setup+0x9e>
 800b104:	2b20      	cmp	r3, #32
 800b106:	d17f      	bne.n	800b208 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d029      	beq.n	800b164 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	b25b      	sxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	da11      	bge.n	800b13e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b126:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	88d2      	ldrh	r2, [r2, #6]
 800b12c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b12e:	6939      	ldr	r1, [r7, #16]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	88db      	ldrh	r3, [r3, #6]
 800b134:	461a      	mov	r2, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 fa06 	bl	800c548 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b13c:	e06b      	b.n	800b216 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	785a      	ldrb	r2, [r3, #1]
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	88db      	ldrh	r3, [r3, #6]
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b154:	6939      	ldr	r1, [r7, #16]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	461a      	mov	r2, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f001 fa21 	bl	800c5a4 <USBD_CtlPrepareRx>
      break;
 800b162:	e058      	b.n	800b216 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	7850      	ldrb	r0, [r2, #1]
 800b170:	2200      	movs	r2, #0
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	4798      	blx	r3
      break;
 800b176:	e04e      	b.n	800b216 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b0b      	cmp	r3, #11
 800b17e:	d02e      	beq.n	800b1de <USBD_CDC_Setup+0x104>
 800b180:	2b0b      	cmp	r3, #11
 800b182:	dc38      	bgt.n	800b1f6 <USBD_CDC_Setup+0x11c>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <USBD_CDC_Setup+0xb4>
 800b188:	2b0a      	cmp	r3, #10
 800b18a:	d014      	beq.n	800b1b6 <USBD_CDC_Setup+0xdc>
 800b18c:	e033      	b.n	800b1f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b194:	2b03      	cmp	r3, #3
 800b196:	d107      	bne.n	800b1a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b198:	f107 030c 	add.w	r3, r7, #12
 800b19c:	2202      	movs	r2, #2
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f001 f9d1 	bl	800c548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1a6:	e02e      	b.n	800b206 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 f962 	bl	800c474 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b4:	e027      	b.n	800b206 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d107      	bne.n	800b1d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b1c0:	f107 030f 	add.w	r3, r7, #15
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f9bd 	bl	800c548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1ce:	e01a      	b.n	800b206 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f001 f94e 	bl	800c474 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	75fb      	strb	r3, [r7, #23]
          break;
 800b1dc:	e013      	b.n	800b206 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d00d      	beq.n	800b204 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 f942 	bl	800c474 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1f4:	e006      	b.n	800b204 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 f93b 	bl	800c474 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1fe:	2302      	movs	r3, #2
 800b200:	75fb      	strb	r3, [r7, #23]
          break;
 800b202:	e000      	b.n	800b206 <USBD_CDC_Setup+0x12c>
          break;
 800b204:	bf00      	nop
      }
      break;
 800b206:	e006      	b.n	800b216 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f932 	bl	800c474 <USBD_CtlError>
      ret = USBD_FAIL;
 800b210:	2302      	movs	r3, #2
 800b212:	75fb      	strb	r3, [r7, #23]
      break;
 800b214:	bf00      	nop
  }

  return ret;
 800b216:	7dfb      	ldrb	r3, [r7, #23]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b232:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b23a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b242:	2b00      	cmp	r3, #0
 800b244:	d03a      	beq.n	800b2bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	440b      	add	r3, r1
 800b254:	331c      	adds	r3, #28
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d029      	beq.n	800b2b0 <USBD_CDC_DataIn+0x90>
 800b25c:	78fa      	ldrb	r2, [r7, #3]
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	331c      	adds	r3, #28
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	78f9      	ldrb	r1, [r7, #3]
 800b270:	68b8      	ldr	r0, [r7, #8]
 800b272:	460b      	mov	r3, r1
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	4403      	add	r3, r0
 800b27c:	3320      	adds	r3, #32
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	fbb2 f1f3 	udiv	r1, r2, r3
 800b284:	fb01 f303 	mul.w	r3, r1, r3
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d110      	bne.n	800b2b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b28e:	78fa      	ldrb	r2, [r7, #3]
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	331c      	adds	r3, #28
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b2a2:	78f9      	ldrb	r1, [r7, #3]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fdf1 	bl	800ce90 <USBD_LL_Transmit>
 800b2ae:	e003      	b.n	800b2b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e000      	b.n	800b2be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b2bc:	2302      	movs	r3, #2
  }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 fe1c 	bl	800cf1c <USBD_LL_GetRxDataSize>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00d      	beq.n	800b312 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b30a:	4611      	mov	r1, r2
 800b30c:	4798      	blx	r3

    return USBD_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	e000      	b.n	800b314 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b312:	2302      	movs	r3, #2
  }
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b332:	2b00      	cmp	r3, #0
 800b334:	d014      	beq.n	800b360 <USBD_CDC_EP0_RxReady+0x44>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b33c:	2bff      	cmp	r3, #255	@ 0xff
 800b33e:	d00f      	beq.n	800b360 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b34e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b356:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	22ff      	movs	r2, #255	@ 0xff
 800b35c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2243      	movs	r2, #67	@ 0x43
 800b378:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b37a:	4b03      	ldr	r3, [pc, #12]	@ (800b388 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	bc80      	pop	{r7}
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	200000a0 	.word	0x200000a0

0800b38c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2243      	movs	r2, #67	@ 0x43
 800b398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b39a:	4b03      	ldr	r3, [pc, #12]	@ (800b3a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bc80      	pop	{r7}
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	2000005c 	.word	0x2000005c

0800b3ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2243      	movs	r2, #67	@ 0x43
 800b3b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b3ba:	4b03      	ldr	r3, [pc, #12]	@ (800b3c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	200000e4 	.word	0x200000e4

0800b3cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	220a      	movs	r2, #10
 800b3d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b3da:	4b03      	ldr	r3, [pc, #12]	@ (800b3e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc80      	pop	{r7}
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000018 	.word	0x20000018

0800b3ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d005      	beq.n	800b40c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	bc80      	pop	{r7}
 800b416:	4770      	bx	lr

0800b418 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b436:	88fa      	ldrh	r2, [r7, #6]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	371c      	adds	r7, #28
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr

0800b44a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc80      	pop	{r7}
 800b46e:	4770      	bx	lr

0800b470 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d01c      	beq.n	800b4c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b490:	2b00      	cmp	r3, #0
 800b492:	d115      	bne.n	800b4c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2201      	movs	r2, #1
 800b498:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	2181      	movs	r1, #129	@ 0x81
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fcea 	bl	800ce90 <USBD_LL_Transmit>

      return USBD_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e002      	b.n	800b4c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e000      	b.n	800b4c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b4c4:	2302      	movs	r3, #2
  }
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d017      	beq.n	800b518 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7c1b      	ldrb	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 fcea 	bl	800ced6 <USBD_LL_PrepareReceive>
 800b502:	e007      	b.n	800b514 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b50a:	2340      	movs	r3, #64	@ 0x40
 800b50c:	2101      	movs	r1, #1
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 fce1 	bl	800ced6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	e000      	b.n	800b51a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b518:	2302      	movs	r3, #2
  }
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	4613      	mov	r3, r2
 800b52e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b536:	2302      	movs	r3, #2
 800b538:	e01a      	b.n	800b570 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	79fa      	ldrb	r2, [r7, #7]
 800b566:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f001 fb4f 	bl	800cc0c <USBD_LL_Init>

  return USBD_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d006      	beq.n	800b59a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	73fb      	strb	r3, [r7, #15]
 800b598:	e001      	b.n	800b59e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b59a:	2302      	movs	r3, #2
 800b59c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bc80      	pop	{r7}
 800b5a8:	4770      	bx	lr

0800b5aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fb84 	bl	800ccc0 <USBD_LL_Start>

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bc80      	pop	{r7}
 800b5d4:	4770      	bx	lr

0800b5d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00c      	beq.n	800b60a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	78fa      	ldrb	r2, [r7, #3]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	78fa      	ldrb	r2, [r7, #3]
 800b62a:	4611      	mov	r1, r2
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	4798      	blx	r3

  return USBD_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fed8 	bl	800c402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b660:	461a      	mov	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	2b02      	cmp	r3, #2
 800b674:	d016      	beq.n	800b6a4 <USBD_LL_SetupStage+0x6a>
 800b676:	2b02      	cmp	r3, #2
 800b678:	d81c      	bhi.n	800b6b4 <USBD_LL_SetupStage+0x7a>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <USBD_LL_SetupStage+0x4a>
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d008      	beq.n	800b694 <USBD_LL_SetupStage+0x5a>
 800b682:	e017      	b.n	800b6b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f9cb 	bl	800ba28 <USBD_StdDevReq>
      break;
 800b692:	e01a      	b.n	800b6ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa2d 	bl	800bafc <USBD_StdItfReq>
      break;
 800b6a2:	e012      	b.n	800b6ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa6d 	bl	800bb8c <USBD_StdEPReq>
      break;
 800b6b2:	e00a      	b.n	800b6ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b6ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 fb5c 	bl	800cd80 <USBD_LL_StallEP>
      break;
 800b6c8:	bf00      	nop
  }

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d14b      	bne.n	800b780 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d134      	bne.n	800b764 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d919      	bls.n	800b73a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	68da      	ldr	r2, [r3, #12]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d203      	bcs.n	800b728 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b724:	b29b      	uxth	r3, r3
 800b726:	e002      	b.n	800b72e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	461a      	mov	r2, r3
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f000 ff54 	bl	800c5e0 <USBD_CtlContinueRx>
 800b738:	e038      	b.n	800b7ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00a      	beq.n	800b75c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d105      	bne.n	800b75c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 ff51 	bl	800c604 <USBD_CtlSendStatus>
 800b762:	e023      	b.n	800b7ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	d11e      	bne.n	800b7ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b776:	2100      	movs	r1, #0
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f001 fb01 	bl	800cd80 <USBD_LL_StallEP>
 800b77e:	e015      	b.n	800b7ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00d      	beq.n	800b7a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b792:	2b03      	cmp	r3, #3
 800b794:	d108      	bne.n	800b7a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	7afa      	ldrb	r2, [r7, #11]
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	4798      	blx	r3
 800b7a6:	e001      	b.n	800b7ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e000      	b.n	800b7ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	607a      	str	r2, [r7, #4]
 800b7c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d17f      	bne.n	800b8ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3314      	adds	r3, #20
 800b7ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d15c      	bne.n	800b894 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	68da      	ldr	r2, [r3, #12]
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d915      	bls.n	800b812 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	1ad2      	subs	r2, r2, r3
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 febe 	bl	800c580 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b804:	2300      	movs	r3, #0
 800b806:	2200      	movs	r2, #0
 800b808:	2100      	movs	r1, #0
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f001 fb63 	bl	800ced6 <USBD_LL_PrepareReceive>
 800b810:	e04e      	b.n	800b8b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	6912      	ldr	r2, [r2, #16]
 800b81a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b81e:	fb01 f202 	mul.w	r2, r1, r2
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d11c      	bne.n	800b862 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b830:	429a      	cmp	r2, r3
 800b832:	d316      	bcc.n	800b862 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b83e:	429a      	cmp	r2, r3
 800b840:	d20f      	bcs.n	800b862 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b842:	2200      	movs	r2, #0
 800b844:	2100      	movs	r1, #0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 fe9a 	bl	800c580 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b854:	2300      	movs	r3, #0
 800b856:	2200      	movs	r2, #0
 800b858:	2100      	movs	r1, #0
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f001 fb3b 	bl	800ced6 <USBD_LL_PrepareReceive>
 800b860:	e026      	b.n	800b8b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00a      	beq.n	800b884 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b874:	2b03      	cmp	r3, #3
 800b876:	d105      	bne.n	800b884 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b884:	2180      	movs	r1, #128	@ 0x80
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f001 fa7a 	bl	800cd80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 fecc 	bl	800c62a <USBD_CtlReceiveStatus>
 800b892:	e00d      	b.n	800b8b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	d004      	beq.n	800b8a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b8a8:	2180      	movs	r1, #128	@ 0x80
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f001 fa68 	bl	800cd80 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d11d      	bne.n	800b8f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fe81 	bl	800b5c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8c8:	e015      	b.n	800b8f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00d      	beq.n	800b8f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d108      	bne.n	800b8f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8e6:	695b      	ldr	r3, [r3, #20]
 800b8e8:	7afa      	ldrb	r2, [r7, #11]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	4798      	blx	r3
 800b8f0:	e001      	b.n	800b8f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e000      	b.n	800b8f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b908:	2340      	movs	r3, #64	@ 0x40
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f001 f9f1 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2240      	movs	r2, #64	@ 0x40
 800b920:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b924:	2340      	movs	r3, #64	@ 0x40
 800b926:	2200      	movs	r2, #0
 800b928:	2180      	movs	r1, #128	@ 0x80
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f001 f9e3 	bl	800ccf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2240      	movs	r2, #64	@ 0x40
 800b93a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d009      	beq.n	800b978 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6852      	ldr	r2, [r2, #4]
 800b970:	b2d2      	uxtb	r2, r2
 800b972:	4611      	mov	r1, r2
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	4798      	blx	r3
  }

  return USBD_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	78fa      	ldrb	r2, [r7, #3]
 800b992:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bc80      	pop	{r7}
 800b99e:	4770      	bx	lr

0800b9a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bc80      	pop	{r7}
 800b9c6:	4770      	bx	lr

0800b9c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d105      	bne.n	800b9e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bc80      	pop	{r7}
 800b9f0:	4770      	bx	lr

0800b9f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d10b      	bne.n	800ba1c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba3e:	2b40      	cmp	r3, #64	@ 0x40
 800ba40:	d005      	beq.n	800ba4e <USBD_StdDevReq+0x26>
 800ba42:	2b40      	cmp	r3, #64	@ 0x40
 800ba44:	d84f      	bhi.n	800bae6 <USBD_StdDevReq+0xbe>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d009      	beq.n	800ba5e <USBD_StdDevReq+0x36>
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	d14b      	bne.n	800bae6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	4798      	blx	r3
      break;
 800ba5c:	e048      	b.n	800baf0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	2b09      	cmp	r3, #9
 800ba64:	d839      	bhi.n	800bada <USBD_StdDevReq+0xb2>
 800ba66:	a201      	add	r2, pc, #4	@ (adr r2, 800ba6c <USBD_StdDevReq+0x44>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800babd 	.word	0x0800babd
 800ba70:	0800bad1 	.word	0x0800bad1
 800ba74:	0800badb 	.word	0x0800badb
 800ba78:	0800bac7 	.word	0x0800bac7
 800ba7c:	0800badb 	.word	0x0800badb
 800ba80:	0800ba9f 	.word	0x0800ba9f
 800ba84:	0800ba95 	.word	0x0800ba95
 800ba88:	0800badb 	.word	0x0800badb
 800ba8c:	0800bab3 	.word	0x0800bab3
 800ba90:	0800baa9 	.word	0x0800baa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f9dc 	bl	800be54 <USBD_GetDescriptor>
          break;
 800ba9c:	e022      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fb3f 	bl	800c124 <USBD_SetAddress>
          break;
 800baa6:	e01d      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fb7e 	bl	800c1ac <USBD_SetConfig>
          break;
 800bab0:	e018      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc07 	bl	800c2c8 <USBD_GetConfig>
          break;
 800baba:	e013      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fc37 	bl	800c332 <USBD_GetStatus>
          break;
 800bac4:	e00e      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fc65 	bl	800c398 <USBD_SetFeature>
          break;
 800bace:	e009      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fc74 	bl	800c3c0 <USBD_ClrFeature>
          break;
 800bad8:	e004      	b.n	800bae4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fcc9 	bl	800c474 <USBD_CtlError>
          break;
 800bae2:	bf00      	nop
      }
      break;
 800bae4:	e004      	b.n	800baf0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fcc3 	bl	800c474 <USBD_CtlError>
      break;
 800baee:	bf00      	nop
  }

  return ret;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb12:	2b40      	cmp	r3, #64	@ 0x40
 800bb14:	d005      	beq.n	800bb22 <USBD_StdItfReq+0x26>
 800bb16:	2b40      	cmp	r3, #64	@ 0x40
 800bb18:	d82e      	bhi.n	800bb78 <USBD_StdItfReq+0x7c>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <USBD_StdItfReq+0x26>
 800bb1e:	2b20      	cmp	r3, #32
 800bb20:	d12a      	bne.n	800bb78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d81d      	bhi.n	800bb6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	889b      	ldrh	r3, [r3, #4]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d813      	bhi.n	800bb60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	4798      	blx	r3
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	88db      	ldrh	r3, [r3, #6]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d110      	bne.n	800bb74 <USBD_StdItfReq+0x78>
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fd53 	bl	800c604 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb5e:	e009      	b.n	800bb74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fc86 	bl	800c474 <USBD_CtlError>
          break;
 800bb68:	e004      	b.n	800bb74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fc81 	bl	800c474 <USBD_CtlError>
          break;
 800bb72:	e000      	b.n	800bb76 <USBD_StdItfReq+0x7a>
          break;
 800bb74:	bf00      	nop
      }
      break;
 800bb76:	e004      	b.n	800bb82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fc7a 	bl	800c474 <USBD_CtlError>
      break;
 800bb80:	bf00      	nop
  }

  return USBD_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	889b      	ldrh	r3, [r3, #4]
 800bb9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bba8:	2b40      	cmp	r3, #64	@ 0x40
 800bbaa:	d007      	beq.n	800bbbc <USBD_StdEPReq+0x30>
 800bbac:	2b40      	cmp	r3, #64	@ 0x40
 800bbae:	f200 8146 	bhi.w	800be3e <USBD_StdEPReq+0x2b2>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <USBD_StdEPReq+0x40>
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	f040 8141 	bne.w	800be3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
      break;
 800bbca:	e13d      	b.n	800be48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d10a      	bne.n	800bbee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	4798      	blx	r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	e12d      	b.n	800be4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d007      	beq.n	800bc06 <USBD_StdEPReq+0x7a>
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	f300 811b 	bgt.w	800be32 <USBD_StdEPReq+0x2a6>
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d072      	beq.n	800bce6 <USBD_StdEPReq+0x15a>
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d03a      	beq.n	800bc7a <USBD_StdEPReq+0xee>
 800bc04:	e115      	b.n	800be32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d002      	beq.n	800bc16 <USBD_StdEPReq+0x8a>
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d015      	beq.n	800bc40 <USBD_StdEPReq+0xb4>
 800bc14:	e02b      	b.n	800bc6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00c      	beq.n	800bc36 <USBD_StdEPReq+0xaa>
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	2b80      	cmp	r3, #128	@ 0x80
 800bc20:	d009      	beq.n	800bc36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 f8aa 	bl	800cd80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bc2c:	2180      	movs	r1, #128	@ 0x80
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 f8a6 	bl	800cd80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc34:	e020      	b.n	800bc78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fc1b 	bl	800c474 <USBD_CtlError>
              break;
 800bc3e:	e01b      	b.n	800bc78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	885b      	ldrh	r3, [r3, #2]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10e      	bne.n	800bc66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00b      	beq.n	800bc66 <USBD_StdEPReq+0xda>
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b80      	cmp	r3, #128	@ 0x80
 800bc52:	d008      	beq.n	800bc66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	88db      	ldrh	r3, [r3, #6]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d104      	bne.n	800bc66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 f88d 	bl	800cd80 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fccc 	bl	800c604 <USBD_CtlSendStatus>

              break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fbff 	bl	800c474 <USBD_CtlError>
              break;
 800bc76:	bf00      	nop
          }
          break;
 800bc78:	e0e0      	b.n	800be3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d002      	beq.n	800bc8a <USBD_StdEPReq+0xfe>
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d015      	beq.n	800bcb4 <USBD_StdEPReq+0x128>
 800bc88:	e026      	b.n	800bcd8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <USBD_StdEPReq+0x11e>
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	2b80      	cmp	r3, #128	@ 0x80
 800bc94:	d009      	beq.n	800bcaa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f001 f870 	bl	800cd80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bca0:	2180      	movs	r1, #128	@ 0x80
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 f86c 	bl	800cd80 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bca8:	e01c      	b.n	800bce4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fbe1 	bl	800c474 <USBD_CtlError>
              break;
 800bcb2:	e017      	b.n	800bce4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	885b      	ldrh	r3, [r3, #2]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d112      	bne.n	800bce2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 f877 	bl	800cdbe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc97 	bl	800c604 <USBD_CtlSendStatus>
              }
              break;
 800bcd6:	e004      	b.n	800bce2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fbca 	bl	800c474 <USBD_CtlError>
              break;
 800bce0:	e000      	b.n	800bce4 <USBD_StdEPReq+0x158>
              break;
 800bce2:	bf00      	nop
          }
          break;
 800bce4:	e0aa      	b.n	800be3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d002      	beq.n	800bcf6 <USBD_StdEPReq+0x16a>
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d032      	beq.n	800bd5a <USBD_StdEPReq+0x1ce>
 800bcf4:	e097      	b.n	800be26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d007      	beq.n	800bd0c <USBD_StdEPReq+0x180>
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	2b80      	cmp	r3, #128	@ 0x80
 800bd00:	d004      	beq.n	800bd0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fbb5 	bl	800c474 <USBD_CtlError>
                break;
 800bd0a:	e091      	b.n	800be30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da0b      	bge.n	800bd2c <USBD_StdEPReq+0x1a0>
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
 800bd16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	3310      	adds	r3, #16
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	4413      	add	r3, r2
 800bd28:	3304      	adds	r3, #4
 800bd2a:	e00b      	b.n	800bd44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	4413      	add	r3, r2
 800bd42:	3304      	adds	r3, #4
 800bd44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fbf8 	bl	800c548 <USBD_CtlSendData>
              break;
 800bd58:	e06a      	b.n	800be30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da11      	bge.n	800bd86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	f003 020f 	and.w	r2, r3, #15
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	3318      	adds	r3, #24
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d117      	bne.n	800bdac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fb78 	bl	800c474 <USBD_CtlError>
                  break;
 800bd84:	e054      	b.n	800be30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	f003 020f 	and.w	r2, r3, #15
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	440b      	add	r3, r1
 800bd98:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d104      	bne.n	800bdac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fb65 	bl	800c474 <USBD_CtlError>
                  break;
 800bdaa:	e041      	b.n	800be30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	da0b      	bge.n	800bdcc <USBD_StdEPReq+0x240>
 800bdb4:	7bbb      	ldrb	r3, [r7, #14]
 800bdb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	3310      	adds	r3, #16
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	3304      	adds	r3, #4
 800bdca:	e00b      	b.n	800bde4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4413      	add	r3, r2
 800bde2:	3304      	adds	r3, #4
 800bde4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <USBD_StdEPReq+0x266>
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b80      	cmp	r3, #128	@ 0x80
 800bdf0:	d103      	bne.n	800bdfa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	e00e      	b.n	800be18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bdfa:	7bbb      	ldrb	r3, [r7, #14]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fffc 	bl	800cdfc <USBD_LL_IsStallEP>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2201      	movs	r2, #1
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	e002      	b.n	800be18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2202      	movs	r2, #2
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fb92 	bl	800c548 <USBD_CtlSendData>
              break;
 800be24:	e004      	b.n	800be30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fb23 	bl	800c474 <USBD_CtlError>
              break;
 800be2e:	bf00      	nop
          }
          break;
 800be30:	e004      	b.n	800be3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fb1d 	bl	800c474 <USBD_CtlError>
          break;
 800be3a:	bf00      	nop
      }
      break;
 800be3c:	e004      	b.n	800be48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fb17 	bl	800c474 <USBD_CtlError>
      break;
 800be46:	bf00      	nop
  }

  return ret;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	885b      	ldrh	r3, [r3, #2]
 800be6e:	0a1b      	lsrs	r3, r3, #8
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	2b06      	cmp	r3, #6
 800be76:	f200 8128 	bhi.w	800c0ca <USBD_GetDescriptor+0x276>
 800be7a:	a201      	add	r2, pc, #4	@ (adr r2, 800be80 <USBD_GetDescriptor+0x2c>)
 800be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be80:	0800be9d 	.word	0x0800be9d
 800be84:	0800beb5 	.word	0x0800beb5
 800be88:	0800bef5 	.word	0x0800bef5
 800be8c:	0800c0cb 	.word	0x0800c0cb
 800be90:	0800c0cb 	.word	0x0800c0cb
 800be94:	0800c06b 	.word	0x0800c06b
 800be98:	0800c097 	.word	0x0800c097
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	7c12      	ldrb	r2, [r2, #16]
 800bea8:	f107 0108 	add.w	r1, r7, #8
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
 800beb0:	60f8      	str	r0, [r7, #12]
      break;
 800beb2:	e112      	b.n	800c0da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	7c1b      	ldrb	r3, [r3, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10d      	bne.n	800bed8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec4:	f107 0208 	add.w	r2, r7, #8
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
 800becc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3301      	adds	r3, #1
 800bed2:	2202      	movs	r2, #2
 800bed4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bed6:	e100      	b.n	800c0da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee0:	f107 0208 	add.w	r2, r7, #8
 800bee4:	4610      	mov	r0, r2
 800bee6:	4798      	blx	r3
 800bee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3301      	adds	r3, #1
 800beee:	2202      	movs	r2, #2
 800bef0:	701a      	strb	r2, [r3, #0]
      break;
 800bef2:	e0f2      	b.n	800c0da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	885b      	ldrh	r3, [r3, #2]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b05      	cmp	r3, #5
 800befc:	f200 80ac 	bhi.w	800c058 <USBD_GetDescriptor+0x204>
 800bf00:	a201      	add	r2, pc, #4	@ (adr r2, 800bf08 <USBD_GetDescriptor+0xb4>)
 800bf02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf06:	bf00      	nop
 800bf08:	0800bf21 	.word	0x0800bf21
 800bf0c:	0800bf55 	.word	0x0800bf55
 800bf10:	0800bf89 	.word	0x0800bf89
 800bf14:	0800bfbd 	.word	0x0800bfbd
 800bf18:	0800bff1 	.word	0x0800bff1
 800bf1c:	0800c025 	.word	0x0800c025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00b      	beq.n	800bf44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	7c12      	ldrb	r2, [r2, #16]
 800bf38:	f107 0108 	add.w	r1, r7, #8
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	4798      	blx	r3
 800bf40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf42:	e091      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa94 	bl	800c474 <USBD_CtlError>
            err++;
 800bf4c:	7afb      	ldrb	r3, [r7, #11]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	72fb      	strb	r3, [r7, #11]
          break;
 800bf52:	e089      	b.n	800c068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	7c12      	ldrb	r2, [r2, #16]
 800bf6c:	f107 0108 	add.w	r1, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf76:	e077      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa7a 	bl	800c474 <USBD_CtlError>
            err++;
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	3301      	adds	r3, #1
 800bf84:	72fb      	strb	r3, [r7, #11]
          break;
 800bf86:	e06f      	b.n	800c068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00b      	beq.n	800bfac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	7c12      	ldrb	r2, [r2, #16]
 800bfa0:	f107 0108 	add.w	r1, r7, #8
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	4798      	blx	r3
 800bfa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfaa:	e05d      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fa60 	bl	800c474 <USBD_CtlError>
            err++;
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfba:	e055      	b.n	800c068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	7c12      	ldrb	r2, [r2, #16]
 800bfd4:	f107 0108 	add.w	r1, r7, #8
 800bfd8:	4610      	mov	r0, r2
 800bfda:	4798      	blx	r3
 800bfdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfde:	e043      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fa46 	bl	800c474 <USBD_CtlError>
            err++;
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	3301      	adds	r3, #1
 800bfec:	72fb      	strb	r3, [r7, #11]
          break;
 800bfee:	e03b      	b.n	800c068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	7c12      	ldrb	r2, [r2, #16]
 800c008:	f107 0108 	add.w	r1, r7, #8
 800c00c:	4610      	mov	r0, r2
 800c00e:	4798      	blx	r3
 800c010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c012:	e029      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa2c 	bl	800c474 <USBD_CtlError>
            err++;
 800c01c:	7afb      	ldrb	r3, [r7, #11]
 800c01e:	3301      	adds	r3, #1
 800c020:	72fb      	strb	r3, [r7, #11]
          break;
 800c022:	e021      	b.n	800c068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00b      	beq.n	800c048 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	7c12      	ldrb	r2, [r2, #16]
 800c03c:	f107 0108 	add.w	r1, r7, #8
 800c040:	4610      	mov	r0, r2
 800c042:	4798      	blx	r3
 800c044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c046:	e00f      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fa12 	bl	800c474 <USBD_CtlError>
            err++;
 800c050:	7afb      	ldrb	r3, [r7, #11]
 800c052:	3301      	adds	r3, #1
 800c054:	72fb      	strb	r3, [r7, #11]
          break;
 800c056:	e007      	b.n	800c068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa0a 	bl	800c474 <USBD_CtlError>
          err++;
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	3301      	adds	r3, #1
 800c064:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c066:	e038      	b.n	800c0da <USBD_GetDescriptor+0x286>
 800c068:	e037      	b.n	800c0da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	7c1b      	ldrb	r3, [r3, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c07a:	f107 0208 	add.w	r2, r7, #8
 800c07e:	4610      	mov	r0, r2
 800c080:	4798      	blx	r3
 800c082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c084:	e029      	b.n	800c0da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f9f3 	bl	800c474 <USBD_CtlError>
        err++;
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	3301      	adds	r3, #1
 800c092:	72fb      	strb	r3, [r7, #11]
      break;
 800c094:	e021      	b.n	800c0da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7c1b      	ldrb	r3, [r3, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10d      	bne.n	800c0ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a6:	f107 0208 	add.w	r2, r7, #8
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	4798      	blx	r3
 800c0ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	2207      	movs	r2, #7
 800c0b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0b8:	e00f      	b.n	800c0da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f9d9 	bl	800c474 <USBD_CtlError>
        err++;
 800c0c2:	7afb      	ldrb	r3, [r7, #11]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0c8:	e007      	b.n	800c0da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f9d1 	bl	800c474 <USBD_CtlError>
      err++;
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0d8:	bf00      	nop
  }

  if (err != 0U)
 800c0da:	7afb      	ldrb	r3, [r7, #11]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d11c      	bne.n	800c11a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c0e0:	893b      	ldrh	r3, [r7, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d011      	beq.n	800c10a <USBD_GetDescriptor+0x2b6>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	88db      	ldrh	r3, [r3, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00d      	beq.n	800c10a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88da      	ldrh	r2, [r3, #6]
 800c0f2:	893b      	ldrh	r3, [r7, #8]
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	bf28      	it	cs
 800c0f8:	4613      	movcs	r3, r2
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0fe:	893b      	ldrh	r3, [r7, #8]
 800c100:	461a      	mov	r2, r3
 800c102:	68f9      	ldr	r1, [r7, #12]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fa1f 	bl	800c548 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	88db      	ldrh	r3, [r3, #6]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d104      	bne.n	800c11c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fa76 	bl	800c604 <USBD_CtlSendStatus>
 800c118:	e000      	b.n	800c11c <USBD_GetDescriptor+0x2c8>
    return;
 800c11a:	bf00      	nop
    }
  }
}
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop

0800c124 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	889b      	ldrh	r3, [r3, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d130      	bne.n	800c198 <USBD_SetAddress+0x74>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	88db      	ldrh	r3, [r3, #6]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d12c      	bne.n	800c198 <USBD_SetAddress+0x74>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	2b7f      	cmp	r3, #127	@ 0x7f
 800c144:	d828      	bhi.n	800c198 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	885b      	ldrh	r3, [r3, #2]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c150:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d104      	bne.n	800c166 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f988 	bl	800c474 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c164:	e01d      	b.n	800c1a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7bfa      	ldrb	r2, [r7, #15]
 800c16a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fe6d 	bl	800ce52 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa43 	bl	800c604 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d004      	beq.n	800c18e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2202      	movs	r2, #2
 800c188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c18c:	e009      	b.n	800c1a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c196:	e004      	b.n	800c1a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f96a 	bl	800c474 <USBD_CtlError>
  }
}
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
	...

0800c1ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	4b41      	ldr	r3, [pc, #260]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c1be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1c0:	4b40      	ldr	r3, [pc, #256]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d904      	bls.n	800c1d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f952 	bl	800c474 <USBD_CtlError>
 800c1d0:	e075      	b.n	800c2be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d002      	beq.n	800c1e2 <USBD_SetConfig+0x36>
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d023      	beq.n	800c228 <USBD_SetConfig+0x7c>
 800c1e0:	e062      	b.n	800c2a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c1e2:	4b38      	ldr	r3, [pc, #224]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01a      	beq.n	800c220 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c1ea:	4b36      	ldr	r3, [pc, #216]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c1fc:	4b31      	ldr	r3, [pc, #196]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff f9e7 	bl	800b5d6 <USBD_SetClassConfig>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d104      	bne.n	800c218 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f92f 	bl	800c474 <USBD_CtlError>
            return;
 800c216:	e052      	b.n	800c2be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f9f3 	bl	800c604 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c21e:	e04e      	b.n	800c2be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9ef 	bl	800c604 <USBD_CtlSendStatus>
        break;
 800c226:	e04a      	b.n	800c2be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c228:	4b26      	ldr	r3, [pc, #152]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d112      	bne.n	800c256 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c238:	4b22      	ldr	r3, [pc, #136]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	461a      	mov	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c242:	4b20      	ldr	r3, [pc, #128]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff f9e3 	bl	800b614 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f9d8 	bl	800c604 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c254:	e033      	b.n	800c2be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c256:	4b1b      	ldr	r3, [pc, #108]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	429a      	cmp	r2, r3
 800c262:	d01d      	beq.n	800c2a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff f9d1 	bl	800b614 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c272:	4b14      	ldr	r3, [pc, #80]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c27c:	4b11      	ldr	r3, [pc, #68]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff f9a7 	bl	800b5d6 <USBD_SetClassConfig>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d104      	bne.n	800c298 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f8ef 	bl	800c474 <USBD_CtlError>
            return;
 800c296:	e012      	b.n	800c2be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f9b3 	bl	800c604 <USBD_CtlSendStatus>
        break;
 800c29e:	e00e      	b.n	800c2be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f9af 	bl	800c604 <USBD_CtlSendStatus>
        break;
 800c2a6:	e00a      	b.n	800c2be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f8e2 	bl	800c474 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c2b0:	4b04      	ldr	r3, [pc, #16]	@ (800c2c4 <USBD_SetConfig+0x118>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff f9ac 	bl	800b614 <USBD_ClrClassConfig>
        break;
 800c2bc:	bf00      	nop
    }
  }
}
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	200009e4 	.word	0x200009e4

0800c2c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d004      	beq.n	800c2e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f8c9 	bl	800c474 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2e2:	e022      	b.n	800c32a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	dc02      	bgt.n	800c2f4 <USBD_GetConfig+0x2c>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dc03      	bgt.n	800c2fa <USBD_GetConfig+0x32>
 800c2f2:	e015      	b.n	800c320 <USBD_GetConfig+0x58>
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d00b      	beq.n	800c310 <USBD_GetConfig+0x48>
 800c2f8:	e012      	b.n	800c320 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3308      	adds	r3, #8
 800c304:	2201      	movs	r2, #1
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f91d 	bl	800c548 <USBD_CtlSendData>
        break;
 800c30e:	e00c      	b.n	800c32a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3304      	adds	r3, #4
 800c314:	2201      	movs	r2, #1
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f915 	bl	800c548 <USBD_CtlSendData>
        break;
 800c31e:	e004      	b.n	800c32a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f8a6 	bl	800c474 <USBD_CtlError>
        break;
 800c328:	bf00      	nop
}
 800c32a:	bf00      	nop
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c342:	3b01      	subs	r3, #1
 800c344:	2b02      	cmp	r3, #2
 800c346:	d81e      	bhi.n	800c386 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	88db      	ldrh	r3, [r3, #6]
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d004      	beq.n	800c35a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f88e 	bl	800c474 <USBD_CtlError>
        break;
 800c358:	e01a      	b.n	800c390 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f043 0202 	orr.w	r2, r3, #2
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	330c      	adds	r3, #12
 800c37a:	2202      	movs	r2, #2
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f8e2 	bl	800c548 <USBD_CtlSendData>
      break;
 800c384:	e004      	b.n	800c390 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f873 	bl	800c474 <USBD_CtlError>
      break;
 800c38e:	bf00      	nop
  }
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	885b      	ldrh	r3, [r3, #2]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d106      	bne.n	800c3b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f926 	bl	800c604 <USBD_CtlSendStatus>
  }
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d80b      	bhi.n	800c3ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d10c      	bne.n	800c3f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f90c 	bl	800c604 <USBD_CtlSendStatus>
      }
      break;
 800c3ec:	e004      	b.n	800c3f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f83f 	bl	800c474 <USBD_CtlError>
      break;
 800c3f6:	e000      	b.n	800c3fa <USBD_ClrFeature+0x3a>
      break;
 800c3f8:	bf00      	nop
  }
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	785a      	ldrb	r2, [r3, #1]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	3302      	adds	r3, #2
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	3303      	adds	r3, #3
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	021b      	lsls	r3, r3, #8
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	4413      	add	r3, r2
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	3304      	adds	r3, #4
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	461a      	mov	r2, r3
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	3305      	adds	r3, #5
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	021b      	lsls	r3, r3, #8
 800c446:	b29b      	uxth	r3, r3
 800c448:	4413      	add	r3, r2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	3306      	adds	r3, #6
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	3307      	adds	r3, #7
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	021b      	lsls	r3, r3, #8
 800c460:	b29b      	uxth	r3, r3
 800c462:	4413      	add	r3, r2
 800c464:	b29a      	uxth	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	80da      	strh	r2, [r3, #6]

}
 800c46a:	bf00      	nop
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	bc80      	pop	{r7}
 800c472:	4770      	bx	lr

0800c474 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c47e:	2180      	movs	r1, #128	@ 0x80
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fc7d 	bl	800cd80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c486:	2100      	movs	r1, #0
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fc79 	bl	800cd80 <USBD_LL_StallEP>
}
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b086      	sub	sp, #24
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d032      	beq.n	800c512 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 f834 	bl	800c51a <USBD_GetLen>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	75fa      	strb	r2, [r7, #23]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7812      	ldrb	r2, [r2, #0]
 800c4d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	75fa      	strb	r2, [r7, #23]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	2203      	movs	r2, #3
 800c4e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c4e2:	e012      	b.n	800c50a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	60fa      	str	r2, [r7, #12]
 800c4ea:	7dfa      	ldrb	r2, [r7, #23]
 800c4ec:	1c51      	adds	r1, r2, #1
 800c4ee:	75f9      	strb	r1, [r7, #23]
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	440a      	add	r2, r1
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	75fa      	strb	r2, [r7, #23]
 800c500:	461a      	mov	r2, r3
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e8      	bne.n	800c4e4 <USBD_GetString+0x4e>
    }
  }
}
 800c512:	bf00      	nop
 800c514:	3718      	adds	r7, #24
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b085      	sub	sp, #20
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c522:	2300      	movs	r3, #0
 800c524:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c526:	e005      	b.n	800c534 <USBD_GetLen+0x1a>
  {
    len++;
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	3301      	adds	r3, #1
 800c52c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3301      	adds	r3, #1
 800c532:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1f5      	bne.n	800c528 <USBD_GetLen+0xe>
  }

  return len;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	bc80      	pop	{r7}
 800c546:	4770      	bx	lr

0800c548 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	4613      	mov	r3, r2
 800c554:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2202      	movs	r2, #2
 800c55a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c55e:	88fa      	ldrh	r2, [r7, #6]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c564:	88fa      	ldrh	r2, [r7, #6]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c56a:	88fb      	ldrh	r3, [r7, #6]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	2100      	movs	r1, #0
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 fc8d 	bl	800ce90 <USBD_LL_Transmit>

  return USBD_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c58e:	88fb      	ldrh	r3, [r7, #6]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	2100      	movs	r1, #0
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fc7b 	bl	800ce90 <USBD_LL_Transmit>

  return USBD_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2203      	movs	r2, #3
 800c5b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c5ba:	88fa      	ldrh	r2, [r7, #6]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c5c2:	88fa      	ldrh	r2, [r7, #6]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fc80 	bl	800ced6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ee:	88fb      	ldrh	r3, [r7, #6]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 fc6e 	bl	800ced6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2204      	movs	r2, #4
 800c610:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c614:	2300      	movs	r3, #0
 800c616:	2200      	movs	r2, #0
 800c618:	2100      	movs	r1, #0
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fc38 	bl	800ce90 <USBD_LL_Transmit>

  return USBD_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2205      	movs	r2, #5
 800c636:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c63a:	2300      	movs	r3, #0
 800c63c:	2200      	movs	r2, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fc48 	bl	800ced6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c654:	2200      	movs	r2, #0
 800c656:	4912      	ldr	r1, [pc, #72]	@ (800c6a0 <MX_USB_DEVICE_Init+0x50>)
 800c658:	4812      	ldr	r0, [pc, #72]	@ (800c6a4 <MX_USB_DEVICE_Init+0x54>)
 800c65a:	f7fe ff62 	bl	800b522 <USBD_Init>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c664:	f7f4 fd24 	bl	80010b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c668:	490f      	ldr	r1, [pc, #60]	@ (800c6a8 <MX_USB_DEVICE_Init+0x58>)
 800c66a:	480e      	ldr	r0, [pc, #56]	@ (800c6a4 <MX_USB_DEVICE_Init+0x54>)
 800c66c:	f7fe ff84 	bl	800b578 <USBD_RegisterClass>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c676:	f7f4 fd1b 	bl	80010b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c67a:	490c      	ldr	r1, [pc, #48]	@ (800c6ac <MX_USB_DEVICE_Init+0x5c>)
 800c67c:	4809      	ldr	r0, [pc, #36]	@ (800c6a4 <MX_USB_DEVICE_Init+0x54>)
 800c67e:	f7fe feb5 	bl	800b3ec <USBD_CDC_RegisterInterface>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c688:	f7f4 fd12 	bl	80010b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c68c:	4805      	ldr	r0, [pc, #20]	@ (800c6a4 <MX_USB_DEVICE_Init+0x54>)
 800c68e:	f7fe ff8c 	bl	800b5aa <USBD_Start>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c698:	f7f4 fd0a 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c69c:	bf00      	nop
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20000138 	.word	0x20000138
 800c6a4:	200009e8 	.word	0x200009e8
 800c6a8:	20000024 	.word	0x20000024
 800c6ac:	20000128 	.word	0x20000128

0800c6b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4905      	ldr	r1, [pc, #20]	@ (800c6cc <CDC_Init_FS+0x1c>)
 800c6b8:	4805      	ldr	r0, [pc, #20]	@ (800c6d0 <CDC_Init_FS+0x20>)
 800c6ba:	f7fe fead 	bl	800b418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6be:	4905      	ldr	r1, [pc, #20]	@ (800c6d4 <CDC_Init_FS+0x24>)
 800c6c0:	4803      	ldr	r0, [pc, #12]	@ (800c6d0 <CDC_Init_FS+0x20>)
 800c6c2:	f7fe fec2 	bl	800b44a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	200010ac 	.word	0x200010ac
 800c6d0:	200009e8 	.word	0x200009e8
 800c6d4:	20000cac 	.word	0x20000cac

0800c6d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	6039      	str	r1, [r7, #0]
 800c6f2:	71fb      	strb	r3, [r7, #7]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	2b23      	cmp	r3, #35	@ 0x23
 800c6fc:	d84a      	bhi.n	800c794 <CDC_Control_FS+0xac>
 800c6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c704 <CDC_Control_FS+0x1c>)
 800c700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c704:	0800c795 	.word	0x0800c795
 800c708:	0800c795 	.word	0x0800c795
 800c70c:	0800c795 	.word	0x0800c795
 800c710:	0800c795 	.word	0x0800c795
 800c714:	0800c795 	.word	0x0800c795
 800c718:	0800c795 	.word	0x0800c795
 800c71c:	0800c795 	.word	0x0800c795
 800c720:	0800c795 	.word	0x0800c795
 800c724:	0800c795 	.word	0x0800c795
 800c728:	0800c795 	.word	0x0800c795
 800c72c:	0800c795 	.word	0x0800c795
 800c730:	0800c795 	.word	0x0800c795
 800c734:	0800c795 	.word	0x0800c795
 800c738:	0800c795 	.word	0x0800c795
 800c73c:	0800c795 	.word	0x0800c795
 800c740:	0800c795 	.word	0x0800c795
 800c744:	0800c795 	.word	0x0800c795
 800c748:	0800c795 	.word	0x0800c795
 800c74c:	0800c795 	.word	0x0800c795
 800c750:	0800c795 	.word	0x0800c795
 800c754:	0800c795 	.word	0x0800c795
 800c758:	0800c795 	.word	0x0800c795
 800c75c:	0800c795 	.word	0x0800c795
 800c760:	0800c795 	.word	0x0800c795
 800c764:	0800c795 	.word	0x0800c795
 800c768:	0800c795 	.word	0x0800c795
 800c76c:	0800c795 	.word	0x0800c795
 800c770:	0800c795 	.word	0x0800c795
 800c774:	0800c795 	.word	0x0800c795
 800c778:	0800c795 	.word	0x0800c795
 800c77c:	0800c795 	.word	0x0800c795
 800c780:	0800c795 	.word	0x0800c795
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c795 	.word	0x0800c795
 800c78c:	0800c795 	.word	0x0800c795
 800c790:	0800c795 	.word	0x0800c795
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c794:	bf00      	nop
  }

  return (USBD_OK);
 800c796:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c798:	4618      	mov	r0, r3
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bc80      	pop	{r7}
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop

0800c7a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  if (Buf[0] == 'a') {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Por ejemplo, toggle de un LED
//  }
	for(short i = 0;i < *Len;i++){
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	81fb      	strh	r3, [r7, #14]
 800c7b2:	e00f      	b.n	800c7d4 <CDC_Receive_FS+0x30>
		On_Data_RX(&rx,Buf[i]);
 800c7b4:	4b10      	ldr	r3, [pc, #64]	@ (800c7f8 <CDC_Receive_FS+0x54>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	440a      	add	r2, r1
 800c7c0:	7812      	ldrb	r2, [r2, #0]
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	480d      	ldr	r0, [pc, #52]	@ (800c7fc <CDC_Receive_FS+0x58>)
 800c7c6:	4798      	blx	r3
	for(short i = 0;i < *Len;i++){
 800c7c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	81fb      	strh	r3, [r7, #14]
 800c7d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3e9      	bcc.n	800c7b4 <CDC_Receive_FS+0x10>
	}
//  char msg[] = "Dato recibido\r\n";
//  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));

  // Reestablecer recepción USB
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7e0:	6879      	ldr	r1, [r7, #4]
 800c7e2:	4807      	ldr	r0, [pc, #28]	@ (800c800 <CDC_Receive_FS+0x5c>)
 800c7e4:	f7fe fe31 	bl	800b44a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7e8:	4805      	ldr	r0, [pc, #20]	@ (800c800 <CDC_Receive_FS+0x5c>)
 800c7ea:	f7fe fe70 	bl	800b4ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	200014ac 	.word	0x200014ac
 800c7fc:	200005a0 	.word	0x200005a0
 800c800:	200009e8 	.word	0x200009e8

0800c804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c814:	4b0d      	ldr	r3, [pc, #52]	@ (800c84c <CDC_Transmit_FS+0x48>)
 800c816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c81a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c826:	2301      	movs	r3, #1
 800c828:	e00b      	b.n	800c842 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c82a:	887b      	ldrh	r3, [r7, #2]
 800c82c:	461a      	mov	r2, r3
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	4806      	ldr	r0, [pc, #24]	@ (800c84c <CDC_Transmit_FS+0x48>)
 800c832:	f7fe fdf1 	bl	800b418 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c836:	4805      	ldr	r0, [pc, #20]	@ (800c84c <CDC_Transmit_FS+0x48>)
 800c838:	f7fe fe1a 	bl	800b470 <USBD_CDC_TransmitPacket>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c840:	7bfb      	ldrb	r3, [r7, #15]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200009e8 	.word	0x200009e8

0800c850 <CDC_Attach_RX_Funct>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_RX_Funct(void(*rxFunction)(_sRx *rx, uint8_t data)){
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	On_Data_RX = rxFunction;
 800c858:	4a03      	ldr	r2, [pc, #12]	@ (800c868 <CDC_Attach_RX_Funct+0x18>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]
}
 800c85e:	bf00      	nop
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	bc80      	pop	{r7}
 800c866:	4770      	bx	lr
 800c868:	200014ac 	.word	0x200014ac

0800c86c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2212      	movs	r2, #18
 800c87c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c87e:	4b03      	ldr	r3, [pc, #12]	@ (800c88c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	bc80      	pop	{r7}
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	20000154 	.word	0x20000154

0800c890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2204      	movs	r2, #4
 800c8a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8a2:	4b03      	ldr	r3, [pc, #12]	@ (800c8b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bc80      	pop	{r7}
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	20000168 	.word	0x20000168

0800c8b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8c0:	79fb      	ldrb	r3, [r7, #7]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d105      	bne.n	800c8d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	4907      	ldr	r1, [pc, #28]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8ca:	4808      	ldr	r0, [pc, #32]	@ (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8cc:	f7ff fde3 	bl	800c496 <USBD_GetString>
 800c8d0:	e004      	b.n	800c8dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4904      	ldr	r1, [pc, #16]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8d6:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8d8:	f7ff fddd 	bl	800c496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8dc:	4b02      	ldr	r3, [pc, #8]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	200014b0 	.word	0x200014b0
 800c8ec:	0800d980 	.word	0x0800d980

0800c8f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6039      	str	r1, [r7, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	4904      	ldr	r1, [pc, #16]	@ (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c900:	4804      	ldr	r0, [pc, #16]	@ (800c914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c902:	f7ff fdc8 	bl	800c496 <USBD_GetString>
  return USBD_StrDesc;
 800c906:	4b02      	ldr	r3, [pc, #8]	@ (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200014b0 	.word	0x200014b0
 800c914:	0800d998 	.word	0x0800d998

0800c918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	221a      	movs	r2, #26
 800c928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c92a:	f000 f843 	bl	800c9b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c92e:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	2000016c 	.word	0x2000016c

0800c93c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	4907      	ldr	r1, [pc, #28]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c952:	4808      	ldr	r0, [pc, #32]	@ (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c954:	f7ff fd9f 	bl	800c496 <USBD_GetString>
 800c958:	e004      	b.n	800c964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	4904      	ldr	r1, [pc, #16]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c95e:	4805      	ldr	r0, [pc, #20]	@ (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c960:	f7ff fd99 	bl	800c496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c964:	4b02      	ldr	r3, [pc, #8]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	200014b0 	.word	0x200014b0
 800c974:	0800d9ac 	.word	0x0800d9ac

0800c978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4907      	ldr	r1, [pc, #28]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c98e:	4808      	ldr	r0, [pc, #32]	@ (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c990:	f7ff fd81 	bl	800c496 <USBD_GetString>
 800c994:	e004      	b.n	800c9a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4904      	ldr	r1, [pc, #16]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c99a:	4805      	ldr	r0, [pc, #20]	@ (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c99c:	f7ff fd7b 	bl	800c496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	200014b0 	.word	0x200014b0
 800c9b0:	0800d9b8 	.word	0x0800d9b8

0800c9b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f8 <Get_SerialNum+0x44>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c9fc <Get_SerialNum+0x48>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca00 <Get_SerialNum+0x4c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d009      	beq.n	800c9ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9da:	2208      	movs	r2, #8
 800c9dc:	4909      	ldr	r1, [pc, #36]	@ (800ca04 <Get_SerialNum+0x50>)
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f814 	bl	800ca0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9e4:	2204      	movs	r2, #4
 800c9e6:	4908      	ldr	r1, [pc, #32]	@ (800ca08 <Get_SerialNum+0x54>)
 800c9e8:	68b8      	ldr	r0, [r7, #8]
 800c9ea:	f000 f80f 	bl	800ca0c <IntToUnicode>
  }
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	1ffff7e8 	.word	0x1ffff7e8
 800c9fc:	1ffff7ec 	.word	0x1ffff7ec
 800ca00:	1ffff7f0 	.word	0x1ffff7f0
 800ca04:	2000016e 	.word	0x2000016e
 800ca08:	2000017e 	.word	0x2000017e

0800ca0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b087      	sub	sp, #28
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75fb      	strb	r3, [r7, #23]
 800ca22:	e027      	b.n	800ca74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	0f1b      	lsrs	r3, r3, #28
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d80b      	bhi.n	800ca44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	0f1b      	lsrs	r3, r3, #28
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4619      	mov	r1, r3
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	440b      	add	r3, r1
 800ca3c:	3230      	adds	r2, #48	@ 0x30
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	e00a      	b.n	800ca5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	0f1b      	lsrs	r3, r3, #28
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4619      	mov	r1, r3
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	440b      	add	r3, r1
 800ca54:	3237      	adds	r2, #55	@ 0x37
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	011b      	lsls	r3, r3, #4
 800ca5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	3301      	adds	r3, #1
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	3301      	adds	r3, #1
 800ca72:	75fb      	strb	r3, [r7, #23]
 800ca74:	7dfa      	ldrb	r2, [r7, #23]
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d3d3      	bcc.n	800ca24 <IntToUnicode+0x18>
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bc80      	pop	{r7}
 800ca86:	4770      	bx	lr

0800ca88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a0d      	ldr	r2, [pc, #52]	@ (800cacc <HAL_PCD_MspInit+0x44>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d113      	bne.n	800cac2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cad0 <HAL_PCD_MspInit+0x48>)
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cad0 <HAL_PCD_MspInit+0x48>)
 800caa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800caa4:	61d3      	str	r3, [r2, #28]
 800caa6:	4b0a      	ldr	r3, [pc, #40]	@ (800cad0 <HAL_PCD_MspInit+0x48>)
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cab2:	2200      	movs	r2, #0
 800cab4:	2100      	movs	r1, #0
 800cab6:	2014      	movs	r0, #20
 800cab8:	f7f5 fd8f 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cabc:	2014      	movs	r0, #20
 800cabe:	f7f5 fda8 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	40005c00 	.word	0x40005c00
 800cad0:	40021000 	.word	0x40021000

0800cad4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cae8:	4619      	mov	r1, r3
 800caea:	4610      	mov	r0, r2
 800caec:	f7fe fda5 	bl	800b63a <USBD_LL_SetupStage>
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cb0a:	78fa      	ldrb	r2, [r7, #3]
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	440b      	add	r3, r1
 800cb18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	78fb      	ldrb	r3, [r7, #3]
 800cb20:	4619      	mov	r1, r3
 800cb22:	f7fe fdd7 	bl	800b6d4 <USBD_LL_DataOutStage>
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b082      	sub	sp, #8
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	460b      	mov	r3, r1
 800cb38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cb40:	78fa      	ldrb	r2, [r7, #3]
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	4613      	mov	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	440b      	add	r3, r1
 800cb4e:	3324      	adds	r3, #36	@ 0x24
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	78fb      	ldrb	r3, [r7, #3]
 800cb54:	4619      	mov	r1, r3
 800cb56:	f7fe fe2e 	bl	800b7b6 <USBD_LL_DataInStage>
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fe ff3e 	bl	800b9f2 <USBD_LL_SOF>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb86:	2301      	movs	r3, #1
 800cb88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	799b      	ldrb	r3, [r3, #6]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d001      	beq.n	800cb96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb92:	f7f4 fa8d 	bl	80010b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb9c:	7bfa      	ldrb	r2, [r7, #15]
 800cb9e:	4611      	mov	r1, r2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fe feee 	bl	800b982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fe fea7 	bl	800b900 <USBD_LL_Reset>
}
 800cbb2:	bf00      	nop
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fee8 	bl	800b9a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7a9b      	ldrb	r3, [r3, #10]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d005      	beq.n	800cbe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbd8:	4b04      	ldr	r3, [pc, #16]	@ (800cbec <HAL_PCD_SuspendCallback+0x30>)
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	4a03      	ldr	r2, [pc, #12]	@ (800cbec <HAL_PCD_SuspendCallback+0x30>)
 800cbde:	f043 0306 	orr.w	r3, r3, #6
 800cbe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	e000ed00 	.word	0xe000ed00

0800cbf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fee2 	bl	800b9c8 <USBD_LL_Resume>
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc14:	4a28      	ldr	r2, [pc, #160]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a26      	ldr	r2, [pc, #152]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cc24:	4b24      	ldr	r3, [pc, #144]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc26:	4a25      	ldr	r2, [pc, #148]	@ (800ccbc <USBD_LL_Init+0xb0>)
 800cc28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc2a:	4b23      	ldr	r3, [pc, #140]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc30:	4b21      	ldr	r3, [pc, #132]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc32:	2202      	movs	r2, #2
 800cc34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc36:	4b20      	ldr	r3, [pc, #128]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc42:	4b1d      	ldr	r3, [pc, #116]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc48:	481b      	ldr	r0, [pc, #108]	@ (800ccb8 <USBD_LL_Init+0xac>)
 800cc4a:	f7f8 fdb9 	bl	80057c0 <HAL_PCD_Init>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cc54:	f7f4 fa2c 	bl	80010b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc5e:	2318      	movs	r3, #24
 800cc60:	2200      	movs	r2, #0
 800cc62:	2100      	movs	r1, #0
 800cc64:	f7fa faca 	bl	80071fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc6e:	2358      	movs	r3, #88	@ 0x58
 800cc70:	2200      	movs	r2, #0
 800cc72:	2180      	movs	r1, #128	@ 0x80
 800cc74:	f7fa fac2 	bl	80071fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc7e:	23c0      	movs	r3, #192	@ 0xc0
 800cc80:	2200      	movs	r2, #0
 800cc82:	2181      	movs	r1, #129	@ 0x81
 800cc84:	f7fa faba 	bl	80071fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc92:	2200      	movs	r2, #0
 800cc94:	2101      	movs	r1, #1
 800cc96:	f7fa fab1 	bl	80071fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cca4:	2200      	movs	r2, #0
 800cca6:	2182      	movs	r1, #130	@ 0x82
 800cca8:	f7fa faa8 	bl	80071fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200016b0 	.word	0x200016b0
 800ccbc:	40005c00 	.word	0x40005c00

0800ccc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f8 fe68 	bl	80059ac <HAL_PCD_Start>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f94e 	bl	800cf84 <USBD_Get_USB_Status>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	461a      	mov	r2, r3
 800cd04:	4603      	mov	r3, r0
 800cd06:	70fb      	strb	r3, [r7, #3]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70bb      	strb	r3, [r7, #2]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cd1e:	78bb      	ldrb	r3, [r7, #2]
 800cd20:	883a      	ldrh	r2, [r7, #0]
 800cd22:	78f9      	ldrb	r1, [r7, #3]
 800cd24:	f7f8 ffbc 	bl	8005ca0 <HAL_PCD_EP_Open>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f928 	bl	800cf84 <USBD_Get_USB_Status>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd5c:	78fa      	ldrb	r2, [r7, #3]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f8 fffa 	bl	8005d5a <HAL_PCD_EP_Close>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f909 	bl	800cf84 <USBD_Get_USB_Status>
 800cd72:	4603      	mov	r3, r0
 800cd74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd9a:	78fa      	ldrb	r2, [r7, #3]
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7f9 f8a2 	bl	8005ee8 <HAL_PCD_EP_SetStall>
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 f8ea 	bl	800cf84 <USBD_Get_USB_Status>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7f9 f8e3 	bl	8005fa8 <HAL_PCD_EP_ClrStall>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 f8cb 	bl	800cf84 <USBD_Get_USB_Status>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	da0b      	bge.n	800ce30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	440b      	add	r3, r1
 800ce2a:	3312      	adds	r3, #18
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	e00b      	b.n	800ce48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce36:	68f9      	ldr	r1, [r7, #12]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	440b      	add	r3, r1
 800ce42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ce46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc80      	pop	{r7}
 800ce50:	4770      	bx	lr

0800ce52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce6c:	78fa      	ldrb	r2, [r7, #3]
 800ce6e:	4611      	mov	r1, r2
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7f8 fef1 	bl	8005c58 <HAL_PCD_SetAddress>
 800ce76:	4603      	mov	r3, r0
 800ce78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 f881 	bl	800cf84 <USBD_Get_USB_Status>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	72fb      	strb	r3, [r7, #11]
 800cea0:	4613      	mov	r3, r2
 800cea2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ceb2:	893b      	ldrh	r3, [r7, #8]
 800ceb4:	7af9      	ldrb	r1, [r7, #11]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	f7f8 ffdf 	bl	8005e7a <HAL_PCD_EP_Transmit>
 800cebc:	4603      	mov	r3, r0
 800cebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f85e 	bl	800cf84 <USBD_Get_USB_Status>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cecc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b086      	sub	sp, #24
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	461a      	mov	r2, r3
 800cee2:	460b      	mov	r3, r1
 800cee4:	72fb      	strb	r3, [r7, #11]
 800cee6:	4613      	mov	r3, r2
 800cee8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cef8:	893b      	ldrh	r3, [r7, #8]
 800cefa:	7af9      	ldrb	r1, [r7, #11]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	f7f8 ff74 	bl	8005dea <HAL_PCD_EP_Receive>
 800cf02:	4603      	mov	r3, r0
 800cf04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 f83b 	bl	800cf84 <USBD_Get_USB_Status>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf12:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f8 ff8a 	bl	8005e4c <HAL_PCD_EP_GetRxCount>
 800cf38:	4603      	mov	r3, r0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
	...

0800cf44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf4c:	4b02      	ldr	r3, [pc, #8]	@ (800cf58 <USBD_static_malloc+0x14>)
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bc80      	pop	{r7}
 800cf56:	4770      	bx	lr
 800cf58:	20001988 	.word	0x20001988

0800cf5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]

}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bc80      	pop	{r7}
 800cf6c:	4770      	bx	lr

0800cf6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b083      	sub	sp, #12
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf7a:	bf00      	nop
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bc80      	pop	{r7}
 800cf82:	4770      	bx	lr

0800cf84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf92:	79fb      	ldrb	r3, [r7, #7]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d817      	bhi.n	800cfc8 <USBD_Get_USB_Status+0x44>
 800cf98:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa0 <USBD_Get_USB_Status+0x1c>)
 800cf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9e:	bf00      	nop
 800cfa0:	0800cfb1 	.word	0x0800cfb1
 800cfa4:	0800cfb7 	.word	0x0800cfb7
 800cfa8:	0800cfbd 	.word	0x0800cfbd
 800cfac:	0800cfc3 	.word	0x0800cfc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb4:	e00b      	b.n	800cfce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800cfba:	e008      	b.n	800cfce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc0:	e005      	b.n	800cfce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc6:	e002      	b.n	800cfce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	73fb      	strb	r3, [r7, #15]
    break;
 800cfcc:	bf00      	nop
  }
  return usb_status;
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bc80      	pop	{r7}
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop

0800cfdc <siprintf>:
 800cfdc:	b40e      	push	{r1, r2, r3}
 800cfde:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfe2:	b510      	push	{r4, lr}
 800cfe4:	2400      	movs	r4, #0
 800cfe6:	b09d      	sub	sp, #116	@ 0x74
 800cfe8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cfea:	9002      	str	r0, [sp, #8]
 800cfec:	9006      	str	r0, [sp, #24]
 800cfee:	9107      	str	r1, [sp, #28]
 800cff0:	9104      	str	r1, [sp, #16]
 800cff2:	4809      	ldr	r0, [pc, #36]	@ (800d018 <siprintf+0x3c>)
 800cff4:	4909      	ldr	r1, [pc, #36]	@ (800d01c <siprintf+0x40>)
 800cff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	6800      	ldr	r0, [r0, #0]
 800cffe:	a902      	add	r1, sp, #8
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d004:	f000 f9a0 	bl	800d348 <_svfiprintf_r>
 800d008:	9b02      	ldr	r3, [sp, #8]
 800d00a:	701c      	strb	r4, [r3, #0]
 800d00c:	b01d      	add	sp, #116	@ 0x74
 800d00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d012:	b003      	add	sp, #12
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	20000188 	.word	0x20000188
 800d01c:	ffff0208 	.word	0xffff0208

0800d020 <memset>:
 800d020:	4603      	mov	r3, r0
 800d022:	4402      	add	r2, r0
 800d024:	4293      	cmp	r3, r2
 800d026:	d100      	bne.n	800d02a <memset+0xa>
 800d028:	4770      	bx	lr
 800d02a:	f803 1b01 	strb.w	r1, [r3], #1
 800d02e:	e7f9      	b.n	800d024 <memset+0x4>

0800d030 <__errno>:
 800d030:	4b01      	ldr	r3, [pc, #4]	@ (800d038 <__errno+0x8>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	20000188 	.word	0x20000188

0800d03c <__libc_init_array>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	2600      	movs	r6, #0
 800d040:	4d0c      	ldr	r5, [pc, #48]	@ (800d074 <__libc_init_array+0x38>)
 800d042:	4c0d      	ldr	r4, [pc, #52]	@ (800d078 <__libc_init_array+0x3c>)
 800d044:	1b64      	subs	r4, r4, r5
 800d046:	10a4      	asrs	r4, r4, #2
 800d048:	42a6      	cmp	r6, r4
 800d04a:	d109      	bne.n	800d060 <__libc_init_array+0x24>
 800d04c:	f000 fc76 	bl	800d93c <_init>
 800d050:	2600      	movs	r6, #0
 800d052:	4d0a      	ldr	r5, [pc, #40]	@ (800d07c <__libc_init_array+0x40>)
 800d054:	4c0a      	ldr	r4, [pc, #40]	@ (800d080 <__libc_init_array+0x44>)
 800d056:	1b64      	subs	r4, r4, r5
 800d058:	10a4      	asrs	r4, r4, #2
 800d05a:	42a6      	cmp	r6, r4
 800d05c:	d105      	bne.n	800d06a <__libc_init_array+0x2e>
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	f855 3b04 	ldr.w	r3, [r5], #4
 800d064:	4798      	blx	r3
 800d066:	3601      	adds	r6, #1
 800d068:	e7ee      	b.n	800d048 <__libc_init_array+0xc>
 800d06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06e:	4798      	blx	r3
 800d070:	3601      	adds	r6, #1
 800d072:	e7f2      	b.n	800d05a <__libc_init_array+0x1e>
 800d074:	0800e790 	.word	0x0800e790
 800d078:	0800e790 	.word	0x0800e790
 800d07c:	0800e790 	.word	0x0800e790
 800d080:	0800e794 	.word	0x0800e794

0800d084 <__retarget_lock_acquire_recursive>:
 800d084:	4770      	bx	lr

0800d086 <__retarget_lock_release_recursive>:
 800d086:	4770      	bx	lr

0800d088 <memcpy>:
 800d088:	440a      	add	r2, r1
 800d08a:	4291      	cmp	r1, r2
 800d08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d090:	d100      	bne.n	800d094 <memcpy+0xc>
 800d092:	4770      	bx	lr
 800d094:	b510      	push	{r4, lr}
 800d096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09a:	4291      	cmp	r1, r2
 800d09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a0:	d1f9      	bne.n	800d096 <memcpy+0xe>
 800d0a2:	bd10      	pop	{r4, pc}

0800d0a4 <_free_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	2900      	cmp	r1, #0
 800d0aa:	d040      	beq.n	800d12e <_free_r+0x8a>
 800d0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b0:	1f0c      	subs	r4, r1, #4
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	bfb8      	it	lt
 800d0b6:	18e4      	addlt	r4, r4, r3
 800d0b8:	f000 f8de 	bl	800d278 <__malloc_lock>
 800d0bc:	4a1c      	ldr	r2, [pc, #112]	@ (800d130 <_free_r+0x8c>)
 800d0be:	6813      	ldr	r3, [r2, #0]
 800d0c0:	b933      	cbnz	r3, 800d0d0 <_free_r+0x2c>
 800d0c2:	6063      	str	r3, [r4, #4]
 800d0c4:	6014      	str	r4, [r2, #0]
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0cc:	f000 b8da 	b.w	800d284 <__malloc_unlock>
 800d0d0:	42a3      	cmp	r3, r4
 800d0d2:	d908      	bls.n	800d0e6 <_free_r+0x42>
 800d0d4:	6820      	ldr	r0, [r4, #0]
 800d0d6:	1821      	adds	r1, r4, r0
 800d0d8:	428b      	cmp	r3, r1
 800d0da:	bf01      	itttt	eq
 800d0dc:	6819      	ldreq	r1, [r3, #0]
 800d0de:	685b      	ldreq	r3, [r3, #4]
 800d0e0:	1809      	addeq	r1, r1, r0
 800d0e2:	6021      	streq	r1, [r4, #0]
 800d0e4:	e7ed      	b.n	800d0c2 <_free_r+0x1e>
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	b10b      	cbz	r3, 800d0f0 <_free_r+0x4c>
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	d9fa      	bls.n	800d0e6 <_free_r+0x42>
 800d0f0:	6811      	ldr	r1, [r2, #0]
 800d0f2:	1850      	adds	r0, r2, r1
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	d10b      	bne.n	800d110 <_free_r+0x6c>
 800d0f8:	6820      	ldr	r0, [r4, #0]
 800d0fa:	4401      	add	r1, r0
 800d0fc:	1850      	adds	r0, r2, r1
 800d0fe:	4283      	cmp	r3, r0
 800d100:	6011      	str	r1, [r2, #0]
 800d102:	d1e0      	bne.n	800d0c6 <_free_r+0x22>
 800d104:	6818      	ldr	r0, [r3, #0]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4408      	add	r0, r1
 800d10a:	6010      	str	r0, [r2, #0]
 800d10c:	6053      	str	r3, [r2, #4]
 800d10e:	e7da      	b.n	800d0c6 <_free_r+0x22>
 800d110:	d902      	bls.n	800d118 <_free_r+0x74>
 800d112:	230c      	movs	r3, #12
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	e7d6      	b.n	800d0c6 <_free_r+0x22>
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	1821      	adds	r1, r4, r0
 800d11c:	428b      	cmp	r3, r1
 800d11e:	bf01      	itttt	eq
 800d120:	6819      	ldreq	r1, [r3, #0]
 800d122:	685b      	ldreq	r3, [r3, #4]
 800d124:	1809      	addeq	r1, r1, r0
 800d126:	6021      	streq	r1, [r4, #0]
 800d128:	6063      	str	r3, [r4, #4]
 800d12a:	6054      	str	r4, [r2, #4]
 800d12c:	e7cb      	b.n	800d0c6 <_free_r+0x22>
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	20001cec 	.word	0x20001cec

0800d134 <sbrk_aligned>:
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	4e0f      	ldr	r6, [pc, #60]	@ (800d174 <sbrk_aligned+0x40>)
 800d138:	460c      	mov	r4, r1
 800d13a:	6831      	ldr	r1, [r6, #0]
 800d13c:	4605      	mov	r5, r0
 800d13e:	b911      	cbnz	r1, 800d146 <sbrk_aligned+0x12>
 800d140:	f000 fba8 	bl	800d894 <_sbrk_r>
 800d144:	6030      	str	r0, [r6, #0]
 800d146:	4621      	mov	r1, r4
 800d148:	4628      	mov	r0, r5
 800d14a:	f000 fba3 	bl	800d894 <_sbrk_r>
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	d103      	bne.n	800d15a <sbrk_aligned+0x26>
 800d152:	f04f 34ff 	mov.w	r4, #4294967295
 800d156:	4620      	mov	r0, r4
 800d158:	bd70      	pop	{r4, r5, r6, pc}
 800d15a:	1cc4      	adds	r4, r0, #3
 800d15c:	f024 0403 	bic.w	r4, r4, #3
 800d160:	42a0      	cmp	r0, r4
 800d162:	d0f8      	beq.n	800d156 <sbrk_aligned+0x22>
 800d164:	1a21      	subs	r1, r4, r0
 800d166:	4628      	mov	r0, r5
 800d168:	f000 fb94 	bl	800d894 <_sbrk_r>
 800d16c:	3001      	adds	r0, #1
 800d16e:	d1f2      	bne.n	800d156 <sbrk_aligned+0x22>
 800d170:	e7ef      	b.n	800d152 <sbrk_aligned+0x1e>
 800d172:	bf00      	nop
 800d174:	20001ce8 	.word	0x20001ce8

0800d178 <_malloc_r>:
 800d178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d17c:	1ccd      	adds	r5, r1, #3
 800d17e:	f025 0503 	bic.w	r5, r5, #3
 800d182:	3508      	adds	r5, #8
 800d184:	2d0c      	cmp	r5, #12
 800d186:	bf38      	it	cc
 800d188:	250c      	movcc	r5, #12
 800d18a:	2d00      	cmp	r5, #0
 800d18c:	4606      	mov	r6, r0
 800d18e:	db01      	blt.n	800d194 <_malloc_r+0x1c>
 800d190:	42a9      	cmp	r1, r5
 800d192:	d904      	bls.n	800d19e <_malloc_r+0x26>
 800d194:	230c      	movs	r3, #12
 800d196:	6033      	str	r3, [r6, #0]
 800d198:	2000      	movs	r0, #0
 800d19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d274 <_malloc_r+0xfc>
 800d1a2:	f000 f869 	bl	800d278 <__malloc_lock>
 800d1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1aa:	461c      	mov	r4, r3
 800d1ac:	bb44      	cbnz	r4, 800d200 <_malloc_r+0x88>
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7ff ffbf 	bl	800d134 <sbrk_aligned>
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	d158      	bne.n	800d26e <_malloc_r+0xf6>
 800d1bc:	f8d8 4000 	ldr.w	r4, [r8]
 800d1c0:	4627      	mov	r7, r4
 800d1c2:	2f00      	cmp	r7, #0
 800d1c4:	d143      	bne.n	800d24e <_malloc_r+0xd6>
 800d1c6:	2c00      	cmp	r4, #0
 800d1c8:	d04b      	beq.n	800d262 <_malloc_r+0xea>
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	eb04 0903 	add.w	r9, r4, r3
 800d1d4:	f000 fb5e 	bl	800d894 <_sbrk_r>
 800d1d8:	4581      	cmp	r9, r0
 800d1da:	d142      	bne.n	800d262 <_malloc_r+0xea>
 800d1dc:	6821      	ldr	r1, [r4, #0]
 800d1de:	4630      	mov	r0, r6
 800d1e0:	1a6d      	subs	r5, r5, r1
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7ff ffa6 	bl	800d134 <sbrk_aligned>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d03a      	beq.n	800d262 <_malloc_r+0xea>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	442b      	add	r3, r5
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	bb62      	cbnz	r2, 800d254 <_malloc_r+0xdc>
 800d1fa:	f8c8 7000 	str.w	r7, [r8]
 800d1fe:	e00f      	b.n	800d220 <_malloc_r+0xa8>
 800d200:	6822      	ldr	r2, [r4, #0]
 800d202:	1b52      	subs	r2, r2, r5
 800d204:	d420      	bmi.n	800d248 <_malloc_r+0xd0>
 800d206:	2a0b      	cmp	r2, #11
 800d208:	d917      	bls.n	800d23a <_malloc_r+0xc2>
 800d20a:	1961      	adds	r1, r4, r5
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	6025      	str	r5, [r4, #0]
 800d210:	bf18      	it	ne
 800d212:	6059      	strne	r1, [r3, #4]
 800d214:	6863      	ldr	r3, [r4, #4]
 800d216:	bf08      	it	eq
 800d218:	f8c8 1000 	streq.w	r1, [r8]
 800d21c:	5162      	str	r2, [r4, r5]
 800d21e:	604b      	str	r3, [r1, #4]
 800d220:	4630      	mov	r0, r6
 800d222:	f000 f82f 	bl	800d284 <__malloc_unlock>
 800d226:	f104 000b 	add.w	r0, r4, #11
 800d22a:	1d23      	adds	r3, r4, #4
 800d22c:	f020 0007 	bic.w	r0, r0, #7
 800d230:	1ac2      	subs	r2, r0, r3
 800d232:	bf1c      	itt	ne
 800d234:	1a1b      	subne	r3, r3, r0
 800d236:	50a3      	strne	r3, [r4, r2]
 800d238:	e7af      	b.n	800d19a <_malloc_r+0x22>
 800d23a:	6862      	ldr	r2, [r4, #4]
 800d23c:	42a3      	cmp	r3, r4
 800d23e:	bf0c      	ite	eq
 800d240:	f8c8 2000 	streq.w	r2, [r8]
 800d244:	605a      	strne	r2, [r3, #4]
 800d246:	e7eb      	b.n	800d220 <_malloc_r+0xa8>
 800d248:	4623      	mov	r3, r4
 800d24a:	6864      	ldr	r4, [r4, #4]
 800d24c:	e7ae      	b.n	800d1ac <_malloc_r+0x34>
 800d24e:	463c      	mov	r4, r7
 800d250:	687f      	ldr	r7, [r7, #4]
 800d252:	e7b6      	b.n	800d1c2 <_malloc_r+0x4a>
 800d254:	461a      	mov	r2, r3
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	42a3      	cmp	r3, r4
 800d25a:	d1fb      	bne.n	800d254 <_malloc_r+0xdc>
 800d25c:	2300      	movs	r3, #0
 800d25e:	6053      	str	r3, [r2, #4]
 800d260:	e7de      	b.n	800d220 <_malloc_r+0xa8>
 800d262:	230c      	movs	r3, #12
 800d264:	4630      	mov	r0, r6
 800d266:	6033      	str	r3, [r6, #0]
 800d268:	f000 f80c 	bl	800d284 <__malloc_unlock>
 800d26c:	e794      	b.n	800d198 <_malloc_r+0x20>
 800d26e:	6005      	str	r5, [r0, #0]
 800d270:	e7d6      	b.n	800d220 <_malloc_r+0xa8>
 800d272:	bf00      	nop
 800d274:	20001cec 	.word	0x20001cec

0800d278 <__malloc_lock>:
 800d278:	4801      	ldr	r0, [pc, #4]	@ (800d280 <__malloc_lock+0x8>)
 800d27a:	f7ff bf03 	b.w	800d084 <__retarget_lock_acquire_recursive>
 800d27e:	bf00      	nop
 800d280:	20001ce4 	.word	0x20001ce4

0800d284 <__malloc_unlock>:
 800d284:	4801      	ldr	r0, [pc, #4]	@ (800d28c <__malloc_unlock+0x8>)
 800d286:	f7ff befe 	b.w	800d086 <__retarget_lock_release_recursive>
 800d28a:	bf00      	nop
 800d28c:	20001ce4 	.word	0x20001ce4

0800d290 <__ssputs_r>:
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d294:	461f      	mov	r7, r3
 800d296:	688e      	ldr	r6, [r1, #8]
 800d298:	4682      	mov	sl, r0
 800d29a:	42be      	cmp	r6, r7
 800d29c:	460c      	mov	r4, r1
 800d29e:	4690      	mov	r8, r2
 800d2a0:	680b      	ldr	r3, [r1, #0]
 800d2a2:	d82d      	bhi.n	800d300 <__ssputs_r+0x70>
 800d2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2ac:	d026      	beq.n	800d2fc <__ssputs_r+0x6c>
 800d2ae:	6965      	ldr	r5, [r4, #20]
 800d2b0:	6909      	ldr	r1, [r1, #16]
 800d2b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2b6:	eba3 0901 	sub.w	r9, r3, r1
 800d2ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2be:	1c7b      	adds	r3, r7, #1
 800d2c0:	444b      	add	r3, r9
 800d2c2:	106d      	asrs	r5, r5, #1
 800d2c4:	429d      	cmp	r5, r3
 800d2c6:	bf38      	it	cc
 800d2c8:	461d      	movcc	r5, r3
 800d2ca:	0553      	lsls	r3, r2, #21
 800d2cc:	d527      	bpl.n	800d31e <__ssputs_r+0x8e>
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	f7ff ff52 	bl	800d178 <_malloc_r>
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	b360      	cbz	r0, 800d332 <__ssputs_r+0xa2>
 800d2d8:	464a      	mov	r2, r9
 800d2da:	6921      	ldr	r1, [r4, #16]
 800d2dc:	f7ff fed4 	bl	800d088 <memcpy>
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ea:	81a3      	strh	r3, [r4, #12]
 800d2ec:	6126      	str	r6, [r4, #16]
 800d2ee:	444e      	add	r6, r9
 800d2f0:	6026      	str	r6, [r4, #0]
 800d2f2:	463e      	mov	r6, r7
 800d2f4:	6165      	str	r5, [r4, #20]
 800d2f6:	eba5 0509 	sub.w	r5, r5, r9
 800d2fa:	60a5      	str	r5, [r4, #8]
 800d2fc:	42be      	cmp	r6, r7
 800d2fe:	d900      	bls.n	800d302 <__ssputs_r+0x72>
 800d300:	463e      	mov	r6, r7
 800d302:	4632      	mov	r2, r6
 800d304:	4641      	mov	r1, r8
 800d306:	6820      	ldr	r0, [r4, #0]
 800d308:	f000 faaa 	bl	800d860 <memmove>
 800d30c:	2000      	movs	r0, #0
 800d30e:	68a3      	ldr	r3, [r4, #8]
 800d310:	1b9b      	subs	r3, r3, r6
 800d312:	60a3      	str	r3, [r4, #8]
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	4433      	add	r3, r6
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31e:	462a      	mov	r2, r5
 800d320:	f000 fad6 	bl	800d8d0 <_realloc_r>
 800d324:	4606      	mov	r6, r0
 800d326:	2800      	cmp	r0, #0
 800d328:	d1e0      	bne.n	800d2ec <__ssputs_r+0x5c>
 800d32a:	4650      	mov	r0, sl
 800d32c:	6921      	ldr	r1, [r4, #16]
 800d32e:	f7ff feb9 	bl	800d0a4 <_free_r>
 800d332:	230c      	movs	r3, #12
 800d334:	f8ca 3000 	str.w	r3, [sl]
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f04f 30ff 	mov.w	r0, #4294967295
 800d33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	e7e9      	b.n	800d31a <__ssputs_r+0x8a>
	...

0800d348 <_svfiprintf_r>:
 800d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34c:	4698      	mov	r8, r3
 800d34e:	898b      	ldrh	r3, [r1, #12]
 800d350:	4607      	mov	r7, r0
 800d352:	061b      	lsls	r3, r3, #24
 800d354:	460d      	mov	r5, r1
 800d356:	4614      	mov	r4, r2
 800d358:	b09d      	sub	sp, #116	@ 0x74
 800d35a:	d510      	bpl.n	800d37e <_svfiprintf_r+0x36>
 800d35c:	690b      	ldr	r3, [r1, #16]
 800d35e:	b973      	cbnz	r3, 800d37e <_svfiprintf_r+0x36>
 800d360:	2140      	movs	r1, #64	@ 0x40
 800d362:	f7ff ff09 	bl	800d178 <_malloc_r>
 800d366:	6028      	str	r0, [r5, #0]
 800d368:	6128      	str	r0, [r5, #16]
 800d36a:	b930      	cbnz	r0, 800d37a <_svfiprintf_r+0x32>
 800d36c:	230c      	movs	r3, #12
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	b01d      	add	sp, #116	@ 0x74
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37a:	2340      	movs	r3, #64	@ 0x40
 800d37c:	616b      	str	r3, [r5, #20]
 800d37e:	2300      	movs	r3, #0
 800d380:	9309      	str	r3, [sp, #36]	@ 0x24
 800d382:	2320      	movs	r3, #32
 800d384:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d388:	2330      	movs	r3, #48	@ 0x30
 800d38a:	f04f 0901 	mov.w	r9, #1
 800d38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d392:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d52c <_svfiprintf_r+0x1e4>
 800d396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d39a:	4623      	mov	r3, r4
 800d39c:	469a      	mov	sl, r3
 800d39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3a2:	b10a      	cbz	r2, 800d3a8 <_svfiprintf_r+0x60>
 800d3a4:	2a25      	cmp	r2, #37	@ 0x25
 800d3a6:	d1f9      	bne.n	800d39c <_svfiprintf_r+0x54>
 800d3a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ac:	d00b      	beq.n	800d3c6 <_svfiprintf_r+0x7e>
 800d3ae:	465b      	mov	r3, fp
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f7ff ff6b 	bl	800d290 <__ssputs_r>
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	f000 80a7 	beq.w	800d50e <_svfiprintf_r+0x1c6>
 800d3c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3c2:	445a      	add	r2, fp
 800d3c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f000 809f 	beq.w	800d50e <_svfiprintf_r+0x1c6>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3da:	f10a 0a01 	add.w	sl, sl, #1
 800d3de:	9304      	str	r3, [sp, #16]
 800d3e0:	9307      	str	r3, [sp, #28]
 800d3e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3e8:	4654      	mov	r4, sl
 800d3ea:	2205      	movs	r2, #5
 800d3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f0:	484e      	ldr	r0, [pc, #312]	@ (800d52c <_svfiprintf_r+0x1e4>)
 800d3f2:	f000 fa5f 	bl	800d8b4 <memchr>
 800d3f6:	9a04      	ldr	r2, [sp, #16]
 800d3f8:	b9d8      	cbnz	r0, 800d432 <_svfiprintf_r+0xea>
 800d3fa:	06d0      	lsls	r0, r2, #27
 800d3fc:	bf44      	itt	mi
 800d3fe:	2320      	movmi	r3, #32
 800d400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d404:	0711      	lsls	r1, r2, #28
 800d406:	bf44      	itt	mi
 800d408:	232b      	movmi	r3, #43	@ 0x2b
 800d40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40e:	f89a 3000 	ldrb.w	r3, [sl]
 800d412:	2b2a      	cmp	r3, #42	@ 0x2a
 800d414:	d015      	beq.n	800d442 <_svfiprintf_r+0xfa>
 800d416:	4654      	mov	r4, sl
 800d418:	2000      	movs	r0, #0
 800d41a:	f04f 0c0a 	mov.w	ip, #10
 800d41e:	9a07      	ldr	r2, [sp, #28]
 800d420:	4621      	mov	r1, r4
 800d422:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d426:	3b30      	subs	r3, #48	@ 0x30
 800d428:	2b09      	cmp	r3, #9
 800d42a:	d94b      	bls.n	800d4c4 <_svfiprintf_r+0x17c>
 800d42c:	b1b0      	cbz	r0, 800d45c <_svfiprintf_r+0x114>
 800d42e:	9207      	str	r2, [sp, #28]
 800d430:	e014      	b.n	800d45c <_svfiprintf_r+0x114>
 800d432:	eba0 0308 	sub.w	r3, r0, r8
 800d436:	fa09 f303 	lsl.w	r3, r9, r3
 800d43a:	4313      	orrs	r3, r2
 800d43c:	46a2      	mov	sl, r4
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	e7d2      	b.n	800d3e8 <_svfiprintf_r+0xa0>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	1d19      	adds	r1, r3, #4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	9103      	str	r1, [sp, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	bfbb      	ittet	lt
 800d44e:	425b      	neglt	r3, r3
 800d450:	f042 0202 	orrlt.w	r2, r2, #2
 800d454:	9307      	strge	r3, [sp, #28]
 800d456:	9307      	strlt	r3, [sp, #28]
 800d458:	bfb8      	it	lt
 800d45a:	9204      	strlt	r2, [sp, #16]
 800d45c:	7823      	ldrb	r3, [r4, #0]
 800d45e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d460:	d10a      	bne.n	800d478 <_svfiprintf_r+0x130>
 800d462:	7863      	ldrb	r3, [r4, #1]
 800d464:	2b2a      	cmp	r3, #42	@ 0x2a
 800d466:	d132      	bne.n	800d4ce <_svfiprintf_r+0x186>
 800d468:	9b03      	ldr	r3, [sp, #12]
 800d46a:	3402      	adds	r4, #2
 800d46c:	1d1a      	adds	r2, r3, #4
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	9203      	str	r2, [sp, #12]
 800d472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d476:	9305      	str	r3, [sp, #20]
 800d478:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d530 <_svfiprintf_r+0x1e8>
 800d47c:	2203      	movs	r2, #3
 800d47e:	4650      	mov	r0, sl
 800d480:	7821      	ldrb	r1, [r4, #0]
 800d482:	f000 fa17 	bl	800d8b4 <memchr>
 800d486:	b138      	cbz	r0, 800d498 <_svfiprintf_r+0x150>
 800d488:	2240      	movs	r2, #64	@ 0x40
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	eba0 000a 	sub.w	r0, r0, sl
 800d490:	4082      	lsls	r2, r0
 800d492:	4313      	orrs	r3, r2
 800d494:	3401      	adds	r4, #1
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d49c:	2206      	movs	r2, #6
 800d49e:	4825      	ldr	r0, [pc, #148]	@ (800d534 <_svfiprintf_r+0x1ec>)
 800d4a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4a4:	f000 fa06 	bl	800d8b4 <memchr>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d036      	beq.n	800d51a <_svfiprintf_r+0x1d2>
 800d4ac:	4b22      	ldr	r3, [pc, #136]	@ (800d538 <_svfiprintf_r+0x1f0>)
 800d4ae:	bb1b      	cbnz	r3, 800d4f8 <_svfiprintf_r+0x1b0>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	3307      	adds	r3, #7
 800d4b4:	f023 0307 	bic.w	r3, r3, #7
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	9303      	str	r3, [sp, #12]
 800d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4be:	4433      	add	r3, r6
 800d4c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4c2:	e76a      	b.n	800d39a <_svfiprintf_r+0x52>
 800d4c4:	460c      	mov	r4, r1
 800d4c6:	2001      	movs	r0, #1
 800d4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4cc:	e7a8      	b.n	800d420 <_svfiprintf_r+0xd8>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f04f 0c0a 	mov.w	ip, #10
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	3401      	adds	r4, #1
 800d4d8:	9305      	str	r3, [sp, #20]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e0:	3a30      	subs	r2, #48	@ 0x30
 800d4e2:	2a09      	cmp	r2, #9
 800d4e4:	d903      	bls.n	800d4ee <_svfiprintf_r+0x1a6>
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0c6      	beq.n	800d478 <_svfiprintf_r+0x130>
 800d4ea:	9105      	str	r1, [sp, #20]
 800d4ec:	e7c4      	b.n	800d478 <_svfiprintf_r+0x130>
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4f6:	e7f0      	b.n	800d4da <_svfiprintf_r+0x192>
 800d4f8:	ab03      	add	r3, sp, #12
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	462a      	mov	r2, r5
 800d4fe:	4638      	mov	r0, r7
 800d500:	4b0e      	ldr	r3, [pc, #56]	@ (800d53c <_svfiprintf_r+0x1f4>)
 800d502:	a904      	add	r1, sp, #16
 800d504:	f3af 8000 	nop.w
 800d508:	1c42      	adds	r2, r0, #1
 800d50a:	4606      	mov	r6, r0
 800d50c:	d1d6      	bne.n	800d4bc <_svfiprintf_r+0x174>
 800d50e:	89ab      	ldrh	r3, [r5, #12]
 800d510:	065b      	lsls	r3, r3, #25
 800d512:	f53f af2d 	bmi.w	800d370 <_svfiprintf_r+0x28>
 800d516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d518:	e72c      	b.n	800d374 <_svfiprintf_r+0x2c>
 800d51a:	ab03      	add	r3, sp, #12
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	462a      	mov	r2, r5
 800d520:	4638      	mov	r0, r7
 800d522:	4b06      	ldr	r3, [pc, #24]	@ (800d53c <_svfiprintf_r+0x1f4>)
 800d524:	a904      	add	r1, sp, #16
 800d526:	f000 f87d 	bl	800d624 <_printf_i>
 800d52a:	e7ed      	b.n	800d508 <_svfiprintf_r+0x1c0>
 800d52c:	0800e75a 	.word	0x0800e75a
 800d530:	0800e760 	.word	0x0800e760
 800d534:	0800e764 	.word	0x0800e764
 800d538:	00000000 	.word	0x00000000
 800d53c:	0800d291 	.word	0x0800d291

0800d540 <_printf_common>:
 800d540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d544:	4616      	mov	r6, r2
 800d546:	4698      	mov	r8, r3
 800d548:	688a      	ldr	r2, [r1, #8]
 800d54a:	690b      	ldr	r3, [r1, #16]
 800d54c:	4607      	mov	r7, r0
 800d54e:	4293      	cmp	r3, r2
 800d550:	bfb8      	it	lt
 800d552:	4613      	movlt	r3, r2
 800d554:	6033      	str	r3, [r6, #0]
 800d556:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d55a:	460c      	mov	r4, r1
 800d55c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d560:	b10a      	cbz	r2, 800d566 <_printf_common+0x26>
 800d562:	3301      	adds	r3, #1
 800d564:	6033      	str	r3, [r6, #0]
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	0699      	lsls	r1, r3, #26
 800d56a:	bf42      	ittt	mi
 800d56c:	6833      	ldrmi	r3, [r6, #0]
 800d56e:	3302      	addmi	r3, #2
 800d570:	6033      	strmi	r3, [r6, #0]
 800d572:	6825      	ldr	r5, [r4, #0]
 800d574:	f015 0506 	ands.w	r5, r5, #6
 800d578:	d106      	bne.n	800d588 <_printf_common+0x48>
 800d57a:	f104 0a19 	add.w	sl, r4, #25
 800d57e:	68e3      	ldr	r3, [r4, #12]
 800d580:	6832      	ldr	r2, [r6, #0]
 800d582:	1a9b      	subs	r3, r3, r2
 800d584:	42ab      	cmp	r3, r5
 800d586:	dc2b      	bgt.n	800d5e0 <_printf_common+0xa0>
 800d588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d58c:	6822      	ldr	r2, [r4, #0]
 800d58e:	3b00      	subs	r3, #0
 800d590:	bf18      	it	ne
 800d592:	2301      	movne	r3, #1
 800d594:	0692      	lsls	r2, r2, #26
 800d596:	d430      	bmi.n	800d5fa <_printf_common+0xba>
 800d598:	4641      	mov	r1, r8
 800d59a:	4638      	mov	r0, r7
 800d59c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5a0:	47c8      	blx	r9
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d023      	beq.n	800d5ee <_printf_common+0xae>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	6922      	ldr	r2, [r4, #16]
 800d5aa:	f003 0306 	and.w	r3, r3, #6
 800d5ae:	2b04      	cmp	r3, #4
 800d5b0:	bf14      	ite	ne
 800d5b2:	2500      	movne	r5, #0
 800d5b4:	6833      	ldreq	r3, [r6, #0]
 800d5b6:	f04f 0600 	mov.w	r6, #0
 800d5ba:	bf08      	it	eq
 800d5bc:	68e5      	ldreq	r5, [r4, #12]
 800d5be:	f104 041a 	add.w	r4, r4, #26
 800d5c2:	bf08      	it	eq
 800d5c4:	1aed      	subeq	r5, r5, r3
 800d5c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d5ca:	bf08      	it	eq
 800d5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bfc4      	itt	gt
 800d5d4:	1a9b      	subgt	r3, r3, r2
 800d5d6:	18ed      	addgt	r5, r5, r3
 800d5d8:	42b5      	cmp	r5, r6
 800d5da:	d11a      	bne.n	800d612 <_printf_common+0xd2>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	e008      	b.n	800d5f2 <_printf_common+0xb2>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	4652      	mov	r2, sl
 800d5e4:	4641      	mov	r1, r8
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	47c8      	blx	r9
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	d103      	bne.n	800d5f6 <_printf_common+0xb6>
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f6:	3501      	adds	r5, #1
 800d5f8:	e7c1      	b.n	800d57e <_printf_common+0x3e>
 800d5fa:	2030      	movs	r0, #48	@ 0x30
 800d5fc:	18e1      	adds	r1, r4, r3
 800d5fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d608:	4422      	add	r2, r4
 800d60a:	3302      	adds	r3, #2
 800d60c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d610:	e7c2      	b.n	800d598 <_printf_common+0x58>
 800d612:	2301      	movs	r3, #1
 800d614:	4622      	mov	r2, r4
 800d616:	4641      	mov	r1, r8
 800d618:	4638      	mov	r0, r7
 800d61a:	47c8      	blx	r9
 800d61c:	3001      	adds	r0, #1
 800d61e:	d0e6      	beq.n	800d5ee <_printf_common+0xae>
 800d620:	3601      	adds	r6, #1
 800d622:	e7d9      	b.n	800d5d8 <_printf_common+0x98>

0800d624 <_printf_i>:
 800d624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	7e0f      	ldrb	r7, [r1, #24]
 800d62a:	4691      	mov	r9, r2
 800d62c:	2f78      	cmp	r7, #120	@ 0x78
 800d62e:	4680      	mov	r8, r0
 800d630:	460c      	mov	r4, r1
 800d632:	469a      	mov	sl, r3
 800d634:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d63a:	d807      	bhi.n	800d64c <_printf_i+0x28>
 800d63c:	2f62      	cmp	r7, #98	@ 0x62
 800d63e:	d80a      	bhi.n	800d656 <_printf_i+0x32>
 800d640:	2f00      	cmp	r7, #0
 800d642:	f000 80d1 	beq.w	800d7e8 <_printf_i+0x1c4>
 800d646:	2f58      	cmp	r7, #88	@ 0x58
 800d648:	f000 80b8 	beq.w	800d7bc <_printf_i+0x198>
 800d64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d654:	e03a      	b.n	800d6cc <_printf_i+0xa8>
 800d656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d65a:	2b15      	cmp	r3, #21
 800d65c:	d8f6      	bhi.n	800d64c <_printf_i+0x28>
 800d65e:	a101      	add	r1, pc, #4	@ (adr r1, 800d664 <_printf_i+0x40>)
 800d660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d664:	0800d6bd 	.word	0x0800d6bd
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d64d 	.word	0x0800d64d
 800d670:	0800d64d 	.word	0x0800d64d
 800d674:	0800d64d 	.word	0x0800d64d
 800d678:	0800d64d 	.word	0x0800d64d
 800d67c:	0800d6d1 	.word	0x0800d6d1
 800d680:	0800d64d 	.word	0x0800d64d
 800d684:	0800d64d 	.word	0x0800d64d
 800d688:	0800d64d 	.word	0x0800d64d
 800d68c:	0800d64d 	.word	0x0800d64d
 800d690:	0800d7cf 	.word	0x0800d7cf
 800d694:	0800d6fb 	.word	0x0800d6fb
 800d698:	0800d789 	.word	0x0800d789
 800d69c:	0800d64d 	.word	0x0800d64d
 800d6a0:	0800d64d 	.word	0x0800d64d
 800d6a4:	0800d7f1 	.word	0x0800d7f1
 800d6a8:	0800d64d 	.word	0x0800d64d
 800d6ac:	0800d6fb 	.word	0x0800d6fb
 800d6b0:	0800d64d 	.word	0x0800d64d
 800d6b4:	0800d64d 	.word	0x0800d64d
 800d6b8:	0800d791 	.word	0x0800d791
 800d6bc:	6833      	ldr	r3, [r6, #0]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6032      	str	r2, [r6, #0]
 800d6c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e09c      	b.n	800d80a <_printf_i+0x1e6>
 800d6d0:	6833      	ldr	r3, [r6, #0]
 800d6d2:	6820      	ldr	r0, [r4, #0]
 800d6d4:	1d19      	adds	r1, r3, #4
 800d6d6:	6031      	str	r1, [r6, #0]
 800d6d8:	0606      	lsls	r6, r0, #24
 800d6da:	d501      	bpl.n	800d6e0 <_printf_i+0xbc>
 800d6dc:	681d      	ldr	r5, [r3, #0]
 800d6de:	e003      	b.n	800d6e8 <_printf_i+0xc4>
 800d6e0:	0645      	lsls	r5, r0, #25
 800d6e2:	d5fb      	bpl.n	800d6dc <_printf_i+0xb8>
 800d6e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6e8:	2d00      	cmp	r5, #0
 800d6ea:	da03      	bge.n	800d6f4 <_printf_i+0xd0>
 800d6ec:	232d      	movs	r3, #45	@ 0x2d
 800d6ee:	426d      	negs	r5, r5
 800d6f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f4:	230a      	movs	r3, #10
 800d6f6:	4858      	ldr	r0, [pc, #352]	@ (800d858 <_printf_i+0x234>)
 800d6f8:	e011      	b.n	800d71e <_printf_i+0xfa>
 800d6fa:	6821      	ldr	r1, [r4, #0]
 800d6fc:	6833      	ldr	r3, [r6, #0]
 800d6fe:	0608      	lsls	r0, r1, #24
 800d700:	f853 5b04 	ldr.w	r5, [r3], #4
 800d704:	d402      	bmi.n	800d70c <_printf_i+0xe8>
 800d706:	0649      	lsls	r1, r1, #25
 800d708:	bf48      	it	mi
 800d70a:	b2ad      	uxthmi	r5, r5
 800d70c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d70e:	6033      	str	r3, [r6, #0]
 800d710:	bf14      	ite	ne
 800d712:	230a      	movne	r3, #10
 800d714:	2308      	moveq	r3, #8
 800d716:	4850      	ldr	r0, [pc, #320]	@ (800d858 <_printf_i+0x234>)
 800d718:	2100      	movs	r1, #0
 800d71a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d71e:	6866      	ldr	r6, [r4, #4]
 800d720:	2e00      	cmp	r6, #0
 800d722:	60a6      	str	r6, [r4, #8]
 800d724:	db05      	blt.n	800d732 <_printf_i+0x10e>
 800d726:	6821      	ldr	r1, [r4, #0]
 800d728:	432e      	orrs	r6, r5
 800d72a:	f021 0104 	bic.w	r1, r1, #4
 800d72e:	6021      	str	r1, [r4, #0]
 800d730:	d04b      	beq.n	800d7ca <_printf_i+0x1a6>
 800d732:	4616      	mov	r6, r2
 800d734:	fbb5 f1f3 	udiv	r1, r5, r3
 800d738:	fb03 5711 	mls	r7, r3, r1, r5
 800d73c:	5dc7      	ldrb	r7, [r0, r7]
 800d73e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d742:	462f      	mov	r7, r5
 800d744:	42bb      	cmp	r3, r7
 800d746:	460d      	mov	r5, r1
 800d748:	d9f4      	bls.n	800d734 <_printf_i+0x110>
 800d74a:	2b08      	cmp	r3, #8
 800d74c:	d10b      	bne.n	800d766 <_printf_i+0x142>
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	07df      	lsls	r7, r3, #31
 800d752:	d508      	bpl.n	800d766 <_printf_i+0x142>
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	6861      	ldr	r1, [r4, #4]
 800d758:	4299      	cmp	r1, r3
 800d75a:	bfde      	ittt	le
 800d75c:	2330      	movle	r3, #48	@ 0x30
 800d75e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d762:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d766:	1b92      	subs	r2, r2, r6
 800d768:	6122      	str	r2, [r4, #16]
 800d76a:	464b      	mov	r3, r9
 800d76c:	4621      	mov	r1, r4
 800d76e:	4640      	mov	r0, r8
 800d770:	f8cd a000 	str.w	sl, [sp]
 800d774:	aa03      	add	r2, sp, #12
 800d776:	f7ff fee3 	bl	800d540 <_printf_common>
 800d77a:	3001      	adds	r0, #1
 800d77c:	d14a      	bne.n	800d814 <_printf_i+0x1f0>
 800d77e:	f04f 30ff 	mov.w	r0, #4294967295
 800d782:	b004      	add	sp, #16
 800d784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	f043 0320 	orr.w	r3, r3, #32
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	2778      	movs	r7, #120	@ 0x78
 800d792:	4832      	ldr	r0, [pc, #200]	@ (800d85c <_printf_i+0x238>)
 800d794:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	6831      	ldr	r1, [r6, #0]
 800d79c:	061f      	lsls	r7, r3, #24
 800d79e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7a2:	d402      	bmi.n	800d7aa <_printf_i+0x186>
 800d7a4:	065f      	lsls	r7, r3, #25
 800d7a6:	bf48      	it	mi
 800d7a8:	b2ad      	uxthmi	r5, r5
 800d7aa:	6031      	str	r1, [r6, #0]
 800d7ac:	07d9      	lsls	r1, r3, #31
 800d7ae:	bf44      	itt	mi
 800d7b0:	f043 0320 	orrmi.w	r3, r3, #32
 800d7b4:	6023      	strmi	r3, [r4, #0]
 800d7b6:	b11d      	cbz	r5, 800d7c0 <_printf_i+0x19c>
 800d7b8:	2310      	movs	r3, #16
 800d7ba:	e7ad      	b.n	800d718 <_printf_i+0xf4>
 800d7bc:	4826      	ldr	r0, [pc, #152]	@ (800d858 <_printf_i+0x234>)
 800d7be:	e7e9      	b.n	800d794 <_printf_i+0x170>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	f023 0320 	bic.w	r3, r3, #32
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	e7f6      	b.n	800d7b8 <_printf_i+0x194>
 800d7ca:	4616      	mov	r6, r2
 800d7cc:	e7bd      	b.n	800d74a <_printf_i+0x126>
 800d7ce:	6833      	ldr	r3, [r6, #0]
 800d7d0:	6825      	ldr	r5, [r4, #0]
 800d7d2:	1d18      	adds	r0, r3, #4
 800d7d4:	6961      	ldr	r1, [r4, #20]
 800d7d6:	6030      	str	r0, [r6, #0]
 800d7d8:	062e      	lsls	r6, r5, #24
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	d501      	bpl.n	800d7e2 <_printf_i+0x1be>
 800d7de:	6019      	str	r1, [r3, #0]
 800d7e0:	e002      	b.n	800d7e8 <_printf_i+0x1c4>
 800d7e2:	0668      	lsls	r0, r5, #25
 800d7e4:	d5fb      	bpl.n	800d7de <_printf_i+0x1ba>
 800d7e6:	8019      	strh	r1, [r3, #0]
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	4616      	mov	r6, r2
 800d7ec:	6123      	str	r3, [r4, #16]
 800d7ee:	e7bc      	b.n	800d76a <_printf_i+0x146>
 800d7f0:	6833      	ldr	r3, [r6, #0]
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	1d1a      	adds	r2, r3, #4
 800d7f6:	6032      	str	r2, [r6, #0]
 800d7f8:	681e      	ldr	r6, [r3, #0]
 800d7fa:	6862      	ldr	r2, [r4, #4]
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f000 f859 	bl	800d8b4 <memchr>
 800d802:	b108      	cbz	r0, 800d808 <_printf_i+0x1e4>
 800d804:	1b80      	subs	r0, r0, r6
 800d806:	6060      	str	r0, [r4, #4]
 800d808:	6863      	ldr	r3, [r4, #4]
 800d80a:	6123      	str	r3, [r4, #16]
 800d80c:	2300      	movs	r3, #0
 800d80e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d812:	e7aa      	b.n	800d76a <_printf_i+0x146>
 800d814:	4632      	mov	r2, r6
 800d816:	4649      	mov	r1, r9
 800d818:	4640      	mov	r0, r8
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	47d0      	blx	sl
 800d81e:	3001      	adds	r0, #1
 800d820:	d0ad      	beq.n	800d77e <_printf_i+0x15a>
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	079b      	lsls	r3, r3, #30
 800d826:	d413      	bmi.n	800d850 <_printf_i+0x22c>
 800d828:	68e0      	ldr	r0, [r4, #12]
 800d82a:	9b03      	ldr	r3, [sp, #12]
 800d82c:	4298      	cmp	r0, r3
 800d82e:	bfb8      	it	lt
 800d830:	4618      	movlt	r0, r3
 800d832:	e7a6      	b.n	800d782 <_printf_i+0x15e>
 800d834:	2301      	movs	r3, #1
 800d836:	4632      	mov	r2, r6
 800d838:	4649      	mov	r1, r9
 800d83a:	4640      	mov	r0, r8
 800d83c:	47d0      	blx	sl
 800d83e:	3001      	adds	r0, #1
 800d840:	d09d      	beq.n	800d77e <_printf_i+0x15a>
 800d842:	3501      	adds	r5, #1
 800d844:	68e3      	ldr	r3, [r4, #12]
 800d846:	9903      	ldr	r1, [sp, #12]
 800d848:	1a5b      	subs	r3, r3, r1
 800d84a:	42ab      	cmp	r3, r5
 800d84c:	dcf2      	bgt.n	800d834 <_printf_i+0x210>
 800d84e:	e7eb      	b.n	800d828 <_printf_i+0x204>
 800d850:	2500      	movs	r5, #0
 800d852:	f104 0619 	add.w	r6, r4, #25
 800d856:	e7f5      	b.n	800d844 <_printf_i+0x220>
 800d858:	0800e76b 	.word	0x0800e76b
 800d85c:	0800e77c 	.word	0x0800e77c

0800d860 <memmove>:
 800d860:	4288      	cmp	r0, r1
 800d862:	b510      	push	{r4, lr}
 800d864:	eb01 0402 	add.w	r4, r1, r2
 800d868:	d902      	bls.n	800d870 <memmove+0x10>
 800d86a:	4284      	cmp	r4, r0
 800d86c:	4623      	mov	r3, r4
 800d86e:	d807      	bhi.n	800d880 <memmove+0x20>
 800d870:	1e43      	subs	r3, r0, #1
 800d872:	42a1      	cmp	r1, r4
 800d874:	d008      	beq.n	800d888 <memmove+0x28>
 800d876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d87a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d87e:	e7f8      	b.n	800d872 <memmove+0x12>
 800d880:	4601      	mov	r1, r0
 800d882:	4402      	add	r2, r0
 800d884:	428a      	cmp	r2, r1
 800d886:	d100      	bne.n	800d88a <memmove+0x2a>
 800d888:	bd10      	pop	{r4, pc}
 800d88a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d88e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d892:	e7f7      	b.n	800d884 <memmove+0x24>

0800d894 <_sbrk_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	2300      	movs	r3, #0
 800d898:	4d05      	ldr	r5, [pc, #20]	@ (800d8b0 <_sbrk_r+0x1c>)
 800d89a:	4604      	mov	r4, r0
 800d89c:	4608      	mov	r0, r1
 800d89e:	602b      	str	r3, [r5, #0]
 800d8a0:	f7f4 f93e 	bl	8001b20 <_sbrk>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_sbrk_r+0x1a>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_sbrk_r+0x1a>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	20001ce0 	.word	0x20001ce0

0800d8b4 <memchr>:
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	b2c9      	uxtb	r1, r1
 800d8ba:	4402      	add	r2, r0
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	d101      	bne.n	800d8c6 <memchr+0x12>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e003      	b.n	800d8ce <memchr+0x1a>
 800d8c6:	7804      	ldrb	r4, [r0, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	428c      	cmp	r4, r1
 800d8cc:	d1f6      	bne.n	800d8bc <memchr+0x8>
 800d8ce:	bd10      	pop	{r4, pc}

0800d8d0 <_realloc_r>:
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	4614      	mov	r4, r2
 800d8d8:	460d      	mov	r5, r1
 800d8da:	b921      	cbnz	r1, 800d8e6 <_realloc_r+0x16>
 800d8dc:	4611      	mov	r1, r2
 800d8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e2:	f7ff bc49 	b.w	800d178 <_malloc_r>
 800d8e6:	b92a      	cbnz	r2, 800d8f4 <_realloc_r+0x24>
 800d8e8:	f7ff fbdc 	bl	800d0a4 <_free_r>
 800d8ec:	4625      	mov	r5, r4
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	f000 f81a 	bl	800d92c <_malloc_usable_size_r>
 800d8f8:	4284      	cmp	r4, r0
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	d802      	bhi.n	800d904 <_realloc_r+0x34>
 800d8fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d902:	d8f4      	bhi.n	800d8ee <_realloc_r+0x1e>
 800d904:	4621      	mov	r1, r4
 800d906:	4638      	mov	r0, r7
 800d908:	f7ff fc36 	bl	800d178 <_malloc_r>
 800d90c:	4680      	mov	r8, r0
 800d90e:	b908      	cbnz	r0, 800d914 <_realloc_r+0x44>
 800d910:	4645      	mov	r5, r8
 800d912:	e7ec      	b.n	800d8ee <_realloc_r+0x1e>
 800d914:	42b4      	cmp	r4, r6
 800d916:	4622      	mov	r2, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	bf28      	it	cs
 800d91c:	4632      	movcs	r2, r6
 800d91e:	f7ff fbb3 	bl	800d088 <memcpy>
 800d922:	4629      	mov	r1, r5
 800d924:	4638      	mov	r0, r7
 800d926:	f7ff fbbd 	bl	800d0a4 <_free_r>
 800d92a:	e7f1      	b.n	800d910 <_realloc_r+0x40>

0800d92c <_malloc_usable_size_r>:
 800d92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d930:	1f18      	subs	r0, r3, #4
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfbc      	itt	lt
 800d936:	580b      	ldrlt	r3, [r1, r0]
 800d938:	18c0      	addlt	r0, r0, r3
 800d93a:	4770      	bx	lr

0800d93c <_init>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr

0800d948 <_fini>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr
